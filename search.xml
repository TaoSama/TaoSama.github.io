<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Notes, SpringBoot Guide]]></title>
      <url>/2018/03/09/springboot-guide-notes/</url>
      <content type="html"><![CDATA[<h3 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h3><p>The <strong>Model</strong> encapsulates the application data and in general they will consist of POJO.</p>
<p>The <strong>View</strong> is responsible for rendering the model data and in general it generates HTML output that the client’s browser can interpret.</p>
<p>The <strong>Controller</strong> is responsible for processing user requests and building an appropriate model and passes it to the view for rendering.</p>
<a id="more"></a>
<ul>
<li>Original MVC</li>
</ul>
<p><img src="http://7xru22.com1.z0.glb.clouddn.com/18-3-9/69812105.jpg" alt=""></p>
<ul>
<li>Spring MVC</li>
</ul>
<p><img src="http://7xru22.com1.z0.glb.clouddn.com/18-3-9/74224334.jpg" alt=""></p>
<h3 id="Dependency-Injection-DI"><a href="#Dependency-Injection-DI" class="headerlink" title="Dependency Injection (DI)"></a>Dependency Injection (DI)</h3><p>The technology that Spring is most identified with is the Dependency Injection (DI) flavor of Inversion of Control.<br>The Inversion of Control (IoC) is a general concept, and it can be expressed in many different ways.<br>Dependency Injection is merely one concrete example of Inversion of Control.</p>
<p>What is dependency injection exactly? Let’s look at these two words separately. Here the dependency part translates into an association between two classes. For example, class A is dependent of class B. Now, let’s look at the second part, injection. All this means is, class B will get injected into class A by the IoC.</p>
<h3 id="Bean"><a href="#Bean" class="headerlink" title="Bean"></a>Bean</h3><h4 id="What-is-Bean"><a href="#What-is-Bean" class="headerlink" title="What is Bean"></a>What is Bean</h4><p>The objects that form the backbone of your application and that are managed by the Spring IoC container are called beans. A bean is an object that is instantiated, assembled, and otherwise managed by a Spring IoC container. These beans are created with the configuration metadata that you supply to the container.</p>
<h4 id="Dependency-Injection-Type-amp-Description"><a href="#Dependency-Injection-Type-amp-Description" class="headerlink" title="Dependency Injection Type &amp; Description"></a>Dependency Injection Type &amp; Description</h4><ol>
<li>Constructor-based dependency injection<br>Constructor-based DI is accomplished when the container invokes a class constructor with a number of arguments, each representing a dependency on the other class.</li>
<li>Setter-based dependency injection<br>Setter-based DI is accomplished by the container calling setter methods on your beans after invoking a no-argument constructor or no-argument static factory method to instantiate your bean.</li>
</ol>
<h4 id="Configuration-amp-Bean-Annotations"><a href="#Configuration-amp-Bean-Annotations" class="headerlink" title="@Configuration &amp; @Bean Annotations"></a>@Configuration &amp; @Bean Annotations</h4><p>Annotating <strong>a class</strong> with the @Configuration indicates that the class can be used by the Spring IoC container as a source of bean definitions.<br>The @Bean annotation tells Spring that <strong>a method</strong> annotated with @Bean will return an object that should be registered as a bean in the Spring application context. </p>
<h4 id="The-Import-Annotation-Optional"><a href="#The-Import-Annotation-Optional" class="headerlink" title="The @Import Annotation (Optional)"></a>The @Import Annotation (Optional)</h4><p>The @Import annotation allows for loading @Bean definitions from another configuration class. </p>
<h4 id="Specifying-Bean-Scope"><a href="#Specifying-Bean-Scope" class="headerlink" title="Specifying Bean Scope"></a>Specifying Bean Scope</h4><p>The default scope is singleton, but you can override this with the @Scope annotation.</p>
<h3 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h3><h4 id="What-is-AOP"><a href="#What-is-AOP" class="headerlink" title="What is AOP"></a>What is AOP</h4><p><strong>Aspect-Oriented Programming</strong> entails breaking down program logic into distinct parts called so-called concerns.<br>The functions that span multiple points of an application are called cross-cutting concerns and these <strong>cross-cutting concerns</strong> are conceptually separate from the application’s business logic.<br>There are various common <strong>good examples of aspects</strong> like <strong>logging, auditing, declarative transactions, security, caching, etc</strong>.</p>
<h4 id="Comparison-with-DI"><a href="#Comparison-with-DI" class="headerlink" title="Comparison with DI"></a>Comparison with DI</h4><p>The key unit of modularity in OOP is the class, whereas in AOP the unit of modularity is the aspect.<br>Dependency Injection helps you decouple your application objects from each other and AOP helps you decouple cross-cutting concerns from the objects that they affect.<br>AOP is like triggers in programming languages such as Perl, .NET, Java, and others.</p>
<p>Spring AOP module provides <strong>interceptors</strong> to intercept an application.<br>For example, when a method is executed, you can add extra functionality before or after the method execution.</p>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul>
<li><a href="https://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/reference/" target="_blank" rel="external">Spring Boot Reference 1.5.9.RELEASE Guide</a></li>
<li><a href="https://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/api/" target="_blank" rel="external">Spring Boot Docs 1.5.9.RELEASE API</a></li>
<li><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/" target="_blank" rel="external">Spring Framework Documentation</a></li>
<li><a href="https://docs.spring.io/spring/docs/4.3.13.RELEASE/spring-framework-reference/htmlsingle/#mvc" target="_blank" rel="external">Spring Web MVC framework</a></li>
<li>某忘记名字的网站</li>
<li>知乎</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Doing </category>
            
            <category> Spring </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Notes, 大型网站技术架构]]></title>
      <url>/2017/10/27/large-site-architecture-notes/</url>
      <content type="html"><![CDATA[<h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><h4 id="Evolution-of-Large-Site-Architecture"><a href="#Evolution-of-Large-Site-Architecture" class="headerlink" title="Evolution of Large Site Architecture"></a>Evolution of Large Site Architecture</h4><h5 id="Characteristics"><a href="#Characteristics" class="headerlink" title="Characteristics"></a>Characteristics</h5><ul>
<li>high concurrency, huge traffic</li>
<li>high availability</li>
<li>vast data</li>
<li>users from everywhere, complex situation of network</li>
<li>bad environment of security </li>
<li>quick demands changing, frequently releasing</li>
<li>progessive development</li>
</ul>
<a id="more"></a>
<h5 id="Development-Progress"><a href="#Development-Progress" class="headerlink" title="Development Progress"></a>Development Progress</h5><ul>
<li>begin<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-27/47885692.jpg" alt=""></li>
<li>separate application and data service</li>
<li>use cache</li>
<li>use application cluster</li>
<li>separate read and write of database</li>
<li>use reverse proxy and CDN<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/44949985.jpg" alt=""></li>
<li>use distributed file system and distributed database</li>
<li>use NoSQL and search engine<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/8148745.jpg" alt=""></li>
<li>separate bussiness</li>
<li>use distributed services<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/62668186.jpg" alt=""></li>
</ul>
<h5 id="Values"><a href="#Values" class="headerlink" title="Values"></a>Values</h5><ul>
<li>key is to be flexible to the bussiness</li>
<li>major pusher is bussiness developing</li>
</ul>
<h5 id="Wrong-Thinking"><a href="#Wrong-Thinking" class="headerlink" title="Wrong Thinking"></a>Wrong Thinking</h5><ul>
<li>follow solutions of the gaints blindly</li>
<li>be technical just for techniques</li>
<li>try to solve all problems with techniques</li>
</ul>
<h4 id="Models-of-Large-Site-Architecture"><a href="#Models-of-Large-Site-Architecture" class="headerlink" title="Models of Large Site Architecture"></a>Models of Large Site Architecture</h4><h5 id="Layer-horizontal"><a href="#Layer-horizontal" class="headerlink" title="Layer (horizontal)"></a>Layer (horizontal)</h5><ul>
<li>application layer: be responsible for specific bussiness and view showing (view, bussiness logic)</li>
<li>service layer: provide service for application layer (data interfaces, logic processing)</li>
<li>data layer: provide service data accessing and storage</li>
</ul>
<h5 id="Split-vertical"><a href="#Split-vertical" class="headerlink" title="Split (vertical)"></a>Split (vertical)</h5><p>split different functionalites and services into aggregated and decoupled modules.</p>
<h5 id="Distributed"><a href="#Distributed" class="headerlink" title="Distributed"></a>Distributed</h5><p>distributedly deploy the layered and splitted modules in different servers.</p>
<ul>
<li>distributed applications and services</li>
<li>distributed static resources</li>
<li>distributed data and storage</li>
<li>distributed computing</li>
<li>distributed configuration</li>
<li>distributed lock</li>
<li>distributed file system</li>
</ul>
<h5 id="Cluster"><a href="#Cluster" class="headerlink" title="Cluster"></a>Cluster</h5><p>cluster the independent deployed server, i.e., many servers deployed the same application consists of a cluster.</p>
<h5 id="Cache"><a href="#Cache" class="headerlink" title="Cache"></a>Cache</h5><ul>
<li>CDN</li>
<li>reverse proxy</li>
<li>local cache in application server</li>
<li>distributed cache</li>
</ul>
<h5 id="Asynchronization"><a href="#Asynchronization" class="headerlink" title="Asynchronization"></a>Asynchronization</h5><p><strong>distributed message queue</strong>, is a typical producer-consumer model</p>
<ul>
<li>improve system availability</li>
<li>speed up the response of website</li>
<li>reduce the peek of concurrent accessing</li>
</ul>
<h5 id="Redundancy"><a href="#Redundancy" class="headerlink" title="Redundancy"></a>Redundancy</h5><ul>
<li>cold backup: storage archived in fixed period</li>
<li>hot backup: separate read and write of database, real-time synchronization</li>
<li>disaster recovery data center</li>
</ul>
<h5 id="Automation"><a href="#Automation" class="headerlink" title="Automation"></a>Automation</h5><ul>
<li><p>automatic releasing</p>
<ul>
<li>automatic source control</li>
<li>automatic testing</li>
<li>automatic security dection</li>
<li>automatic deployment</li>
</ul>
</li>
<li><p>automatic monitoring</p>
</li>
<li>automatic alerting</li>
<li>automatic failure transferring</li>
<li>automatic failure recoverring</li>
<li>automatic downgrading</li>
<li>automatic resource allocating</li>
</ul>
<h5 id="Security"><a href="#Security" class="headerlink" title="Security"></a>Security</h5><ul>
<li>password</li>
<li>verification code</li>
<li>encryption</li>
<li>filtering</li>
<li>risk control</li>
</ul>
<h5 id="Architecture-Model-of-Weibo"><a href="#Architecture-Model-of-Weibo" class="headerlink" title="Architecture Model of Weibo"></a>Architecture Model of Weibo</h5><p><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/87294532.jpg" alt=""></p>
<h4 id="Keys-of-Large-Site-Architecture"><a href="#Keys-of-Large-Site-Architecture" class="headerlink" title="Keys of Large Site Architecture"></a>Keys of Large Site Architecture</h4><h5 id="Performance"><a href="#Performance" class="headerlink" title="Performance"></a>Performance</h5><ul>
<li>response time </li>
<li>throughput</li>
<li>system performance monitor (top)</li>
</ul>
<p><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/24638084.jpg" alt=""></p>
<h5 id="Availability"><a href="#Availability" class="headerlink" title="Availability"></a>Availability</h5><ul>
<li>available time (99.99%)</li>
<li>redundancy</li>
<li>pre-released verification</li>
<li>gray releasing</li>
</ul>
<h5 id="Scalability"><a href="#Scalability" class="headerlink" title="Scalability"></a>Scalability</h5><p>easy to add and remove servers in cluster</p>
<h5 id="Extensibility"><a href="#Extensibility" class="headerlink" title="Extensibility"></a>Extensibility</h5><ul>
<li>event driven architecture</li>
<li>distributed service</li>
</ul>
<h5 id="Security-1"><a href="#Security-1" class="headerlink" title="Security"></a>Security</h5><h3 id="Architecture"><a href="#Architecture" class="headerlink" title="Architecture"></a>Architecture</h3><h4 id="High-performance-Architecture"><a href="#High-performance-Architecture" class="headerlink" title="High-performance Architecture"></a>High-performance Architecture</h4><h5 id="Different-Views-of-Website-Performance"><a href="#Different-Views-of-Website-Performance" class="headerlink" title="Different Views of Website Performance"></a>Different Views of Website Performance</h5><ul>
<li><p>user<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/62774698.jpg" alt=""></p>
</li>
<li><p>developer<br>the performance of application itself and relevant subsystem.<br>response latency, system throughput, concurrency, and system stability</p>
</li>
<li><p>maintainer<br>infrastructure performance, resource utilization</p>
</li>
</ul>
<h5 id="Metrics-of-Performance"><a href="#Metrics-of-Performance" class="headerlink" title="Metrics of Performance"></a>Metrics of Performance</h5><ul>
<li><p>response time<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/34403316.jpg" alt=""></p>
</li>
<li><p>number of concurrency<br>number of total users &gt;&gt; number of online users &gt;&gt; number of concurrent users</p>
</li>
<li><p>throughput<br>TPS(transaction per second), QPS(query per second), HPS(HTTP request per second)</p>
</li>
<li><p>system performance monitor (top)<br>system load, number of objects and threads, memory and CPU used, disk and netword I/O<br>top: there floating number, recent 1min, 10mins, 15mins average running processes<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/42727590.jpg" alt=""></p>
</li>
</ul>
<h5 id="Ways-of-Profiling"><a href="#Ways-of-Profiling" class="headerlink" title="Ways of Profiling"></a>Ways of Profiling</h5><ul>
<li>performance testing</li>
<li>load testing</li>
<li>stress testing</li>
<li>stability testing</li>
</ul>
<p><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/43135395.jpg" alt=""></p>
<p><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/85052370.jpg" alt=""></p>
<ul>
<li>performance report<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/25395924.jpg" alt=""></li>
</ul>
<h5 id="Strategy-of-Performance-Optimization"><a href="#Strategy-of-Performance-Optimization" class="headerlink" title="Strategy of Performance Optimization"></a>Strategy of Performance Optimization</h5><ul>
<li>performance analysis</li>
<li>performance optimization</li>
</ul>
<h5 id="Web-Front-Performance-Optimization"><a href="#Web-Front-Performance-Optimization" class="headerlink" title="Web Front Performance Optimization"></a>Web Front Performance Optimization</h5><ul>
<li><p>browser</p>
<ul>
<li>reduce the number of HTTP requests</li>
<li>browser cache</li>
<li>enable compression</li>
<li>put CSS at the front of page, and JS at the bottom</li>
<li>reduce the transferring of Cookie</li>
</ul>
</li>
<li><p>CDN (Content Distribute Network)<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/71736041.jpg" alt=""></p>
</li>
<li><p>reverse proxy<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/43823166.jpg" alt=""></p>
</li>
</ul>
<h5 id="Application-Server-Performance-Optimization"><a href="#Application-Server-Performance-Optimization" class="headerlink" title="Application Server Performance Optimization"></a>Application Server Performance Optimization</h5><p><strong>distributed cache</strong></p>
<ul>
<li><p>cache principle (80%-20% law)<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/43534320.jpg" alt=""></p>
</li>
<li><p>use cache properly</p>
<ul>
<li>infrequently modified (read:write ≥ 2:1)</li>
<li>hot piece</li>
<li>set expired time</li>
</ul>
</li>
<li><p>cache availability</p>
<ul>
<li>cache warm up<br>preload the hot pieces</li>
<li>cache penetrating<br>situation that requires to nonexistent data in high concurrency, one way is to cache it (nonexistent-null)</li>
</ul>
</li>
</ul>
<p><strong>architecture of distributed cache</strong></p>
<p>JBoss Cache: update synchronously (enterprise use)<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/55001392.jpg" alt=""></p>
<p>Memcached: no communication between servers<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/4636924.jpg" alt=""></p>
<ul>
<li><p>communication protocol: TCP, UDP, HTTP<br>communication serializating protocol: text(XML, JSON), binary(Google Protobuffer)</p>
</li>
<li><p>memcached use TCP for communication protocol, and it defines its own text serializating protocol.</p>
</li>
<li><p>memcached’s server communication module is based on <code>Libevent</code>.</p>
</li>
<li><p>memory management</p>
<ul>
<li>chunk-based allocation<br>find a minimal chunk that can save the data</li>
<li>LRU<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/21995999.jpg" alt=""></li>
</ul>
</li>
</ul>
<p><strong>asynchronizaton</strong><br>use message queue to reduce the peek<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/94302977.jpg" alt=""></p>
<p><strong>cluster</strong></p>
<p><strong>code optimization</strong></p>
<ul>
<li>multi-thread<br>number of threads = $\frac{task execution time}{task execution time-IO waiting time}\times CPU cores$</li>
<li>thread-safe<br>stateless object, local object, lock</li>
<li>resource reusing<br>singleton, object pool</li>
<li>data structure<br>hashtable: originlal-<code>MD5</code>-&gt;info figureprint-<code>HASH</code>-&gt;hashcode</li>
<li>garbage collection<br>object created in Eden-<code>Young GC</code>-&gt;From-<code>Young GC</code>-&gt;To-<code>Young GC</code>-&gt;From-…<code>threshold times Young GC</code>-&gt;Old-&gt;<code>Full GC</code><br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/70621950.jpg" alt=""></li>
</ul>
<p><strong>storage performance optimization</strong></p>
<ul>
<li>mechanical hard disk vs. solid state hard drive</li>
<li><p>B+ tree vs. LSM tree<br>N-branch search tree: at most 3 level, (maybe 5 disk IOs to update, 3 to get the index, 1 to read, 1 to write)<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/64739055.jpg" alt=""><br>N-level mergeable search tree: write operations do in memory, and create a new record in the $C_0$ tree<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/65052291.jpg" alt=""></p>
</li>
<li><p>RAID vs. HDFS<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/86796256.jpg" alt=""><br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/41423906.jpg" alt=""></p>
</li>
</ul>
<h4 id="High-availability-Architecture"><a href="#High-availability-Architecture" class="headerlink" title="High-availability Architecture"></a>High-availability Architecture</h4><h5 id="Layered-Architecture"><a href="#Layered-Architecture" class="headerlink" title="Layered Architecture"></a>Layered Architecture</h5><p>application layer &lt;- service layer &lt;- data layer<br>more complicated:<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/25459489.jpg" alt=""></p>
<h5 id="High-availability-Application"><a href="#High-availability-Application" class="headerlink" title="High-availability Application"></a>High-availability Application</h5><ul>
<li>failure transferring through load balancing</li>
<li>session managemant<br>a session is a semi-permanent interactive information interchange, i.e., a dialogue<ul>
<li>session copy</li>
<li>session binding</li>
<li>use cookie to record session</li>
<li>session server<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/80821252.jpg" alt=""></li>
</ul>
</li>
</ul>
<h5 id="High-availability-Service"><a href="#High-availability-Service" class="headerlink" title="High-availability Service"></a>High-availability Service</h5><ul>
<li>managed in priority</li>
<li>time-out setting</li>
<li>asynchronous call</li>
<li>downgrade-abled service</li>
<li>idempotent design<br>i.e., repeated call can be handled properly.</li>
</ul>
<h5 id="High-availability-Data"><a href="#High-availability-Data" class="headerlink" title="High-availability Data"></a>High-availability Data</h5><h5 id="CAP-Principe"><a href="#CAP-Principe" class="headerlink" title="CAP Principe"></a>CAP Principe</h5><ul>
<li>consistency</li>
<li>availablity</li>
<li>partition tolerance<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/10107207.jpg" alt=""></li>
</ul>
<p><strong>consistency</strong></p>
<ul>
<li>data strong consistency<br>data is always consistent in all the physical copies</li>
<li>data user consistency<br>data may be not consistent in all the physical copies, but it<br>can be accessed as a consistent and right one for user through<br>error correction and verification.</li>
<li>data final consistency<br>data may be not consistent in all the physical copies, and it<br>may be not accessed consistently. but after some time, it can be<br>corrected to user consistency.</li>
</ul>
<h5 id="Data-Backup"><a href="#Data-Backup" class="headerlink" title="Data Backup"></a>Data Backup</h5><h5 id="Failure-Transferring"><a href="#Failure-Transferring" class="headerlink" title="Failure Transferring"></a>Failure Transferring</h5><ul>
<li>failure confirmation<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/56937621.jpg" alt=""></li>
<li>access transferring</li>
<li>data recovering</li>
</ul>
<h5 id="Quality-Insurance"><a href="#Quality-Insurance" class="headerlink" title="Quality Insurance"></a>Quality Insurance</h5><p><strong>automatic releasing</strong><br>(gray releasing)<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/67465635.jpg" alt=""></p>
<p><strong>automatic testing</strong></p>
<p><strong>pre-releasing verification</strong></p>
<p><strong>source control</strong></p>
<ul>
<li>master developing, branch releasing</li>
<li>master releasing, branch developing</li>
</ul>
<p><strong>website monitoring</strong></p>
<ul>
<li>user behavior log collection<br>tools based on <code>Storm</code> (real-time computing framework)</li>
<li>server performance monitoring</li>
<li>running data report</li>
</ul>
<p><strong>website monitoring control</strong></p>
<ul>
<li>system alerting</li>
<li>failure transferring</li>
<li>automatic downgrading</li>
</ul>
<h4 id="High-scalability-Architecture"><a href="#High-scalability-Architecture" class="headerlink" title="High-scalability Architecture"></a>High-scalability Architecture</h4><h5 id="Physical-Separation"><a href="#Physical-Separation" class="headerlink" title="Physical Separation"></a>Physical Separation</h5><p>（clustering)<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/61171750.jpg" alt=""></p>
<h5 id="Load-Balancing"><a href="#Load-Balancing" class="headerlink" title="Load Balancing"></a>Load Balancing</h5><ul>
<li>HTTP redirection protocol</li>
<li>DNS (domain name resolution)</li>
<li>reverse proxy</li>
<li>IP<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/91517327.jpg" alt=""></li>
<li>data link layer<br>LVS (Linux Virtual Server)<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/85037154.jpg" alt=""></li>
</ul>
<p><strong>load balancing algorithms</strong></p>
<ul>
<li>round robin</li>
<li>weighted round robin</li>
<li>random</li>
<li>least connections</li>
<li>source hashing</li>
</ul>
<h5 id="Distributed-Cache"><a href="#Distributed-Cache" class="headerlink" title="Distributed Cache"></a>Distributed Cache</h5><p><strong>memchached access model</strong><br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/40831863.jpg" alt=""></p>
<p>consistent hashing<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/34276778.jpg" alt=""></p>
<p>to solve the influence of cache load =&gt; <code>virtual nodes</code> (a server to 150 nodes)<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/28184219.jpg" alt=""></p>
<h5 id="Distributed-Database"><a href="#Distributed-Database" class="headerlink" title="Distributed Database"></a>Distributed Database</h5><p><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/59890444.jpg" alt=""></p>
<p><strong>spread tables into different database servers</strong><br><strong>put table into slices, then spread into different database servers</strong></p>
<p>database products of data slices: Amoeba, Cobar </p>
<p><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/80126287.jpg" alt=""><br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/18332945.jpg" alt=""></p>
<p><strong>NoSQL</strong></p>
<ul>
<li><p>abandon 2 basis of relation database:<br>SQL based on relation algebra,<br>and transaction consistency guarantee [atomicity, consistency, isolation, durability] (ACID)</p>
</li>
<li><p>strengthen characteristics that large site concerned:<br>high-availability, high-scalability</p>
</li>
</ul>
<p><strong>Apache HBase</strong></p>
<p><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/98641792.jpg" alt=""></p>
<p><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/23962985.jpg" alt=""></p>
<h4 id="High-extensibility-Architecture"><a href="#High-extensibility-Architecture" class="headerlink" title="High-extensibility Architecture"></a>High-extensibility Architecture</h4><ul>
<li>event driven architecture<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/9652231.jpg" alt=""></li>
<li>distributed message queue<br>Apache ActiveMQ<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/81090792.jpg" alt=""></li>
<li><p>distributed services</p>
</li>
<li><p>web service and enterprise distributed service<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/51015171.jpg" alt=""></p>
</li>
<li><p>distributed service framework<br>large site need simple and efficient distributed service<br>framework to build its service oriented architecture (SOA)<br>it is said that Facebook manages its distributed service based on<br><code>Thrift</code> (an opensource remote service call framework)<br><code>Alibaba-Dubbo</code><br> <img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/67509941.jpg" alt=""></p>
</li>
<li><p>extensible data structure<br>NoSQL <code>ColumnFamily</code> (first in Google Bigtable)<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/13082779.jpg" alt=""></p>
</li>
<li><p>open platform to build website ecosystem<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/78200842.jpg" alt=""></p>
</li>
</ul>
<h4 id="Security-Architecture"><a href="#Security-Architecture" class="headerlink" title="Security Architecture"></a>Security Architecture</h4><h5 id="Website-attack-and-defense"><a href="#Website-attack-and-defense" class="headerlink" title="Website attack and defense"></a>Website attack and defense</h5><p><strong>XSS(Cross Site Script) attack</strong></p>
<ul>
<li><p>reflective type<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/41046481.jpg" alt=""></p>
</li>
<li><p>persistent type<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/42341545.jpg" alt=""></p>
</li>
<li><p>solution: filter, HttpOnly</p>
</li>
</ul>
<p><strong>Injection attack</strong><br>SQL injection, OS injection</p>
<p>SQL injection: open source(table name is public), error echoed, blind injection<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/12246870.jpg" alt=""></p>
<p>solution: filter, parameter binding</p>
<p><strong>CSRF(Cross Site Request Forgety) attack</strong><br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/93927561.jpg" alt=""></p>
<p>solution: form token, verification code, referer check</p>
<p><strong>other attack</strong></p>
<ul>
<li>error echoed</li>
<li>HTML comment</li>
<li>file uploading</li>
<li>path traversal</li>
</ul>
<p><strong>web application firewall</strong><br>ModSecurity<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-30/97390520.jpg" alt=""></p>
<p><strong> website security scanning</strong></p>
<h5 id="Encryption-and-Key-Security-Management"><a href="#Encryption-and-Key-Security-Management" class="headerlink" title="Encryption and Key Security Management"></a>Encryption and Key Security Management</h5><ul>
<li><p>one-way hashing encryption<br>MD5, SHA<br>Rainbow Table to try to decrypt MD5<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-30/70087109.jpg" alt=""></p>
</li>
<li><p>symmetric encryption<br>DES, RC<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-30/72859252.jpg" alt=""></p>
</li>
<li><p>asymmetric encryption<br>RSA<br>information security transmission, digital signature<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-30/51192903.jpg" alt=""></p>
</li>
<li><p>key security management<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-30/44940270.jpg" alt=""></p>
</li>
</ul>
<h5 id="Infomation-filtering-and-Anti-spam"><a href="#Infomation-filtering-and-Anti-spam" class="headerlink" title="Infomation filtering and Anti-spam"></a>Infomation filtering and Anti-spam</h5><ul>
<li><p>text matching<br>double array trie, multi-level hashtable (simpler)<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-30/84675517.jpg" alt=""></p>
</li>
<li><p>classification algorithm<br>Native Bayes, TAN, Association Rule Clustering System (ARCS)<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-30/24237709.jpg" alt=""></p>
</li>
<li><p>blacklist<br>hashtable, bloomfilter<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-30/32301588.jpg" alt=""></p>
</li>
</ul>
<h5 id="Risk-Control"><a href="#Risk-Control" class="headerlink" title="Risk Control"></a>Risk Control</h5><ul>
<li>rule engine<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-30/25087873.jpg" alt=""></li>
<li>statistics model<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-30/76287040.jpg" alt=""></li>
</ul>
<h3 id="Cases"><a href="#Cases" class="headerlink" title="Cases"></a>Cases</h3><h4 id="Taobao"><a href="#Taobao" class="headerlink" title="Taobao"></a>Taobao</h4><p>At first, Ma Yun bought a <code>C2C</code> website, then <code>LAMP</code>:<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-30/37599252.jpg" alt=""></p>
<p>MVC: decouple view and bussiness logic<br>ORM (Object-relational mapping): decouple objects and relational database</p>
<p>Taobao didn’t use the hot <code>Struts</code> and <code>Hibernate</code>,<br>but choose to develop its own MVC frameword <code>Webx</code>, and to use <code>IBatis</code> for ORM.<br>Taobao also used <code>Weblogic</code> for application server, <code>Oracle</code> for database. They are commercial softwares.<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-30/959871.jpg" alt=""></p>
<p>Then, to use <code>Spring</code> instead of <code>EJB</code>, free <code>JBoss</code> instead of <code>Weblogic</code></p>
<p>At last, abandon <code>Oracle</code>, <code>IBM</code>, <code>EMC</code>, and back to open source <code>MySQL</code> and <code>NoSQL</code><br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-30/56259159.jpg" alt=""></p>
<h4 id="Wikipedia"><a href="#Wikipedia" class="headerlink" title="Wikipedia"></a>Wikipedia</h4><p><strong>based on</strong> <code>LAMP</code><br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-30/95474191.jpg" alt=""></p>
<p><strong>Wikipedia’s web front</strong><br>the key architecture of  is <code>Squid</code> cluster:<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-30/95191711.jpg" alt=""></p>
<p><strong>Wikipedia’s backend</strong></p>
<ul>
<li>cache the format that application can be used directly</li>
<li>cache servers store the session objects</li>
<li>memcached’s connection is cheap, and create one when needed</li>
<li>increase memory to improve <code>MySQL</code></li>
<li>use <code>RAIO0</code> to speed up disk accessing</li>
<li>set ACID of database at a some low level</li>
<li>if <code>Master</code> database sever crashed, switch to <code>Slave</code>,<br>the close the write service, i.e., close the edition of users.</li>
</ul>
<h4 id="Doris-enormous-distributed-KV-storage"><a href="#Doris-enormous-distributed-KV-storage" class="headerlink" title="Doris (enormous distributed KV storage)"></a>Doris (enormous distributed KV storage)</h4><p><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-30/90549351.jpg" alt=""><br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-30/91551116.jpg" alt=""><br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-30/33182040.jpg" alt=""><br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-30/47667517.jpg" alt=""><br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-30/2416629.jpg" alt=""><br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-30/96568966.jpg" alt=""><br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-30/15742744.jpg" alt=""><br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-30/91008989.jpg" alt=""><br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-30/14212433.jpg" alt=""></p>
<h4 id="Seckilling-System"><a href="#Seckilling-System" class="headerlink" title="Seckilling System"></a>Seckilling System</h4><h5 id="chanllenge"><a href="#chanllenge" class="headerlink" title="chanllenge"></a>chanllenge</h5><ul>
<li>strike for the current bussiness</li>
<li>high load of high concurrency</li>
<li>increasing bandwidth</li>
<li>the URL to place an order</li>
</ul>
<h5 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h5><ul>
<li>independently deploy seckilling system</li>
<li>static page for seckilling product</li>
<li>rent netword bandwidth for seckilling</li>
<li>dynamically generate random URL for placing order</li>
</ul>
<h5 id="architecture"><a href="#architecture" class="headerlink" title="architecture"></a>architecture</h5><p><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-30/33308473.jpg" alt=""><br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-30/54626461.jpg" alt=""><br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-30/87372762.jpg" alt=""></p>
<h4 id="Failure-Analysis"><a href="#Failure-Analysis" class="headerlink" title="Failure Analysis"></a>Failure Analysis</h4><h5 id="disk-space-increases-surprisingly"><a href="#disk-space-increases-surprisingly" class="headerlink" title="disk space increases surprisingly"></a>disk space increases surprisingly</h5><p>set log level to <code>DEBUG</code> by mistake.</p>
<h5 id="high-load-of-database"><a href="#high-load-of-database" class="headerlink" title="high load of database"></a>high load of database</h5><p>a SQL executes in the index page.</p>
<h5 id="timeout-failure-in-high-concurrency"><a href="#timeout-failure-in-high-concurrency" class="headerlink" title="timeout failure in high concurrency"></a>timeout failure in high concurrency</h5><p>a singleton object need the unique lock to execute for a long time.</p>
<h5 id="high-load-of-database-caused-by-cache"><a href="#high-load-of-database-caused-by-cache" class="headerlink" title="high load of database caused by cache"></a>high load of database caused by cache</h5><p>close the cache servers when releasing.</p>
<h5 id="application-start-out-of-synchronization"><a href="#application-start-out-of-synchronization" class="headerlink" title="application start out of synchronization"></a>application start out of synchronization</h5><p>Apache and JBoss start at the same time.<br>JBoss first, and <code>curl</code> to validate, then Apache.</p>
<h5 id="big-files-occupy-the-disk-IO"><a href="#big-files-occupy-the-disk-IO" class="headerlink" title="big files occupy the disk IO"></a>big files occupy the disk IO</h5><p>separate different sizes or types of files.</p>
<h5 id="abuse-of-releasing-environments"><a href="#abuse-of-releasing-environments" class="headerlink" title="abuse of releasing environments"></a>abuse of releasing environments</h5><p>someone did performance testing in releasing environments.</p>
<h5 id="non-standard-releasing-procedure"><a href="#non-standard-releasing-procedure" class="headerlink" title="non-standard releasing procedure"></a>non-standard releasing procedure</h5><p>forget to uncomment some codes.<br><strong>commit after diff checking</strong>.</p>
<h5 id="bad-programming-habits"><a href="#bad-programming-habits" class="headerlink" title="bad programming habits"></a>bad programming habits</h5><p><code>NullPointerException</code> throws.<br>forget to check whether the object is <code>null</code>.</p>
<h3 id="Postscript"><a href="#Postscript" class="headerlink" title="Postscript"></a>Postscript</h3><p><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-30/1691765.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Doing </category>
            
            <category> Distributed </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Miscellany and Summary, Notes(9), Effective C++]]></title>
      <url>/2017/10/17/effective-cpp-miscellany-and-summary/</url>
      <content type="html"><![CDATA[<h2 id="Miscellany-and-Summary"><a href="#Miscellany-and-Summary" class="headerlink" title="Miscellany and Summary"></a>Miscellany and Summary</h2><p>(I read a Chinese version of the book, any translation problem plz point out. </p>
<a id="more"></a>
<h3 id="Pay-attention-to-compiler-warnings"><a href="#Pay-attention-to-compiler-warnings" class="headerlink" title="Pay attention to compiler warnings"></a>Pay attention to compiler warnings</h3><ul>
<li>be serious to compiler warnings.</li>
<li>but shouldn’t over rely on compiler warnings.</li>
</ul>
<h3 id="Familiarize-yourself-with-the-standard-library"><a href="#Familiarize-yourself-with-the-standard-library" class="headerlink" title="Familiarize yourself with the standard library"></a>Familiarize yourself with the standard library</h3><h3 id="Familiarize-yourself-with-Boost"><a href="#Familiarize-yourself-with-Boost" class="headerlink" title="Familiarize yourself with Boost"></a>Familiarize yourself with Boost</h3><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>It is about 4 months since I started to read the book.<br>I’m so sorrow that I can’t put the ways into practice, although it is quite fascinating.<br>What I’m eager to do is to write the beautiful code.<br>Keep patient, and what learned will settle.</p>
]]></content>
      
        <categories>
            
            <category> Doing </category>
            
            <category> CPP </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Customizing new and delete, Notes(8), Effective C++]]></title>
      <url>/2017/10/12/effective-cpp-customizing-new-and-delete/</url>
      <content type="html"><![CDATA[<h2 id="Customizing-new-and-delete"><a href="#Customizing-new-and-delete" class="headerlink" title="Customizing new and delete"></a>Customizing new and delete</h2><p>(I read a Chinese version of the book, any translation problem plz point out. </p>
<a id="more"></a>
<h3 id="Understand-the-behavior-of-the-new-handler"><a href="#Understand-the-behavior-of-the-new-handler" class="headerlink" title="Understand the behavior of the new-handler"></a>Understand the behavior of the new-handler</h3><p>well-designed <code>new-handler</code> should do:</p>
<ul>
<li>make more memory to be used, i.e., more likely to let the next <code>operator new</code> be successful.</li>
<li>install another <code>new-handler</code>, i.e., let <code>operator new</code> call <code>set_new_handler</code>.</li>
<li>uninstall <code>new-handler</code>, i.e., pass <code>nullptr</code> to <code>operator new</code>.</li>
<li>throw <code>bad_alloc</code> (or derived from <code>bad_alloc</code>) error.</li>
<li>no return (usually call <code>abort</code> or <code>exit</code>).</li>
</ul>
<p>implement the <code>new_handler</code> of class:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Widget</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="keyword">static</span> <span class="built_in">std</span>::<span class="function">new_handler <span class="title">set_new_handler</span><span class="params">(<span class="built_in">std</span>::new_handler p)</span> <span class="title">throw</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span>* <span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="built_in">std</span>::<span class="keyword">size_t</span> size)</span> <span class="title">throw</span><span class="params">(<span class="built_in">std</span>::bad_alloc)</span></span>;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="keyword">static</span> <span class="built_in">std</span>::new_handler currentHandler;</div><div class="line">&#125;;</div><div class="line"><span class="built_in">std</span>::new_handler Widget::currentHandler = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="built_in">std</span>::new_handler Widget::set_new_handler(<span class="built_in">std</span>::new_handler p) <span class="keyword">throw</span>() &#123;</div><div class="line">    <span class="built_in">std</span>::new_hanlder old = currentHandler;</div><div class="line">    currentHandler = p;</div><div class="line">    <span class="keyword">return</span> old;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewHandlerHolder</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">NewHandlerHolder</span><span class="params">(<span class="built_in">std</span>::new_handler nh)</span></span></div><div class="line">    : handler(nh) &#123;&#125;</div><div class="line">    ~NewHandlerHolder() &#123; <span class="built_in">std</span>::set_new_handler(handler); &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="built_in">std</span>::new_handler handler;</div><div class="line">    NewHandlerHolder(<span class="keyword">const</span> NewHandlerHolder&amp;);</div><div class="line">    NewHandlerHolder&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> NewHandlerHolder&amp;);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">void</span>* Widget::<span class="function"><span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="built_in">std</span>::<span class="keyword">size_t</span> <span class="keyword">new</span>)</span> <span class="title">throw</span><span class="params">(<span class="built_in">std</span>::bad_alloc)</span> </span>&#123;</div><div class="line">    newhandlerholder h(std::set_new_handler(currenthandler));</div><div class="line">    <span class="keyword">return</span> ::oeprator <span class="keyword">new</span>(size);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>reuse the code above due to the same implementation for different classes:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewHandlerSupport</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="keyword">static</span> <span class="built_in">std</span>::<span class="function">new_handler <span class="title">set_new_handler</span><span class="params">(<span class="built_in">std</span>::new_handler p)</span> <span class="title">throw</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span>* <span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="built_in">std</span>::<span class="keyword">size_t</span> size)</span> <span class="title">throw</span><span class="params">(<span class="built_in">std</span>::bad_alloc)</span></span>;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="keyword">static</span> <span class="built_in">std</span>::new_handler currentHandler;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><span class="built_in">std</span>::new_handler NewHandlerSupport&lt;T&gt;::currentHandler = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><span class="built_in">std</span>::new_handler NewHandlerSupport::set_new_handler(<span class="built_in">std</span>::new_handler p) <span class="keyword">throw</span>() &#123;</div><div class="line">    <span class="built_in">std</span>::new_hanlder old = currentHandler;</div><div class="line">    currentHandler = p;</div><div class="line">    <span class="keyword">return</span> old;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><span class="keyword">void</span>* NewHandlerSupport::<span class="function"><span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="built_in">std</span>::<span class="keyword">size_t</span> <span class="keyword">new</span>)</span> <span class="title">throw</span><span class="params">(<span class="built_in">std</span>::bad_alloc)</span> </span>&#123;</div><div class="line">    newhandlerholder h(std::set_new_handler(currenthandler));</div><div class="line">    <span class="keyword">return</span> ::oeprator <span class="keyword">new</span>(size);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// curiously recurring template pattern, "mixin" style</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Widget</span>:</span> <span class="keyword">public</span> NewHandlerSupport&lt;Widget&gt; &#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>nothrow new</code>:<br>it is limited, only <strong>adapted to memory allocated</strong>, and intermediate constructor called may throw exception.</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Widget* pw1 = <span class="keyword">new</span> Widget;  <span class="comment">// if fails, throw bad_alloc</span></div><div class="line">Widget* pw2 = <span class="keyword">new</span>(<span class="built_in">std</span>::nothrow) Widget; <span class="comment">// if fails, return nullptr</span></div></pre></td></tr></table></figure>
<h3 id="Understand-when-it-makes-sense-to-replace-new-and-delete"><a href="#Understand-when-it-makes-sense-to-replace-new-and-delete" class="headerlink" title="Understand when it makes sense to replace new and delete"></a>Understand when it makes sense to replace new and delete</h3><ul>
<li>to check the wrong usage.</li>
<li>to improve the efficiency of allocation and deallocation.</li>
<li>to collect the log of usage.</li>
<li>to decrease the additional space cost caused by default memory manager.</li>
<li>to improve the suboptimal alignment.</li>
<li>to make related objects clustered.</li>
<li>to obtain non-traditional behaviors.</li>
</ul>
<h3 id="Adhere-to-convention-when-writing-new-and-delete"><a href="#Adhere-to-convention-when-writing-new-and-delete" class="headerlink" title="Adhere to convention when writing new and delete"></a>Adhere to convention when writing new and delete</h3><ul>
<li><code>operator new</code> should have an infinite loop which tries to allocate memory.</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span>* <span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="built_in">std</span>::<span class="keyword">size_t</span> size)</span> <span class="title">throw</span><span class="params">(<span class="built_in">std</span>::bad_alloc)</span> </span>&#123;</div><div class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line">    <span class="keyword">if</span>(size == <span class="number">0</span>) &#123;</div><div class="line">        size = <span class="number">1</span>; </div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</div><div class="line">        <span class="comment">// Try to allocate "size" bytes </span></div><div class="line">        <span class="keyword">if</span>(allocation is ok) <span class="keyword">return</span> (a pointer to the memory allocated);</div><div class="line">        </div><div class="line">        new_handler globalHandler = set_new_handler(<span class="number">0</span>);</div><div class="line">        set_new_handler(globalHandler); </div><div class="line">        </div><div class="line">        <span class="keyword">if</span>(globalHandler) (*globalHandler)();  </div><div class="line">        <span class="keyword">else</span> <span class="keyword">throw</span> bad_alloc();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>operator delete</code> should do nothing when passed by <code>nullptr</code>, “Class version” should<br> handle the “wrong apply that requires the bigger size than the true size”.</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span>* <span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="built_in">std</span>::<span class="keyword">size_t</span> size)</span> <span class="title">throw</span><span class="params">(<span class="built_in">std</span>::bad_alloc)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="keyword">operator</span> <span class="title">delete</span><span class="params">(<span class="keyword">void</span>* rawMemoty, <span class="built_in">std</span>::<span class="keyword">size_t</span> size)</span> <span class="title">throw</span><span class="params">()</span></span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">void</span>* Base::<span class="function"><span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="built_in">std</span>::<span class="keyword">size_t</span> size)</span> <span class="title">throw</span><span class="params">(<span class="built_in">std</span>::bad_alloc)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(size != <span class="keyword">sizeof</span>(Base)) <span class="keyword">return</span> ::<span class="keyword">operator</span> <span class="keyword">new</span>(size);</div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> Base::<span class="function"><span class="keyword">operator</span> <span class="title">delete</span><span class="params">(<span class="keyword">void</span>* rawMemory, <span class="built_in">std</span>::<span class="keyword">size_t</span> size)</span> <span class="title">throw</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(rawMemory == <span class="number">0</span>) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">if</span>(size != <span class="keyword">sizeof</span>(Base)) &#123;</div><div class="line">        ::<span class="function"><span class="keyword">operator</span> <span class="title">delete</span><span class="params">(rawMemory)</span></span>;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Write-placement-delete-if-you-write-placement-new"><a href="#Write-placement-delete-if-you-write-placement-new" class="headerlink" title="Write placement delete if you write placement new"></a>Write placement delete if you write placement new</h3><ul>
<li>when write <code>Widget* pw = new Widget;</code>, two functions are called, one is <code>operator new</code>, one is Widget’s default construtor.<br>if the constructor throws, the memory allocated by the first one should be recovered, or it will be memory leak.<br>so the corresponding <code>operator delete</code> should be provided correctly.</li>
<li>when write a <code>placement operator new</code>, plz be sure to write a <code>placement operator delete</code>.</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span>* <span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="built_in">std</span>::<span class="keyword">size_t</span>)</span> <span class="title">throw</span><span class="params">(<span class="built_in">std</span>::bad_alloc)</span></span>; <span class="comment">// normal new</span></div><div class="line"><span class="function"><span class="keyword">void</span>* <span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="built_in">std</span>::<span class="keyword">size_t</span>, <span class="keyword">void</span>*)</span> <span class="title">throw</span><span class="params">()</span></span>; <span class="comment">// placement new</span></div><div class="line"><span class="function"><span class="keyword">void</span>* <span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="built_in">std</span>::<span class="keyword">size_t</span>, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="keyword">nothrow_t</span>&amp;)</span> <span class="title">throw</span><span class="params">()</span></span>; <span class="comment">// nothrow new</span></div></pre></td></tr></table></figure>
<ul>
<li>when declaring <code>placement new</code> and <code>placement delete</code>, plz <strong>do not hide the normal version</strong> intendedly or unconsciously.</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">StandardNewDeleteForms</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="comment">// normal new/delete</span></div><div class="line">    static void* operator new(std::size_t size) throw std::bad_alloc) &#123;</div><div class="line">        <span class="keyword">return</span> ::<span class="keyword">operator</span> <span class="keyword">new</span>(size);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="keyword">operator</span> <span class="title">delete</span><span class="params">(<span class="keyword">void</span>* pMemory)</span> <span class="title">throw</span><span class="params">()</span> </span>&#123;</div><div class="line">        ::<span class="function"><span class="keyword">operator</span> <span class="title">delete</span><span class="params">(pMemory)</span></span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// placement new/delete</span></div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span>* <span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="built_in">std</span>::<span class="keyword">size_t</span> size, <span class="keyword">void</span>* ptr)</span> <span class="title">throw</span><span class="params">()</span> </span>&#123;</div><div class="line">        ::<span class="function"><span class="keyword">operator</span> <span class="title">new</span><span class="params">(size, ptr)</span></span>;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="keyword">operator</span> <span class="title">delete</span><span class="params">(<span class="keyword">void</span>* pMemory, <span class="keyword">void</span>* ptr)</span> <span class="title">throw</span><span class="params">()</span> </span>&#123;</div><div class="line">        ::<span class="function"><span class="keyword">operator</span> <span class="title">delete</span><span class="params">(pMemory, ptr)</span></span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// nothrow new/delete</span></div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span>* <span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="built_in">std</span>::<span class="keyword">size_t</span> size, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="keyword">nothrow_t</span>&amp; nt)</span> <span class="title">throw</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> ::<span class="keyword">operator</span> <span class="keyword">new</span>(size, nt);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="keyword">operator</span> <span class="title">delete</span><span class="params">(<span class="keyword">void</span>* pMemory, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="keyword">nothrow_t</span>&amp;)</span> <span class="title">throw</span><span class="params">()</span> </span>&#123;</div><div class="line">        ::<span class="function"><span class="keyword">operator</span> <span class="title">delete</span><span class="params">(pMemory)</span></span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Widget</span>:</span> <span class="keyword">public</span> StandardNewDeleteForms &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="comment">// inherit normal new/delete</span></div><div class="line">    <span class="keyword">using</span> StandardNewDeleteForms::<span class="keyword">operator</span> <span class="keyword">new</span>;</div><div class="line">    <span class="keyword">using</span> StandardNetDeleteForms::<span class="keyword">operator</span> <span class="keyword">delete</span>;</div><div class="line">    </div><div class="line">    <span class="comment">// customized placement new/delete</span></div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span>* <span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="built_in">std</span>::<span class="keyword">size_t</span> size, <span class="built_in">std</span>::ostream&amp; logStream)</span> <span class="title">throw</span><span class="params">(<span class="built_in">std</span>::bad_alloc)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="keyword">operator</span> <span class="title">delete</span><span class="params">(<span class="keyword">void</span>* memory, <span class="built_in">std</span>::ostream&amp; logStream)</span> <span class="title">throw</span><span class="params">()</span></span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Doing </category>
            
            <category> CPP </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Templates and Generic Programming, Notes(7), Effective C++]]></title>
      <url>/2017/10/09/effective-cpp-templates-and-generic-programming/</url>
      <content type="html"><![CDATA[<h2 id="Templates-and-Generic-Programming"><a href="#Templates-and-Generic-Programming" class="headerlink" title="Templates and Generic Programming"></a>Templates and Generic Programming</h2><p>(I read a Chinese version of the book, any translation problem plz point out. </p>
<a id="more"></a>
<h3 id="Understand-implicit-interfaces-and-compile-time-polymorphism"><a href="#Understand-implicit-interfaces-and-compile-time-polymorphism" class="headerlink" title="Understand implicit interfaces and compile-time polymorphism"></a>Understand implicit interfaces and compile-time polymorphism</h3><ul>
<li>classes and templates both support interfaces and polymorphism.</li>
<li>as for classes, interfaces is explicit, based on function signatures,<br>and their polymorphism happen in run-time via virtual functions.</li>
<li>as for templates, interfaces is implicit, based on valid expressions,<br>and their polymorphism happen in compile-time via template instantiation and function overloading resolution.</li>
</ul>
<h3 id="Understand-the-two-meanings-of-typename"><a href="#Understand-the-two-meanings-of-typename" class="headerlink" title="Understand the two meanings of typename"></a>Understand the two meanings of typename</h3><p>dependent names: the names appeared in template and dependent on some template parameter.<br>nested dependent names: the dependent name nested in class.<br><code>C::const_iterator</code> is a <strong>nested dependent type name</strong>.</p>
<blockquote>
<p><code>C::const_iterator* x</code>, what if <code>const_iterator</code> is a static member variable and <code>x</code> is a global variable?</p>
</blockquote>
<ul>
<li>keyword <code>class</code> and <code>typename</code> are the same when declare template parameters.</li>
<li>use <code>typename</code> to indentify the <strong>nested dependent name</strong>,<br>but it mustn’t modify the base class in base class lists and member initialization lists.</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived</span>:</span> <span class="keyword">public</span> Base&lt;T&gt;::Nested &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    explicit Derived(int x): Basee&lt;T&gt;::Nested(x) &#123;</div><div class="line">        <span class="keyword">typename</span> Base&lt;T&gt;::Nested tmp; </div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="Know-how-to-access-names-in-templatized-base-classes"><a href="#Know-how-to-access-names-in-templatized-base-classes" class="headerlink" title="Know how to access names in templatized base classes"></a>Know how to access names in templatized base classes</h3><ul>
<li>use <code>this-&gt;</code> to refer to the member names of base class templates in derived class templates.</li>
<li>use base class modifier, <code>Base::name</code></li>
</ul>
<h3 id="Factor-parameter-independent-code-out-of-templates"><a href="#Factor-parameter-independent-code-out-of-templates" class="headerlink" title="Factor parameter-independent code out of templates"></a>Factor parameter-independent code out of templates</h3><ul>
<li>templates can generate a couple of classes and functions,<br>so any template code should not be dependent on some template parameter which can cause code bloat.</li>
<li>code bloat caused by non-type template parameters can be removed via replacing them with<br>function parameter or using class member variable.</li>
<li>code bload caused by type parameters can be reduced via sharing the implementation<br>when the instantiation types are with completely same binary representations,<br>such as strongly typed pointers <code>(T*)</code> to untyped pointers <code>(void*)</code>.</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="built_in">std</span>::<span class="keyword">size_t</span>&gt;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SquareMatrix</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">invert</span><span class="params">()</span></span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">/***************************************************/</span></div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SquareMatrixBase</span> &#123;</span></div><div class="line"><span class="keyword">protected</span>:</div><div class="line">    SquareMatrixBase(<span class="built_in">std</span>::<span class="keyword">size_t</span> n, T* pMem)</div><div class="line">    : size(n), pData(pMem) &#123;&#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setDataPtr</span><span class="params">(T* ptr)</span> </span>&#123; pData = ptr; &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">invert</span><span class="params">()</span> </span>&#123;&#125; </div><div class="line"></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="built_in">std</span>::<span class="keyword">size_t</span> size;</div><div class="line">    T* pData;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="built_in">std</span>::<span class="keyword">size_t</span> n&gt;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SquareMatrix</span>:</span> <span class="keyword">private</span> SquareMatrixBase&lt;T&gt; &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    SquareMatrix()</div><div class="line">    : SquareMatrixBase&lt;T&gt;(n, <span class="number">0</span>), pData(<span class="keyword">new</span> T[n * n]) &#123;</div><div class="line">        <span class="keyword">this</span>-&gt;setDataPtr(pData.get());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">invert</span><span class="params">()</span> </span>&#123; SquareMatrixBase&lt;T&gt;::invert(); &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;T[]&gt; pData;</div><div class="line">    <span class="comment">// T data[n * n]; // maybe it is your choice</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// in the first version, the matrix size is a compile-time constant, and</span></div><div class="line"><span class="comment">// it can be optimized as immediate operand in generated instructions.</span></div><div class="line"><span class="comment">// while the second version, resulting in smaller executable size, it can reduce </span></div><div class="line"><span class="comment">// the size of working set of the program, and strengthen the locality of reference in cache.</span></div><div class="line"><span class="comment">// well, only profiling matters!!!</span></div></pre></td></tr></table></figure>
<h3 id="Use-member-function-templates-to-accept-“all-compatible-types”"><a href="#Use-member-function-templates-to-accept-“all-compatible-types”" class="headerlink" title="Use member function templates to accept “all compatible types”"></a>Use member function templates to accept “all compatible types”</h3><ul>
<li>use member function templates to generate the functions which accept “all compatible types”.</li>
<li>you need to declare normal copy constructor and copy assignment operator when using<br> member function templates. or the compiler will generate one which may be not what<br> you want.</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SmartPtr</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    SmartPtr(<span class="keyword">const</span> SmartPtr&amp; r);</div><div class="line">    </div><div class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> U&gt;</div><div class="line">    SmartPtr(<span class="keyword">const</span> SmartPtr&lt;U&gt;&amp; other) <span class="comment">// Make it more like a real pointer</span></div><div class="line">    : heldPtr(other.get()) &#123;&#125;</div><div class="line">    <span class="function">T* <span class="title">get</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> heldPtr; &#125;</div><div class="line">    </div><div class="line"><span class="keyword">private</span>:</div><div class="line">    T* heldPtr;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="Define-non-member-functions-inside-templates-when-type-conversions-are-desired"><a href="#Define-non-member-functions-inside-templates-when-type-conversions-are-desired" class="headerlink" title="Define non-member functions inside templates when type conversions are desired"></a>Define non-member functions inside templates when type conversions are desired</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="class"><span class="keyword">class</span> <span class="title">Rational</span>;</span></div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><span class="keyword">const</span> Rational&lt;T&gt; doMutiply(<span class="keyword">const</span> Rational&lt;T&gt;&amp; lhs, <span class="keyword">const</span> Rational&lt;T&gt;&amp; rhs);</div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rational</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="comment">// use a helper to avoid the affect of inlining </span></div><div class="line">    <span class="keyword">friend</span> Rational&lt;T&gt; <span class="keyword">operator</span>*(<span class="keyword">const</span> Rational&lt;T&gt;&amp; lhs, <span class="keyword">const</span> Rational&lt;T&gt;&amp; rhs) &#123;</div><div class="line">        <span class="keyword">return</span> doMultiply(lhs, rhs); </div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="Use-traits-classes-for-information-about-types"><a href="#Use-traits-classes-for-information-about-types" class="headerlink" title="Use traits classes for information about types"></a>Use traits classes for information about types</h3><ul>
<li>traits classes make “type-related information” be available in compile-time,<br>which is implemented by templates and template specializations.</li>
<li>traits classes can execute the <code>if...else</code> test in compile-time via overloading.</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">input_iterator_tag</span> &#123;</span>&#125;;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">output_iterator_tag</span> &#123;</span>&#125;;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">forward_iterator_tag</span>:</span> <span class="keyword">public</span> input_iterator_tag &#123;&#125;;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bidirectional_iterator_tag</span>:</span> <span class="keyword">public</span> forward_iterator_tag &#123;&#125;;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">random_access_iterator_tag</span>:</span> <span class="keyword">public</span> bidirectional_iterator_tag &#123;&#125;;</div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> IterT, <span class="keyword">typename</span> DistT&gt;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">doAdvance</span><span class="params">(IterT&amp; iter, DistT d, <span class="built_in">std</span>::random_access_iterator_tag)</span> </span>&#123; iter += d; &#125;</div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> IterT, <span class="keyword">typename</span> DistT&gt;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">doAdvance</span><span class="params">(IterT&amp; iter, DistT d, <span class="built_in">std</span>::bidirectional_iterator_tag)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(d &gt;= <span class="number">0</span>) &#123; <span class="keyword">while</span>(d--) ++iter; &#125;</div><div class="line">    <span class="keyword">else</span> &#123; <span class="keyword">while</span>(d++) --iter; &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// it can also accept forward_iterator_tag</span></div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> IterT, <span class="keyword">typename</span> DistT&gt;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">doAdvance</span><span class="params">(IterT&amp; iter, DistT d, <span class="built_in">std</span>::input_iterator_tag)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(d &lt; <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="built_in">std</span>::out_of_range(<span class="string">"Negative distance"</span>); </div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span>(d--) ++iter;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">advance</span><span class="params">(IterT&amp; iter, DistT d)</span> </span>&#123;</div><div class="line">    doAdvance(iter, d, <span class="keyword">typename</span> <span class="built_in">std</span>::iterator_traits&lt;IterT&gt;::iterator_category());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Be-aware-of-templatee-metaprogramming"><a href="#Be-aware-of-templatee-metaprogramming" class="headerlink" title="Be aware of templatee metaprogramming"></a>Be aware of templatee metaprogramming</h3><ul>
<li>TMP is Turing-complete, and TMP loops is recursive template instantiation.</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// It may be implemented by `enum hack` in lower version of cpp compiler.</span></div><div class="line"><span class="keyword">template</span>&lt;<span class="built_in">std</span>::<span class="keyword">size_t</span> n&gt;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">factorial</span> &#123;</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="built_in">std</span>::<span class="keyword">size_t</span> value = n * factorial&lt;n - <span class="number">1</span>&gt;::value;    </div><div class="line">&#125;;</div><div class="line"><span class="keyword">template</span>&lt;&gt;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">factorial</span>&lt;0&gt; &#123;</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="built_in">std</span>::<span class="keyword">size_t</span> value = <span class="number">1</span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<ul>
<li>TMP can be used:<ul>
<li>validate type informations or some others.</li>
<li>optimize matrix operations, such as <a href="https://en.wikipedia.org/wiki/Expression_templates" target="_blank" rel="external">expression templates</a>.</li>
<li>generate custom design patterns for users. <strong>(TMP-based policy-based design) -&gt; generative programming</strong></li>
</ul>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Doing </category>
            
            <category> CPP </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Inheritance and Object-Oriented Design, Notes(6), Effective C++]]></title>
      <url>/2017/09/11/effective-cpp-inheritance-and-object-oriented-design/</url>
      <content type="html"><![CDATA[<h2 id="Inheritance-and-Object-Oriented-Design"><a href="#Inheritance-and-Object-Oriented-Design" class="headerlink" title="Inheritance and Object-Oriented Design"></a>Inheritance and Object-Oriented Design</h2><p>(I read a Chinese version of the book, any translation problem plz point out. </p>
<a id="more"></a>
<h3 id="Make-sure-public-inheritance-models-“is-a”"><a href="#Make-sure-public-inheritance-models-“is-a”" class="headerlink" title="Make sure public inheritance models “is-a”"></a>Make sure public inheritance models “is-a”</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bird</span> &#123;</span></div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FlyingBird</span>:</span> <span class="keyword">public</span> Bird &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Penguin</span>:</span> <span class="keyword">public</span> Bird &#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>public inheritance means everything must be suitable for derived class if it is suitable for base class,<br>because every derived class object is a base class object.</p>
<p><strong>is a square a rectangle?</strong></p>
<h3 id="Avoid-hiding-inherited-names"><a href="#Avoid-hiding-inherited-names" class="headerlink" title="Avoid hiding inherited names"></a>Avoid hiding inherited names</h3><p>CPP name-hiding rules:<br>all the functions of base class with the same name as derived class will be hiden,<br>even if the parameter lists is different. it is both suitable for <strong>virtual and non-virtual functions</strong>.</p>
<p>CPP name-lookup rules:<br>local -&gt; derived -&gt; namespace of derived -&gt; base -&gt; namespace of base -&gt; global</p>
<p>but if you use public inheritance without inheriting the overloaded functions, it violates the “is-a” relation between base and derived class.</p>
<ul>
<li><code>using</code> declaration<br>introduce all the functions of specific name of base class to derived class,<br>it is ok for public inheritance.<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> &#123;</span></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="keyword">int</span> x;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">mf1</span><span class="params">()</span> </span>= <span class="number">0</span>;</div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">mf1</span><span class="params">(<span class="keyword">int</span>)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">mf2</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">mf3</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">mf3</span><span class="params">(<span class="keyword">double</span>)</span></span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived</span>:</span> <span class="keyword">public</span> Base &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="keyword">using</span> Base::mf1;</div><div class="line">    <span class="keyword">using</span> Base::mf3;</div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">mf1</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">mf3</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">mf4</span><span class="params">()</span></span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>what if for partially inheriting the functions?</p>
<ul>
<li>forwarding function<br>use for private inheritance.<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">mf1</span><span class="params">()</span> </span>= <span class="number">0</span>;</div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">mf1</span><span class="params">(<span class="keyword">int</span>)</span></span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived</span>:</span> <span class="keyword">private</span> Base &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">mf1</span><span class="params">()</span> </span>&#123; <span class="comment">// Forwarding function</span></div><div class="line">        Base::mf1();     <span class="comment">// Implicitly inline</span></div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Differentiate-between-inheritance-of-interface-and-inhertiace-of-implementation"><a href="#Differentiate-between-inheritance-of-interface-and-inhertiace-of-implementation" class="headerlink" title="Differentiate between inheritance of interface and inhertiace of implementation"></a>Differentiate between inheritance of interface and inhertiace of implementation</h3><ul>
<li>pure virtual functions: only inherit interface.</li>
<li>impure virtual functions: inherit interface and a default implementation.</li>
<li>non-virtual functons: inherit interface and a forced implementation. invariant far more than specialization.</li>
</ul>
<h3 id="Consider-alternatives-to-virtual-functions"><a href="#Consider-alternatives-to-virtual-functions" class="headerlink" title="Consider alternatives to virtual functions"></a>Consider alternatives to virtual functions</h3><ul>
<li><p>use <strong>Non-Virtual Interface</strong> to implement <strong>Template Method</strong> pattern.<br><strong>advantages</strong>: do something before and after the operation, like mutex, log entry, validation of constraints.</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GameCharacter</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="comment">// This non-virtual function is a wrapper for the virtual function.</span></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">healthValue</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; </div><div class="line">        <span class="comment">// ...</span></div><div class="line">        <span class="keyword">int</span> retVal = doHealthValue();</div><div class="line">        <span class="comment">// ...</span></div><div class="line">        <span class="keyword">return</span> retVal;</div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">doHealthValue</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</div><div class="line">        <span class="comment">// ... </span></div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
<li><p>use <strong>Function Pointers</strong> to implement <strong>Strategy</strong> pattern.</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GameCharacter</span>;</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">defaultHealthCalc</span><span class="params">(<span class="keyword">const</span> GameCharacter&amp; gc)</span></span>;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GameCharacter</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(*HealthCalcFunc)</span><span class="params">(<span class="keyword">const</span> GameCharacter&amp;)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">GameCharacter</span><span class="params">(HealthCalcFunc hcf = defaultHealthCalc)</span></span></div><div class="line">                            : healthFunc(hcf) &#123;&#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">healthValue</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> healthFunc(*<span class="keyword">this</span>); &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    HealthCalcFunc healthFunc;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>advantages</strong>:<br>different entities of same type can have different function pointers.<br>function pointers can be changed in run-time.<br><strong>disadvantages</strong>:<br>once needing to access the non-public members, you have to weaken the encapsulation of class.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">EvilBadGuy</span>:</span> <span class="keyword">public</span> GameCharacter &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">EvilBadGuy</span><span class="params">(HealthCalcFunc hcf = defaultHealthCalc)</span></span></div><div class="line">                            : healthFunc(hcf) &#123;&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">loseHealthQuickly</span><span class="params">(<span class="keyword">const</span> GameCharacter&amp;)</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">loseHealthSlowly</span><span class="params">(<span class="keyword">const</span> GameCharacter&amp;)</span></span>;</div><div class="line"></div><div class="line"><span class="function">EvilBadGuy <span class="title">ebg1</span><span class="params">(loseHealthQuickly)</span></span>;</div><div class="line"><span class="function">EvilBadGuy <span class="title">ebg2</span><span class="params">(loseHealthSlowly)</span></span>;</div></pre></td></tr></table></figure></p>
<p>with <code>std::function</code>:<br>call accept all the callable entities <strong>compatible</strong> with target signature (<strong>implicit conversion</strong>).<br>with <code>std::bind</code>:<br>bind a member function with an object.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GameCharacter</span>;</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">defaultHealthCalc</span><span class="params">(<span class="keyword">const</span> GameCharacter&amp; gc)</span></span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GameCharacter</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="keyword">typedef</span> <span class="built_in">std</span>::function&lt;<span class="keyword">int</span> (<span class="keyword">const</span> GameCharacter&amp;)&gt; HealthCalcFunc;  </div><div class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">GameCharacter</span><span class="params">(HealthCalcFunc hcf = defaultHealthCalc)</span></span></div><div class="line">                            : healthFunc(hcf) &#123;&#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">healthValue</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> healthFunc(*<span class="keyword">this</span>); &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    HealthCalcFunc healthFunc;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">EvilBadGuy</span>:</span> <span class="keyword">public</span> GameCharacter &#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">short</span> <span class="title">calcHealth</span><span class="params">(<span class="keyword">const</span> GameCharacter&amp;)</span></span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">HealthCalculator</span> &#123;</span></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> GameCharacter&amp;）<span class="keyword">const</span> &#123;&#125;</span></span></div><div class="line"><span class="function"><span class="params">&#125;;</span></span></div><div class="line"><span class="function"><span class="params">class GameLevel &#123;</span></span></div><div class="line"><span class="function"><span class="params"><span class="keyword">public</span>:</span></span></div><div class="line"><span class="function"><span class="params">    <span class="keyword">float</span> health(<span class="keyword">const</span> GameCharacter&amp;)</span> <span class="keyword">const</span></span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function">EvilBadGuy <span class="title">ebg1</span><span class="params">(calcHealth)</span></span>; <span class="comment">// Function pointer</span></div><div class="line">EvilBadGuy ebg2(HealthCalculator()); // Functor</div><div class="line"></div><div class="line">GameLevel currentLevel;</div><div class="line">EvilBadGuy ebg3(std::bind(&amp;GameLevel::health, currentLevel, std::placeholders::_1));</div></pre></td></tr></table></figure>
<ul>
<li>classical <strong>Strategy</strong> pattern (with virtual functions)<br>make <code>HealthCalcFunc</code> be a seperate hierarchy of inheritance.<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GameCharacter</span>;</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HealthCalcFunc</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">const</span> GameCharacter&amp; gc)</span> <span class="keyword">const</span> </span>&#123; &#125;</div><div class="line">&#125; defaultHealthCalc;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GameCharacter</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">GameCharacter</span><span class="params">(HealthCalcFunc* phcf = &amp;defaultHealthCalc)</span></span></div><div class="line">                            : pHealthFunc(phcf) &#123;&#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">healthValue</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> pHealthFun-&gt;(*<span class="keyword">this</span>); &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    HealthCalcFunc* pHealthFunc;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Never-redefine-an-inherited-non-virtual-function"><a href="#Never-redefine-an-inherited-non-virtual-function" class="headerlink" title="Never redefine an inherited non-virtual function"></a>Never redefine an inherited non-virtual function</h3><h3 id="Never-redefine-a-function’s-inherited-default-parameter-value"><a href="#Never-redefine-a-function’s-inherited-default-parameter-value" class="headerlink" title="Never redefine a function’s inherited default parameter value"></a>Never redefine a function’s inherited default parameter value</h3><ul>
<li>virtual functions is dynamically bound, but default parameter values is statically bound.</li>
<li>static type is the type declared, and dynamic type is the type pointed to currently.</li>
<li>use <strong>NVI (non-virtual interface)</strong> to substitute it.</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shape</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="keyword">enum</span> ShapeColor &#123; Red, Green, Blue &#125;;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">(ShapeColor color = Red)</span> <span class="keyword">const</span> </span>&#123;</div><div class="line">        doDraw(color); </div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">doDraw</span><span class="params">(ShapeColor color)</span> <span class="keyword">const</span> </span>= <span class="number">0</span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span>:</span> <span class="keyword">public</span> Shape &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="comment">// ...</span></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">doDraw</span><span class="params">(ShapeColor color)</span> <span class="keyword">const</span></span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="Model-“has-a”-or-“is-implemented-in-terms-of”-through-composition"><a href="#Model-“has-a”-or-“is-implemented-in-terms-of”-through-composition" class="headerlink" title="Model “has-a” or “is-implemented-in-terms-of” through composition"></a>Model “has-a” or “is-implemented-in-terms-of” through composition</h3><ul>
<li>composition has many <strong>synonyms</strong>: layering, containment, aggregation, embedding.</li>
<li>in application domain, composition means “has-a”, but in inplementation domain, it means “is-implemented-in-terms-of”.</li>
</ul>
<h3 id="Use-private-inheritance-judiciously"><a href="#Use-private-inheritance-judiciously" class="headerlink" title="Use private inheritance judiciously"></a>Use private inheritance judiciously</h3><ul>
<li>private inheritance is a technique of implementation.</li>
<li>private inheritance means only implementation is inherited and interfaces should be omitted.</li>
<li>private inheritance is ok, when you want to redefine the inherited virtual functions.  </li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Timer</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">Timer</span><span class="params">(<span class="keyword">int</span> tickFrequency)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">onTick</span><span class="params">()</span> <span class="keyword">const</span></span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// Althrough Widget reuse Timer, it exposes `onTick` to the user</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Widget</span>:</span> <span class="keyword">private</span> Timer &#123;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">onTick</span><span class="params">()</span> <span class="keyword">const</span></span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// This one is kind of complicated, but it can prevent from using WidgetTimer</span></div><div class="line"><span class="comment">// in the derived classes of Widget, (something like Java `final`, C# `sealed`)</span></div><div class="line"><span class="comment">// Once changed to WidgetTimer*, it can also lower the compilation dependency</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Widget</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">WidgetTimer</span>:</span> <span class="keyword">public</span> Timer &#123;</div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">onTick</span><span class="params">()</span> <span class="keyword">const</span></span>;</div><div class="line">    &#125;;</div><div class="line">    </div><div class="line">    WidgetTimer timer;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<ul>
<li>when facing space optimization, private inheritance may be the best choice.<br>empty class: with no non-static variables, no virtual functions and no virtual base classes.<br><strong>EBO (empty class optimization)</strong> will let your base class take no space.</li>
</ul>
<h3 id="Use-multiple-inheritance-judiciously"><a href="#Use-multiple-inheritance-judiciously" class="headerlink" title="Use multiple inheritance judiciously"></a>Use multiple inheritance judiciously</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">File</span> &#123;</span> <span class="comment">// ... &#125;;</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">InputFile</span>:</span> <span class="keyword">public</span> File &#123; <span class="comment">// ... &#125;;</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">OutputFile</span>:</span> <span class="keyword">public</span> File &#123; <span class="comment">// ... &#125;;</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">IOFile</span>:</span> <span class="keyword">public</span> InputFile, <span class="keyword">public</span> OutputFile &#123; <span class="comment">// ... &#125;;</span></div></pre></td></tr></table></figure>
<ul>
<li>MI will copy the data through each inheritance path (such as <code>File::name</code>).</li>
<li>once not, make the class with the data to be a virtual base class, and all the classes intermediately inherited <strong>virtual inherit</strong> it.</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">File</span> &#123;</span> <span class="comment">// ... &#125;;</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">InputFile</span>:</span> <span class="keyword">virtual</span> <span class="keyword">public</span> File &#123; <span class="comment">// ... &#125;;</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">OutputFile</span>:</span> <span class="keyword">virtual</span> <span class="keyword">public</span> File &#123; <span class="comment">// ... &#125;;</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">IOFile</span>:</span> <span class="keyword">public</span> InputFile, <span class="keyword">public</span> OutputFile &#123; <span class="comment">// ... &#125;;</span></div></pre></td></tr></table></figure>
<ul>
<li><strong>the initialization of virtual base class is granted to the most derived class</strong>.</li>
<li>virtual inheritance will increase the cost of size, speed, and initialization(assignment).<br>the virtual base classes with no data will be best-pratical situation.</li>
<li>MI has some usages: one is the combination of “public inheritance inherits some interface class” and “private inheritance inherits some helper class for implementation”.<br><code>class CPerson: public IPerson, private PersonInfo;</code></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Doing </category>
            
            <category> CPP </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Implementations, Notes(5), Effective C++]]></title>
      <url>/2017/09/05/effective-cpp-implementations/</url>
      <content type="html"><![CDATA[<h2 id="Implementations"><a href="#Implementations" class="headerlink" title="Implementations"></a>Implementations</h2><p>(I read a Chinese version of the book, any translation problem plz point out. </p>
<a id="more"></a>
<h3 id="Postpone-variable-definitions-as-long-as-possible-until-initial-values-can-be-provided"><a href="#Postpone-variable-definitions-as-long-as-possible-until-initial-values-can-be-provided" class="headerlink" title="Postpone variable definitions as long as possible until initial values can be provided"></a>Postpone variable definitions as long as possible until initial values can be provided</h3><h3 id="Minimize-casting"><a href="#Minimize-casting" class="headerlink" title="Minimize casting"></a>Minimize casting</h3><ul>
<li>old-style casts<ul>
<li>C style cast: <code>(T)expression</code></li>
<li>function style cast: <code>T(expression)</code></li>
</ul>
</li>
<li>CPP style casts<ul>
<li>const_cast: cast away the constness.</li>
<li>dynamic_cast: safe downcasting, to decide which type a object belongs to in the inheritance hierarchy.</li>
<li>reinterpret_cast: low-level cast.</li>
<li>static_cast: force implicit conversions.</li>
</ul>
</li>
</ul>
<p><strong>tips:</strong></p>
<ul>
<li>dynamic_casts maybe implement based on the comparision on string names of classes.</li>
<li>try to hide the cast in a function, then provide to customers, once it is a must.</li>
<li>do use the CPP style cast.</li>
</ul>
<h3 id="Avoid-returning-“handles”-to-object-internals"><a href="#Avoid-returning-“handles”-to-object-internals" class="headerlink" title="Avoid returning “handles” to object internals"></a>Avoid returning “handles” to object internals</h3><p><strong>handles</strong>: references, pointers, iterators<br>try to use a copy</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GUIObject</span> &#123;</span> ... &#125;;</div><div class="line"><span class="function"><span class="keyword">const</span> Rectangle <span class="title">boundingBox</span><span class="params">(<span class="keyword">const</span> GUIObject&amp; obj)</span></span>;</div><div class="line"></div><div class="line">GUIobject* pgo;</div><div class="line"></div><div class="line"><span class="comment">// The temporary Point is destructed when the statement is over, </span></div><div class="line"><span class="comment">// and the pUpperLeft is dangling.</span></div><div class="line"><span class="keyword">const</span> Point* pUpperLeft = &amp;(boundingBox(*pgo).upperLeft());</div></pre></td></tr></table></figure>
<h3 id="Strive-for-exception-safe-code"><a href="#Strive-for-exception-safe-code" class="headerlink" title="Strive for exception-safe code"></a>Strive for exception-safe code</h3><h4 id="when-exception-throws-exception-safe-code-will-guarantee"><a href="#when-exception-throws-exception-safe-code-will-guarantee" class="headerlink" title="when exception throws, exception-safe code will guarantee:"></a>when exception throws, exception-safe code will guarantee:</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrettyMenu</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">changeBackground</span><span class="params">(<span class="built_in">std</span>::istream&amp; imgSrc)</span></span>;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    Mutex mutex;</div><div class="line">    Image* bgImage;</div><div class="line">    <span class="keyword">int</span> imageChanges;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">void</span> PrettyMenu::changeBackground(<span class="built_in">std</span>::istream&amp; imgSrc) &#123;</div><div class="line">    lock(&amp;mutex);</div><div class="line">    <span class="keyword">delete</span> bgImage;</div><div class="line">    ++imageChanges;</div><div class="line">    bgImage = newImage(imgSrc);</div><div class="line">    unlock(&amp;mutex);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>no resources leak.<br>if <code>new Image(imgSrc)</code> throws, <code>mutex</code> will never release.</li>
<li>no data break.<br>if <code>new Image(imgSrc)</code> throw, <code>bgImg</code> will point to a deleted object.<br>and the behavior of <code>imageChanges</code> will be weird, which it changed or not. </li>
</ul>
<h4 id="exception-safe-functions-provide-3-guarantees"><a href="#exception-safe-functions-provide-3-guarantees" class="headerlink" title="exception-safe functions provide 3 guarantees:"></a>exception-safe functions provide 3 guarantees:</h4><ul>
<li>basic promise.<br>when exception throws, everything is in a valid state, but the users can’t predict it.</li>
<li>strong guarantee.<br>when exception throws, the program remains unchanged.</li>
<li>nothrow guarantee<br><code>int doSomething() throw();</code><br>though the function throws nothing, it is not guaranteed. aka., if throws, it will be a fatal error, <code>unexpected</code> will be called (Google <code>set_unexpected</code> for detail).<br>all the properties of the functions is decided by implementation, not the declaration.</li>
</ul>
<h4 id="copy-and-swap"><a href="#copy-and-swap" class="headerlink" title="copy and swap"></a>copy and swap</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// pimpl idiom</span></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PMImpl</span> &#123;</span></div><div class="line">    <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;Image&gt; bgImage;</div><div class="line">    <span class="keyword">int</span> imageChanges;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrettyMenu</span> &#123;</span></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    Mutex mutex;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;PMImpl&gt; pImpl;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> PrettyMenu::changeBackground(<span class="built_in">std</span>::istream&amp; imgSrc) &#123;</div><div class="line">    <span class="keyword">using</span> <span class="built_in">std</span>::swap;</div><div class="line">    <span class="function">Lock <span class="title">m1</span><span class="params">(&amp;mutex)</span></span>; <span class="comment">// Use resource-managing class to manipulate mutex</span></div><div class="line">    <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;PMImpl&gt; pNew(<span class="keyword">new</span> PMImpl(*pImpl)); <span class="comment">// Copy</span></div><div class="line">    pNew-&gt;bgImage.reset(<span class="keyword">new</span> Image(imgSrc)); <span class="comment">// Update the copy</span></div><div class="line">    swap(pImpl, pNew); <span class="comment">// Swap</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>even if strong guarantee can be implemented by <code>copy and swap</code>, but it is not implementable to all the functions. <strong>and watch the cost of copy</strong>.</li>
<li>exception-safety is decided by the weakest one of all the functions.</li>
<li>once you have no choice but to set no any guarantee (when you call <code>the old code</code>), <strong>document it</strong>. </li>
</ul>
<h3 id="Understand-the-ins-and-outs-of-inlining"><a href="#Understand-the-ins-and-outs-of-inlining" class="headerlink" title="Understand the ins and outs of inlining"></a>Understand the ins and outs of inlining</h3><ul>
<li><code>inline</code> just applys for inling to compiler, not forcing to do so.</li>
<li><code>inline</code> the minimal, frequently called functions.</li>
<li><code>inline</code> functions usually put in headers. because inlining happens in compiling period, compiler needs to know what they look like.</li>
<li>the functions calls virtual functions will be never inlined, because virtual functions can only be known in run-time.</li>
<li>think over before inling construtors and destrutors. maybe there are complicated codes generated by compilers.</li>
</ul>
<h3 id="Minimize-compilation-dependencies-between-files"><a href="#Minimize-compilation-dependencies-between-files" class="headerlink" title="Minimize compilation dependencies between files"></a>Minimize compilation dependencies between files</h3><p>pimpl idiom -&gt; handle classes</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Person.h</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"datefwd.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"addressfwd.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    Person(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; name, <span class="keyword">const</span> Date&amp; birthday, <span class="keyword">const</span> Address&amp; addr);</div><div class="line">    <span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">name</span><span class="params">()</span> <span class="keyword">const</span></span>;</div><div class="line">    <span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">birthDate</span><span class="params">()</span> <span class="keyword">const</span></span>;</div><div class="line">    <span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">address</span><span class="params">()</span> <span class="keyword">const</span></span>;</div><div class="line"></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;PersonImpl&gt; pImpl;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// Person.cpp</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Person.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"PersonImpl.h"</span></span></div><div class="line"></div><div class="line">Person::Person(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; name, <span class="keyword">const</span> Date&amp; birthday, <span class="keyword">const</span> Address&amp; addr)</div><div class="line">                : pImpl(<span class="keyword">new</span> PersonImpl(name, birthday, addr)) &#123;&#125;</div><div class="line"></div><div class="line"><span class="built_in">std</span>::<span class="built_in">string</span> Person::name() <span class="keyword">const</span> &#123;</div><div class="line">    <span class="keyword">return</span> pImpl-&gt;name(); </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>abstract base class -&gt; interface class<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="keyword">virtual</span> ~Person();</div><div class="line">    <span class="keyword">virtual</span> <span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">name</span><span class="params">()</span> <span class="keyword">const</span> </span>= <span class="number">0</span>;</div><div class="line">    <span class="keyword">virtual</span> <span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">birthDate</span><span class="params">()</span> <span class="keyword">const</span> </span>= <span class="number">0</span>;</div><div class="line">    <span class="keyword">virtual</span> <span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">address</span><span class="params">()</span> <span class="keyword">const</span> </span>= <span class="number">0</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">static</span> <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;Person&gt; create(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; name, </div><div class="line">                                            <span class="keyword">const</span> Date&amp; birthday, <span class="keyword">const</span> Address&amp; addr);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">RealPerson</span>:</span> <span class="keyword">public</span> Person &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    RealPerson(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; name, <span class="keyword">const</span> Date&amp; birthday, <span class="keyword">const</span> Address&amp; addr)</div><div class="line">                : name(name), birthday(birthday), addr(addr) &#123;&#125;</div><div class="line">    <span class="keyword">virtual</span> ~RealPerson() &#123;&#125;</div><div class="line">    <span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">name</span><span class="params">()</span> <span class="keyword">const</span></span>;</div><div class="line">    <span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">birthDate</span><span class="params">()</span> <span class="keyword">const</span></span>;</div><div class="line">    <span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">address</span><span class="params">()</span> <span class="keyword">const</span></span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;Person&gt; create(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; name, </div><div class="line">                                <span class="keyword">const</span> Date&amp; birthday, <span class="keyword">const</span> Address&amp; addr) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;Person&gt;(<span class="keyword">new</span> RealPerson(name, birthday, addr)); </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>don’t use objects, if object references or object pointers achieves.</li>
<li>replace class definitions with class declarations as much as possible.</li>
<li>provide declaration and definition with different headers.</li>
</ul>
<p><strong>use handle classes and interface classes to minimize changes for users during the develpment of program.<br>but replace with concrete classes, when the great difference in speed or size compared to coupling between classes.</strong></p>
]]></content>
      
        <categories>
            
            <category> Doing </category>
            
            <category> CPP </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Designs and Declarations, Notes(4), Effective C++]]></title>
      <url>/2017/09/04/effective-cpp-designs-and-declarations/</url>
      <content type="html"><![CDATA[<h2 id="Designs-and-Declarations"><a href="#Designs-and-Declarations" class="headerlink" title="Designs and Declarations"></a>Designs and Declarations</h2><p>(I read a Chinese version of the book, any translation problem plz point out. </p>
<a id="more"></a>
<h3 id="Make-interfaces-easy-to-use-correctly-and-hard-to-use-incorrectly"><a href="#Make-interfaces-easy-to-use-correctly-and-hard-to-use-incorrectly" class="headerlink" title="Make interfaces easy to use correctly and hard to use incorrectly"></a>Make interfaces easy to use correctly and hard to use incorrectly</h3><ul>
<li>introduce a new type.<br><code>Data d(Month(9), Day(4), Year(2017));</code></li>
<li><p>restrict some invalid operations on types.<br>add <code>const</code> is a useful way. </p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(a * b = c) <span class="comment">// ...</span></div><div class="line"></div><div class="line"><span class="comment">// It will avoid the problem above.</span></div><div class="line"><span class="keyword">const</span> Type <span class="keyword">operator</span>*(<span class="keyword">const</span> Type&amp; a, <span class="keyword">const</span> Type&amp; b);</div></pre></td></tr></table></figure>
</li>
<li><p>predefine all the valid values, if we want type safety.</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Month</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">static</span> Month <span class="title">Jan</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> Month(<span class="number">1</span>); &#125;</div><div class="line">    <span class="function"><span class="keyword">static</span> Month <span class="title">Feb</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> Month(<span class="number">2</span>); &#125;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">    <span class="function"><span class="keyword">static</span> Month <span class="title">Dec</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> Month(<span class="number">12</span>); &#125;</div><div class="line">    <span class="comment">// ...</span></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">Month</span><span class="params">(<span class="keyword">int</span> m)</span></span>;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
<li><p>make interfaces be compatible with built-in types, aka. providing the interfaces of consistent behaviors.</p>
</li>
<li>force users to use smart pointers. e.g., factory function returns a smart pointer.<br><code>std::shared_ptr&lt;Investment&gt; createInvestment();</code></li>
</ul>
<h3 id="Treat-class-design-as-type-design"><a href="#Treat-class-design-as-type-design" class="headerlink" title="Treat class design as type design"></a>Treat class design as type design</h3><p>Questions to think:</p>
<ul>
<li>create and destroy</li>
<li>initialize and assign</li>
<li>pass by value -&gt; copy constructor</li>
<li>valid values -&gt; invariants(约束) </li>
<li>inheritance</li>
<li>conversion</li>
<li>functions and operators</li>
<li>access specifiers</li>
<li>undeclared interface ???</li>
<li>generalization -&gt; templates</li>
<li>really need a new type? maybe some non-member functions or templates achieve the goal.</li>
</ul>
<h3 id="Prefer-pass-by-reference-to-const-to-pass-by-value"><a href="#Prefer-pass-by-reference-to-const-to-pass-by-value" class="headerlink" title="Prefer pass-by-reference-to-const to pass-by-value"></a>Prefer pass-by-reference-to-const to pass-by-value</h3><ul>
<li>avoid any construction and destructions, more efficient.</li>
<li>avoid the slicing problem brought by derived class upcast to base class.</li>
<li>pass-by-value is proper for built-in types, e.g., STL iterators and functors.</li>
</ul>
<h3 id="Don’t-try-to-return-a-reference-when-you-must-return-an-object"><a href="#Don’t-try-to-return-a-reference-when-you-must-return-an-object" class="headerlink" title="Don’t try to return a reference when you must return an object"></a>Don’t try to return a reference when you must return an object</h3><p>try the one that behave correctly, and throw the responsibility to the compilers.</p>
<h3 id="Prefer-non-member-non-friend-functions-to-member-functions"><a href="#Prefer-non-member-non-friend-functions-to-member-functions" class="headerlink" title="Prefer non-member, non-friend functions to member functions"></a>Prefer non-member, non-friend functions to member functions</h3><p>a natural way, let tool function be a non-member function and put inside the same namespace where the classes it operates is.<br>then, for future expansion of more tool functions, sperate them in new headers but in the same namespaces.<br><strong>increase encapsulation, packaging flexibility, and function expansibility.</strong></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// webbrowser.h</span></div><div class="line"><span class="comment">// Main functionalities of webbrowser.</span></div><div class="line"><span class="keyword">namespace</span> WebBrowserStuff &#123;</div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">WebBrowser</span> &#123;</span></div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        <span class="comment">// ...</span></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">clearCache</span><span class="params">()</span></span>;</div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">clearHistory</span><span class="params">()</span></span>;</div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">removeCookies</span><span class="params">()</span></span>;</div><div class="line">        <span class="comment">// ...</span></div><div class="line">    &#125;;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clearBrowser</span><span class="params">(WebBrowser&amp; wb)</span> </span>&#123;</div><div class="line">        wb.clearCache();</div><div class="line">        wb.clearHistory();</div><div class="line">        wb.removeCookies();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// webbrowser_bookmarks.h</span></div><div class="line"><span class="keyword">namespace</span> WebBrowserStuff &#123;</div><div class="line">    <span class="comment">// Some tool functions related to bookmarks. </span></div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// webbrowser_cookies.h</span></div><div class="line"><span class="keyword">namespace</span> WebBrowserStuff &#123;</div><div class="line">    <span class="comment">// Some tool functions related to cookies.</span></div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Declare-non-member-functions-when-type-conversions-should-apply-to-all-parameters"><a href="#Declare-non-member-functions-when-type-conversions-should-apply-to-all-parameters" class="headerlink" title="Declare non-member functions when type conversions should apply to all parameters"></a>Declare non-member functions when type conversions should apply to all parameters</h3><ul>
<li>The parameter can be a participant of implicit type conversion, only when the parameter is in parameter list.</li>
<li>friend should be avoided when it can be.<br><strong>Observation</strong>: non-member functions is the opposite of member ones, not the friend functions.</li>
</ul>
<h3 id="Consider-support-for-a-non-throwing-swap"><a href="#Consider-support-for-a-non-throwing-swap" class="headerlink" title="Consider support for a non-throwing swap"></a>Consider support for a non-throwing swap</h3><p>for pointer to implementation (pimpl), more efficient way is to do:</p>
<ul>
<li>provide a public member <code>swap</code> function, this function should never throw, because it is the insurance for exception safety.<br>moreover, the default swap is used for built-in types and the built-in types never throws, we should keep consistent.</li>
<li>provide a non-member <code>swap</code> which calls the member <code>swap</code> in the namespace where your class or template is. </li>
<li><p>provide a <code>std::swap</code> total template specilization, if you’re trying to design a class not a class template.</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Widget</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(Widget&amp; other)</span> </span>&#123;</div><div class="line">        <span class="keyword">using</span> <span class="built_in">std</span>::swap;</div><div class="line">        swap(pImpl, other.pImpl);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">namespace</span> <span class="built_in">std</span> &#123;</div><div class="line">    <span class="keyword">template</span>&lt;&gt;                                <span class="comment">// Total template specilization</span></div><div class="line">    <span class="keyword">void</span> swap&lt;Widget&gt;(Widget&amp; a, Widget&amp; b) &#123; </div><div class="line">        a.swap(b); </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>we are not allowed to change anything in namespace <code>std</code>, but we can create specialization.<br>it is a UB, if you insist on doing so.</p>
</li>
<li><p>CPP points out, we can only paritially specialized class templates, function templates is not allowed. so provide non-member <code>swap</code> for function templates.</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">namespace</span> WidgetStuff &#123;</div><div class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Widget</span> &#123;</span> ... &#125;;</div><div class="line">    </div><div class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;                    <span class="comment">// Non-member function</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(Widget&lt;T&gt;&amp; a, Widget&lt;T&gt;&amp; b)</span> </span>&#123;</div><div class="line">        a.swap(b); </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>when calling <code>swap</code>, please ensure a <code>using std::swap</code>, then call <code>swap</code> directly without any namespace specifier.<br>let the compiler to find a proper one.<br><strong>CPP name lookup rules (argument-dependent lookup or Koenig lookup rule):</strong><br>try to find a specific <code>swap</code> of <code>T</code> in global scope or the namespace where <code>T</code> is, then the generic one (<code>std::swap</code>).</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">doSomething</span><span class="params">(T&amp; obj1, T&amp; obj2)</span> </span>&#123;</div><div class="line">    <span class="keyword">using</span> <span class="built_in">std</span>::swap;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">    swap(obj1, obj2);</div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Doing </category>
            
            <category> CPP </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Resource Management, Notes(3), Effective C++]]></title>
      <url>/2017/08/31/effective-cpp-resource-management/</url>
      <content type="html"><![CDATA[<h2 id="Resource-Management"><a href="#Resource-Management" class="headerlink" title="Resource Management"></a>Resource Management</h2><p>(I read a Chinese version of the book, any translation problem plz point out. </p>
<a id="more"></a>
<h3 id="Use-objects-to-manage-resources"><a href="#Use-objects-to-manage-resources" class="headerlink" title="Use objects to manage resources"></a>Use objects to manage resources</h3><ul>
<li><p>Priciples</p>
<ul>
<li>put into managing object when acquired resources<br>(Resource Acquistion Is Initialization; RAII).</li>
<li>managing object uses destructor to ensure the resources is released.</li>
</ul>
</li>
<li><p>Methods</p>
<ul>
<li>auto_ptr<br>once be assigned, the right side one is null.<br>so the feature of abnormal assignment operator makes that it can’t be put into containers.</li>
<li>referencing-counting smart pointer (RCSP)<br>it can’t break cycles of references.<br>it seems they’re in the “used” status when 2 unused objects point to each other. </li>
</ul>
</li>
</ul>
<h3 id="Think-carefully-about-copying-behavior-in-resource-managing-classes"><a href="#Think-carefully-about-copying-behavior-in-resource-managing-classes" class="headerlink" title="Think carefully about copying behavior in resource-managing classes"></a>Think carefully about copying behavior in resource-managing classes</h3><ul>
<li>create a class to do this.</li>
<li>no copying. -&gt; <code>=delete or inherit from uncopyable</code></li>
<li><p>reference-count in the low-level resources (shared_ptr).</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lock</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    explicit Lock(Mutex* pm):</div><div class="line">        mutexPtr(pm, unlock) &#123;</div><div class="line">            lock(mutexPtr.get()); </div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;Mutex&gt; mutexPtr;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
<li><p>deep copying.<br>copy wrapped resources when copying the resource-managing object.</p>
</li>
<li>transfer the ownership of low-level resources (auto_pr).</li>
</ul>
<h3 id="Provide-access-to-raw-resources-in-resource-managing-classes"><a href="#Provide-access-to-raw-resources-in-resource-managing-classes" class="headerlink" title="Provide access to raw resources in resource-managing classes"></a>Provide access to raw resources in resource-managing classes</h3><p>Sometimes we need to provide compatibility to C APIs.</p>
<ul>
<li><p>provide a <code>get()</code> to access the raw pointer, safer.</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// C APIs.</span></div><div class="line"><span class="function">FontHandle <span class="title">getFont</span><span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">releaseFont</span><span class="params">(FontHandle fh)</span></span>;</div><div class="line"></div><div class="line">Class Font &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    explicit Font(FontHandle fh): f(fh) &#123;&#125;</div><div class="line">    ~Font() &#123; releaseFont(f); &#125;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">    <span class="function">FontHandle <span class="title">get</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> f; &#125; </div><div class="line">    <span class="comment">// ...</span></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    FontHandle f;    <span class="comment">// Raw font resources</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
<li><p>provide implicit conversion function may offer convenience to customers. but the opportunities of unexpected error is increased.</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Font</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="comment">// ...</span></div><div class="line">    <span class="function"><span class="keyword">operator</span> <span class="title">FontHandle</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> f; &#125; </div><div class="line">    <span class="comment">// ..</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">Font f1(getFont());</div><div class="line"><span class="comment">// It is intended to copy a Font object</span></div><div class="line"><span class="comment">// but f1 is copied after it is implicitly conversed to FontHandle</span></div><div class="line">FontHandle f2 = f1;</div></pre></td></tr></table></figure>
</li>
<li><p>no contradiction with encapsulation, just to ensure resource releasing.</p>
</li>
</ul>
<h3 id="Use-the-same-form-in-corresponding-uses-of-new-and-delete"><a href="#Use-the-same-form-in-corresponding-uses-of-new-and-delete" class="headerlink" title="Use the same form in corresponding uses of new and delete"></a>Use the same form in corresponding uses of new and delete</h3><p><code>new-&gt;delete</code><br><code>new[]-&gt;delete[]</code></p>
<ul>
<li>Tips:<br>use containers to reduce the risk misusing <code>delete</code> when releasing memory of typedefined array.<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="built_in">std</span>::<span class="built_in">string</span> stringArray[<span class="number">4</span>];</div><div class="line"><span class="built_in">std</span>::<span class="built_in">string</span>* pal = <span class="keyword">new</span> stringArray;</div><div class="line"><span class="keyword">delete</span> pal;   <span class="comment">// Undefined Behavior</span></div><div class="line"><span class="keyword">delete</span> pal[]; <span class="comment">// Good</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Stored-newed-objects-in-smart-pointers-in-standalone-statements"><a href="#Stored-newed-objects-in-smart-pointers-in-standalone-statements" class="headerlink" title="Stored newed objects in smart pointers in standalone statements"></a>Stored newed objects in smart pointers in standalone statements</h3><ul>
<li><p>look at the code below:</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">priority</span><span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">processWidget</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;Widget&gt; pw, <span class="keyword">int</span> priority)</span></span>;</div><div class="line"></div><div class="line">processWidget(<span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;Widget&gt;(<span class="keyword">new</span> Widget), priority());</div></pre></td></tr></table></figure>
</li>
<li><p>it is free for the compiler to reorder the operations inside one statement, what if in this order:<br><code>new Widget -&gt; priority() -&gt; shared_ptr</code></p>
</li>
<li>once <code>priority()</code> throws, the newed pointer will be lost and memory leak may happen.</li>
<li>the compiler can’t reorder the operations between statements, so<br>the code below avoids the risk above.<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;Widget&gt; pw(<span class="keyword">new</span> Widget);</div><div class="line">processWidget(pw, priority());</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Doing </category>
            
            <category> CPP </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Notes, Hive Tutorial]]></title>
      <url>/2017/08/25/hive-tut-notes/</url>
      <content type="html"><![CDATA[<p><del>Last Modified: 2017-08-28 16:49:00</del></p>
<h3 id="Acknowledge"><a href="#Acknowledge" class="headerlink" title="Acknowledge"></a>Acknowledge</h3><ul>
<li><p>What is Hive?<br>Hive is a data warehouse infrastructure tool to process structured data in Hadoop. It resides on top of Hadoop to summarize Big Data, and makes querying and analyzing easy.  </p>
</li>
<li><p>Official Hive Tutorial<br><a href="https://cwiki.apache.org/confluence/display/Hive/Tutorial" target="_blank" rel="external">Tutorial</a></p>
</li>
</ul>
<a id="more"></a>
<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p><a href="https://www.tutorialspoint.com/hive/hive_introduction.htm" target="_blank" rel="external">Hive - Introduction</a></p>
<h4 id="Big-Data"><a href="#Big-Data" class="headerlink" title="Big Data"></a>Big Data</h4><ul>
<li>Hadoop<ul>
<li>MapReduce</li>
<li>HDFS</li>
</ul>
</li>
<li><p>Tools</p>
<ul>
<li>Sqoop</li>
<li>Pig</li>
<li>Hive</li>
</ul>
</li>
<li><p>Hive<br><code>see the link above for details</code></p>
</li>
</ul>
<h4 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h4><p><code>Syntax is omitted, see the reference for details</code></p>
<ul>
<li>Views And Indexes<br><a href="https://stackoverflow.com/questions/24197856/what-is-difference-between-index-and-view-in-mysql" target="_blank" rel="external">Difference between view and index</a></li>
<li><p>Select Joins<br><a href="http://www.diffen.com/difference/Inner_Join_vs_Outer_Join" target="_blank" rel="external">Inner Join vs Outer Join</a><br><a href="https://stackoverflow.com/questions/8696383/difference-between-natural-join-and-inner-join" target="_blank" rel="external">Inner Join vs Natural Join</a>, <code>Natural Join</code> is just short syntax for a <strong>specific</strong> <code>Inner Join</code></p>
<ul>
<li>JOIN (same as INNER JOIN)<br>JOIN clause is used to combine and retrieve the records from multiple tables.<br>(It only shows the matched result)</li>
<li>LEFT OUTER JOIN<br>LEFT OUTER JOIN returns all the rows from the left table, even if there are no matches in the right table. This means, if the ON clause matches 0 (zero) records in the right table, the JOIN still returns a row in the result, but with NULL in each column from the right table.</li>
<li>RIGHT OUTER JOIN<br>RIGHT OUTER JOIN returns all the rows from the right table, even if there are no matches in the left table. If the ON clause matches 0 (zero) records in the left table, the JOIN still returns a row in the result, but with NULL in each column from the left table.</li>
<li>FULL OUTER JOIN<br>FULL OUTER JOIN <code>combines</code> the records of both <code>the left and the right outer tables</code> that fulfil the JOIN condition. The joined table contains either all the records from both the tables, or fills in NULL values for missing matches on either side.</li>
</ul>
</li>
</ul>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://www.tutorialspoint.com/hive/index.htm" target="_blank" rel="external">Learn Hive</a><br><a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual" target="_blank" rel="external">Hive Language Manual</a></p>
]]></content>
      
        <categories>
            
            <category> Doing </category>
            
            <category> Hive </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Notes, Most Useful Shell Command]]></title>
      <url>/2017/08/25/most-useful-shell-commands/</url>
      <content type="html"><![CDATA[<p>Last Modified: 2017-08-25 10:57:10</p>
<p>TODO:</p>
<ul>
<li>grep</li>
<li>expect</li>
<li>awk</li>
<li>sed</li>
<li>xargs</li>
</ul>
<a id="more"></a>
<p><a href="http://xstarcd.github.io/wiki/shell/expect_handbook.html" target="_blank" rel="external">expect</a></p>
]]></content>
      
        <categories>
            
            <category> Doing </category>
            
            <category> Shell </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Solutions, Leetcode Shell Problems]]></title>
      <url>/2017/08/07/leetcode-shell-problems-solution/</url>
      <content type="html"><![CDATA[<p><del>Last Modified: 2017-08-25 10:53:10</del></p>
<ul>
<li>193. Valid Phone Numbers</li>
<li>195. Tenth Line</li>
<li>192. Word Frequency</li>
<li>194. Tranpose File</li>
</ul>
<a id="more"></a>
<h3 id="193-Valid-Phone-Numbers"><a href="#193-Valid-Phone-Numbers" class="headerlink" title="193. Valid Phone Numbers"></a>193. Valid Phone Numbers</h3><p>You may assume that a valid phone number must appear in one of the following two formats: <code>(xxx) xxx-xxxx or xxx-xxx-xxxx. (x means a digit)</code><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> Read from the file file.txt and output all valid phone numbers to stdout.</div><div class="line">grep -E '^(([0-9]&#123;3&#125;-[0-9]&#123;3&#125;-[0-9]&#123;4&#125;)|(\([0-9]&#123;3&#125;\) [0-9]&#123;3&#125;-[0-9]&#123;4&#125;))$' file.txt</div></pre></td></tr></table></figure></p>
<h3 id="195-Tenth-Line"><a href="#195-Tenth-Line" class="headerlink" title="195. Tenth Line"></a>195. Tenth Line</h3><p>How would you print just the 10th line of a file?<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> Read from the file file.txt and output the tenth line to stdout.</div><div class="line">line_num=0</div><div class="line">while read line &amp;&amp; ((line_num &lt; 10)); do</div><div class="line">    line_num=$line_num+1</div><div class="line">    if ((line_num == 10)); then</div><div class="line">        echo $line</div><div class="line">        break</div><div class="line">    fi</div><div class="line">done &lt; file.txt</div></pre></td></tr></table></figure></p>
<h3 id="192-Word-Frequency"><a href="#192-Word-Frequency" class="headerlink" title="192. Word Frequency"></a>192. Word Frequency</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> Read from the file words.txt and output the word frequency list to stdout.</div><div class="line">declare -A freq</div><div class="line">while read word; do</div><div class="line">    ((++freq[$word]))</div><div class="line">done &lt; &lt;(tr -s " " "\n" &lt; words.txt)</div><div class="line"><span class="meta">#</span> echo $&#123;words[*]&#125;</div><div class="line">for word in $&#123;!freq[*]&#125;; do</div><div class="line">    echo $word $&#123;freq[$word]&#125;</div><div class="line">done | sort -k 2nbr</div></pre></td></tr></table></figure>
<p><strong>it seems that there some problems with shell array…</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">➜  ~ a+=1</div><div class="line">➜  ~ a+=1</div><div class="line">➜  ~ echo $&#123;a[*]&#125;</div><div class="line">11</div><div class="line">➜  ~ for i in $&#123;a[*]&#125;; do</div><div class="line"><span class="meta">for&gt;</span> echo $i</div><div class="line"><span class="meta">for&gt;</span> done</div><div class="line">11</div><div class="line">➜  ~ for i in $&#123;a[@]&#125;; do</div><div class="line"><span class="meta">for&gt;</span> echo $i</div><div class="line"><span class="meta">for&gt;</span> done</div><div class="line">11</div><div class="line">➜  ~ for i in "$&#123;a[@]&#125;"; do</div><div class="line"><span class="meta">for&gt;</span> echo $i</div><div class="line"><span class="meta">for&gt;</span> done</div><div class="line">11</div><div class="line">➜  ~ for i in "$&#123;a[*]&#125;"; do</div><div class="line"><span class="meta">for&gt;</span> echo $i</div><div class="line"><span class="meta">for&gt;</span> done</div><div class="line">11</div><div class="line">➜  ~ echo $&#123;a[1]&#125;</div><div class="line">1</div><div class="line">➜  ~ echo $&#123;a[2]&#125;</div><div class="line">1</div><div class="line">➜  ~ echo 'num of elemets='$&#123;#a[*]&#125;</div><div class="line">num of elemets=2</div><div class="line"></div><div class="line"><span class="meta">#</span> it looks rather werid... so avoid using it...</div></pre></td></tr></table></figure></p>
<h3 id="194-Tranpose-File"><a href="#194-Tranpose-File" class="headerlink" title="194. Tranpose File"></a>194. Tranpose File</h3><p>Given a text file <code>file.txt</code>, transpose its content.<br>You may assume that each row has the same number of columns and each field is separated by the <code>&#39; &#39;</code> character.<br>For example, if <code>file.txt</code> has the following content:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">name age</div><div class="line">alice 21</div><div class="line">ryan 30</div><div class="line"></div><div class="line"><span class="comment"># Output the following:</span></div><div class="line">name alice ryan</div><div class="line">age 21 30</div></pre></td></tr></table></figure></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Read from the file file.txt and print its transposed content to stdout.</span></div><div class="line">awk <span class="string">'</span></div><div class="line"><span class="string">&#123;</span></div><div class="line"><span class="string">    for(i = 1; i &lt;= NF; ++i) &#123;</span></div><div class="line"><span class="string">        if(1 == NR) &#123;</span></div><div class="line"><span class="string">            s[i] = $i;</span></div><div class="line"><span class="string">        &#125;</span></div><div class="line"><span class="string">        else &#123;</span></div><div class="line"><span class="string">            s[i] = s[i] " " $i </span></div><div class="line"><span class="string">        &#125;</span></div><div class="line"><span class="string">    &#125;</span></div><div class="line"><span class="string">&#125;</span></div><div class="line"><span class="string">END &#123;</span></div><div class="line"><span class="string">    for(i = 1; s[i] != ""; ++i) &#123;</span></div><div class="line"><span class="string">        print s[i];</span></div><div class="line"><span class="string">    &#125;</span></div><div class="line"><span class="string">&#125;'</span> file.txt</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> Doing </category>
            
            <category> Shell </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Notes, Effective Go]]></title>
      <url>/2017/08/04/effective-go-notes/</url>
      <content type="html"><![CDATA[<p><del>Last Modified: 2017-08-23 11:46:10</del></p>
<p><del>Hard to say, I finished Go, for about 20 days (except busy for 1 week and training for 1 week).</del></p>
<p><del>Such a long time, 1 week to learn a new language, having known a little about concurrency.</del></p>
<p><del>Not so bad.</del></p>
<h3 id="Acknowledge"><a href="#Acknowledge" class="headerlink" title="Acknowledge"></a>Acknowledge</h3><p>Go is a new language. Although it borrows ideas from existing languages, it has unusual properties that make effective Go programs different in character from programs written in its relatives.<br>The notes below was written from the view of <strong>a CPP programmer</strong>.</p>
<ul>
<li>and a hello world<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	fmt.Println(<span class="string">"Hello, World"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<a id="more"></a>
<h3 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h3><h4 id="Basics"><a href="#Basics" class="headerlink" title="Basics"></a>Basics</h4><ul>
<li><p>function</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">swap</span><span class="params">(x, y <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">string</span>, <span class="keyword">string</span>)</span></span> &#123;</div><div class="line">	<span class="keyword">return</span> y, x</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">split</span><span class="params">(sum <span class="keyword">int</span>)</span> <span class="params">(x, y <span class="keyword">int</span>)</span></span> &#123;</div><div class="line">	x = sum * <span class="number">4</span> / <span class="number">9</span></div><div class="line">	y = sum - x</div><div class="line">	<span class="keyword">return</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>variable</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> c, python, java <span class="keyword">bool</span></div><div class="line"><span class="keyword">var</span> i, j <span class="keyword">int</span> = <span class="number">1</span>, <span class="number">2</span></div><div class="line"><span class="keyword">var</span> c, python, java = <span class="literal">true</span>, <span class="literal">false</span>, <span class="string">"no!"</span></div><div class="line"></div><div class="line">k := <span class="number">3</span> <span class="comment">// only can be used inside function</span></div></pre></td></tr></table></figure>
</li>
<li><p>basic types</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">bool</span></div><div class="line"></div><div class="line"><span class="keyword">string</span></div><div class="line"></div><div class="line"><span class="keyword">int</span>  <span class="keyword">int8</span>  <span class="keyword">int16</span>  <span class="keyword">int32</span>  <span class="keyword">int64</span></div><div class="line"><span class="keyword">uint</span> <span class="keyword">uint8</span> <span class="keyword">uint16</span> <span class="keyword">uint32</span> <span class="keyword">uint64</span> <span class="keyword">uintptr</span></div><div class="line"></div><div class="line"><span class="keyword">byte</span> <span class="comment">// alias for uint8</span></div><div class="line"></div><div class="line"><span class="keyword">rune</span> <span class="comment">// alias for int32</span></div><div class="line">     <span class="comment">// represents a Unicode code point</span></div><div class="line"></div><div class="line"><span class="keyword">float32</span> <span class="keyword">float64</span></div><div class="line"></div><div class="line"><span class="keyword">complex64</span> <span class="keyword">complex128</span></div><div class="line"></div><div class="line"><span class="comment">// The int, uint, and uintptr types are usually 32 bits wide on 32-bit systems and 64 bits wide on 64-bit systems.</span></div></pre></td></tr></table></figure>
</li>
<li><p>var blocks</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> (</div><div class="line">	ToBe   <span class="keyword">bool</span>       = <span class="literal">false</span></div><div class="line">	MaxInt <span class="keyword">uint64</span>     = <span class="number">1</span>&lt;&lt;<span class="number">64</span> - <span class="number">1</span></div><div class="line">	z      <span class="keyword">complex128</span> = cmplx.Sqrt(<span class="number">-5</span> + <span class="number">12i</span>)</div><div class="line">)</div></pre></td></tr></table></figure>
</li>
<li><p>zero values<br>Variables declared without an explicit initial value are given their zero value.<br><code>0</code> for <code>numeric</code> types,<br><code>false</code> for the <code>boolean</code> type, and<br><code>&quot;&quot;</code> (the empty string) for <code>strings</code>.</p>
</li>
<li><p>type conversions</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> i <span class="keyword">int</span> = <span class="number">42</span></div><div class="line"><span class="keyword">var</span> f <span class="keyword">float64</span> = <span class="keyword">float64</span>(i)</div><div class="line"><span class="keyword">var</span> u <span class="keyword">uint</span> = <span class="keyword">uint</span>(f)</div><div class="line"><span class="comment">// more simply</span></div><div class="line">i := <span class="number">42</span></div><div class="line">f := <span class="keyword">float64</span>(i)</div><div class="line">u := <span class="keyword">uint</span>(f)</div></pre></td></tr></table></figure>
</li>
<li><p>type inference</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> i <span class="keyword">int</span></div><div class="line">j := i <span class="comment">// j is an int</span></div><div class="line"><span class="number">3</span></div><div class="line">i := <span class="number">42</span>           <span class="comment">// int</span></div><div class="line">f := <span class="number">3.142</span>        <span class="comment">// float64</span></div><div class="line">g := <span class="number">0.867</span> + <span class="number">0.5i</span> <span class="comment">// complex128</span></div></pre></td></tr></table></figure>
</li>
<li><p>constants</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> Pi = <span class="number">2.14</span></div><div class="line"><span class="keyword">const</span> Truth <span class="keyword">bool</span> = <span class="literal">true</span></div><div class="line"></div><div class="line"><span class="comment">// numeric constants are high-precision values.</span></div><div class="line"><span class="keyword">const</span> (</div><div class="line">	Big = <span class="number">1</span> &lt;&lt; <span class="number">100</span></div><div class="line">	Small = Big &gt;&gt; <span class="number">99</span></div><div class="line">)</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="Flow-control"><a href="#Flow-control" class="headerlink" title="Flow control"></a>Flow control</h4><ul>
<li><p>for </p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</div><div class="line">    <span class="comment">// do something</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span> ; i &lt; <span class="number">10</span>; &#123;</div><div class="line">    <span class="comment">// do something</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// C's `while` is spelled `for` in Go</span></div><div class="line">i := <span class="number">0</span></div><div class="line"><span class="keyword">for</span> i &lt; <span class="number">10</span> &#123;</div><div class="line">    <span class="comment">// do something</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// loop forever</span></div><div class="line"><span class="keyword">for</span> &#123;</div><div class="line">    <span class="comment">// do something</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>if</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> i &lt; <span class="number">10</span> &#123;</div><div class="line">    <span class="comment">// do something</span></div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="comment">// do something</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> i &lt; <span class="number">10</span> &#123;</div><div class="line">    <span class="comment">// do something</span></div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> i &lt; <span class="number">100</span> &#123;</div><div class="line">    <span class="comment">// do something</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// if with a short statement</span></div><div class="line"><span class="comment">// variables declared by the statement are only in scope until the end of the if.</span></div><div class="line"><span class="keyword">if</span> v := <span class="number">1</span>; v &lt; <span class="number">10</span> &#123;</div><div class="line">    <span class="comment">// do something</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>exercise-loops-and-functions.go</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"math"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">Sqrt</span><span class="params">(x <span class="keyword">float64</span>)</span> <span class="title">float64</span></span> &#123;</div><div class="line">	<span class="keyword">var</span> cur <span class="keyword">float64</span> = x</div><div class="line">	<span class="keyword">for</span> nxt := <span class="number">0.0</span>; math.Abs(nxt - cur) &gt; <span class="number">1e-8</span>;  &#123;</div><div class="line">		t := cur - (cur * cur - x) / (<span class="number">2</span> * cur)</div><div class="line">		nxt = cur</div><div class="line">		cur = t</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> cur</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	fmt.Println(Sqrt(<span class="number">2</span>))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>switch</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// a case body breaks automatically, unless it ends with a 'fallthrough' statement.</span></div><div class="line">fmt.Print(<span class="string">"Go runs on "</span>)</div><div class="line"><span class="keyword">switch</span> os := runtime.GOOS; os &#123;</div><div class="line"><span class="keyword">case</span> <span class="string">"darwin"</span>:</div><div class="line">	fmt.Println(<span class="string">"OS X."</span>)</div><div class="line"><span class="keyword">case</span> <span class="string">"linux"</span>:</div><div class="line">	fmt.Println(<span class="string">"Linux."</span>)</div><div class="line"><span class="keyword">default</span>:</div><div class="line">	<span class="comment">// freebsd, openbsd,</span></div><div class="line">	<span class="comment">// plan9, windows...</span></div><div class="line">	fmt.Printf(<span class="string">"%s."</span>, os)</div><div class="line">&#125;</div><div class="line">	</div><div class="line"><span class="comment">// switch with no condition</span></div><div class="line">t := time.Now()</div><div class="line"><span class="keyword">switch</span> &#123;</div><div class="line"><span class="keyword">case</span> t.Hour() &lt; <span class="number">12</span>:</div><div class="line">	fmt.Println(<span class="string">"Good morning!"</span>)</div><div class="line"><span class="keyword">case</span> t.Hour() &lt; <span class="number">17</span>:</div><div class="line">	fmt.Println(<span class="string">"Good afternoon."</span>)</div><div class="line"><span class="keyword">case</span> t.Hour() &lt; <span class="number">24</span>:</div><div class="line">	fmt.Println(<span class="string">"One more"</span>)</div><div class="line">	<span class="keyword">fallthrough</span></div><div class="line"><span class="keyword">default</span>:</div><div class="line">	fmt.Println(<span class="string">"Good evening."</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>defer</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// deferred function calls are pushed onto a stack. </span></div><div class="line"><span class="comment">// when a function returns, its deferred calls are executed in last-in-first-out order.</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	fmt.Println(<span class="string">"counting"</span>)</div><div class="line"></div><div class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">3</span>; i++ &#123;</div><div class="line">		<span class="keyword">defer</span> fmt.Println(i)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	fmt.Println(<span class="string">"done"</span>)</div><div class="line">&#125;</div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">counting</span></div><div class="line"><span class="comment">done</span></div><div class="line"><span class="comment">2</span></div><div class="line"><span class="comment">1</span></div><div class="line"><span class="comment">0</span></div><div class="line"><span class="comment">*/</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="More-types"><a href="#More-types" class="headerlink" title="More types"></a>More types</h4><ul>
<li><p>pointers</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// the type *T is a pointer to a T value.</span></div><div class="line"><span class="comment">// its zero value is nil.</span></div><div class="line"><span class="keyword">var</span> p *<span class="keyword">int</span></div><div class="line"></div><div class="line">i := <span class="number">42</span></div><div class="line">p = &amp;i</div><div class="line"></div><div class="line">fmt.Println(*p) <span class="comment">// read i through the pointer p</span></div><div class="line">*p = <span class="number">21</span>         <span class="comment">// set i through the pointer p</span></div></pre></td></tr></table></figure>
</li>
<li><p>struct</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">type Vertex <span class="class"><span class="keyword">struct</span> &#123;</span></div><div class="line">	X <span class="keyword">int</span></div><div class="line">	Y <span class="keyword">int</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">var v Vertex = Vertex&#123;<span class="number">2</span>, <span class="number">3</span>&#125;  <span class="comment">// v := VertexP&#123;2, 3&#125;</span></div><div class="line">p := &amp;v  <span class="comment">// pointer to structs</span></div><div class="line">v.x = <span class="number">1e9</span></div><div class="line">p.X = <span class="number">1e9</span> <span class="comment">// implicit conversion ???</span></div><div class="line"></div><div class="line"><span class="comment">// struct literals</span></div><div class="line">var (</div><div class="line">	v1 = Vertex&#123;<span class="number">1</span>, <span class="number">2</span>&#125;  <span class="comment">// has type Vertex</span></div><div class="line">	v2 = Vertex&#123;X: <span class="number">1</span>&#125;  <span class="comment">// Y:0 is implicit</span></div><div class="line">	v3 = Vertex&#123;&#125;      <span class="comment">// X:0 and Y:0</span></div><div class="line">	p  = &amp;Vertex&#123;<span class="number">1</span>, <span class="number">2</span>&#125; <span class="comment">// has type *Vertex</span></div><div class="line">)</div></pre></td></tr></table></figure>
</li>
<li><p>array</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> prime [<span class="number">6</span>]<span class="keyword">int</span> = [<span class="number">6</span>]<span class="keyword">int</span>&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>slices</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// slices are like references to arrays</span></div><div class="line"><span class="keyword">var</span> s []<span class="keyword">int</span> = primes[<span class="number">1</span>:<span class="number">4</span>]</div><div class="line"></div><div class="line"><span class="comment">// array literal</span></div><div class="line">[<span class="number">3</span>]<span class="keyword">bool</span>&#123;<span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">false</span>&#125;</div><div class="line"><span class="comment">// slice literal</span></div><div class="line">[]<span class="keyword">bool</span>&#123;<span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">false</span>&#125;</div><div class="line"></div><div class="line"><span class="comment">// slice defaults</span></div><div class="line"><span class="comment">// the default is zero for the low bound and the length of the slice for the high bound.</span></div><div class="line"><span class="comment">// these slice expressions are equivalent:</span></div><div class="line">a[<span class="number">0</span>:<span class="number">10</span>]</div><div class="line">a[:<span class="number">10</span>]</div><div class="line">a[<span class="number">0</span>:]</div><div class="line">a[:]</div><div class="line"></div><div class="line"><span class="comment">// nil slices</span></div><div class="line"><span class="comment">// A nil slice has a length and capacity of 0 and has no underlying array.</span></div><div class="line"><span class="keyword">var</span> s []<span class="keyword">int</span></div><div class="line">fmt.Println(s, <span class="built_in">len</span>(s), <span class="built_in">cap</span>(s))</div><div class="line"><span class="keyword">if</span> s == <span class="literal">nil</span> &#123;</div><div class="line">	fmt.Println(<span class="string">"nil!"</span>)</div><div class="line">&#125;</div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">[] 0 0</span></div><div class="line"><span class="comment">nil!</span></div><div class="line"><span class="comment">*/</span></div></pre></td></tr></table></figure>
</li>
<li><p>slice length and capacity</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	s := []<span class="keyword">int</span>&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>&#125;</div><div class="line">	printSlice(s)</div><div class="line"></div><div class="line">	<span class="comment">// Slice the slice to give it zero length.</span></div><div class="line">	s = s[:<span class="number">0</span>]</div><div class="line">	printSlice(s)</div><div class="line"></div><div class="line">	<span class="comment">// Extend its length.</span></div><div class="line">	s = s[:<span class="number">4</span>]</div><div class="line">	printSlice(s)</div><div class="line"></div><div class="line"></div><div class="line">	<span class="comment">// Drop its first two values.</span></div><div class="line">	s = s[<span class="number">2</span>:]</div><div class="line">	printSlice(s)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">printSlice</span><span class="params">(s []<span class="keyword">int</span>)</span></span> &#123;</div><div class="line">	fmt.Printf(<span class="string">"len=%d cap=%d %v\n"</span>, <span class="built_in">len</span>(s), <span class="built_in">cap</span>(s), s)</div><div class="line">&#125;</div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">len=6 cap=6 [2 3 5 7 11 13]</span></div><div class="line"><span class="comment">len=0 cap=6 []</span></div><div class="line"><span class="comment">len=4 cap=6 [2 3 5 7]</span></div><div class="line"><span class="comment">len=2 cap=4 [5 7]</span></div><div class="line"><span class="comment">*/</span></div></pre></td></tr></table></figure>
</li>
<li><p>creating a slice with make<br>slices can be created with the built-in make function;<br>this is how you create dynamically-sized arrays.</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">b := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">0</span>, <span class="number">5</span>) <span class="comment">// len(b)=0, cap(b)=5</span></div></pre></td></tr></table></figure>
</li>
<li><p>slices of slices</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">board := [][]<span class="keyword">string</span>&#123;</div><div class="line">	[]<span class="keyword">string</span>&#123;<span class="string">"_"</span>, <span class="string">"_"</span>, <span class="string">"_"</span>&#125;,</div><div class="line">	[]<span class="keyword">string</span>&#123;<span class="string">"_"</span>, <span class="string">"_"</span>, <span class="string">"_"</span>&#125;,</div><div class="line">	[]<span class="keyword">string</span>&#123;<span class="string">"_"</span>, <span class="string">"_"</span>, <span class="string">"_"</span>&#125;,</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(board); i++ &#123;</div><div class="line">	fmt.Printf(<span class="string">"%s\n"</span>, strings.Join(board[i], <span class="string">" "</span>))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>apending to a slice</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// func append(s []T, vs ...T) []T</span></div><div class="line"><span class="keyword">var</span> s []<span class="keyword">int</span></div><div class="line">s = <span class="built_in">append</span>(s, <span class="number">1</span>)</div><div class="line">s = <span class="built_in">append</span>(s, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</div><div class="line"></div><div class="line"><span class="comment">// append slice</span></div><div class="line">x := []<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</div><div class="line">y := []<span class="keyword">int</span>&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;</div><div class="line">x = <span class="built_in">append</span>(x, y...)</div></pre></td></tr></table></figure>
</li>
<li><p>range</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> pow = []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">16</span>, <span class="number">32</span>, <span class="number">64</span>, <span class="number">128</span>&#125;</div><div class="line"><span class="keyword">for</span> i, v := <span class="keyword">range</span> pow &#123;</div><div class="line">	fmt.Printf(<span class="string">"2**%d = %d\n"</span>, i, v)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// skip the index or value</span></div><div class="line">pow := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">10</span>)</div><div class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> pow &#123;</div><div class="line">	pow[i] = <span class="number">1</span> &lt;&lt; <span class="keyword">uint</span>(i) <span class="comment">// == 2**i</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span> _, value := <span class="keyword">range</span> pow &#123;</div><div class="line">	fmt.Printf(<span class="string">"%d\n"</span>, value)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>exercise-slices.go</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"golang.org/x/tour/pic"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">Pic</span><span class="params">(dx, dy <span class="keyword">int</span>)</span> [][]<span class="title">uint8</span></span> &#123;</div><div class="line">	<span class="keyword">var</span> pic [][]<span class="keyword">uint8</span> = <span class="built_in">make</span>([][]<span class="keyword">uint8</span>, dy)</div><div class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; dy; i++ &#123;</div><div class="line">		pic[i] = <span class="built_in">make</span>([]<span class="keyword">uint8</span>, dx)</div><div class="line">		<span class="keyword">for</span> j := <span class="number">0</span>; j &lt; dx; j++ &#123;</div><div class="line">			pic[i][j] = <span class="keyword">uint8</span>(i ^ j);	</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> pic</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	pic.Show(Pic)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>maps<br>The zero value of a map is nil. A nil map has no keys, nor can keys be added.</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> Vertex <span class="keyword">struct</span> &#123;</div><div class="line">	Lat, Long <span class="keyword">float64</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> m <span class="keyword">map</span>[<span class="keyword">string</span>]Vertex</div><div class="line">m = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]Vertex)</div><div class="line">m[<span class="string">"Bell Labs"</span>] = Vertex&#123;</div><div class="line">	<span class="number">40.68433</span>, <span class="number">-74.39967</span>,</div><div class="line">&#125;</div><div class="line">fmt.Println(m[<span class="string">"Bell Labs"</span>])</div><div class="line"></div><div class="line"><span class="comment">// map literals</span></div><div class="line"><span class="keyword">var</span> m = <span class="keyword">map</span>[<span class="keyword">string</span>]Vertex&#123;</div><div class="line">	<span class="string">"Bell Labs"</span>: Vertex&#123;</div><div class="line">		<span class="number">40.68433</span>, <span class="number">-74.39967</span>,</div><div class="line">	&#125;,</div><div class="line">	<span class="string">"Google"</span>: Vertex&#123;</div><div class="line">		<span class="number">37.42202</span>, <span class="number">-122.08408</span>,</div><div class="line">	&#125;,</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// If the top-level type is just a type name, you can omit it from the elements of the literal.</span></div><div class="line"><span class="keyword">var</span> m = <span class="keyword">map</span>[<span class="keyword">string</span>]Vertex&#123;</div><div class="line">	<span class="string">"Bell Labs"</span>: &#123;<span class="number">40.68433</span>, <span class="number">-74.39967</span>&#125;,</div><div class="line">	<span class="string">"Google"</span>:    &#123;<span class="number">37.42202</span>, <span class="number">-122.08408</span>&#125;,</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// mutating maps</span></div><div class="line"><span class="comment">// insert or update an element in map m:</span></div><div class="line">m[key] = elem</div><div class="line"><span class="comment">// retrieve an element:</span></div><div class="line">elem = m[key]</div><div class="line"><span class="comment">// delete an element:</span></div><div class="line"><span class="built_in">delete</span>(m, key)</div><div class="line"><span class="comment">// test that a key is present with a two-value assignment:</span></div><div class="line">elem, ok = m[key]</div></pre></td></tr></table></figure>
</li>
<li><p>exercise-maps.go</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"golang.org/x/tour/wc"</span>;</div><div class="line">	<span class="string">"strings"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">WordCount</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">map</span>[<span class="title">string</span>]<span class="title">int</span></span> &#123;</div><div class="line">	word := strings.Split(s, <span class="string">" "</span>)</div><div class="line">	<span class="keyword">var</span> mp <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span> = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>)</div><div class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(word); i++ &#123;</div><div class="line">		mp[word[i]] += <span class="number">1</span></div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> mp</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	wc.Test(WordCount)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>funtion values</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">compute</span><span class="params">(fn <span class="keyword">func</span>(<span class="keyword">float64</span>, <span class="keyword">float64</span>)</span> <span class="title">float64</span>) <span class="title">float64</span></span> &#123;</div><div class="line">	<span class="keyword">return</span> fn(<span class="number">3</span>, <span class="number">4</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	hypot := <span class="function"><span class="keyword">func</span><span class="params">(x, y <span class="keyword">float64</span>)</span> <span class="title">float64</span></span> &#123;</div><div class="line">		<span class="keyword">return</span> math.Sqrt(x*x + y*y)</div><div class="line">	&#125;</div><div class="line">	fmt.Println(hypot(<span class="number">5</span>, <span class="number">12</span>))</div><div class="line"></div><div class="line">	fmt.Println(compute(hypot))</div><div class="line">	fmt.Println(compute(math.Pow))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>closure<br>a closure is a function value that references variables from outside its body.<br>the function may access and assign to the referenced variables; in this sense the function is “bound” to the variables.</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// each closure is bound to its own sum variable.</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">adder</span><span class="params">()</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</div><div class="line">	sum := <span class="number">0</span></div><div class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(x <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</div><div class="line">		sum += x</div><div class="line">		<span class="keyword">return</span> sum</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	pos, neg := adder(), adder()</div><div class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">3</span>; i++ &#123;</div><div class="line">		fmt.Println(</div><div class="line">			pos(i),</div><div class="line">			neg(<span class="number">-2</span>*i),</div><div class="line">		)</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">0 0</span></div><div class="line"><span class="comment">1 -2</span></div><div class="line"><span class="comment">3 -6</span></div><div class="line"><span class="comment">*/</span></div></pre></td></tr></table></figure>
</li>
<li><p>function-closures.go</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="comment">// fibonacci is a function that returns</span></div><div class="line"><span class="comment">// a function that returns an int.</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">fibonacci</span><span class="params">()</span> <span class="title">func</span><span class="params">()</span> <span class="title">int</span></span> &#123;</div><div class="line">	<span class="keyword">var</span> f0, f1 <span class="keyword">int</span> = <span class="number">0</span>, <span class="number">1</span></div><div class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">int</span></span> &#123;</div><div class="line">		ret := f0</div><div class="line">		f0, f1 = f1, f0 + f1</div><div class="line">		<span class="keyword">return</span> ret</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	f := fibonacci()</div><div class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</div><div class="line">		fmt.Println(f())</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Methods-and-interfaces"><a href="#Methods-and-interfaces" class="headerlink" title="Methods and interfaces"></a>Methods and interfaces</h3><h4 id="methods"><a href="#methods" class="headerlink" title="methods"></a>methods</h4><ul>
<li><strong>go does not have classes</strong>. However, you can define methods on types.</li>
<li>a method is a <strong>function</strong> with a <strong>special receiver argument</strong>.</li>
<li>the receiver appears in its own argument list <strong>between the func keyword and the method name</strong></li>
</ul>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> Vertex <span class="keyword">struct</span> &#123;</div><div class="line">	X, Y <span class="keyword">float64</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v Vertex)</span> <span class="title">Abs</span><span class="params">()</span> <span class="title">float64</span></span> &#123;</div><div class="line">	<span class="keyword">return</span> math.Sqrt(v.X*v.X + v.Y*v.Y)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>declare a method on non-struct types</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> Vertex <span class="keyword">struct</span> &#123;</div><div class="line">	X, Y <span class="keyword">float64</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v Vertex)</span> <span class="title">Abs</span><span class="params">()</span> <span class="title">float64</span></span> &#123;</div><div class="line">	<span class="keyword">return</span> math.Sqrt(v.X*v.X + v.Y*v.Y)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v *Vertex)</span> <span class="title">Scale</span><span class="params">(f <span class="keyword">float64</span>)</span></span> &#123;</div><div class="line">	v.X = v.X * f</div><div class="line">	v.Y = v.Y * f</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	v := Vertex&#123;<span class="number">3</span>, <span class="number">4</span>&#125;</div><div class="line">	v.Scale(<span class="number">10</span>)</div><div class="line">	fmt.Println(v.Abs())</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>In general, all methods on a given type should have either value or pointer receivers, but not a mixture of both.</p>
</li>
</ul>
<h4 id="interfaces"><a href="#interfaces" class="headerlink" title="interfaces"></a>interfaces</h4><p>an interface type is defined as a set of method signatures.<br>a value of interface type can hold any value that implements those methods.</p>
<ul>
<li><p>interfaces are implemented implicitly<br>implicit interfaces <strong>decouple</strong> the definition of an interface from its implementation, which could then appear in any package without prearrangement.</p>
</li>
<li><p>interface values<br>an interface value holds a value of a specific underlying concrete type.<br>it can be thought of as a tuple of a value and a concrete type: <code>(value, type)</code></p>
</li>
<li><p>interface values can be with nil underlying values.</p>
</li>
</ul>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> I <span class="keyword">interface</span> &#123;</div><div class="line">	M()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">type</span> T <span class="keyword">struct</span> &#123;</div><div class="line">	S <span class="keyword">string</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// This method means type T implements the interface I,</span></div><div class="line"><span class="comment">// but we don't need to explicitly declare that it does so.</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t T)</span> <span class="title">M</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">if</span> t == <span class="literal">nil</span> &#123;  </div><div class="line">		fmt.Println(<span class="string">"&lt;nil&gt;"</span>)</div><div class="line">		<span class="keyword">return</span></div><div class="line">	&#125;</div><div class="line">	fmt.Println(t.S)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">describe</span><span class="params">(i I)</span></span> &#123;</div><div class="line">	fmt.Printf(<span class="string">"(%v, %T)\n"</span>, i, i)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	<span class="keyword">var</span> i I</div><div class="line">	describe(i)   <span class="comment">// nil interface value -&gt; run-time error</span></div><div class="line"></div><div class="line">	<span class="keyword">var</span> t *T</div><div class="line">	i = t</div><div class="line">	describe(i)  <span class="comment">// nil receiver -&gt; OK</span></div><div class="line">	i.M()</div><div class="line"></div><div class="line">	i = &amp;T&#123;<span class="string">"hello"</span>&#125;</div><div class="line">	describe(i)</div><div class="line">	i.M()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>empty interface<br>an empty interface may hold values of any type. (every type implements at least zero methods.)<br>empty interfaces are used by code that handles values of unknown type.</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> i <span class="keyword">interface</span>&#123;&#125;</div><div class="line">i = <span class="number">42</span></div><div class="line">i = <span class="string">"hello"</span></div></pre></td></tr></table></figure>
</li>
<li><p>type assertions</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// if i does not hold a type T, the statement will trigger a panic.</span></div><div class="line">t := i.(T)</div><div class="line"></div><div class="line"><span class="comment">// if i does not hold a type T, ok will be false </span></div><div class="line"><span class="comment">// and t will be the zero value of type T, and no panic occurs.</span></div><div class="line">t, ok := i.(T)</div></pre></td></tr></table></figure>
</li>
<li><p>type switches</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">do</span><span class="params">(i <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</div><div class="line">	<span class="keyword">switch</span> v := i.(<span class="keyword">type</span>) &#123;</div><div class="line">	<span class="keyword">case</span> <span class="keyword">int</span>:</div><div class="line">		fmt.Printf(<span class="string">"Twice %v is %v\n"</span>, v, v*<span class="number">2</span>)</div><div class="line">	<span class="keyword">case</span> <span class="keyword">string</span>:</div><div class="line">		fmt.Printf(<span class="string">"%q is %v bytes long\n"</span>, v, <span class="built_in">len</span>(v))</div><div class="line">	<span class="keyword">default</span>:</div><div class="line">		fmt.Printf(<span class="string">"I don't know about type %T!\n"</span>, v)</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	do(<span class="number">21</span>)</div><div class="line">	do(<span class="string">"hello"</span>)</div><div class="line">	do(<span class="literal">true</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Stringers and error</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// a Stringer is a type that can describe itself as a string.</span></div><div class="line"><span class="keyword">type</span> Stringer <span class="keyword">interface</span> &#123;</div><div class="line">    String() <span class="keyword">string</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// the error type is a built-in interface similar to fmt.Stringer</span></div><div class="line"><span class="keyword">type</span> error <span class="keyword">interface</span> &#123;</div><div class="line">    Error() <span class="keyword">string</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// for example, fmt.Println will call the two interfaces</span></div></pre></td></tr></table></figure>
</li>
<li><p>exercise-stringer.go</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="keyword">type</span> IPAddr [<span class="number">4</span>]<span class="keyword">byte</span></div><div class="line"></div><div class="line"><span class="comment">// <span class="doctag">TODO:</span> Add a "String() string" method to IPAddr.</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *IPAddr)</span> <span class="title">String</span><span class="params">()</span> <span class="title">string</span></span> &#123;</div><div class="line">	<span class="keyword">return</span> fmt.Sprintf(<span class="string">"%v.%v.%v.%v"</span>, t[<span class="number">0</span>], t[<span class="number">1</span>], t[<span class="number">2</span>], t[<span class="number">3</span>])	</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	hosts := <span class="keyword">map</span>[<span class="keyword">string</span>]IPAddr&#123;</div><div class="line">		<span class="string">"loopback"</span>:  &#123;<span class="number">127</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>&#125;,</div><div class="line">		<span class="string">"googleDNS"</span>: &#123;<span class="number">8</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">8</span>&#125;,</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span> name, ip := <span class="keyword">range</span> hosts &#123;</div><div class="line">		fmt.Println(ip.String())</div><div class="line">		fmt.Printf(<span class="string">"%v: %v\n"</span>, name, ip)</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>exercise-errors.go</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">type</span> ErrNegativeSqrt <span class="keyword">float64</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e ErrNegativeSqrt)</span> <span class="title">Error</span><span class="params">()</span> <span class="title">string</span></span> &#123;</div><div class="line">	<span class="keyword">return</span> fmt.Sprintf(<span class="string">"cannot Sqrt negative number: %v"</span>, <span class="keyword">float64</span>(e))	</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">Sqrt</span><span class="params">(x <span class="keyword">float64</span>)</span> <span class="params">(<span class="keyword">float64</span>, error)</span></span> &#123;</div><div class="line">	<span class="keyword">if</span> x &lt; <span class="number">0</span> &#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">0</span>, ErrNegativeSqrt(x)	</div><div class="line">	&#125;</div><div class="line">	z := <span class="number">1.0</span></div><div class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</div><div class="line">		z = z - (z * z - x) / (<span class="number">2</span> * z), y</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> z, <span class="literal">nil</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	fmt.Println(Sqrt(<span class="number">2</span>))</div><div class="line">	fmt.Println(Sqrt(<span class="number">-2</span>))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>readers<br>interface <code>io.Reader::Read</code></p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(T)</span> <span class="title">Read</span><span class="params">(b []<span class="keyword">byte</span>)</span> <span class="params">(n <span class="keyword">int</span>, err error)</span></span></div></pre></td></tr></table></figure>
</li>
<li><p>exercise-reader.go</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"golang.org/x/tour/reader"</span></div><div class="line"></div><div class="line"><span class="keyword">type</span> MyReader <span class="keyword">struct</span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="comment">// <span class="doctag">TODO:</span> Add a Read([]byte) (int, error) method to MyReader.</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t MyReader)</span> <span class="title">Read</span><span class="params">(b []<span class="keyword">byte</span>)</span> <span class="params">(<span class="keyword">int</span>, error)</span></span> &#123;</div><div class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(b); i++ &#123;</div><div class="line">		b[i] = <span class="string">'A'</span>	</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="built_in">len</span>(b), <span class="literal">nil</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	reader.Validate(MyReader&#123;&#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>exercise-rot-reader.go</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"io"</span></div><div class="line">	<span class="string">"os"</span></div><div class="line">	<span class="string">"strings"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">type</span> rot13Reader <span class="keyword">struct</span> &#123;</div><div class="line">	r io.Reader</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r rot13Reader)</span> <span class="title">Read</span><span class="params">(b []<span class="keyword">byte</span>)</span> <span class="params">(n <span class="keyword">int</span>, err error)</span></span> &#123;</div><div class="line">	insideR := r.r</div><div class="line">	<span class="keyword">if</span> n, err = insideR.Read(b); err != <span class="literal">nil</span> &#123;</div><div class="line">		<span class="keyword">return</span>	</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</div><div class="line">		<span class="keyword">if</span> b[i] &gt;= <span class="string">'a'</span> &amp;&amp; b[i] &lt;= <span class="string">'z'</span> &#123;</div><div class="line">			b[i] = (b[i] - <span class="string">'a'</span> + <span class="number">13</span>) % <span class="number">26</span> + <span class="string">'a'</span>	</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> b[i] &gt;= <span class="string">'A'</span> &amp;&amp; b[i] &lt;= <span class="string">'Z'</span> &#123;</div><div class="line">			b[i] = (b[i] - <span class="string">'A'</span> + <span class="number">13</span>) % <span class="number">26</span> + <span class="string">'A'</span>	</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	s := strings.NewReader(<span class="string">"Lbh penpxrq gur pbqr!"</span>)</div><div class="line">	r := rot13Reader&#123;s&#125;</div><div class="line">	io.Copy(os.Stdout, &amp;r)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>exercise-images.go</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"golang.org/x/tour/pic"</span></div><div class="line">	<span class="string">"image"</span></div><div class="line">	<span class="string">"image/color"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">type Image interface &#123;</span></div><div class="line"><span class="comment">    ColorModel() color.Model</span></div><div class="line"><span class="comment">    Bounds() Rectangle</span></div><div class="line"><span class="comment">    At(x, y int) color.Color</span></div><div class="line"><span class="comment">&#125;</span></div><div class="line"><span class="comment">*/</span></div><div class="line"></div><div class="line"><span class="keyword">type</span> Image <span class="keyword">struct</span>&#123;</div><div class="line">	Width, Height <span class="keyword">int</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(img Image)</span> <span class="title">ColorModel</span><span class="params">()</span> <span class="title">color</span>.<span class="title">Model</span></span> &#123;</div><div class="line">	<span class="keyword">return</span> color.RGBAModel	</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(img Image)</span> <span class="title">Bounds</span><span class="params">()</span> <span class="title">image</span>.<span class="title">Rectangle</span></span> &#123;</div><div class="line">	<span class="keyword">return</span> image.Rect(<span class="number">0</span>, <span class="number">0</span>, img.Width, img.Height)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(img Image)</span> <span class="title">At</span><span class="params">(x, y <span class="keyword">int</span>)</span> <span class="title">color</span>.<span class="title">Color</span></span> &#123;</div><div class="line">	<span class="keyword">return</span> color.RGBA&#123;<span class="keyword">uint8</span>(x * y), <span class="keyword">uint8</span>((x + y) / <span class="number">2</span>), <span class="number">100</span>, <span class="number">255</span>&#125;	</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	m := Image&#123;<span class="number">100</span>, <span class="number">100</span>&#125;</div><div class="line">	pic.ShowImage(m)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Concurrency"><a href="#Concurrency" class="headerlink" title="Concurrency"></a>Concurrency</h3><h4 id="goroutines"><a href="#goroutines" class="headerlink" title="goroutines"></a>goroutines</h4><p>A goroutine is a lightweight thread managed by the Go runtime.<br><code>go f(x, y, z)</code> starts a new goroutine running <code>f(x, y, z)</code>.<br>The <strong>evaluation</strong> of <code>f, x, y, and z</code> happens in the <strong>current goroutine</strong> and the <strong>execution</strong> of <code>f</code> happens in the <strong>new goroutine</strong>.<br>Goroutines run in the <strong>same address space</strong>, so access to shared memory must be synchronized. </p>
<h4 id="channels"><a href="#channels" class="headerlink" title="channels"></a>channels</h4><p>Channels are a typed conduit(pipe) through which you can send and receive values with the channel operator, <code>&lt;-</code>.<br>By default, <strong>sends and receives block until the other side is ready</strong>. This allows goroutines to <strong>synchronize without explicit locks or condition variables</strong>.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// (The data flows in the direction of the arrow.)</span></div><div class="line"><span class="comment">// Like maps and slices, channels must be created before use:</span></div><div class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</div><div class="line">ch &lt;- v    <span class="comment">// Send v to channel ch.</span></div><div class="line">v := &lt;-ch  <span class="comment">// Receive from ch, and</span></div><div class="line">           <span class="comment">// assign value to v.</span></div></pre></td></tr></table></figure></p>
<h4 id="buffered-Channels"><a href="#buffered-Channels" class="headerlink" title="buffered Channels"></a>buffered Channels</h4><p>Channels can be buffered. Provide the buffer length as the second argument to make to initialize a buffered channel:<br><code>ch := make(chan int, 100)</code><br><strong>Sends</strong> to a buffered channel <strong>block</strong> only when the buffer is <strong>full</strong>. <strong>Receives</strong> <strong>block</strong> when the buffer is <strong>empty</strong>.</p>
<h4 id="range-and-close"><a href="#range-and-close" class="headerlink" title="range and close"></a>range and close</h4><p><code>v, ok := &lt;-ch</code><br>ok is false if there are no more values to receive and the channel is closed.<br>The loop <code>for i := range c</code> <strong>receives values</strong> from the channel repeatedly <strong>until</strong> it is <strong>closed</strong>.</p>
<p><strong>Note</strong>: Only the sender should close a channel, never the receiver. Sending on a closed channel will cause a panic.</p>
<p><strong>Another note</strong>: Channels aren’t like files; you don’t usually need to close them.<br><strong>Closing</strong> is only necessary when the receiver must be told there are <strong>no more values coming</strong>, such as to <strong>terminate</strong> a <code>range</code> <strong>loop</strong>.</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">fibonacci</span><span class="params">(n <span class="keyword">int</span>, c <span class="keyword">chan</span> <span class="keyword">int</span>)</span></span> &#123;</div><div class="line">	x, y := <span class="number">0</span>, <span class="number">1</span></div><div class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</div><div class="line">		c &lt;- x</div><div class="line">		x, y = y, x+y</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">close</span>(c)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">10</span>)</div><div class="line">	<span class="keyword">go</span> fibonacci(<span class="built_in">cap</span>(c), c)</div><div class="line">	<span class="keyword">for</span> i := <span class="keyword">range</span> c &#123;</div><div class="line">		fmt.Println(i)</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="select"><a href="#select" class="headerlink" title="select"></a>select</h4><p>The <code>select</code> statement lets a goroutine wait on multiple communication operations.<br>A <code>select</code> blocks until one of its cases can run, then it executes that case.<br><strong>It chooses one at random if multiple are ready</strong>.</p>
<p>Use a <code>default</code> case to try a send or receive without blocking:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">fibonacci</span><span class="params">(c, quit <span class="keyword">chan</span> <span class="keyword">int</span>)</span></span> &#123;</div><div class="line">	x, y := <span class="number">0</span>, <span class="number">1</span></div><div class="line">	<span class="keyword">for</span> &#123;</div><div class="line">		<span class="keyword">select</span> &#123;</div><div class="line">		<span class="keyword">case</span> c &lt;- x:</div><div class="line">			x, y = y, x+y</div><div class="line">		<span class="keyword">case</span> &lt;-quit:</div><div class="line">			fmt.Println(<span class="string">"quit"</span>)</div><div class="line">			<span class="keyword">return</span></div><div class="line">		&#125;</div><div class="line">		<span class="keyword">default</span>:</div><div class="line">            <span class="comment">// receiving from c would block</span></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</div><div class="line">	quit := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</div><div class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</div><div class="line">		<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</div><div class="line">			fmt.Println(&lt;-c)</div><div class="line">		&#125;</div><div class="line">		quit &lt;- <span class="number">0</span></div><div class="line">	&#125;()</div><div class="line">	fibonacci(c, quit)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="sync-Mutex"><a href="#sync-Mutex" class="headerlink" title="sync.Mutex"></a>sync.Mutex</h4><p>We’ve seen how <strong>channels</strong> are great for <strong>communication among goroutines</strong>.<br>But what if we don’t need communication? What if we just want to make sure only one goroutine can access a variable at a time to avoid conflicts?<br>This concept is called <strong>mutual exclusion</strong>, and the conventional name for the data structure that provides it is <strong>mutex</strong>.<br>Go’s standard library provides mutual exclusion with <code>sync.Mutex</code> and its two methods:<br><code>Lock, Unlock</code><br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> SafeCounter <span class="keyword">struct</span> &#123;</div><div class="line">	v   <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span></div><div class="line">	mux sync.Mutex</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Inc increments the counter for the given key.</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *SafeCounter)</span> <span class="title">Inc</span><span class="params">(key <span class="keyword">string</span>)</span></span> &#123;</div><div class="line">	c.mux.Lock()</div><div class="line">	<span class="comment">// Lock so only one goroutine at a time can access the map c.v.</span></div><div class="line">	c.v[key]++</div><div class="line">	c.mux.Unlock()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Value returns the current value of the counter for the given key.</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *SafeCounter)</span> <span class="title">Value</span><span class="params">(key <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</div><div class="line">	c.mux.Lock()</div><div class="line">	<span class="comment">// Lock so only one goroutine at a time can access the map c.v.</span></div><div class="line">	<span class="keyword">defer</span> c.mux.Unlock()</div><div class="line">	<span class="keyword">return</span> c.v[key]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li><p>exercise-equivalent-binary-trees.go</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"golang.org/x/tour/tree"</span></div><div class="line"></div><div class="line">	<span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="comment">// Walk walks the tree t sending all values</span></div><div class="line"><span class="comment">// from the tree to the channel ch.</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">Walk</span><span class="params">(t *tree.Tree, ch <span class="keyword">chan</span> <span class="keyword">int</span>)</span></span> &#123;</div><div class="line">	<span class="keyword">defer</span> <span class="built_in">close</span>(ch)</div><div class="line">	<span class="keyword">var</span> walker <span class="function"><span class="keyword">func</span><span class="params">(t *tree.Tree)</span></span></div><div class="line"><span class="function">	<span class="title">walker</span> = <span class="title">func</span><span class="params">(t *tree.Tree)</span></span> &#123;</div><div class="line">		<span class="keyword">if</span> t == <span class="literal">nil</span> &#123;</div><div class="line">			<span class="keyword">return</span></div><div class="line">		&#125;</div><div class="line">		walker(t.Left)</div><div class="line">		ch &lt;- t.Value</div><div class="line">		walker(t.Right)</div><div class="line"></div><div class="line">	&#125;</div><div class="line">	walker(t)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Same determines whether the trees</span></div><div class="line"><span class="comment">// t1 and t2 contain the same values.</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">Same</span><span class="params">(t1, t2 *tree.Tree)</span> <span class="title">bool</span></span> &#123;</div><div class="line">	ch1 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</div><div class="line">	ch2 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</div><div class="line">	<span class="keyword">go</span> Walk(t1, ch1)</div><div class="line">	<span class="keyword">go</span> Walk(t2, ch2)</div><div class="line"></div><div class="line">	<span class="keyword">for</span> x1 := <span class="keyword">range</span> ch1 &#123;</div><div class="line">		x2, ok2 := &lt;-ch2</div><div class="line">		<span class="keyword">if</span> !ok2 || x1 != x2 &#123;</div><div class="line">			<span class="keyword">return</span> <span class="literal">false</span></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="literal">true</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	fmt.Println(Same(tree.New(<span class="number">1</span>), tree.New(<span class="number">1</span>)))</div><div class="line">	fmt.Println(Same(tree.New(<span class="number">1</span>), tree.New(<span class="number">2</span>)))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>exercise-web-crawler.go</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"sync"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">type</span> Fetcher <span class="keyword">interface</span> &#123;</div><div class="line">	<span class="comment">// Fetch returns the body of URL and</span></div><div class="line">	<span class="comment">// a slice of URLs found on that page.</span></div><div class="line">	Fetch(url <span class="keyword">string</span>) (body <span class="keyword">string</span>, urls []<span class="keyword">string</span>, err error)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">type</span> Cache <span class="keyword">struct</span> &#123;</div><div class="line">	visited <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">bool</span>	</div><div class="line">	mtx sync.Mutex</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">type</span> Response <span class="keyword">struct</span> &#123;</div><div class="line">	url <span class="keyword">string</span></div><div class="line">	body <span class="keyword">string</span>	</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Crawl uses fetcher to recursively crawl</span></div><div class="line"><span class="comment">// pages starting with url, to a maximum of depth.</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">Crawl</span><span class="params">(url <span class="keyword">string</span>, depth <span class="keyword">int</span>, fetcher Fetcher, result <span class="keyword">chan</span> Response, cache Cache)</span></span> &#123;</div><div class="line">	<span class="comment">// <span class="doctag">TODO:</span> Fetch URLs in parallel.</span></div><div class="line">	<span class="comment">// <span class="doctag">TODO:</span> Don't fetch the same URL twice.</span></div><div class="line">	<span class="comment">// This implementation doesn't do either:</span></div><div class="line">	<span class="keyword">defer</span> <span class="built_in">close</span>(result)</div><div class="line">	<span class="keyword">if</span> depth &lt;= <span class="number">0</span> &#123;</div><div class="line">		<span class="keyword">return</span></div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	cache.mtx.Lock()</div><div class="line">	<span class="keyword">if</span> cache.visited[url] &#123;</div><div class="line">		cache.mtx.Unlock()</div><div class="line">		<span class="keyword">return</span></div><div class="line">	&#125;</div><div class="line">	cache.visited[url] = <span class="literal">true</span></div><div class="line">	cache.mtx.Unlock()</div><div class="line">	</div><div class="line">	body, urls, err := fetcher.Fetch(url)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		fmt.Println(err)</div><div class="line">		<span class="keyword">return</span></div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	result &lt;- Response&#123;url, body&#125;</div><div class="line">	<span class="comment">// fmt.Printf("found: %s %q\n", url, body)</span></div><div class="line">	</div><div class="line">	<span class="keyword">for</span> _, u := <span class="keyword">range</span> urls &#123;</div><div class="line">		tempResult := <span class="built_in">make</span>(<span class="keyword">chan</span> Response)</div><div class="line">		<span class="keyword">go</span> Crawl(u, depth<span class="number">-1</span>, fetcher, tempResult, cache)</div><div class="line">		<span class="keyword">for</span> re := <span class="keyword">range</span> tempResult &#123;</div><div class="line">			result &lt;- re</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	result := <span class="built_in">make</span>(<span class="keyword">chan</span> Response)</div><div class="line">	<span class="keyword">go</span> Crawl(<span class="string">"http://golang.org/"</span>, <span class="number">4</span>, fetcher, result, Cache&#123;visited:<span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">bool</span>)&#125;)</div><div class="line">	</div><div class="line">	<span class="keyword">for</span> re := <span class="keyword">range</span> result &#123;</div><div class="line">		fmt.Printf(<span class="string">"found: %s %q\n"</span>, re.url, re.body)</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// fakeFetcher is Fetcher that returns canned results.</span></div><div class="line"><span class="keyword">type</span> fakeFetcher <span class="keyword">map</span>[<span class="keyword">string</span>]*fakeResult</div><div class="line"></div><div class="line"><span class="keyword">type</span> fakeResult <span class="keyword">struct</span> &#123;</div><div class="line">	body <span class="keyword">string</span></div><div class="line">	urls []<span class="keyword">string</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f fakeFetcher)</span> <span class="title">Fetch</span><span class="params">(url <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">string</span>, []<span class="keyword">string</span>, error)</span></span> &#123;</div><div class="line">	<span class="keyword">if</span> res, ok := f[url]; ok &#123;</div><div class="line">		<span class="keyword">return</span> res.body, res.urls, <span class="literal">nil</span></div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="string">""</span>, <span class="literal">nil</span>, fmt.Errorf(<span class="string">"not found: %s"</span>, url)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// fetcher is a populated fakeFetcher.</span></div><div class="line"><span class="keyword">var</span> fetcher = fakeFetcher&#123;</div><div class="line">	<span class="string">"http://golang.org/"</span>: &amp;fakeResult&#123;</div><div class="line">		<span class="string">"The Go Programming Language"</span>,</div><div class="line">		[]<span class="keyword">string</span>&#123;</div><div class="line">			<span class="string">"http://golang.org/pkg/"</span>,</div><div class="line">			<span class="string">"http://golang.org/cmd/"</span>,</div><div class="line">		&#125;,</div><div class="line">	&#125;,</div><div class="line">	<span class="string">"http://golang.org/pkg/"</span>: &amp;fakeResult&#123;</div><div class="line">		<span class="string">"Packages"</span>,</div><div class="line">		[]<span class="keyword">string</span>&#123;</div><div class="line">			<span class="string">"http://golang.org/"</span>,</div><div class="line">			<span class="string">"http://golang.org/cmd/"</span>,</div><div class="line">			<span class="string">"http://golang.org/pkg/fmt/"</span>,</div><div class="line">			<span class="string">"http://golang.org/pkg/os/"</span>,</div><div class="line">		&#125;,</div><div class="line">	&#125;,</div><div class="line">	<span class="string">"http://golang.org/pkg/fmt/"</span>: &amp;fakeResult&#123;</div><div class="line">		<span class="string">"Package fmt"</span>,</div><div class="line">		[]<span class="keyword">string</span>&#123;</div><div class="line">			<span class="string">"http://golang.org/"</span>,</div><div class="line">			<span class="string">"http://golang.org/pkg/"</span>,</div><div class="line">		&#125;,</div><div class="line">	&#125;,</div><div class="line">	<span class="string">"http://golang.org/pkg/os/"</span>: &amp;fakeResult&#123;</div><div class="line">		<span class="string">"Package os"</span>,</div><div class="line">		[]<span class="keyword">string</span>&#123;</div><div class="line">			<span class="string">"http://golang.org/"</span>,</div><div class="line">			<span class="string">"http://golang.org/pkg/"</span>,</div><div class="line">		&#125;,</div><div class="line">	&#125;,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Language-specification"><a href="#Language-specification" class="headerlink" title="Language specification"></a>Language specification</h3><h4 id="Formatting"><a href="#Formatting" class="headerlink" title="Formatting"></a>Formatting</h4><ul>
<li>gofmt ?</li>
<li>Indentation<br>We use tabs for indentation and gofmt emits them by default. Use spaces only if you must.</li>
<li>Line length<br>Go has no line length limit. Don’t worry about overflowing a punched card. If a line feels too long, wrap it and indent with an extra tab.</li>
<li>Parentheses<br>Go needs fewer parentheses than C and Java: control structures (if, for, switch) do not have parentheses in their syntax. Also, the operator precedence hierarchy is shorter and clearer, so <code>x&lt;&lt;8 + y&lt;&lt;16</code> means what the spacing implies, unlike in the other languages.</li>
</ul>
<h4 id="Commentary"><a href="#Commentary" class="headerlink" title="Commentary"></a>Commentary</h4><ul>
<li>Go provides C-style <code>/* */</code> block comments and C++-style <code>//</code> line comments. </li>
<li>Line comments are the norm; </li>
<li><p>Block comments appear mostly as package comments, but are useful within an expression or to disable large swaths of code.</p>
</li>
<li><p><strong>Every exported (capitalized) name in a program should have a doc comment</strong>.</p>
</li>
<li>Doc comments work best as complete sentences, which allow a wide variety of automated presentations. </li>
<li>The first sentence should be a <strong>one-sentence summary</strong> that <strong>starts with the name being declared</strong>.</li>
</ul>
<h4 id="Names"><a href="#Names" class="headerlink" title="Names"></a>Names</h4><ul>
<li>Package names<br>By convention, packages are given lower case, single-word names; there should be no need for underscores or mixedCaps. For example, the package in <code>src/encoding/base64</code> is imported as <code>&quot;encoding/base64&quot;</code> but has name base64, not <code>encoding_base64</code> and not <code>encodingBase64</code>.</li>
<li>Clear and Concise Name<br>ring.New<br>once.Do</li>
<li><p>Getters and Setters<br>If you have a field called owner (lower case, unexported), the getter method should be called Owner (upper case, exported), not GetOwner.</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">owner := obj.Owner()</div><div class="line"><span class="keyword">if</span> owner != user &#123;</div><div class="line">    obj.SetOwner(user)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Interface names<br>By convention, one-method interfaces are named by the method name plus an -er suffix or similar modification to construct an agent noun: Reader, Writer, Formatter, CloseNotifier etc.</p>
</li>
<li>MixedCaps<br>Finally, the convention in Go is to use MixedCaps or mixedCaps rather than underscores to write multiword names.</li>
</ul>
<h4 id="Semicolons"><a href="#Semicolons" class="headerlink" title="Semicolons"></a>Semicolons</h4><ul>
<li>Like C, Go’s formal grammar uses semicolons to terminate statements, but unlike in C, those semicolons do not appear in the source.</li>
<li><p>If the last token before a newline is an identifier, the lexer always inserts a semicolon after the token. This could be summarized as, “if the newline comes after a token that could end a statement, insert a semicolon”.</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// identifiers</span></div><div class="line"><span class="keyword">break</span> <span class="keyword">continue</span> <span class="keyword">fallthrough</span> <span class="keyword">return</span> ++ -- ) &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>One consequence of the semicolon insertion rules is that you <strong>cannot</strong> put the <strong>opening brace</strong> of a control structure (if, for, switch, or select) <strong>on the next line</strong>.<br>If you do, a semicolon will be inserted before the brace, which could cause unwanted effects.</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// right</span></div><div class="line"><span class="keyword">if</span> i &lt; f() &#123;</div><div class="line">    g()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// wrong</span></div><div class="line"><span class="keyword">if</span> i &lt; f() </div><div class="line">&#123;</div><div class="line">    g()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="Redeclaration-and-reassignment"><a href="#Redeclaration-and-reassignment" class="headerlink" title="Redeclaration and reassignment"></a>Redeclaration and reassignment</h4><p>In a := declaration a variable v may appear even if it has already been declared, provided:</p>
<ul>
<li>this declaration is in the same scope as the existing declaration of v (if v is already declared in an outer scope, the declaration will create a new variable),</li>
<li>the corresponding value in the initialization is assignable to v, and</li>
<li>there is at least one other variable in the declaration that is being declared a new.<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">f, err := os.Open(name)</div><div class="line">d, err := f.Stat()</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="Data"><a href="#Data" class="headerlink" title="Data"></a>Data</h4><ul>
<li>Allocation with new<br><code>new(T)</code> returns a pointer to a newly allocated zero value of type <code>T</code>.</li>
<li>Allocation with make<br><code>make(T, args)</code> serves a purpose different from <code>new(T)</code>.<br>It creates slices, maps, and channels only, and it returns an <strong>initialized (not zeroed)</strong> value of type <code>T</code> (not <code>*T</code>).<br>The reason for the distinction is that these three types represent, under the covers, references to data structures that must be initialized before use.</li>
</ul>
<h4 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h4><p>There are major differences between the ways arrays work in Go and C. In Go,</p>
<ul>
<li>Arrays are values. Assigning one array to another copies all the elements.</li>
<li>In particular, if you pass an array to a function, it will receive a copy of the array, not a pointer to it.</li>
<li>The size of an array is part of its type. The types <code>[10]int</code> and <code>[20]int</code> are distinct.</li>
</ul>
<p>The value property can be useful but also expensive;<br>If you want C-like behavior and efficiency, you can <strong>pass a pointer to the array</strong>.<br><strong>But even this style isn’t idiomatic Go. Use slices instead.</strong></p>
<h4 id="The-blank-identifier"><a href="#The-blank-identifier" class="headerlink" title="The blank identifier"></a>The blank identifier</h4><p>The blank identifier can be assigned or declared with any value of any type, with the value discarded harmlessly.</p>
<ul>
<li><p>Unused imports and variables</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> (</div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"io"</span></div><div class="line">    <span class="string">"log"</span></div><div class="line">    <span class="string">"os"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">var</span> _ = fmt.Printf <span class="comment">// For debugging; delete when done. </span></div><div class="line"><span class="keyword">var</span> _ io.Reader    <span class="comment">// For debugging; delete when done. </span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    fd, err := os.Open(<span class="string">"test.go"</span>)</div><div class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">        log.Fatal(err)</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// <span class="doctag">TODO:</span> use fd.</span></div><div class="line">    _ = fd</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Import for side effect<br><code>import _ &quot;net/http/pprof&quot;</code><br>This form of import makes clear that the package is being imported for its side effects, because there is no other possible use of the package: in this file, it doesn’t have a name. (If it did, and we didn’t use that name, the compiler would reject the program.)</p>
</li>
<li><p>Interface checks<br>If it’s necessary only to ask whether a type implements an interface, without actually using the interface itself, perhaps as part of an error check, use the blank identifier to ignore the type-asserted value:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> _, ok := val.(json.Marshaler); ok &#123;</div><div class="line">    fmt.Printf(<span class="string">"value %v of type %T implements json.Marshaler\n"</span>, val, val)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>One place this situation arises is when it is necessary to guarantee within the package implementing the type that it actually satisfies the interface. If a type—for example, <code>json.RawMessage</code> needs a custom JSON representation, it should implement json.Marshaler, but there are no static conversions that would cause the compiler to verify this automatically. If the type inadvertently fails to satisfy the interface, the JSON encoder will still work, but will not use the custom implementation. To guarantee that the implementation is correct, a global declaration using the blank identifier can be used in the package:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> _ json.Marshaler = (*RawMessage)(<span class="literal">nil</span>)</div></pre></td></tr></table></figure></p>
<h4 id="Concurrency-1"><a href="#Concurrency-1" class="headerlink" title="Concurrency"></a>Concurrency</h4><p>concurrency: structuring a program as independently executing components.<br>parallelism: executing calculations in parallel for efficiency on multiple CPUs. </p>
<ul>
<li><p>Channels of channels<br>// TODO</p>
</li>
<li><p>Parallelization<br>Either run your job with environment variable <code>GOMAXPROCS</code> set to the number of cores to use or import the <code>runtime</code> package and call <code>runtime.GOMAXPROCS(NCPU)</code>.<br>A helpful value might be <code>runtime.NumCPU()</code>, which reports the number of logical CPUs on the local machine.</p>
</li>
<li><p>A leaky buffer<br>// TODO</p>
</li>
</ul>
<h4 id="Errors"><a href="#Errors" class="headerlink" title="Errors"></a>Errors</h4><ul>
<li><p>Panic<br>Panic that in effect creates a run-time error that will stop the program.<br>It’s always better to let things continue to run rather than taking down the whole program. One possible counterexample is during initialization: if the library truly cannot set itself up, it might be reasonable to panic, so to speak.</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> user = os.Getenv(<span class="string">"USER"</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">if</span> user == <span class="string">""</span> &#123;</div><div class="line">        <span class="built_in">panic</span>(<span class="string">"no value for $USER"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Recover<br>When panic is called, including implicitly for run-time errors such as indexing a slice out of bounds or failing a type assertion, it immediately stops execution of the current function and begins unwinding the stack of the goroutine, running any deferred functions along the way.<br>If that unwinding reaches the top of the goroutine’s stack, the program dies. However, it is possible to use the built-in function <strong>recover to regain control of the goroutine and resume normal execution</strong>.<br>One application of recover is to shut down a failing goroutine inside a server without killing the other executing goroutines.</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">server</span><span class="params">(workChan &lt;-<span class="keyword">chan</span> *Work)</span></span> &#123;</div><div class="line">    <span class="keyword">for</span> work := <span class="keyword">range</span> workChan &#123;</div><div class="line">        <span class="keyword">go</span> safelyDo(work)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">safelyDo</span><span class="params">(work *Work)</span></span> &#123;</div><div class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">if</span> err := <span class="built_in">recover</span>(); err != <span class="literal">nil</span> &#123;</div><div class="line">            log.Println(<span class="string">"work failed:"</span>, err)</div><div class="line">        &#125;</div><div class="line">    &#125;()</div><div class="line">    do(work)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>// TODO: the rest of contents…</p>
<h4 id="A-web-server"><a href="#A-web-server" class="headerlink" title="A web server"></a>A web server</h4><p>Let’s finish with a complete Go program, a web server.<br>This one is actually a kind of web re-server. Google provides a service at <a href="http://chart.apis.google.com" target="_blank" rel="external">http://chart.apis.google.com</a> that does automatic formatting of data into charts and graphs.<br>It’s hard to use interactively, though, because you need to put the data into the URL as a query.<br>The program here provides a nicer interface to one form of data: given a short piece of text, it calls on the chart server to produce a QR code, a matrix of boxes that encode the text. That image can be grabbed with your cell phone’s camera and interpreted as, for instance, a URL, saving you typing the URL into the phone’s tiny keyboard.<br>Here’s the complete program.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">    <span class="string">"flag"</span></div><div class="line">    <span class="string">"html/template"</span></div><div class="line">    <span class="string">"log"</span></div><div class="line">    <span class="string">"net/http"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">var</span> addr = flag.String(<span class="string">"addr"</span>, <span class="string">":1718"</span>, <span class="string">"http service address"</span>) <span class="comment">// Q=17, R=18</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> templ = template.Must(template.New(<span class="string">"qr"</span>).Parse(templateStr))</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    flag.Parse()</div><div class="line">    http.Handle(<span class="string">"/"</span>, http.HandlerFunc(QR))</div><div class="line">    err := http.ListenAndServe(*addr, <span class="literal">nil</span>)</div><div class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">        log.Fatal(<span class="string">"ListenAndServe:"</span>, err)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">QR</span><span class="params">(w http.ResponseWriter, req *http.Request)</span></span> &#123;</div><div class="line">    templ.Execute(w, req.FormValue(<span class="string">"s"</span>))</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> templateStr = <span class="string">`</span></div><div class="line"><span class="string">&lt;html&gt;</span></div><div class="line"><span class="string">&lt;head&gt;</span></div><div class="line"><span class="string">&lt;title&gt;QR Link Generator&lt;/title&gt;</span></div><div class="line"><span class="string">&lt;/head&gt;</span></div><div class="line"><span class="string">&lt;body&gt;</span></div><div class="line"><span class="string">&#123;&#123;if .&#125;&#125;</span></div><div class="line"><span class="string">&lt;img src="http://chart.apis.google.com/chart?chs=300x300&amp;cht=qr&amp;choe=UTF-8&amp;chl=&#123;&#123;.&#125;&#125;" /&gt;</span></div><div class="line"><span class="string">&lt;br&gt;</span></div><div class="line"><span class="string">&#123;&#123;.&#125;&#125;</span></div><div class="line"><span class="string">&lt;br&gt;</span></div><div class="line"><span class="string">&lt;br&gt;</span></div><div class="line"><span class="string">&#123;&#123;end&#125;&#125;</span></div><div class="line"><span class="string">&lt;form action="/" name=f method="GET"&gt;&lt;input maxLength=1024 size=70</span></div><div class="line"><span class="string">name=s value="" title="Text to QR Encode"&gt;&lt;input type=submit</span></div><div class="line"><span class="string">value="Show QR" name=qr&gt;</span></div><div class="line"><span class="string">&lt;/form&gt;</span></div><div class="line"><span class="string">&lt;/body&gt;</span></div><div class="line"><span class="string">&lt;/html&gt;</span></div><div class="line"><span class="string">`</span></div></pre></td></tr></table></figure></p>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://golang.org/" target="_blank" rel="external">Go Official Site</a><br><a href="https://tour.golang.org/" target="_blank" rel="external">A Tour of Go</a><br><a href="https://www.gitbook.com/book/bingohuang/effective-go-zh-en/details" target="_blank" rel="external">Effective Go</a><br><a href="https://golang.org/ref/spec" target="_blank" rel="external">The Go Programming Language Specification</a></p>
]]></content>
      
        <categories>
            
            <category> Doing </category>
            
            <category> Go </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Notes, Shell Script]]></title>
      <url>/2017/07/31/shell-script-notes/</url>
      <content type="html"><![CDATA[<p><del>Last Modified: 2017-08-11 11:18:00</del></p>
<h3 id="Acknowledge"><a href="#Acknowledge" class="headerlink" title="Acknowledge"></a>Acknowledge</h3><ul>
<li>What is shell script?<br>A shell script is a file containing a series of commands.</li>
</ul>
<h3 id="The-first-shell-script"><a href="#The-first-shell-script" class="headerlink" title="The first shell script"></a>The first shell script</h3><p><code>hello_world.sh</code><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></div><div class="line"><span class="meta">#</span><span class="bash"> The line above is called a shebang.</span></div><div class="line"><span class="meta">#</span><span class="bash"> Every shell script should include this as its first line.</span></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> This is our first script.</span></div><div class="line">echo 'Hello World!'</div></pre></td></tr></table></figure></p>
<ul>
<li>make it executable<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">ls -l hello_world</div><div class="line">-rw-r--r-- 1  me    me      63  2009-03-07 10:10 hello_world</div><div class="line">chmod 755 hello_world</div><div class="line">ls -l hello_world</div><div class="line">-rwxr-xr-x 1  me    me      63  2009-03-07 10:10 hello_world</div><div class="line"></div><div class="line">./hello_word</div><div class="line">Hello World!</div></pre></td></tr></table></figure>
</li>
</ul>
<a id="more"></a>
<h3 id="Build-a-program"><a href="#Build-a-program" class="headerlink" title="Build a program"></a>Build a program</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></div><div class="line"><span class="meta">#</span><span class="bash"> Program to output a system information page</span></div><div class="line">TITLE="System Information Report For $HOSTNAME"</div><div class="line">CURRENT_TIME=$(date +"%x %r %Z")</div><div class="line">TIME_STAMP="Generated $CURRENT_TIME, by $USER"</div><div class="line">echo "&lt;HTML&gt;</div><div class="line">        &lt;HEAD&gt;</div><div class="line">                &lt;TITLE&gt;$TITLE&lt;/TITLE&gt;</div><div class="line">        &lt;/HEAD&gt;</div><div class="line">        &lt;BODY&gt;</div><div class="line">                &lt;H1&gt;$TITLE&lt;/H1&gt;</div><div class="line">                &lt;P&gt;$TIME_STAMP&lt;/P&gt;</div><div class="line">        &lt;/BODY&gt;</div><div class="line">&lt;/HTML&gt;"</div></pre></td></tr></table></figure>
<h4 id="here-documents"><a href="#here-documents" class="headerlink" title="here documents"></a>here documents</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">command &lt;&lt; token</div><div class="line">text</div><div class="line">token</div></pre></td></tr></table></figure>
<ul>
<li>By default, <strong>single and double quotes</strong> within here documents <strong>lose their special meaning</strong> to the shell.</li>
<li>If we change the redirection operator from <strong>“&lt;&lt;” to “&lt;&lt;-“</strong>, the shell will <strong>ignore leading tab characters</strong> in the here document. This allows a here document to be indented, which can improve readability.<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></div><div class="line"><span class="meta">#</span><span class="bash"> Program to output a system information page</span></div><div class="line">TITLE="System Information Report For $HOSTNAME"</div><div class="line">CURRENT_TIME=$(date +"%x %r %Z")</div><div class="line">TIME_STAMP="Generated $CURRENT_TIME, by $USER"</div><div class="line">cat &lt;&lt; _EOF_</div><div class="line">&lt;HTML&gt;</div><div class="line">         &lt;HEAD&gt;</div><div class="line">                &lt;TITLE&gt;$TITLE&lt;/TITLE&gt;</div><div class="line">         &lt;/HEAD&gt;</div><div class="line">         &lt;BODY&gt;</div><div class="line">                &lt;H1&gt;$TITLE&lt;/H1&gt;</div><div class="line">                &lt;P&gt;$TIME_STAMP&lt;/P&gt;</div><div class="line">         &lt;/BODY&gt;</div><div class="line">&lt;/HTML&gt;</div><div class="line">_EOF_</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Top-down-design"><a href="#Top-down-design" class="headerlink" title="Top-down design"></a>Top-down design</h3><h4 id="shell-function"><a href="#shell-function" class="headerlink" title="shell function"></a>shell function</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">function name &#123;</div><div class="line">    commands</div><div class="line">    return</div><div class="line">&#125;</div><div class="line">and</div><div class="line">name () &#123;</div><div class="line">    commands</div><div class="line">    return</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="local-variable"><a href="#local-variable" class="headerlink" title="local variable"></a>local variable</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></div><div class="line">i=0</div><div class="line">function hello &#123;</div><div class="line">    local i=1</div><div class="line">    echo 'local i = '$i</div><div class="line">    echo 'Hello World'</div><div class="line">&#125;</div><div class="line"></div><div class="line">hello</div><div class="line">echo 'global i = '$i</div></pre></td></tr></table></figure>
<h4 id="keep-program-runnable"><a href="#keep-program-runnable" class="headerlink" title="keep program runnable"></a>keep program runnable</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></div><div class="line"><span class="meta">#</span><span class="bash"> Program to output a system information page</span></div><div class="line">TITLE="System Information Report For $HOSTNAME"</div><div class="line">CURRENT_TIME=$(date +"%x %r %Z")</div><div class="line">TIME_STAMP="Generated $CURRENT_TIME, by $USER"</div><div class="line">report_uptime () &#123;</div><div class="line">  echo "Function report_uptime executed."</div><div class="line">  return</div><div class="line">&#125;</div><div class="line">report_disk_space () &#123;</div><div class="line">  echo "Function report_disk_space executed."</div><div class="line">  return</div><div class="line">&#125;</div><div class="line">report_home_space () &#123;</div><div class="line">  echo "Function report_home_space executed."</div><div class="line">  return</div><div class="line">&#125;</div><div class="line">cat &lt;&lt; _EOF_</div><div class="line">&lt;HTML&gt;</div><div class="line">    &lt;HEAD&gt;</div><div class="line">        &lt;TITLE&gt;$TITLE&lt;/TITLE&gt;</div><div class="line">    &lt;/HEAD&gt;</div><div class="line">    &lt;BODY&gt;</div><div class="line">        &lt;H1&gt;$TITLE&lt;/H1&gt;</div><div class="line">        &lt;P&gt;$TIME_STAMP&lt;/P&gt;</div><div class="line">        $(report_uptime)</div><div class="line">        $(report_disk_space)</div><div class="line">        $(report_home_space)</div><div class="line">    &lt;/BODY&gt;</div><div class="line">&lt;/HTML&gt;</div><div class="line">_EOF_</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">###########################################</span></span></div><div class="line">./sys_info_page</div><div class="line">&lt;HTML&gt;</div><div class="line">&lt;HEAD&gt;</div><div class="line">&lt;TITLE&gt;System Information Report For linuxbox&lt;/TITLE&gt;</div><div class="line">&lt;/HEAD&gt;</div><div class="line">&lt;BODY&gt;</div><div class="line">&lt;H1&gt;System Information Report For linuxbox&lt;/H1&gt;</div><div class="line">&lt;P&gt;Generated 03/20/2009 05:17:26 AM EDT, by me&lt;/P&gt;</div><div class="line">Function report_uptime executed.</div><div class="line">Function report_disk_space executed.</div><div class="line">Function report_home_space executed.</div><div class="line">&lt;/BODY&gt;</div><div class="line">&lt;/HTML&gt;</div></pre></td></tr></table></figure>
<h3 id="control-if-branching"><a href="#control-if-branching" class="headerlink" title="control: if branching"></a>control: if branching</h3><h4 id="if-statement"><a href="#if-statement" class="headerlink" title="if statement"></a>if statement</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">if commands; then</div><div class="line">     commands</div><div class="line">[elif commands; then</div><div class="line">     commands...]</div><div class="line">[else</div><div class="line">     commands]</div><div class="line">fi</div></pre></td></tr></table></figure>
<h4 id="exit-status"><a href="#exit-status" class="headerlink" title="exit status"></a>exit status</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">ls -d /usr/bin</div><div class="line">/usr/bin</div><div class="line">echo $?</div><div class="line">0</div><div class="line">ls -d /bin/usr</div><div class="line">ls: cannot access /bin/usr: No such file or directory</div><div class="line">echo $?</div><div class="line">2</div></pre></td></tr></table></figure>
<h4 id="test-expression"><a href="#test-expression" class="headerlink" title="test expression"></a>test expression</h4><p>The test command returns an <strong>exit status</strong> of <strong>zero</strong> when the <strong>expression is true</strong> and a status of <strong>one</strong> when the <strong>expression is false</strong>.<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">test expression</div><div class="line"><span class="meta">#</span><span class="bash"> the more popular one:</span></div><div class="line">[ expression ]</div></pre></td></tr></table></figure></p>
<h4 id="test-file-expression"><a href="#test-file-expression" class="headerlink" title="test file expression"></a>test file expression</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">test_file () &#123;</div><div class="line">    # test-file: Evaluate the status of a file</div><div class="line">    FILE=~/.bashrc</div><div class="line">    if [ -e "$FILE" ]; then</div><div class="line">        if [ -f "$FILE" ]; then</div><div class="line">            echo "$FILE is a regular file."</div><div class="line">        fi</div><div class="line">        if [ -d "$FILE" ]; then</div><div class="line">            echo "$FILE is a directory."</div><div class="line">        fi</div><div class="line">        if [ -r "$FILE" ]; then</div><div class="line">            echo "$FILE is readable."</div><div class="line">        fi</div><div class="line">        if [ -w "$FILE" ]; then</div><div class="line">            echo "$FILE is writable."</div><div class="line">        fi</div><div class="line">        if [ -x "$FILE" ]; then</div><div class="line">            echo "$FILE is executable/searchable."</div><div class="line">        fi</div><div class="line">    else</div><div class="line">        echo "$FILE does not exist"</div><div class="line">        return 1</div><div class="line">    fi</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="test-string-expression"><a href="#test-string-expression" class="headerlink" title="test string expression"></a>test string expression</h4><table>
<thead>
<tr>
<th style="text-align:center">Expression</th>
<th style="text-align:left">Is Ture If…</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">string</td>
<td style="text-align:left">string is not null.</td>
</tr>
<tr>
<td style="text-align:center">-n string</td>
<td style="text-align:left">The length of string is greater than zero.</td>
</tr>
<tr>
<td style="text-align:center">-z string</td>
<td style="text-align:left">The length of string is zero.</td>
</tr>
<tr>
<td style="text-align:center">string1 = string2 or string1 == string2</td>
<td style="text-align:left">string1 and string2 are equal. Single or double equal signs may be used, but the use of double equal signs is greatly preferred.</td>
</tr>
<tr>
<td style="text-align:center">string1 != string2</td>
<td style="text-align:left">string1 and string2 are not equal.</td>
</tr>
<tr>
<td style="text-align:center">string1 &gt; string2</td>
<td style="text-align:left">sting1 sorts after string2.</td>
</tr>
<tr>
<td style="text-align:center">string1 &lt; string2</td>
<td style="text-align:left">string1 sorts before string2.</td>
</tr>
</tbody>
</table>
<h4 id="test-integer-expression"><a href="#test-integer-expression" class="headerlink" title="test integer expression"></a>test integer expression</h4><table>
<thead>
<tr>
<th style="text-align:center">Expression</th>
<th style="text-align:left">Is Ture If…</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">integer1 -eq integer2</td>
<td style="text-align:left">integer1 is equal to integer2.</td>
</tr>
<tr>
<td style="text-align:center">integer1 -ne integer2</td>
<td style="text-align:left">integer1 is not equal to integer2.</td>
</tr>
<tr>
<td style="text-align:center">integer1 -le integer2</td>
<td style="text-align:left">integer1 is less than or equal to integer2.</td>
</tr>
<tr>
<td style="text-align:center">integer1 -lt integer2</td>
<td style="text-align:left">integer1 is less than integer2.</td>
</tr>
<tr>
<td style="text-align:center">integer1 -ge integer2</td>
<td style="text-align:left">integer1 is greater than or equal to integer2.</td>
</tr>
<tr>
<td style="text-align:center">integer1 -gt integer2</td>
<td style="text-align:left">integer1 is greater than integer2.</td>
</tr>
</tbody>
</table>
<h4 id="compound-command-enhanced-test-expression"><a href="#compound-command-enhanced-test-expression" class="headerlink" title="compound command, enhanced test expression"></a>compound command, enhanced test expression</h4><p><code>[[ expression ]]</code>: it is similar to test and it supports all of its expressions.</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> but add a new string expression</span></div><div class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">which</span> returns <span class="literal">true</span> <span class="keyword">if</span> string is matched by the extended regular expression regex</span></div><div class="line">string =~ regex</div></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></div><div class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">test</span>-integer2: evaluate the value of an <span class="built_in">integer</span>.</span></div><div class="line">INT=-5</div><div class="line">if [[ "$INT" =~ ^-?[0-9]+$ ]]; then</div><div class="line">    if [ $INT -eq 0 ]; then</div><div class="line">        echo "INT is zero."</div><div class="line">    else</div><div class="line">        if [ $INT -lt 0 ]; then</div><div class="line">            echo "INT is negative."</div><div class="line">        else</div><div class="line">            echo "INT is positive."</div><div class="line">        fi</div><div class="line">        if [ $((INT % 2)) -eq 0 ]; then</div><div class="line">            echo "INT is even."</div><div class="line">        else</div><div class="line">            echo "INT is odd."</div><div class="line">        fi</div><div class="line">    fi</div><div class="line">else</div><div class="line">    echo "INT is not an integer." &gt;&amp;2</div><div class="line">    exit 1</div><div class="line">fi</div></pre></td></tr></table></figure>
<p>Another added feature of <code>[[ ]]</code> is that the == operator supports pattern matching the same way pathname expansion does. For example:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">FILE=foo.bar</div><div class="line">if [[ $FILE == foo.* ]]; then</div><div class="line"><span class="meta">&gt;</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"<span class="variable">$FILE</span> matches pattern 'foo.*'"</span></span></div><div class="line"><span class="meta">&gt;</span><span class="bash"> <span class="keyword">fi</span></span></div><div class="line">foo.bar matches pattern 'foo.*'</div></pre></td></tr></table></figure></p>
<p><code>(( arithmetic expression ))</code>: it is used to perform arithmetic truth tests.<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></div><div class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">test</span>-integer2a: evaluate the value of an <span class="built_in">integer</span>.</span></div><div class="line">INT=-5</div><div class="line">if [[ "$INT" =~ ^-?[0-9]+$ ]]; then</div><div class="line">    if ((INT == 0)); then</div><div class="line">        echo "INT is zero."</div><div class="line">    else</div><div class="line">        if ((INT &lt; 0)); then</div><div class="line">            echo "INT is negative."</div><div class="line">        else</div><div class="line">            echo "INT is positive."</div><div class="line">        fi</div><div class="line">        if (( ((INT % 2)) == 0)); then</div><div class="line">            echo "INT is even."</div><div class="line">        else</div><div class="line">            echo "INT is odd."</div><div class="line">        fi</div><div class="line">    fi</div><div class="line">else</div><div class="line">    echo "INT is not an integer." &gt;&amp;2</div><div class="line">    exit 1</div><div class="line">fi</div></pre></td></tr></table></figure></p>
<h4 id="combine-expressions"><a href="#combine-expressions" class="headerlink" title="combine expressions"></a>combine expressions</h4><p>Logical Operators</p>
<table>
<thead>
<tr>
<th style="text-align:center">Operation</th>
<th style="text-align:center">test</th>
<th style="text-align:center">[[ ]] and (( ))</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">AND</td>
<td style="text-align:center">-a</td>
<td style="text-align:center"><code>&amp;&amp;</code></td>
</tr>
<tr>
<td style="text-align:center">OR</td>
<td style="text-align:center">-o</td>
<td style="text-align:center"><code>&#124;&#124;</code></td>
</tr>
<tr>
<td style="text-align:center">NOT</td>
<td style="text-align:center">!</td>
<td style="text-align:center">!</td>
</tr>
</tbody>
</table>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></div><div class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">test</span>-integer3: determine <span class="keyword">if</span> an <span class="built_in">integer</span> is within a</span></div><div class="line"><span class="meta">#</span><span class="bash"> specified range of values.</span></div><div class="line">MIN_VAL=1</div><div class="line">MAX_VAL=100</div><div class="line">INT=50</div><div class="line">if [[ "$INT" =~ ^-?[0-9]+$ ]]; then</div><div class="line">    if [[ INT -ge MIN_VAL &amp;&amp; INT -le MAX_VAL ]]; then</div><div class="line">        echo "$INT is within $MIN_VAL to $MAX_VAL."</div><div class="line">    else</div><div class="line">        echo "$INT is out of range."</div><div class="line">    fi</div><div class="line">else</div><div class="line">    echo "INT is not an integer." &gt;&amp;2</div><div class="line">    exit 1</div><div class="line">fi</div></pre></td></tr></table></figure>
<p>We also include parentheses around the expression, for grouping<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">if [ ! \( $INT -ge $MIN_VAL -a $INT -le $MAX_VAL \) ]; then</div><div class="line">    echo "$INT is outside $MIN_VAL to $MAX_VAL."</div><div class="line">else</div><div class="line">    echo "$INT is in range."</div><div class="line">fi</div></pre></td></tr></table></figure></p>
<h4 id="two-control-operators-can-perform-branching"><a href="#two-control-operators-can-perform-branching" class="headerlink" title="two control operators, can perform branching"></a>two control operators, can perform branching</h4><p><code>command1 &amp;&amp; command2</code><br><code>command1 || command2</code></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mkdir temp &amp;&amp; cd temp</div><div class="line">[ -d temp ] || mkdir temp</div><div class="line">[ -d temp ] || exit 1</div></pre></td></tr></table></figure>
<h4 id="detect-permission-with-if"><a href="#detect-permission-with-if" class="headerlink" title="detect permission with if"></a>detect permission with if</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">report_home_space () &#123;</div><div class="line">    if [[ $(id -u) -eq 0 ]]; then</div><div class="line">        cat &lt;&lt;- _EOF_</div><div class="line">        &lt;H2&gt;Home Space Utilization (All Users)&lt;/H2&gt;</div><div class="line">        &lt;PRE&gt;$(du -sh /home/*)&lt;/PRE&gt;</div><div class="line">_EOF_</div><div class="line">    else</div><div class="line">        cat &lt;&lt;- _EOF_</div><div class="line">        &lt;H2&gt;Home Space Utilization ($USER)&lt;/H2&gt;</div><div class="line">        &lt;PRE&gt;$(du -sh $HOME)&lt;/PRE&gt;</div><div class="line">_EOF_</div><div class="line">    fi</div><div class="line">    return</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Keyboard-input"><a href="#Keyboard-input" class="headerlink" title="Keyboard input"></a>Keyboard input</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">read [-options] [variable...]</div></pre></td></tr></table></figure>
<ul>
<li>If read receives <strong>fewer</strong> than the expected number, the <strong>extra variables are empty</strong>.</li>
<li>If read receives <strong>more</strong> than the expected number, the <strong>final variable</strong> will contain <strong>all of the extra input</strong>. </li>
<li>If no variables are listed after the read command, a shell variable, <code>REPLY</code>, will be assigned all the input.</li>
</ul>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></div><div class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">read</span>-secret: input a secret pass phrase</span></div><div class="line">if read -t 10 -sp "Enter secret pass phrase &gt; " secret_pass; then</div><div class="line">    echo "\nSecret pass phrase = '$secret_pass'"</div><div class="line">else</div><div class="line">    echo "\nInput timed out" &gt;&amp;2</div><div class="line">    exit 1</div><div class="line">fi</div></pre></td></tr></table></figure>
<h4 id="IFS-Internal-Field-Separator"><a href="#IFS-Internal-Field-Separator" class="headerlink" title="IFS (Internal Field Separator)"></a>IFS (Internal Field Separator)</h4><p>The shell allows one or more variable assignments to take place immediately before a command.<br>These assignments alter the environment for the command that follows.<br><strong>The effect of the assignment is temporary</strong>; only changing the environment for the duration of the command.<br>In our case, the value of IFS is changed to a colon character.<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></div><div class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">read</span>-ifs: <span class="built_in">read</span> fields from a file</span></div><div class="line">FILE=/etc/passwd</div><div class="line">read -p "Enter a user name &gt; " user_name</div><div class="line">file_info=$(grep "^$user_name:" $FILE)</div><div class="line">if [ -n "$file_info" ]; then</div><div class="line">    IFS=":" read user pw uid gid name home shell &lt;&lt;&lt; "$file_info"</div><div class="line">    echo "User = '$user'"</div><div class="line">    echo "UID = '$uid'"</div><div class="line">    echo "GID = '$gid'"</div><div class="line">    echo "Full Name = '$name'"</div><div class="line">    echo "Home Dir. = '$home'"</div><div class="line">    echo "Shell = '$shell'"</div><div class="line">else</div><div class="line">    echo "No such user '$user_name'" &gt;&amp;2</div><div class="line">    exit 1</div><div class="line">fi</div></pre></td></tr></table></figure></p>
<p>The <code>&lt;&lt;&lt;</code> operator indicates <strong>a here string</strong>.<br>A here string is like a here document, only shorter, consisting of a single string.<br>We might wonder why this <strong>rather oblique method</strong> was chosen rather than:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo "$file_info" | IFS=":" read user pw uid gid name home shell</div></pre></td></tr></table></figure></p>
<p><strong>You Can’t Pipe read</strong><br>The explanation has to do with the way the <strong>shell handles pipelines</strong>.<br>In bash (and other shells such as sh), <strong>pipelines create subshells</strong> (subshells is the subprocesses).<br>Subshells in Unix-like systems create copies of the environment for the processes to use while they execute.<br>When the command exits, the subshell and its environment are destroyed.<br>This means that a subshell can never alter the environment of its parent process.<br><strong>Then the effect of the assignment is lost</strong>.</p>
<h4 id="validating-input"><a href="#validating-input" class="headerlink" title="validating input"></a>validating input</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">    echo "Invalid input '$REPLY'" &gt;&amp;2</div><div class="line">    exit 1</div><div class="line">&#125;</div><div class="line">read -p "Enter a single item &gt; "</div><div class="line"><span class="meta">#</span><span class="bash"> input is empty (invalid)</span></div><div class="line">[[ -z $REPLY ]] &amp;&amp; invalid_input</div><div class="line"><span class="meta">#</span><span class="bash"> input is multiple items (invalid)</span></div><div class="line">(( $(echo $REPLY | wc -w) &gt; 1 )) &amp;&amp; invalid_input</div><div class="line"><span class="meta">#</span><span class="bash"> is input a valid filename?</span></div><div class="line">if [[ $REPLY =~ ^[-[:alnum:]\._]+$ ]]; then</div><div class="line">    echo "'$REPLY' is a valid filename."</div><div class="line">    if [[ -e $REPLY ]]; then</div><div class="line">        echo "And file '$REPLY' exists."</div><div class="line">    else</div><div class="line">        echo "However, file '$REPLY' does not exist."</div><div class="line">    fi</div><div class="line">    # is input a floating point number?</div><div class="line">    if [[ $REPLY =~ ^-?[[:digit:]]*\.[[:digit:]]+$ ]]; then</div><div class="line">        echo "'$REPLY' is a floating point number."</div><div class="line">    else</div><div class="line">        echo "'$REPLY' is not a floating point number."</div><div class="line">    fi</div><div class="line">    # is input an integer?</div><div class="line">    if [[ $REPLY =~ ^-?[[:digit:]]+$ ]]; then</div><div class="line">        echo "'$REPLY' is an integer."</div><div class="line">    else</div><div class="line">        echo "'$REPLY' is not an integer."</div><div class="line">    fi</div><div class="line">else</div><div class="line">    echo "The string '$REPLY' is not a valid filename."</div><div class="line">fi</div></pre></td></tr></table></figure>
<h4 id="menu"><a href="#menu" class="headerlink" title="menu"></a>menu</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></div><div class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">read</span>-menu: a menu driven system information program</span></div><div class="line">clear</div><div class="line">echo "</div><div class="line">Please Select:</div><div class="line"></div><div class="line">    1. Display System Information</div><div class="line">    2. Display Disk Space</div><div class="line">    3. Display Home Space Utilization</div><div class="line">    0. Quit</div><div class="line">"</div><div class="line">read -p "Enter selection [0-3] &gt; "</div><div class="line"></div><div class="line">if [[ $REPLY =~ ^[0-3]$ ]]; then</div><div class="line">    if [[ $REPLY == 0 ]]; then</div><div class="line">        echo "Program terminated."</div><div class="line">        exit</div><div class="line">    fi</div><div class="line">    if [[ $REPLY == 1 ]]; then</div><div class="line">        echo "Hostname: $HOSTNAME"</div><div class="line">        uptime</div><div class="line">        exit</div><div class="line">    fi</div><div class="line">    if [[ $REPLY == 2 ]]; then</div><div class="line">        df -h</div><div class="line">        exit</div><div class="line">    fi</div><div class="line">    if [[ $REPLY == 3 ]]; then</div><div class="line">        if [[ $(id -u) -eq 0 ]]; then</div><div class="line">            echo "Home Space Utilization (All Users)"</div><div class="line">            du -sh /home/*</div><div class="line">        else</div><div class="line">            echo "Home Space Utilization ($USER)"</div><div class="line">            du -sh $HOME</div><div class="line">        fi</div><div class="line">        exit</div><div class="line">    fi</div><div class="line">else</div><div class="line">    echo "Invalid entry." &gt;&amp;2</div><div class="line">    exit 1</div><div class="line">fi</div></pre></td></tr></table></figure>
<h3 id="Flow-control-while-until-loop"><a href="#Flow-control-while-until-loop" class="headerlink" title="Flow control: while/until loop"></a>Flow control: while/until loop</h3><h4 id="while"><a href="#while" class="headerlink" title="while"></a>while</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">while commands; do commands; done</div></pre></td></tr></table></figure>
<p><code>break</code> and <code>continue</code><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></div><div class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">while</span>-menu2: a menu driven system information program</span></div><div class="line">DELAY=3 # Number of seconds to display results</div><div class="line">while true; do</div><div class="line">    clear</div><div class="line">    cat &lt;&lt;- _EOF_</div><div class="line">        Please Select:</div><div class="line">        1. Display System Information</div><div class="line">        2. Display Disk Space</div><div class="line">        3. Display Home Space Utilization</div><div class="line">        0. Quit</div><div class="line">    _EOF_</div><div class="line">    read -p "Enter selection [0-3] &gt; "</div><div class="line">    if [[ $REPLY =~ ^[0-3]$ ]]; then</div><div class="line">        if [[ $REPLY == 1 ]]; then</div><div class="line">            echo "Hostname: $HOSTNAME"</div><div class="line">            uptime</div><div class="line">            sleep $DELAY</div><div class="line">            continue</div><div class="line">        fi</div><div class="line">        if [[ $REPLY == 2 ]]; then</div><div class="line">            df -h</div><div class="line">            sleep $DELAY</div><div class="line">            continue</div><div class="line">        fi</div><div class="line">        if [[ $REPLY == 3 ]]; then</div><div class="line">            if [[ $(id -u) -eq 0 ]]; then</div><div class="line">                echo "Home Space Utilization (All Users)"</div><div class="line">                du -sh /home/*</div><div class="line">            else</div><div class="line">                echo "Home Space Utilization ($USER)"</div><div class="line">                du -sh $HOME</div><div class="line">            fi</div><div class="line">            sleep $DELAY</div><div class="line">            continue</div><div class="line">        fi</div><div class="line">        if [[ $REPLY == 0 ]]; then</div><div class="line">            break</div><div class="line">        fi</div><div class="line">    else</div><div class="line">        echo "Invalid entry."</div><div class="line">        sleep $DELAY</div><div class="line">    fi</div><div class="line">done</div><div class="line">echo "Program terminated."</div></pre></td></tr></table></figure></p>
<h4 id="until"><a href="#until" class="headerlink" title="until"></a>until</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></div><div class="line"><span class="meta">#</span><span class="bash"> until-count: display a series of numbers</span></div><div class="line">count=1</div><div class="line">until [ $count -gt 5 ]; do</div><div class="line">    echo $count</div><div class="line">    count=$((count + 1))</div><div class="line">done</div><div class="line">echo "Finished."</div></pre></td></tr></table></figure>
<h4 id="process-files-with-while-or-until-loop"><a href="#process-files-with-while-or-until-loop" class="headerlink" title="process files with while or until loop"></a>process files with while or until loop</h4><ul>
<li><p>redirection</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></div><div class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">while</span>-read: <span class="built_in">read</span> lines from a file</span></div><div class="line">while read distro version release; do</div><div class="line">    printf "Distro: %s\tVersion: %s\tReleased: %s\n" \</div><div class="line">        $distro \</div><div class="line">        $version \</div><div class="line">        $release</div><div class="line">done &lt; distros.txt</div></pre></td></tr></table></figure>
</li>
<li><p>pipe</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></div><div class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">while</span>-read2: <span class="built_in">read</span> lines from a file</span></div><div class="line">sort -k 1,1 -k 2n distros.txt | while read distro version release; do</div><div class="line">    printf "Distro: %s\tVersion: %s\tReleased: %s\n" \</div><div class="line">        $distro \</div><div class="line">        $version \</div><div class="line">        $release</div><div class="line">done</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Stay-out-of-trouble"><a href="#Stay-out-of-trouble" class="headerlink" title="Stay out of trouble"></a>Stay out of trouble</h3><h4 id="syntactic-errors"><a href="#syntactic-errors" class="headerlink" title="syntactic errors"></a>syntactic errors</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">if [ $number = 1 ]; then echo "Number is equal to 1."</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> add double quotes to prevent unexpected expansion</span></div><div class="line">if [ "$number = 1]; the echo "Number is equal to 1."</div></pre></td></tr></table></figure>
<h4 id="logical-errors"><a href="#logical-errors" class="headerlink" title="logical errors"></a>logical errors</h4><ul>
<li>incorrect conditional expressions. </li>
<li>“Off by one” errors. </li>
<li>Unanticipated situations.</li>
</ul>
<h4 id="testing"><a href="#testing" class="headerlink" title="testing"></a>testing</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> use <span class="string">'echo'</span> to show the expanded parameters</span></div><div class="line">echo rm *  # TESTING</div></pre></td></tr></table></figure>
<h4 id="debugging"><a href="#debugging" class="headerlink" title="debugging"></a>debugging</h4><ul>
<li>isolate the area related to problem<br><strong>commenting out</strong> the code sections the code</li>
<li>tracing<ul>
<li>echo more messages</li>
<li>a method of tracing of bash<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">!/bin/bash -x</span></div><div class="line"><span class="meta">#</span><span class="bash"> trouble: script to demonstrate common errors</span></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> to activate tracing <span class="keyword">for</span> the entire script by adding the -x option to the first line</span></div><div class="line">number=1</div><div class="line">if [ $number = 1 ]; then</div><div class="line">    echo "Number is equal to 1."</div><div class="line">else</div><div class="line">    echo "Number is not equal to 1."</div><div class="line">fi</div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">#############################################</span></span></div><div class="line">export PS4='$LINENO + '</div><div class="line">trouble</div><div class="line">5 + number=1</div><div class="line">7 + '[' 1 = 1 ']'</div><div class="line">8 + echo 'Number is equal to 1.'</div><div class="line">Number is equal to 1.</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></div><div class="line"><span class="meta">#</span><span class="bash"> trouble: script to demonstrate common errors</span></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> to perform a trace on a selected portion of a script</span></div><div class="line"><span class="meta">#</span><span class="bash"> we can use the <span class="built_in">set</span> <span class="built_in">command</span> with the -x option:</span></div><div class="line">number=1</div><div class="line">set -x # Turn on tracing</div><div class="line">if [ $number = 1 ]; then</div><div class="line">    echo "Number is equal to 1."</div><div class="line">else</div><div class="line">    echo "Number is not equal to 1."</div><div class="line">fi</div><div class="line">set +x # Turn off tracing</div></pre></td></tr></table></figure>
<h3 id="Flow-control-case-branching"><a href="#Flow-control-case-branching" class="headerlink" title="Flow control: case branching"></a>Flow control: case branching</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">case word in</div><div class="line">    [pattern [| pattern]...) commands ;;]...</div><div class="line">esac</div></pre></td></tr></table></figure>
<p>The patterns used by case are the same as those used by pathname expansion. Here are some valid patterns:<br><code>a)</code>:    Matches if word equals “a”.<br><code>[[:alpha:]])</code>:    Matches if word is a single alphabetic character.<br><code>???)</code>:    Matches if word is exactly three characters long.<br><code>*.txt)</code>:    Matches if word ends with the characters “.txt”.<br><code>*)</code>:    Matches any value of word. It is good practice to include this as the last pattern in a case command; that is, to catch any possible invalid values.<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></div><div class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">case</span>-menu: a menu driven system information program</span></div><div class="line">clear</div><div class="line">echo "</div><div class="line">Please Select:</div><div class="line">1. Display System Information</div><div class="line">2. Display Disk Space</div><div class="line">3. Display Home Space Utilization</div><div class="line">0. Quit</div><div class="line">"</div><div class="line">read -p "Enter selection [0-3] &gt; "</div><div class="line">case $REPLY in</div><div class="line">    0)  echo "Program terminated."</div><div class="line">        exit</div><div class="line">        ;;</div><div class="line">    1)  echo "Hostname: $HOSTNAME"</div><div class="line">        uptime</div><div class="line">        ;;</div><div class="line">    2)  df -h</div><div class="line">        ;;</div><div class="line">    3)  if [[ $(id -u) -eq 0 ]]; then</div><div class="line">            echo "Home Space Utilization (All Users)"</div><div class="line">            du -sh /home/*</div><div class="line">        else</div><div class="line">            echo "Home Space Utilization ($USER)"</div><div class="line">            du -sh $HOME</div><div class="line">        fi</div><div class="line">        ;;</div><div class="line">    *)  echo "Invalid entry" &gt;&amp;2</div><div class="line">        exit 1</div><div class="line">        ;;</div><div class="line">esac</div></pre></td></tr></table></figure></p>
<h4 id="match-more-the-one-test"><a href="#match-more-the-one-test" class="headerlink" title="match more the one test"></a>match more the one test</h4><p>In bash <strong>prior to version 4.0</strong> there was <strong>no way</strong> for case to match more than one test.<br>Modern versions of bash, add the <code>;;&amp;</code> notation to terminate each action, we can do this:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></div><div class="line"><span class="meta">#</span><span class="bash"> case4-2: <span class="built_in">test</span> a character</span></div><div class="line">read -n 1 -p "Type a character &gt; "</div><div class="line">echo</div><div class="line">case $REPLY in</div><div class="line">    [[:upper:]])    echo "'$REPLY' is upper case." ;;&amp;</div><div class="line">    [[:lower:]])    echo "'$REPLY' is lower case." ;;&amp;</div><div class="line">    [[:alpha:]])    echo "'$REPLY' is alphabetic." ;;&amp;</div><div class="line">    [[:digit:]])    echo "'$REPLY' is a digit." ;;&amp;</div><div class="line">    [[:graph:]])    echo "'$REPLY' is a visible character." ;;&amp;</div><div class="line">    [[:punct:]])    echo "'$REPLY' is a punctuation symbol." ;;&amp;</div><div class="line">    [[:space:]])    echo "'$REPLY' is a whitespace character." ;;&amp;</div><div class="line">    [[:xdigit:]])   echo "'$REPLY' is a hexadecimal digit." ;;&amp;</div><div class="line">esac</div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">####################################################################</span></span></div><div class="line">case4-2</div><div class="line">Type a character &gt; a</div><div class="line">'a' is lower case.</div><div class="line">'a' is alphabetic.</div><div class="line">'a' is a visible character.</div><div class="line">'a' is a hexadecimal digit.</div></pre></td></tr></table></figure></p>
<h3 id="Positional-parameters"><a href="#Positional-parameters" class="headerlink" title="Positional parameters"></a>Positional parameters</h3><h4 id="access-to-the-contents-of-the-command-line"><a href="#access-to-the-contents-of-the-command-line" class="headerlink" title="access to the contents of the command line"></a>access to the contents of the command line</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></div><div class="line"><span class="meta">#</span><span class="bash"> posit-param: script to view <span class="built_in">command</span> line parameters</span></div><div class="line">echo "</div><div class="line">Number of arguments: $#</div><div class="line">\$0 = $0</div><div class="line">\$1 = $1</div><div class="line">\$2 = $2</div><div class="line">"</div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">####################################################</span></span></div><div class="line">posit-param</div><div class="line">Number of arguments: 0</div><div class="line"><span class="meta">$</span><span class="bash">0 = /home/me/bin/posit-param</span></div><div class="line"><span class="meta">$</span><span class="bash">1 =</span></div><div class="line"><span class="meta">$</span><span class="bash">2 =</span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">####################################################</span></span></div><div class="line">Number of arguments: 2</div><div class="line">posit-param a b</div><div class="line"><span class="meta">$</span><span class="bash">0 = /home/me/bin/posit-param</span></div><div class="line"><span class="meta">$</span><span class="bash">1 = a</span></div><div class="line"><span class="meta">$</span><span class="bash">2 = b</span></div></pre></td></tr></table></figure>
<h4 id="shift-access-to-a-large-number-of-arguments"><a href="#shift-access-to-a-large-number-of-arguments" class="headerlink" title="shift, access to a large number of arguments"></a>shift, access to a large number of arguments</h4><p>Each time shift is executed, the value of <code>$2</code> is moved to <code>$1</code>, the value of <code>$3</code> is moved to <code>$2</code> and so on.<br>The value of <code>$#</code> is also <strong>reduced by one</strong>.<br>In addition to <code>$0</code>, which <strong>never changes</strong>.<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></div><div class="line"><span class="meta">#</span><span class="bash"> posit-param2: script to display all arguments</span></div><div class="line">count=1</div><div class="line">while [[ $# -gt 0 ]]; do</div><div class="line">    echo "Argument $count = $1"</div><div class="line">    count=$((count + 1))</div><div class="line">    shift</div><div class="line">done</div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">####################################################</span></span></div><div class="line">posit-param2 a b c d</div><div class="line">Argument 1 = a</div><div class="line">Argument 2 = b</div><div class="line">Argument 3 = c</div><div class="line">Argument 4 = d</div></pre></td></tr></table></figure></p>
<h4 id="group-positional-parameters"><a href="#group-positional-parameters" class="headerlink" title="group positional parameters"></a>group positional parameters</h4><p><code>“$@”</code> is by far the most useful for most situations, because it preserves the integrity of each positional parameter.<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></div><div class="line"><span class="meta">#</span><span class="bash"> posit-params3 : script to demonstrate $* and <span class="variable">$@</span></span></div><div class="line">print_params () &#123;</div><div class="line">    echo "\$1 = $1"</div><div class="line">    echo "\$2 = $2"</div><div class="line">    echo "\$3 = $3"</div><div class="line">    echo "\$4 = $4"</div><div class="line">&#125;</div><div class="line">pass_params () &#123;</div><div class="line">    echo -e "\n" '$* :';      print_params   $*</div><div class="line">    echo -e "\n" '"$*" :';    print_params   "$*"</div><div class="line">    echo -e "\n" '$@ :';      print_params   $@</div><div class="line">    echo -e "\n" '"$@" :';    print_params   "$@"</div><div class="line">&#125;</div><div class="line">pass_params "word" "words with spaces"</div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">####################################################</span></span></div><div class="line">posit-param3</div><div class="line"><span class="meta"> $</span><span class="bash">* :</span></div><div class="line"><span class="meta">$</span><span class="bash">1 = word</span></div><div class="line"><span class="meta">$</span><span class="bash">2 = words</span></div><div class="line"><span class="meta">$</span><span class="bash">3 = with</span></div><div class="line"><span class="meta">$</span><span class="bash">4 = spaces</span></div><div class="line"> "$*" :</div><div class="line"><span class="meta">$</span><span class="bash">1 = word words with spaces</span></div><div class="line"><span class="meta">$</span><span class="bash">2 =</span></div><div class="line"><span class="meta">$</span><span class="bash">3 =</span></div><div class="line"><span class="meta">$</span><span class="bash">4 =</span></div><div class="line"><span class="meta"> $</span><span class="bash">@ :</span></div><div class="line"><span class="meta">$</span><span class="bash">1 = word</span></div><div class="line"><span class="meta">$</span><span class="bash">2 = words</span></div><div class="line"><span class="meta">$</span><span class="bash">3 = with</span></div><div class="line"><span class="meta">$</span><span class="bash">4 = spaces</span></div><div class="line"> "$@" :</div><div class="line"><span class="meta">$</span><span class="bash">1 = word</span></div><div class="line"><span class="meta">$</span><span class="bash">2 = words with spaces</span></div><div class="line"><span class="meta">$</span><span class="bash">3 =</span></div><div class="line"><span class="meta">$</span><span class="bash">4 =</span></div></pre></td></tr></table></figure></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> with our arguments</span></div><div class="line">both $* and $@ produce a four word result:</div><div class="line">     word words with spaces</div><div class="line">"$*" produces a one word result:</div><div class="line">    "word words with spaces"</div><div class="line">"$@" produces a two word result:</div><div class="line">    "word" "words with spaces"</div></pre></td></tr></table></figure>
<h4 id="a-complicated-application"><a href="#a-complicated-application" class="headerlink" title="a complicated application"></a>a complicated application</h4><ul>
<li>Output file <code>-f or --file</code></li>
<li>Interactive mode <code>-i or --interactive</code></li>
<li>Help <code>-h or --help</code><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></div><div class="line"><span class="meta">#</span><span class="bash"> sys_info_page: program to output a system information page</span></div><div class="line">PROGNAME=$(basename $0)</div><div class="line">TITLE="System Information Report For $HOSTNAME"</div><div class="line">CURRENT_TIME=$(date +"%x %r %Z")</div><div class="line">TIMESTAMP="Generated $CURRENT_TIME, by $USER"</div><div class="line">report_uptime () &#123;</div><div class="line">    cat &lt;&lt;- _EOF_</div><div class="line">        &lt;H2&gt;System Uptime&lt;/H2&gt;</div><div class="line">        &lt;PRE&gt;$(uptime)&lt;/PRE&gt;</div><div class="line">    _EOF_</div><div class="line">    return</div><div class="line">&#125;</div><div class="line">report_disk_space () &#123;</div><div class="line">    cat &lt;&lt;- _EOF_</div><div class="line">        &lt;H2&gt;Disk Space Utilization&lt;/H2&gt;</div><div class="line">        &lt;PRE&gt;$(df -h)&lt;/PRE&gt;</div><div class="line">    _EOF_</div><div class="line">    return</div><div class="line">&#125;</div><div class="line">report_home_space () &#123;</div><div class="line">    if [[ $(id -u) -eq 0 ]]; then</div><div class="line">        cat &lt;&lt;- _EOF_</div><div class="line">            &lt;H2&gt;Home Space Utilization (All Users)&lt;/H2&gt;</div><div class="line">            &lt;PRE&gt;$(du -sh /home/*)&lt;/PRE&gt;</div><div class="line">        _EOF_</div><div class="line">    else</div><div class="line">        cat &lt;&lt;- _EOF_</div><div class="line">            &lt;H2&gt;Home Space Utilization ($USER)&lt;/H2&gt;</div><div class="line">            &lt;PRE&gt;$(du -sh $HOME)&lt;/PRE&gt;</div><div class="line">        _EOF_</div><div class="line">    fi</div><div class="line">    return</div><div class="line">&#125;</div><div class="line">usage () &#123;</div><div class="line">    echo "$PROGNAME: usage: $PROGNAME [-f file | -i]"</div><div class="line">    return</div><div class="line">&#125;</div><div class="line">write_html_page () &#123;</div><div class="line">    cat &lt;&lt;- _EOF_</div><div class="line">        &lt;HTML&gt;</div><div class="line">            &lt;HEAD&gt;</div><div class="line">                &lt;TITLE&gt;$TITLE&lt;/TITLE&gt;</div><div class="line">            &lt;/HEAD&gt;</div><div class="line">            &lt;BODY&gt;</div><div class="line">                &lt;H1&gt;$TITLE&lt;/H1&gt;</div><div class="line">                &lt;P&gt;$TIMESTAMP&lt;/P&gt;</div><div class="line">                $(report_uptime)</div><div class="line">                $(report_disk_space)</div><div class="line">                $(report_home_space)</div><div class="line">            &lt;/BODY&gt;</div><div class="line">        &lt;/HTML&gt;</div><div class="line">    _EOF_</div><div class="line">    return</div><div class="line">&#125;</div><div class="line"><span class="meta">#</span><span class="bash"> process <span class="built_in">command</span> line options</span></div><div class="line">interactive=</div><div class="line">filename=</div><div class="line">while [[ -n $1 ]]; do</div><div class="line">    case $1 in</div><div class="line">        -f | --file)          shift</div><div class="line">                              filename=$1</div><div class="line">                              ;;</div><div class="line">        -i | --interactive)   interactive=1</div><div class="line">                              ;;</div><div class="line">        -h | --help)          usage</div><div class="line">                              exit</div><div class="line">                              ;;</div><div class="line">        *)                    usage &gt;&amp;2</div><div class="line">                              exit 1</div><div class="line">                              ;;</div><div class="line">    esac</div><div class="line">    shift</div><div class="line">done</div><div class="line"><span class="meta">#</span><span class="bash"> interactive mode</span></div><div class="line">if [[ -n $interactive ]]; then</div><div class="line">    while true; do</div><div class="line">        read -p "Enter name of output file: " filename</div><div class="line">        if [[ -e $filename ]]; then</div><div class="line">            read -p "'$filename' exists. Overwrite? [y/n/q] &gt; "</div><div class="line">            case $REPLY in</div><div class="line">                Y|y)    break</div><div class="line">                        ;;</div><div class="line">                Q|q)    echo "Program terminated."</div><div class="line">                        exit</div><div class="line">                        ;;</div><div class="line">                *)      continue</div><div class="line">                        ;;</div><div class="line">            esac</div><div class="line">        fi</div><div class="line">    done</div><div class="line">fi</div><div class="line"><span class="meta">#</span><span class="bash"> output html page</span></div><div class="line">if [[ -n $filename ]]; then</div><div class="line">    if touch $filename &amp;&amp; [[ -f $filename ]]; then</div><div class="line">        write_html_page &gt; $filename</div><div class="line">    else</div><div class="line">        echo "$PROGNAME: Cannot write file '$filename'" &gt;&amp;2</div><div class="line">        exit 1</div><div class="line">    fi</div><div class="line">else</div><div class="line">    write_html_page</div><div class="line">fi</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="control-for-loop"><a href="#control-for-loop" class="headerlink" title="control: for loop"></a>control: for loop</h3><h4 id="the-original-for-command’s-syntax"><a href="#the-original-for-command’s-syntax" class="headerlink" title="the original for command’s syntax"></a>the original for command’s syntax</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">for variable [in words]; do</div><div class="line">    commands</div><div class="line">done</div></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></div><div class="line"><span class="meta">#</span><span class="bash"> longest-word : find longest string <span class="keyword">in</span> a file</span></div><div class="line">while [[ -n $1 ]]; do</div><div class="line">    if [[ -r $1 ]]; then</div><div class="line">        max_word=</div><div class="line">        max_len=0</div><div class="line">        for i in $(strings $1); do</div><div class="line">            len=$(echo $i | wc -c)</div><div class="line">            if (( len &gt; max_len )); then</div><div class="line">                max_len=$len</div><div class="line">                max_word=$i</div><div class="line">            fi</div><div class="line">        done</div><div class="line">        echo "$1: '$max_word' ($max_len characters)"</div><div class="line">    fi</div><div class="line">    shift</div><div class="line">done</div></pre></td></tr></table></figure>
<p>If the optional in words portion of the for command is omitted, for defaults to processing the <strong>positional parameters</strong>.<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> test.sh </span></div><div class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></div><div class="line">for i; do</div><div class="line">    echo $i</div><div class="line">done</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">###################</span></span></div><div class="line">test 1 2 3</div><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td></tr></table></figure></p>
<h4 id="C-style"><a href="#C-style" class="headerlink" title="C style"></a>C style</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">for (( expression1; expression2; expression3 )); do</div><div class="line">    commands</div><div class="line">done</div></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></div><div class="line"><span class="meta">#</span><span class="bash"> simple_counter : demo of C style <span class="keyword">for</span> <span class="built_in">command</span></span></div><div class="line">for (( i=0; i&lt;5; i=i+1 )); do</div><div class="line">    echo $i</div><div class="line">done</div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">###############################################</span></span></div><div class="line">simple_counter</div><div class="line">0</div><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td></tr></table></figure>
<h3 id="Strings-and-numbers"><a href="#Strings-and-numbers" class="headerlink" title="Strings and numbers"></a>Strings and numbers</h3><p><code>omitted</code><br><a href="http://billie66.github.io/TLCL/book/chap35.html" target="_blank" rel="external">Strings and number</a></p>
<h3 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h3><ul>
<li>shell arrays is <code>0-based</code>.</li>
<li><p>one way to create an array</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">declare -a a</div></pre></td></tr></table></figure>
</li>
<li><p>usually in the following way</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">name[subscript]=value</div><div class="line">name=(value1 value2 ...)</div><div class="line">days=(Sun Mon Tue Wed Thu Fri Sat)</div><div class="line">days=([0]=Sun [1]=Mon [2]=Tue [3]=Wed [4]=Thu [5]=Fri [6]=Sat)</div></pre></td></tr></table></figure>
</li>
<li><p>output the whole array<br><strong>(a small mistake in the book, corrected)</strong></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> animals=(<span class="string">"a dog"</span> <span class="string">"a cat"</span> <span class="string">"a fish"</span>)</span></div><div class="line">for i in $&#123;animals[*]&#125;; do echo $i; done</div><div class="line">a dog</div><div class="line">a cat</div><div class="line">a fish</div><div class="line">for i in $&#123;animals[@]&#125;; do echo $i; done</div><div class="line">a dog</div><div class="line">a cat</div><div class="line">a fish</div><div class="line">for i in "$&#123;animals[*]&#125;"; do echo $i; done</div><div class="line">a dog a cat a fish</div><div class="line">for i in "$&#123;animals[@]&#125;"; do echo $i; done</div><div class="line">a dog</div><div class="line">a cat</div><div class="line">a fish</div></pre></td></tr></table></figure>
</li>
<li><p>determine the number of elements</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">a[100]=foo</div><div class="line">echo $&#123;#a[@]&#125; # number of array elements</div><div class="line">1</div><div class="line">echo $&#123;#a[100]&#125; # length of element 100</div><div class="line">3</div></pre></td></tr></table></figure>
</li>
<li><p>find the index of array used</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">foo=([2]=a [4]=b [6]=c)</div><div class="line">for i in "$&#123;foo[@]&#125;"; do echo $i; done</div><div class="line">a</div><div class="line">b</div><div class="line">c</div><div class="line">for i in "$&#123;!foo[@]&#125;"; do echo $i; done</div><div class="line">2</div><div class="line">4</div><div class="line">6</div></pre></td></tr></table></figure>
</li>
<li><p>sort the array</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></div><div class="line"><span class="meta">#</span><span class="bash"> array-sort : Sort an array</span></div><div class="line">a=(f e d c b a)</div><div class="line">echo "Original array: $&#123;a[@]&#125;"</div><div class="line">a_sorted=($(for i in "$&#123;a[@]&#125;"; do echo $i; done | sort))</div><div class="line">echo "Sorted array: $&#123;a_sorted[@]&#125;"</div></pre></td></tr></table></figure>
</li>
<li><p>delete an array</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> foo=(a b c d e f)</span></div><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="variable">$&#123;foo[@]&#125;</span></span></div><div class="line">a b c d e f</div><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">unset</span> foo</span></div><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="variable">$&#123;foo[@]&#125;</span></span></div><div class="line"><span class="meta">$</span><span class="bash"></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">#################################</span></span></div><div class="line"><span class="meta">$</span><span class="bash"> foo=(a b c d e f)</span></div><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="variable">$&#123;foo[@]&#125;</span></span></div><div class="line">a b c d e f</div><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">unset</span> <span class="string">'foo[2]'</span></span></div><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="variable">$&#123;foo[@]&#125;</span></span></div><div class="line">a b d e f</div></pre></td></tr></table></figure>
</li>
<li><p>any reference to an array variable without a subscript refers to <strong>element zero</strong> of the array</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> foo=(a b c d e f)</span></div><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="variable">$&#123;foo[@]&#125;</span></span></div><div class="line">a b c d e f</div><div class="line"><span class="meta">$</span><span class="bash"> foo=A</span></div><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="variable">$&#123;foo[@]&#125;</span></span></div><div class="line">A b c d e f</div></pre></td></tr></table></figure>
</li>
<li><p>associative array<br>associative arrays can <strong>only</strong> be created with the <code>declare</code> command using the new <code>-A</code> option</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">declare -A colors</div><div class="line">colors["red"]="#ff0000"</div><div class="line">colors["green"]="#00ff00"</div><div class="line">colors["blue"]="#0000ff"</div><div class="line">echo $&#123;colors["blue"]&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Odds-and-ends"><a href="#Odds-and-ends" class="headerlink" title="Odds and ends"></a>Odds and ends</h3><ul>
<li>group command or subshell<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> group <span class="built_in">command</span></span></div><div class="line"><span class="meta">#</span><span class="bash"> the braces must be separated from the commands by a space</span></div><div class="line"><span class="meta">#</span><span class="bash"> the last <span class="built_in">command</span> must be terminated with either a semicolon or a newline prior to the closing brace.</span></div><div class="line">&#123; command1; command2; [command3; ...] &#125;</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> subshell</span></div><div class="line">(command1; command2; [command3;...])</div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">ls -l &gt; output.txt</div><div class="line">echo "Listing of foo.txt" &gt;&gt; output.txt</div><div class="line">cat foo.txt &gt;&gt; output.txt</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">##################################################################</span></span></div><div class="line">&#123; ls -l; echo "Listing of foo.txt"; cat foo.txt; &#125; &gt; output.txt</div><div class="line">(ls -l; echo "Listing of foo.txt"; cat foo.txt) &gt; output.txt</div></pre></td></tr></table></figure>
<ul>
<li>process substitution<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">for</span> processes that produce standard output:</span></div><div class="line">&lt;(a list of commands)</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">for</span> processes that intake standard input:</span></div><div class="line"><span class="meta">&gt;</span><span class="bash">(a list of commands)</span></div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> to solve the problem brought by subshell, we can employ process substitution like this:</span></div><div class="line">read &lt; &lt;(echo "foo")</div><div class="line">echo $REPLY</div></pre></td></tr></table></figure>
<ul>
<li>trap<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">trap argument signal [signal...]</div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></div><div class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">trap</span>-demo2 : simple signal handling demo</span></div><div class="line">exit_on_signal_SIGINT () &#123;</div><div class="line">    echo "Script interrupted." 2&gt;&amp;1</div><div class="line">    exit 0</div><div class="line">&#125;</div><div class="line">exit_on_signal_SIGTERM () &#123;</div><div class="line">    echo "Script terminated." 2&gt;&amp;1</div><div class="line">    exit 0</div><div class="line">&#125;</div><div class="line">trap exit_on_signal_SIGINT SIGINT</div><div class="line">trap exit_on_signal_SIGTERM SIGTERM</div><div class="line">for i in &#123;1..5&#125;; do</div><div class="line">    echo "Iteration $i of 5"</div><div class="line">    sleep 5</div><div class="line">done</div></pre></td></tr></table></figure>
<ul>
<li><p>temp file<br><code>mktemp</code></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">tempfile=$(mktemp /tmp/foobar.$$.XXXXXXXXXX)</div><div class="line">echo $tempfile</div><div class="line">/tmp/foobar.6593.UOZuvM6654</div></pre></td></tr></table></figure>
</li>
<li><p>asynchronous execution<br><code>wait</code></p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></div><div class="line"><span class="meta">#</span><span class="bash"> async-parent : Asynchronous execution demo (parent)</span></div><div class="line">echo "Parent: starting..."</div><div class="line">echo "Parent: launching child script..."</div><div class="line">async-child &amp;</div><div class="line">pid=$!</div><div class="line">echo "Parent: child (PID= $pid) launched."</div><div class="line">echo "Parent: continuing..."</div><div class="line">sleep 2</div><div class="line">echo "Parent: pausing to wait for child to finish..."</div><div class="line">wait $pid</div><div class="line">echo "Parent: child is finished. Continuing..."</div><div class="line">echo "Parent: parent is done. Exiting."</div></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></div><div class="line"><span class="meta">#</span><span class="bash"> async-child : Asynchronous execution demo (child)</span></div><div class="line">echo "Child: child is running..."</div><div class="line">sleep 5</div><div class="line">echo "Child: child is done. Exiting."</div></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">async-parent</div><div class="line">Parent: starting...</div><div class="line">Parent: launching child script...</div><div class="line">Parent: child (PID= 6741) launched.</div><div class="line">Parent: continuing...</div><div class="line">Child: child is running...</div><div class="line">Parent: pausing to wait for child to finish...</div><div class="line">Child: child is done. Exiting.</div><div class="line">Parent: child is finished. Continuing...</div><div class="line">Parent: parent is done. Exiting.</div></pre></td></tr></table></figure>
<ul>
<li>named pipe<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> it works as `process1 | process2`</span></div><div class="line">process1 &gt; named_pipe</div><div class="line">process2 &lt; named_pipe</div></pre></td></tr></table></figure>
</li>
</ul>
<p><code>mkfifo</code><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">mkfifo pipe1</div><div class="line"><span class="meta">#</span><span class="bash"> process1</span></div><div class="line">ls -l &gt; pipe1</div><div class="line"><span class="meta">#</span><span class="bash"> process2</span></div><div class="line">cat &lt; pipe1</div></pre></td></tr></table></figure></p>
<h3 id="Summay"><a href="#Summay" class="headerlink" title="Summay"></a>Summay</h3><p>Well, we have completed our journey. The only thing left to do now is <strong>practice, practice, practice</strong>. Even though we covered a lot of ground in our trek, we barely <strong>scratched the surface</strong> as far as the command line goes. There are still thousands of command line programs left to be discovered and enjoyed. Start digging around in <code>/usr/bin</code> and you’ll see!</p>
]]></content>
      
        <categories>
            
            <category> Doing </category>
            
            <category> Shell </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Notes, Shell]]></title>
      <url>/2017/07/01/shell-notes/</url>
      <content type="html"><![CDATA[<p><del>Last Modified: 2017-07-31 11:18:00</del></p>
<h3 id="Acknowledge"><a href="#Acknowledge" class="headerlink" title="Acknowledge"></a>Acknowledge</h3><ul>
<li>What is shell?<ul>
<li>The shell is a program that takes keyboard commands and passes them to the operating system to carry out.</li>
<li>Almost all Linux distributions supply a shell program from the GNU Project called <strong>bash</strong>.</li>
<li><strong>Bash</strong> is an enhanced replacement for <strong>sh</strong>, the original Unix shell program written by Steve Bourne.</li>
</ul>
</li>
<li>What is terminal emulator?<ul>
<li>We use a terminal emulator to interact with the shell when using a GUI.</li>
<li>KDE uses <strong>konsole</strong> and GNOME uses <strong>gnome-terminal</strong>, though it’s likely called simply <strong>“terminal”</strong> on our menu.</li>
</ul>
</li>
<li><p>Shell prompt</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[me@linuxbox ~]$</div></pre></td></tr></table></figure>
</li>
<li><p>Some Simple Commands</p>
<ul>
<li>date - Display the current time and date.</li>
<li>cal - Display a calendar of the current month.</li>
<li>df - Display the current amount of free space on your disk drives.</li>
<li>free - Display the amount of free memory.</li>
<li>exit - End the terminal session.</li>
</ul>
</li>
</ul>
<a id="more"></a>
<h2 id="Navigate-the-file-system"><a href="#Navigate-the-file-system" class="headerlink" title="Navigate the file system"></a>Navigate the file system</h2><ul>
<li>pwd - Print name of current working directory</li>
<li>cd - Change directory</li>
<li>ls - List directory contents</li>
<li>file – Determine file type</li>
<li>less – View file contents</li>
</ul>
<h4 id="important-facts-about-filenames"><a href="#important-facts-about-filenames" class="headerlink" title="important facts about filenames"></a>important facts about filenames</h4><ul>
<li>Filenames that <strong>begin with</strong> a <strong>period character(.)</strong> are hidden.<br><code>ls -a</code> can display them, <code>ll -a</code> can display the detailed lists.</li>
<li><strong>Filenames and commands</strong> in Linux, like Unix, are <strong>case sensitive</strong>. The filenames “File1” and “file1” refer to different files.</li>
<li>If you want to <strong>represent spaces</strong> between words in a filename, use <strong>underscore characters(_)</strong>. Though Linux supports long filenames which may contain embedded spaces and punctuation characters: period(.), dash(-), underscore(_).</li>
</ul>
<h3 id="Manipulate-files-and-directories"><a href="#Manipulate-files-and-directories" class="headerlink" title="Manipulate files and directories"></a>Manipulate files and directories</h3><ul>
<li>cp – Copy files and directories</li>
<li>mv – Move/rename files and directories</li>
<li>mkdir – Create directories</li>
<li>rm – Remove files and directories</li>
<li>ln – Create hard and symbolic links</li>
</ul>
<p><strong>Here is a useful tip.</strong> Whenever you use wildcards with <code>rm</code> (besides carefully checking your typing!), test the wildcard first with <code>ls</code>.<br>|Wildcard|Meaning|<br>|:——:|:——|<br>|*|    Matches any characters|<br>|?|    Matches any single character|<br>|[characters]|    Matches any character that is a member of the set characters|<br>|[!characters]|    Matches any character that is not a member of the set characters|<br>|[[:class:]]|    Matches any character that is a member of the specified class|</p>
<table>
<thead>
<tr>
<th style="text-align:center">Character</th>
<th style="text-align:left">Class Meaning</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">[:alnum:]</td>
<td style="text-align:left">Matches any alphanumeric character</td>
</tr>
<tr>
<td style="text-align:center">[:alpha:]</td>
<td style="text-align:left">Matches any alphabetic character</td>
</tr>
<tr>
<td style="text-align:center">[:digit:]</td>
<td style="text-align:left">Matches any numeral</td>
</tr>
<tr>
<td style="text-align:center">[:lower:]</td>
<td style="text-align:left">Matches any lowercase letter</td>
</tr>
<tr>
<td style="text-align:center">[:upper:]</td>
<td style="text-align:left">Matches any uppercase letter</td>
</tr>
</tbody>
</table>
<h4 id="ln-—-Create-links"><a href="#ln-—-Create-links" class="headerlink" title="ln — Create links"></a>ln — Create links</h4><h5 id="create-hard-links"><a href="#create-hard-links" class="headerlink" title="create hard links"></a>create hard links</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ln file link</div></pre></td></tr></table></figure>
<ul>
<li>a hard link may not reference a file that is not on the same disk partition as the link itself.</li>
<li>a hard link may not reference a directory.</li>
<li>a hard link is <strong>indistinguishable</strong> from the file itself when listed with <code>ls</code>. </li>
<li>when a hard link is deleted, the link is removed but the contents of the file itself continue to exist (that is, its space is not deallocated) until all links to the file are deleted.</li>
</ul>
<h5 id="create-symbolic-links"><a href="#create-symbolic-links" class="headerlink" title="create symbolic links"></a>create symbolic links</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ln -s item link</div></pre></td></tr></table></figure>
<ul>
<li>a file pointed to by a symbolic link is <strong>also written</strong>, if you write some something to the symbolic link.</li>
<li>however when you delete a symbolic link, <strong>only the link is deleted</strong>, not the file itself.</li>
</ul>
<h3 id="Use-commands"><a href="#Use-commands" class="headerlink" title="Use commands"></a>Use commands</h3><ul>
<li>type – Indicate how a command name is interpreted</li>
<li>which – Display which executable program will be executed</li>
<li>man – Display a command’s manual page</li>
<li>apropos – Display a list of appropriate commands</li>
<li>info – Display a command’s info entry</li>
<li>whatis – Display a very brief description of a command</li>
<li>whereis - Display the path of the executable program of a command</li>
<li>alias – Create an alias for a command</li>
</ul>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> append a new line of <span class="built_in">alias</span></span></div><div class="line">echo 'alias foo="cd /usr; ls; cd -"' &gt;&gt; .bashrc</div><div class="line"><span class="meta">#</span><span class="bash"> force bash to re-read the modified .bashrc file</span></div><div class="line">source .bashrc</div></pre></td></tr></table></figure>
<h3 id="I-O-redirection"><a href="#I-O-redirection" class="headerlink" title="I/O redirection"></a>I/O redirection</h3><ul>
<li>cat - Concatenate files</li>
<li>sort - Sort lines of text</li>
<li>uniq - Report or omit repeated lines</li>
<li>grep - Print lines matching a pattern</li>
<li>wc - Print newline, word, and byte counts for each file</li>
<li>head - Output the first part of a file</li>
<li>tail - Output the last part of a file</li>
<li><p>tee - Read from standard input and write to standard output and files</p>
</li>
<li><p><code>&lt;</code> operator redirects the standard input, <code>&gt;</code> operator redirects the standard output.<br><code>&gt;&gt;</code> means to append instead of overwriting.<br>file streams as standard <strong>input, output and error</strong>, the shell references them internally as <strong>file descriptors zero, one and two</strong>, respectively</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> redirect to standard error</span></div><div class="line">ls -l /bin/usr 2&gt; ls-error.txt</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> redirect standard output and error to same file</span></div><div class="line"><span class="meta">#</span><span class="bash"> the redirection of standard error must always occur after</span></div><div class="line"><span class="meta">#</span><span class="bash"> redirecting standard output or it doesn’t work</span></div><div class="line">ls -l /bin/usr &gt; ls-output.txt 2&gt;&amp;1  # old version</div><div class="line">ls -l /bin/usr &amp;&gt; ls-output.txt      # new version</div></pre></td></tr></table></figure>
</li>
<li><p>to suppress error messages from a command, a special file called <code>/dev/null</code>, and it is a system device called a <strong>bit bucket</strong> which accepts input and does nothing with it.</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ls -l /bin/usr 2&gt; /dev/null</div></pre></td></tr></table></figure>
</li>
<li><p>the <strong>pipe</strong> operator <code>|</code> (vertical bar), the standard output of one command can be piped into the standard input of another.<br>usually assisted with filters.</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> sort and unique files <span class="keyword">then</span> show</span></div><div class="line">ls /bin /usr/bin | sort | uniq | less</div><div class="line"><span class="meta">#</span><span class="bash"> report the duplicate files with -d</span></div><div class="line">ls /bin /usr/bin | sort | uniq -d | less</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> add wc to pipelines to count things</span></div><div class="line">ls /bin /usr/bin | sort | uniq | wc -l</div></pre></td></tr></table></figure>
</li>
<li><p><strong>grep</strong> is a powerful program used to find text patterns within files.</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ls /bin /usr/bin | sort | uniq | grep zip</div></pre></td></tr></table></figure>
</li>
</ul>
<p><code>-i</code> to ignore case, <code>-v</code> to print the lines that do not match the pattern, <code>-n</code> to show the line numbers.</p>
<ul>
<li><p><strong>head</strong> prints the <strong>first ten lines</strong> of a file and the <strong>tail</strong> command prints <strong>the last ten lines</strong> by default.</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> -n to adjust the number of lines to show</span></div><div class="line">head -n 5 ls-output.txt</div><div class="line"><span class="meta">#</span><span class="bash"> -f to allow tail to view files <span class="keyword">in</span> real-time</span></div><div class="line">tail -f /var/log/messages</div></pre></td></tr></table></figure>
</li>
<li><p><strong>tee</strong> reads standard input and copies it <strong>to both standard output</strong> (allowing the data to continue down the pipeline) and <strong>to one or more files</strong>.</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ls /usr/bin | tee ls.txt | grep zip</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Expansion"><a href="#Expansion" class="headerlink" title="Expansion"></a>Expansion</h3><ul>
<li><p>pathname expansion</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">echo D*</div><div class="line">Desktop  Documents</div></pre></td></tr></table></figure>
</li>
<li><p>arithmetic expansion</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> / is just <span class="built_in">integer</span> division, ** is exponentiation</span></div><div class="line">echo $((2+2-2*2/3%10+2**2))</div><div class="line">7</div></pre></td></tr></table></figure>
</li>
<li><p>brace expansion</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">echo Front-&#123;A,B,C&#125;-Back</div><div class="line">Front-A-Back Front-B-Back Front-C-Back</div><div class="line"></div><div class="line">echo Number_&#123;1..5&#125;</div><div class="line">Number_1  Number_2  Number_3  Number_4  Number_5</div><div class="line"></div><div class="line">echo a&#123;A&#123;1,2&#125;,B&#123;3,4&#125;&#125;b</div><div class="line">aA1b aA2b aB3b aB4b</div></pre></td></tr></table></figure>
</li>
<li><p>parameter expansion</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">echo $USER</div><div class="line">me</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> to see a list of available variables</span></div><div class="line">printenv | less</div></pre></td></tr></table></figure>
</li>
<li><p>command substitution</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">echo $(ls)</div><div class="line">Desktop Documents ls-output.txt Music Pictures Public Templates</div><div class="line"></div><div class="line">ls -l $(which cp)</div><div class="line">-rwxr-xr-x 1 root root 71516 2007-12-05 08:58 /bin/cp</div><div class="line"></div><div class="line">file $(ls /usr/bin/* | grep zip)</div><div class="line">/usr/bin/bunzip2:     symbolic link to `bzip2'</div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> use back-quotes instead of the dollar sign and parentheses</span></div><div class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">in</span> older version of bash</span></div><div class="line">ls -l `which cp`</div><div class="line">-rwxr-xr-x 1 root root 71516 2007-12-05 08:58 /bin/cp</div></pre></td></tr></table></figure>
<h4 id="to-control-expansion"><a href="#to-control-expansion" class="headerlink" title="to control expansion"></a>to control expansion</h4><ul>
<li>double quotes<br>If you place text inside double quotes, all the special characters used by the shell lose their special meaning and are treated as ordinary characters.<br>The <strong>exceptions</strong> are <code>$</code>, <code>\ (backslash)</code>, and <code>` (back-quote)</code>.</li>
<li>single quotes<br>All expansions lose their special meaning.</li>
<li>escape character<br>You can precede a character with a <code>\ (backslash)</code> to selectively prevent an expansion.<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">echo text ~/*.txt &#123;a,b&#125; $(echo foo) $((2+2)) $USER</div><div class="line">text /home/me/ls-output.txt a b foo 4 me</div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">echo "text ~/*.txt &#123;a,b&#125; $(echo foo) $((2+2)) $USER"</div><div class="line">text ~/*.txt   &#123;a,b&#125; foo 4 me</div></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">echo 'text ~/*.txt &#123;a,b&#125; $(echo foo) $((2+2)) $USER'</div><div class="line">text ~/*.txt  &#123;a,b&#125; $(echo foo) $((2+2)) $USER</div></pre></td></tr></table></figure>
<h3 id="Keyboard-operating-techniques"><a href="#Keyboard-operating-techniques" class="headerlink" title="Keyboard operating techniques"></a>Keyboard operating techniques</h3><ul>
<li>clear - Clear the screen</li>
<li>history - Display the contents of the history list</li>
</ul>
<h4 id="cursor-movement-shortcuts"><a href="#cursor-movement-shortcuts" class="headerlink" title="cursor movement shortcuts"></a>cursor movement shortcuts</h4><table>
<thead>
<tr>
<th style="text-align:center">Key</th>
<th style="text-align:left">Action</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Ctrl-a</td>
<td style="text-align:left">Move cursor to the beginning of the line.</td>
</tr>
<tr>
<td style="text-align:center">Ctrl-e</td>
<td style="text-align:left">Move cursor to the end of the line.</td>
</tr>
<tr>
<td style="text-align:center">Ctrl-f</td>
<td style="text-align:left">Move cursor forward one character; same as the right arrow key.</td>
</tr>
<tr>
<td style="text-align:center">Ctrl-b</td>
<td style="text-align:left">Move cursor backward one character; same as the left arrow key.</td>
</tr>
<tr>
<td style="text-align:center">Alt-f</td>
<td style="text-align:left">Move cursor forward one word.</td>
</tr>
<tr>
<td style="text-align:center">Alt-b</td>
<td style="text-align:left">Move cursor backward one word.</td>
</tr>
</tbody>
</table>
<h4 id="text-editing-shortcuts"><a href="#text-editing-shortcuts" class="headerlink" title="text editing shortcuts"></a>text editing shortcuts</h4><table>
<thead>
<tr>
<th style="text-align:center">Key</th>
<th style="text-align:left">Action</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Ctrl-d</td>
<td style="text-align:left">Delete the character at the cursor location.</td>
</tr>
<tr>
<td style="text-align:center">Ctrl-t</td>
<td style="text-align:left">Transpose(exchange)the character at the cursor location with the one preceding it.</td>
</tr>
<tr>
<td style="text-align:center">Alt-t</td>
<td style="text-align:left">Transpose the word at the cursor location with the one preceding it.</td>
</tr>
<tr>
<td style="text-align:center">Alt-l</td>
<td style="text-align:left">Convert the characters from the cursor location to the end of the word to lowercase.</td>
</tr>
<tr>
<td style="text-align:center">Alt-u</td>
<td style="text-align:left">Convert the characters from the cursor location to the end of the word to uppercase.</td>
</tr>
</tbody>
</table>
<h4 id="cut-and-paste-shortcuts"><a href="#cut-and-paste-shortcuts" class="headerlink" title="cut and paste shortcuts"></a>cut and paste shortcuts</h4><table>
<thead>
<tr>
<th style="text-align:center">Key</th>
<th style="text-align:left">Action</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Ctrl-k</td>
<td style="text-align:left">Kill text from the cursor location to the end of line.</td>
</tr>
<tr>
<td style="text-align:center">Ctrl-u</td>
<td style="text-align:left">Kill text from the cursor location to the beginning of the line.</td>
</tr>
<tr>
<td style="text-align:center">Alt-d</td>
<td style="text-align:left">Kill text from the cursor location to the end of the current word.</td>
</tr>
<tr>
<td style="text-align:center">Alt-Backspace</td>
<td style="text-align:left">Kill text from the cursor location to the beginning of the word. If the cursor is at the beginning of a word, kill the previous word.</td>
</tr>
<tr>
<td style="text-align:center">Ctrl-y</td>
<td style="text-align:left">Yank text from the kill-ring and insert it at the cursor location.</td>
</tr>
</tbody>
</table>
<h4 id="history-expansion-and-shortcuts"><a href="#history-expansion-and-shortcuts" class="headerlink" title="history expansion and shortcuts"></a>history expansion and shortcuts</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">history | grep /usr/bin</div><div class="line"><span class="meta">#</span><span class="bash"> 88  ls -l /usr/bin &gt; ls-output.txt</span></div><div class="line"><span class="meta">#</span><span class="bash"> to expand the <span class="built_in">command</span> of <span class="built_in">history</span> of 88th line</span></div><div class="line">!88</div><div class="line"><span class="meta">#</span><span class="bash"> to expand the last <span class="built_in">command</span> of <span class="built_in">history</span></span></div><div class="line">!!</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center">Key</th>
<th style="text-align:left">Action</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Ctrl-p</td>
<td style="text-align:left">Move to the previous history entry. Same action as the up arrow.</td>
</tr>
<tr>
<td style="text-align:center">Ctrl-n</td>
<td style="text-align:left">Move to the next history entry. Same action as the down arrow.</td>
</tr>
<tr>
<td style="text-align:center">Ctrl-r</td>
<td style="text-align:left">Reverse incremental search. Searches incrementally from the current command line up the history list.</td>
</tr>
<tr>
<td style="text-align:center">Ctrl-o</td>
<td style="text-align:left">Execute the current item in the history list and advance to the next one. This is handy if you are trying to re-execute a sequence of commands in the history list.</td>
</tr>
</tbody>
</table>
<h3 id="Permission"><a href="#Permission" class="headerlink" title="Permission"></a>Permission</h3><ul>
<li>id – Display user identity</li>
<li>chmod – Change a file’s mode</li>
<li>umask – Set the default file permissions</li>
<li>su – Run a shell as another user</li>
<li>sudo – Execute a command as another user</li>
<li>chown – Change a file’s owner</li>
<li>chgrp – Change a file’s group ownership</li>
<li>passwd – Change a user’s password</li>
</ul>
<h4 id="access-rights-read-write-execution"><a href="#access-rights-read-write-execution" class="headerlink" title="access rights, read, write, execution"></a>access rights, read, write, execution</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ls -l foo.txt</div><div class="line">-rw-rw-r-- 1 me   me   0 2008-03-06 14:52 foo.txt</div><div class="line"><span class="meta">#</span><span class="bash"> the first one is file <span class="built_in">type</span>, and the left nine is file mode.</span></div></pre></td></tr></table></figure>
<h5 id="file-types"><a href="#file-types" class="headerlink" title="file types"></a>file types</h5><table>
<thead>
<tr>
<th style="text-align:center">Attribute</th>
<th style="text-align:left">File Type</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">-</td>
<td style="text-align:left">a regular file</td>
</tr>
<tr>
<td style="text-align:center">d</td>
<td style="text-align:left">A directory</td>
</tr>
<tr>
<td style="text-align:center">l</td>
<td style="text-align:left">A symbolic link. Notice that with symbolic links, the remainning file attributes are always “rwxrwxrwx” and are dummy values. The real file attributes are those of the file the symbolic link points to.</td>
</tr>
<tr>
<td style="text-align:center">c</td>
<td style="text-align:left">A character special file. This file type refers to a device that handles data as a stream of bytes, such as a terminal or modem.</td>
</tr>
<tr>
<td style="text-align:center">b</td>
<td style="text-align:left">A block special file. This file type refers to a device that handles data in blocks, such as a hard drive or CD-ROM drive.</td>
</tr>
</tbody>
</table>
<h5 id="file-mode"><a href="#file-mode" class="headerlink" title="file mode"></a>file mode</h5><p><img src="http://7xru22.com1.z0.glb.clouddn.com/101.png" alt=""><br>|Attribute|    Files|    Directories|<br>|:-:|:-|<br>|r|    Allows a file to be opened and read.|    Allows a directory’s contents to be listed if the execute attribute is also set.|<br>|w|    Allows a file to be written to or truncated, however this attribute does not allow files to be renamed or deleted. The ability to delete or rename files is determined by directory attributes.|    Allows files within a directory to be created, deleted, and renamed if the execute attribute is also set.|<br>|x|    Allows a file to be treated as a program and executed. Program files written in scripting languages must also be set as readable to be executed.|    Allows a directory to be entered, e.g., cd directory.|</p>
<h4 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a>chmod</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">chmod 600 foo.txt</div><div class="line">ls -l foo.txt</div><div class="line">-rw------- 1 me    me    0  2008-03-06 14:52 foo.txt</div></pre></td></tr></table></figure>
<p>a few common ones: 7 (rwx), 6 (rw-), 5 (r-x), 4 (r–), and 0 (—).</p>
<h5 id="chmod-Symbolic-Notation"><a href="#chmod-Symbolic-Notation" class="headerlink" title="chmod Symbolic Notation"></a>chmod Symbolic Notation</h5><table>
<thead>
<tr>
<th style="text-align:center">Notation</th>
<th style="text-align:left">Meaning</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">u</td>
<td style="text-align:left">Short for “user”, but means the file or directory owner.</td>
</tr>
<tr>
<td style="text-align:center">g</td>
<td style="text-align:left">Group owner.</td>
</tr>
<tr>
<td style="text-align:center">o</td>
<td style="text-align:left">Short for “others”, but means world.</td>
</tr>
<tr>
<td style="text-align:center">a</td>
<td style="text-align:left">Short for “all”, the combination of “u”, “g”, and “o”.</td>
</tr>
</tbody>
</table>
<h5 id="chmod-Symbolic-Notation-Examples"><a href="#chmod-Symbolic-Notation-Examples" class="headerlink" title="chmod Symbolic Notation Examples"></a>chmod Symbolic Notation Examples</h5><table>
<thead>
<tr>
<th style="text-align:center">Example</th>
<th style="text-align:left">Meaning</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">u+x</td>
<td style="text-align:left">Add execute permission for the owner.</td>
</tr>
<tr>
<td style="text-align:center">u-x</td>
<td style="text-align:left">Remove execute permission from the owner.</td>
</tr>
<tr>
<td style="text-align:center">+x</td>
<td style="text-align:left">Add execute permission for the owner, group, and world. Equivalent to a+x.</td>
</tr>
<tr>
<td style="text-align:center">o-rw</td>
<td style="text-align:left">Remove the read and write permission from anyone besides the owner and group owner.</td>
</tr>
<tr>
<td style="text-align:center">u+x,go=rw</td>
<td style="text-align:left">Add execute permission for the owner and set the permissions for the group and others to read and execute. Multiple specifications may be separated by commas.</td>
</tr>
</tbody>
</table>
<h4 id="umask"><a href="#umask" class="headerlink" title="umask"></a>umask</h4><p>The umask command controls the default permissions given to a file when it is created. It uses octal notation to express a mask of bits <strong>to be removed</strong> from a file’s mode attributes.<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">umask 0022</div></pre></td></tr></table></figure></p>
<h4 id="others"><a href="#others" class="headerlink" title="others"></a>others</h4><ul>
<li><p>The <strong>su</strong> command is used to start a shell as another user. </p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">su [-[l]] [user]</div></pre></td></tr></table></figure>
</li>
<li><p>The <strong>sudo</strong> command is used to execute commands as a different user (usually the superuser) in a very controlled way.</p>
</li>
<li><p>The <strong>chown</strong> command is used to change the owner and group owner of a file or directory. Superuser privileges are required to use this command. </p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chown [owner][:[group]] file...</div></pre></td></tr></table></figure>
</li>
<li><p>In older versions of Unix, the chown command only changed file ownership, not group ownership. For that purpose, a separate command, <strong>chgrp</strong> was used. It works much the same way as chown, except for being more limited.</p>
</li>
<li><p>The <strong>passwd</strong> command is used to set passwords for <strong>yourself</strong> (and for other users if you have access to superuser privileges). </p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">passwd [user]</div></pre></td></tr></table></figure>
</li>
<li><p>more infos, … <code>adduser, useradd, groupadd</code></p>
</li>
</ul>
<h3 id="Process"><a href="#Process" class="headerlink" title="Process"></a>Process</h3><ul>
<li>ps – Report a snapshot of current processes</li>
<li>top – Display tasks</li>
<li>jobs – List active jobs</li>
<li>bg – Place a job in the background</li>
<li>fg – Place a job in the foreground</li>
<li>kill – Send a signal to a process</li>
<li>killall – Kill processes by name</li>
<li>shutdown – Shutdown or reboot the system</li>
</ul>
<h4 id="Process-States"><a href="#Process-States" class="headerlink" title="Process States"></a>Process States</h4><table>
<thead>
<tr>
<th style="text-align:center">State</th>
<th style="text-align:left">Meaning</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">R</td>
<td style="text-align:left">Running. This means that the process is running or ready to run.</td>
</tr>
<tr>
<td style="text-align:center">S</td>
<td style="text-align:left">Sleeping. A process is not running; rather, it is waiting for an event, such as a keystroke or network packet.</td>
</tr>
<tr>
<td style="text-align:center">D</td>
<td style="text-align:left">Uninterruptible Sleep. Process is waiting for I/O such as a disk drive.</td>
</tr>
<tr>
<td style="text-align:center">T</td>
<td style="text-align:left">Stopped. Process has been instructed to stop. More on this later.</td>
</tr>
<tr>
<td style="text-align:center">Z</td>
<td style="text-align:left">A defunct or “zombie” process. This is a child process that has terminated, but has not been cleaned up by its parent.</td>
</tr>
<tr>
<td style="text-align:center">&lt;</td>
<td style="text-align:left">A high priority process. It’s possible to grant more importance to a process, giving it more time on the CPU. This property of a process is called niceness. A process with high priority is said to be less nice because it’s taking more of the CPU’s time, which leaves less for everybody else.</td>
</tr>
<tr>
<td style="text-align:center">N</td>
<td style="text-align:left">A low priority process. A process with low priority (a “nice” process) will only get processor time after other processes with higher priority have been serviced.</td>
</tr>
</tbody>
</table>
<h4 id="Signals"><a href="#Signals" class="headerlink" title="Signals"></a>Signals</h4><p>In the case of <strong>Ctrl-c</strong>, a signal called <strong>INT</strong> (Interrupt) is sent; with <strong>Ctrl-z</strong>, a signal called <strong>TSTP</strong> (Terminal Stop.) </p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">kill [-Number] PID</div><div class="line">kill [-SIG&lt;Name&gt;] PID</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center">Number</th>
<th style="text-align:center">Name</th>
<th style="text-align:left">Meaning</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">HUP</td>
<td style="text-align:left">Hangup.</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">INT</td>
<td style="text-align:left">Interrupt. Performs the same function as the Ctrl-c key sent from the terminal. It will usually terminate a program.</td>
</tr>
<tr>
<td style="text-align:center">9</td>
<td style="text-align:center">KILL</td>
<td style="text-align:left">Kill.</td>
</tr>
<tr>
<td style="text-align:center">15</td>
<td style="text-align:center">TERM</td>
<td style="text-align:left">Terminate. This is the default signal sent by the kill command. If a program is still “alive” enough to receive signals, it will terminate.</td>
</tr>
<tr>
<td style="text-align:center">18</td>
<td style="text-align:center">CONT</td>
<td style="text-align:left">Continue. This will restore a process after a STOP signal.</td>
</tr>
<tr>
<td style="text-align:center">19</td>
<td style="text-align:center">STOP</td>
<td style="text-align:left">Stop. This signal causes a process to pause without terminating. Like the KILL signal, it is not sent to the target process, and thus it cannot be ignored.</td>
</tr>
</tbody>
</table>
<h3 id="Shell-environment"><a href="#Shell-environment" class="headerlink" title="Shell environment"></a>Shell environment</h3><ul>
<li>printenv – Print part or all of the environment</li>
<li>set – Set shell options</li>
<li>export – Export environment to subsequently executed programs</li>
<li>alias – Create an alias for a command</li>
</ul>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">printenv USER # print environment variable USER</div><div class="line">echo $USER    # a same way as above</div><div class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">export</span> added PATH</span></div><div class="line">PATH=$PATH:$HOME/bin</div><div class="line">export PATH</div></pre></td></tr></table></figure>
<h3 id="Basic-usage-of-vi"><a href="#Basic-usage-of-vi" class="headerlink" title="Basic usage of vi"></a>Basic usage of vi</h3><p><code>to do</code></p>
<h3 id="Customize-shell-prompt"><a href="#Customize-shell-prompt" class="headerlink" title="Customize shell prompt"></a>Customize shell prompt</h3><p><code>omitted</code></p>
<h3 id="Package-control"><a href="#Package-control" class="headerlink" title="Package control"></a>Package control</h3><table>
<thead>
<tr>
<th style="text-align:center">-</th>
<th style="text-align:center">Debian Style (.deb)</th>
<th style="text-align:center">Red Hat Style (.rpm)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Distributions (Partial Listing)</td>
<td style="text-align:center">Debian, Ubuntu, Xandros, Linspire</td>
<td style="text-align:center">Fedora, CentOS, Red Hat Enterprise Linux, OpenSUSE, Mandriva, PCLinuxOS</td>
</tr>
<tr>
<td style="text-align:center">Low-Level Tools</td>
<td style="text-align:center">dpkg</td>
<td style="text-align:center">apt-get, aptitude</td>
</tr>
<tr>
<td style="text-align:center">High-Level Tools</td>
<td style="text-align:center">rpm</td>
<td style="text-align:center">yum</td>
</tr>
<tr>
<td style="text-align:center">Package Search Commands</td>
<td style="text-align:center">apt-get update; apt-cache search search_string</td>
<td style="text-align:center">yum search search_string</td>
</tr>
<tr>
<td style="text-align:center">Package Installation Commands</td>
<td style="text-align:center">apt-get update; apt-get install package_name</td>
<td style="text-align:center">yum install package_name</td>
</tr>
<tr>
<td style="text-align:center">Low-Level Package Installation Commands</td>
<td style="text-align:center">dpkg –install package_file</td>
<td style="text-align:center">rpm -i package_file</td>
</tr>
<tr>
<td style="text-align:center">Package Removal Commands</td>
<td style="text-align:center">apt-get remove package_name</td>
<td style="text-align:center">yum erase package_name</td>
</tr>
<tr>
<td style="text-align:center">Package Update Commands</td>
<td style="text-align:center">apt-get update; apt-get upgrade</td>
<td style="text-align:center">yum update</td>
</tr>
<tr>
<td style="text-align:center">Low-Level Package Upgrade Commands</td>
<td style="text-align:center">dpkg –install package_file</td>
<td style="text-align:center">rpm -U package_file</td>
</tr>
<tr>
<td style="text-align:center">Package Listing Commands</td>
<td style="text-align:center">dpkg –list</td>
<td style="text-align:center">rpm -qa</td>
</tr>
<tr>
<td style="text-align:center">Package Status Commands</td>
<td style="text-align:center">dpkg –status package_name</td>
<td style="text-align:center">rpm -q package_name</td>
</tr>
<tr>
<td style="text-align:center">Package Information Commands</td>
<td style="text-align:center">apt-cache show package_name</td>
<td style="text-align:center">yum info package_name</td>
</tr>
<tr>
<td style="text-align:center">Package File Identification Commands</td>
<td style="text-align:center">dpkg –search file_name</td>
<td style="text-align:center">rpm -qf file_name</td>
</tr>
</tbody>
</table>
<h3 id="Storage-devices"><a href="#Storage-devices" class="headerlink" title="Storage devices"></a>Storage devices</h3><ul>
<li>mount – Mount a file system</li>
<li>umount – Unmount a file system</li>
<li>fsck – Check and repair a file system</li>
<li>fdisk – Partition table manipulator</li>
<li>mkfs – Create a file system</li>
<li>fdformat – Format a floppy disk</li>
<li>dd – Write block oriented data directly to a device</li>
<li>genisoimage (mkisofs) – Create an ISO 9660 image file</li>
<li>wodim (cdrecord) – Write data to optical storage media</li>
<li>md5sum – Calculate an MD5 checksum</li>
</ul>
<p><code>omitted</code></p>
<h3 id="Networking"><a href="#Networking" class="headerlink" title="Networking"></a>Networking</h3><ul>
<li>ping - Send an ICMP ECHO_REQUEST to network hosts</li>
<li>traceroute - Print the route packets trace to a network host</li>
<li>netstat - Print network connections, routing tables, interface statistics, masquerade connections, and multicast memberships</li>
<li>ftp - Internet file transfer program</li>
<li>wget - Non-interactive network downloader</li>
<li>ssh - OpenSSH SSH client (remote login program)</li>
</ul>
<h3 id="Find-files"><a href="#Find-files" class="headerlink" title="Find files"></a>Find files</h3><ul>
<li>locate – Find files by name</li>
<li>find – Search for files in a directory hierarchy</li>
</ul>
<p>We will also look at a command that is often used with file search commands to process the resulting list of files:</p>
<ul>
<li>xargs – Build and execute command lines from standard input</li>
</ul>
<p>In addition, we will introduce a couple of commands to assist us in or exploration:</p>
<ul>
<li>touch – Change file times</li>
<li>stat – Display file or file system status</li>
</ul>
<h3 id="Archive-and-backup"><a href="#Archive-and-backup" class="headerlink" title="Archive and backup"></a>Archive and backup</h3><ul>
<li>gzip – Compress or expand files</li>
<li>bzip2 – A block sorting file compressor</li>
<li>tar – Tape archiving utility</li>
<li>zip – Package and compress files</li>
<li>rsync – Remote file and directory synchronization</li>
</ul>
<h3 id="Regex"><a href="#Regex" class="headerlink" title="Regex"></a>Regex</h3><p>grep: global regular expression print<br><code>-n</code>: Prefix each matching line with the number of the line within the file. May also be specified –line-number.<br><code>-r</code>: Recursively search subdirectories listed.</p>
<h4 id="metacharacters"><a href="#metacharacters" class="headerlink" title="metacharacters"></a>metacharacters</h4><p>Regular expression metacharacters consist of the following:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">^ $ . [ ] &#123; &#125; - ? * + ( ) | \</div></pre></td></tr></table></figure></p>
<h5 id="any-character"><a href="#any-character" class="headerlink" title="any character"></a>any character</h5><p>The dot or period(.) character is used to match any character. </p>
<h5 id="anchors"><a href="#anchors" class="headerlink" title="anchors"></a>anchors</h5><p>The caret <code>(^)</code> and dollar <code>($)</code> sign characters are treated as anchors. This means that they cause the match to occur only if the regular expression is found <strong>at the beginning of the line</strong> or <strong>at the end of the line</strong>.<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> crossword puzzles</span></div><div class="line">grep -i '^..j.r$' /usr/share/dict/words</div><div class="line">Gujar</div><div class="line">Kajar</div><div class="line">Major</div><div class="line">major</div></pre></td></tr></table></figure></p>
<h5 id="bracket-expressions"><a href="#bracket-expressions" class="headerlink" title="bracket expressions"></a>bracket expressions</h5><p>Bracket expressions is used to match a single character from a specified set of characters.<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">grep -h '[bg]zip' dirlist*.txt</div><div class="line">bzip2</div><div class="line">bzip2recover</div><div class="line">gzip</div></pre></td></tr></table></figure></p>
<p>Metacharacters lose their special meaning when placed within brackets. However, <strong>two cases</strong> have different meanings.<br>The first is the caret <code>(^)</code>, which is used to indicate <strong>negation</strong>; the second is the dash <code>(-)</code>, which is used to indicate a <strong>character range</strong>.<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">grep -h '[^bg]zip' dirlist*.txt</div><div class="line">bunzip2</div><div class="line">gunzip</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> it will match all filenames starting with letters and numbers:</span></div><div class="line">grep -h '^[A-Za-z0-9]' dirlist*.txt</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> to include a dash, making it the first character <span class="keyword">in</span> the expression</span></div><div class="line"><span class="meta">#</span><span class="bash"> it will match every filename containing a dash, or a upper <span class="keyword">case</span> “A” or an uppercase “Z”.</span></div><div class="line">grep -h '[-AZ]' dirlist*.txt</div></pre></td></tr></table></figure></p>
<h4 id="POSIX-Character-Classes"><a href="#POSIX-Character-Classes" class="headerlink" title="POSIX Character Classes"></a>POSIX Character Classes</h4><table>
<thead>
<tr>
<th style="text-align:center">Character Class</th>
<th style="text-align:left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">[:alnum:]</td>
<td style="text-align:left">The alphanumeric characters. In ASCII, equivalent to: [A-Za-z0-9]</td>
</tr>
<tr>
<td style="text-align:center">[:word:]</td>
<td style="text-align:left">The same as [:alnum:], with the addition of the underscore (_) character.</td>
</tr>
<tr>
<td style="text-align:center">[:alpha:]</td>
<td style="text-align:left">The alphabetic characters. In ASCII, equivalent to: [A-Za-z]</td>
</tr>
<tr>
<td style="text-align:center">[:digit:]</td>
<td style="text-align:left">The numerals zero through nine.</td>
</tr>
<tr>
<td style="text-align:center">[:lower:]</td>
<td style="text-align:left">The lowercase letters.</td>
</tr>
<tr>
<td style="text-align:center">[:space:]</td>
<td style="text-align:left">The whitespace characters including space, tab, carriage return, newline, vertical tab, and form feed. In ASCII, equivalent to: [ \t\r\n\v\f]</td>
</tr>
<tr>
<td style="text-align:center">[:upper:]</td>
<td style="text-align:left">The upper case characters.</td>
</tr>
<tr>
<td style="text-align:center">[:xdigit:]</td>
<td style="text-align:left">Characters used to express hexadecimal numbers. In ASCII, equivalent to: [0-9A-Fa-f]</td>
</tr>
</tbody>
</table>
<h4 id="basic-regular-expressions-BRE-and-extended-regular-expressions-ERE"><a href="#basic-regular-expressions-BRE-and-extended-regular-expressions-ERE" class="headerlink" title="basic regular expressions (BRE) and extended regular expressions (ERE)"></a>basic regular expressions (BRE) and extended regular expressions (ERE)</h4><p>What’s the difference between BRE and ERE?<br>It’s a matter of metacharacters.<br>With BRE, the following metacharacters are recognized:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">^ $ . [ ] *</div></pre></td></tr></table></figure></p>
<p>All other characters are considered literals.</p>
<p>With ERE, the following metacharacters (and their associated functions) are added:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">( ) &#123; &#125; ? + |</div></pre></td></tr></table></figure></p>
<h4 id="alternation"><a href="#alternation" class="headerlink" title="alternation"></a>alternation</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> it will match the filenames <span class="keyword">in</span> our lists that start with either “bz”, “gz”, or “zip</span></div><div class="line">grep -Eh '^(bz|gz|zip)' dirlist*.txt</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> it changes to match any filename that begins with “bz” or contains “gz” or contains “zip”</span></div><div class="line">grep -Eh '^bz|gz|zip' dirlist*.txt</div></pre></td></tr></table></figure>
<h4 id="quantifier"><a href="#quantifier" class="headerlink" title="quantifier"></a>quantifier</h4><p>The question mark <code>(?)</code> means <strong>making the preceding element optional (matching 0 or 1 element)</strong>.<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> to valid <span class="keyword">if</span> it matched either of these two forms:</span></div><div class="line"><span class="meta">#</span><span class="bash"> (nnn) nnn-nnnn</span></div><div class="line"><span class="meta">#</span><span class="bash"> nnn nnn-nnnn</span></div><div class="line"></div><div class="line">echo "(555) 123-4567" | grep -E '^\(?[0-9][0-9][0-9]</div><div class="line">\)? [0-9][0-9][0-9]-[0-9][0-9][0-9][0-9]$'</div><div class="line">(555) 123-4567</div><div class="line"></div><div class="line">echo "555 123-4567" | grep -E '^\(?[0-9][0-9][0-9]\)</div><div class="line">? [0-9][0-9][0-9]-[0-9][0-9][0-9][0-9]$'</div><div class="line">555 123-4567</div></pre></td></tr></table></figure></p>
<p>The asterisk <code>(*)</code> means <strong>making the preceding element optional (matching 0 or any number of times elements)</strong>.<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> to see <span class="keyword">if</span> a string was a sentence</span></div><div class="line"><span class="meta">#</span><span class="bash"> it starts with an uppercase letter</span></div><div class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">then</span> contains any number of upper and lowercase letters and spaces</span></div><div class="line"><span class="meta">#</span><span class="bash"> and ends with a period. </span></div><div class="line">echo "This works." | grep -E '[[:upper:]][[:upper:][:lower:] ]*\.'</div><div class="line">This works.</div><div class="line"></div><div class="line">echo "this does not" | grep -E '[[:upper:]][[:upper:][:lower:] ]*\.'</div></pre></td></tr></table></figure></p>
<p>The plus mark <code>(+)</code> means <strong>making the preceding element optional (matching 1 or any number of times elements)</strong>.<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> it will match lines consisting of groups of one or more alphabetic characters separated by single spaces</span></div><div class="line">echo "This that" | grep -E '^([[:alpha:]]+ ?)+$'</div><div class="line">This that</div><div class="line"></div><div class="line">echo "a b c" | grep -E '^([[:alpha:]]+ ?)+$'</div><div class="line">a b c</div></pre></td></tr></table></figure></p>
<p>The <code>{</code> and <code>}</code> metacharacters are used to <strong>express minimum and maximum numbers of required matches</strong>. They may be specified in four possible ways:<br>|Specifier|    Meaning|<br>|:-:|:-|<br>|{n}|    Match the preceding element if it occurs exactly n times.<br>|{n,m}|    Match the preceding element if it occurs at least n times, but no more than m times.|<br>|{n,}|    Match the preceding element if it occurs n or more times.|<br>|{,m}|    Match the preceding element if it occurs no more than m times.|<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">echo "(555) 123-4567" | grep -E '^\(?[0-9]&#123;3&#125;\)? [0-9]&#123;3&#125;-[0-9]&#123;4&#125;$'</div><div class="line">(555) 123-4567</div></pre></td></tr></table></figure></p>
<h4 id="find-files"><a href="#find-files" class="headerlink" title="find files"></a>find files</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> it will reveal pathnames that contain embedded spaces and other potentially offensive characters</span></div><div class="line">find . -regex '.*[^-\_./0-9a-zA-Z].*'</div></pre></td></tr></table></figure>
<h4 id="less-and-vim"><a href="#less-and-vim" class="headerlink" title="less and vim"></a>less and vim</h4><p>They support basic regular expressions.<br>Pressing the <code>/</code> key followed by <strong>a regular expression</strong> will perform a search.</p>
<h3 id="Manipulate-text"><a href="#Manipulate-text" class="headerlink" title="Manipulate text"></a>Manipulate text</h3><ul>
<li>cat – Concatenate files and print on the standard output</li>
<li>sort – Sort lines of text files</li>
<li>uniq – Report or omit repeated lines</li>
<li>cut – Remove sections from each line of files</li>
<li>paste – Merge lines of files</li>
<li>join – Join lines of two files on a common field</li>
<li>comm – Compare two sorted files line by line</li>
<li>diff – Compare files line by line</li>
<li>patch – Apply a diff file to an original</li>
<li>tr – Translate or delete characters</li>
<li>sed – Stream editor for filtering and transforming text</li>
<li>aspell – Interactive spell checker</li>
</ul>
<h4 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h4><p><code>-A</code>: display non- printing characters in the text.<br><code>-n</code>: show line numbers.<br><code>-s</code>: suppress the output of multiple blank lines.</p>
<h4 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h4><p><code>-n</code>: perform sorting based on the numeric evaluation of a string rather than alphabetical value.<br><code>-r</code>: sort in reverse order. results are in descending rather than ascending order.<br><code>-b</code>: ignore leading blanks.<br><code>-k field1[,field2]</code>: sort based on a key field located from field1 to field2 rather than the entire line.</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> by specifying -k 3.7 we instruct sort to </span></div><div class="line"><span class="meta">#</span><span class="bash"> use a sort key that begins at the seventh character within the third field</span></div><div class="line">sort -k 3.7nbr -k 3.1nbr -k 3.4nbr distros.txt</div><div class="line">Fedora         10    11/25/2008</div><div class="line">Ubuntu         8.10  10/30/2008</div><div class="line">SUSE           11.0  06/19/2008</div><div class="line">...</div></pre></td></tr></table></figure>
<h4 id="unique"><a href="#unique" class="headerlink" title="unique"></a>unique</h4><p><code>-u</code>: remove duplicates from the sorted output.<br><code>-d</code>: only output duplicated lines, rather than unique lines.</p>
<h4 id="cut"><a href="#cut" class="headerlink" title="cut"></a>cut</h4><p><code>-f filed_list</code>, <code>-c char_list</code>, <code>-d delimiter_char</code><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">cut -f 3 distros.txt</div><div class="line">12/07/2006</div><div class="line">11/25/2008</div><div class="line"></div><div class="line">cut -f 3 distros.txt | cut -c 7-10</div><div class="line">2006</div><div class="line">2008</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> default delimiter is tab</span></div><div class="line"><span class="meta">#</span><span class="bash"> what <span class="keyword">if</span> we wanted a file fully manipulated with cut by characters, rather than fields</span></div><div class="line">expand distros.txt | cut -c 23-</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">set</span> delimiter to <span class="string">':'</span></span></div><div class="line">cut -d ':' -f 1 /etc/passwd | head</div></pre></td></tr></table></figure></p>
<h4 id="paste"><a href="#paste" class="headerlink" title="paste"></a>paste</h4><p>The paste command does the opposite of cut. Rather than extracting a column of text from a file, it adds one or more columns of text to a file.</p>
<h4 id="join"><a href="#join" class="headerlink" title="join"></a>join</h4><p>A join is an operation usually associated with relational databases where data from multiple tables with a shared key field is combined to form a desired result.</p>
<h4 id="comm-and-diff"><a href="#comm-and-diff" class="headerlink" title="comm and diff"></a>comm and diff</h4><ul>
<li>comm<br>The comm program compares two text files and displays the lines that are unique to each one and the lines they have in common.</li>
<li>diff<br><code>-c</code>: <strong>contex format</strong><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">diff -c file1.txt file2.txt</div><div class="line">*** file1.txt    2008-12-23 06:40:13.000000000 -0500</div><div class="line">--- file2.txt   2008-12-23 06:40:34.000000000 -0500</div><div class="line">***************</div><div class="line">*** 1,4 ****</div><div class="line">- a</div><div class="line">  b</div><div class="line">  c</div><div class="line">  d</div><div class="line">--- 1,4 ----</div><div class="line">  b</div><div class="line">  c</div><div class="line">  d</div><div class="line">  + e</div></pre></td></tr></table></figure>
</li>
</ul>
<p><code>-u</code>: <strong>unified format</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">diff -u file1.txt file2.txt</div><div class="line">--- file1.txt 2008-12-23 06:40:13.000000000 -0500</div><div class="line">+++ file2.txt 2008-12-23 06:40:34.000000000 -0500</div><div class="line">@@ -1,4 +1,4 @@</div><div class="line">-a</div><div class="line"> b</div><div class="line"> c</div><div class="line"> d</div><div class="line">+e</div></pre></td></tr></table></figure></p>
<h4 id="patch"><a href="#patch" class="headerlink" title="patch"></a>patch</h4><p>To prepare a diff file for use with patch, the GNU documentation (see Further Reading below) suggests using diff as follows:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">diff -Naur old_file new_file &gt; diff_file</div></pre></td></tr></table></figure></p>
<p>Once the diff file has been created, we can apply it to patch the old file into the new file:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">patch &lt; diff_file</div></pre></td></tr></table></figure></p>
<h4 id="tr"><a href="#tr" class="headerlink" title="tr"></a>tr</h4><p>The tr program is used to transliterate characters.<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> transliterate characters</span></div><div class="line">echo "lowercase letters" | tr a-z A-Z</div><div class="line">LOWERCASE LETTERS</div><div class="line">echo "lowercase letters" | tr [:lower:] A</div><div class="line">AAAAAAAAA AAAAAAA</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> delete <span class="string">'\r'</span> <span class="keyword">in</span> dos files</span></div><div class="line">tr -d '\r' &lt; dos_file &gt; unix_file</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> “squeeze” (delete) repeated instances of a character</span></div><div class="line">echo "aaabbbccc" | tr -s ab</div><div class="line">abccc</div></pre></td></tr></table></figure></p>
<h4 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h4><p><code>-n</code>: no auto-print;</p>
<p>sed Address Notation<br>|Address|    Description|<br>|:-:|:-|<br>|n|    A line number where n is a positive integer.|<br>|$|    The last line.|<br>|/regexp/|    Lines matching a POSIX basic regular expression. Note that the regular expression is delimited by slash characters. Optionally, the regular expression may be delimited by an alternate character, by specifying the expression with \cregexpc, where c is the alternate character.|<br>|addr1,addr2|    A range of lines from addr1 to addr2, inclusive. Addresses may be any of the single address forms above.|<br>|first~step|    Match the line represented by the number first, then each subsequent line at step intervals. For example 1~2 refers to each odd numbered line, 5~5 refers to the fifth line and every fifth line thereafter.|<br>|addr1,+n|    Match addr1 and the following n lines.|<br>|addr!|    Match all lines except addr, which may be any of the forms above.|</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">sed -n '1,5p' distros.txt</div><div class="line">SUSE           10.2     12/07/2006</div><div class="line">Fedora         10       11/25/2008</div><div class="line">SUSE           11.0     06/19/2008</div><div class="line">Ubuntu         8.04     04/24/2008</div><div class="line">Fedora         8        11/08/2007</div><div class="line"></div><div class="line">sed -n '/SUSE/p' distros.txt</div><div class="line">SUSE         10.2     12/07/2006</div><div class="line">SUSE         11.0     06/19/2008</div><div class="line"></div><div class="line">sed -n '/SUSE/!p' distros.txt</div><div class="line">Fedora         10       11/25/2008</div><div class="line">Ubuntu         8.04     04/24/2008</div></pre></td></tr></table></figure>
<p>sed Basic Editing Commands<br>|Command|    Description|<br>|:-:|:-|<br>|=|    Output current line number.|<br>|a|    Append text after the current line.|<br>|d|    Delete the current line.|<br>|i|    Insert text in front of the current line.|<br>|p|    Print the current line. By default, sed prints every line and only edits lines that match a specified address within the file. The default behavior can be overridden by specifying the -n option.|<br>|q|    Exit sed without processing any more lines. If the -n option is not specified, output the current line.|<br>|Q|    Exit sed without processing any more lines.|<br>|s/regexp/replacement/|    Substitute the contents of replacement wherever regexp is found. replacement may include the special character &amp;, which is equivalent to the text matched by regexp. In addition, replacement may include the sequences \1 through \9, which are the contents of the corresponding subexpressions in regexp. For more about this, see the discussion of back references below. After the trailing slash following replacement, an optional flag may be specified to modify the s command’s behavior.|<br>|y/set1/set2|    Perform transliteration by converting characters from set1 to the corresponding characters in set2. Note that unlike tr, sed requires that both sets be of the same length.|</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> <span class="string">'s/([0-9]&#123;2&#125;)/([0-9]&#123;2&#125;)/([0-9]&#123;4&#125;)$/\3-\1-\2/'</span></span></div><div class="line">sed 's/\([0-9]\&#123;2\&#125;\)\/\([0-9]\&#123;2\&#125;\)\/\([0-9]\&#123;4\&#125;\)$/\3-\1-\2/' distros.txt</div><div class="line">SUSE           10.2     2006-12-07</div><div class="line"></div><div class="line">echo "aaabbbccc" | sed 's/b/B/'</div><div class="line">aaaBbbccc</div><div class="line"></div><div class="line">echo "aaabbbccc" | sed 's/b/B/g'</div><div class="line">aaaBBBccc</div></pre></td></tr></table></figure>
<h4 id="aspell"><a href="#aspell" class="headerlink" title="aspell"></a>aspell</h4><p>an interactive spelling checker.<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">aspell check textfile</div></pre></td></tr></table></figure></p>
<h3 id="Format-text-output"><a href="#Format-text-output" class="headerlink" title="Format text output"></a>Format text output</h3><p><code>omitted</code></p>
<h3 id="Printer"><a href="#Printer" class="headerlink" title="Printer"></a>Printer</h3><p><code>ommited</code></p>
<h3 id="Compile-source-code"><a href="#Compile-source-code" class="headerlink" title="Compile source code"></a>Compile source code</h3><p>Why compile software? There are two reasons:</p>
<ol>
<li>Availability. Despite the number of precompiled programs in distribution repositories, some distributions may not include all the desired applications. In this case, the only way to get the desired program is to compile it from source.</li>
<li>Timeliness. While some distributions specialize in cutting edge versions of programs, many do not. This means that in order to have the very latest version of a program, compiling is necessary.</li>
</ol>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">[~]$ mkdir src</div><div class="line">[~]$ cd src</div><div class="line">ftp ftp.gnu.org</div><div class="line">anonymous</div><div class="line"><span class="meta">ftp&gt;</span><span class="bash"> <span class="built_in">cd</span> gnu/diction</span></div><div class="line"><span class="meta">ftp&gt;</span><span class="bash"> ls</span></div><div class="line">150 Here comes the directory listing.</div><div class="line">-rw-r--r-- 1 1003 65534 68940 Aug 28 1998 diction-0.7.tar.gz</div><div class="line">-rw-r--r-- 1 1003 65534 90957 Mar 04 2002 diction-1.02.tar.gz</div><div class="line">-rw-r--r-- 1 1003 65534 141062 Sep 17 2007 diction-1.11.tar.gz</div><div class="line"><span class="meta">ftp&gt;</span><span class="bash"> get diction-1.11.tar.gz</span></div><div class="line">226 File send OK.</div><div class="line"><span class="meta">ftp&gt;</span><span class="bash"> <span class="built_in">bye</span></span></div><div class="line"><span class="meta">[src]$</span><span class="bash"> ls</span></div><div class="line">diction-1.11.tar.gz</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> unpack</span></div><div class="line"><span class="meta">[src]$</span><span class="bash"> tar -xzf diction-1.11.tar.gz</span></div><div class="line"><span class="meta">[src]$</span><span class="bash"> <span class="built_in">cd</span> diction-1.11</span></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> configure, compile and install</span></div><div class="line">[diction-1.11]$ ./configure</div><div class="line">[diction-1.11]$ make</div><div class="line">[diction-1.11]$ make install</div></pre></td></tr></table></figure>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="http://billie66.github.io/TLCL/book/index.html" target="_blank" rel="external">快乐的 Linux 命令行</a></p>
]]></content>
      
        <categories>
            
            <category> Doing </category>
            
            <category> Shell </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Constructors, Destrustors and Assignment Operators, Notes(2), Effective C++]]></title>
      <url>/2017/06/15/effective-cpp-constructors-destructors-and-assignment-operators/</url>
      <content type="html"><![CDATA[<p>(I read a Chinese version of the book, any translation problem plz point out. </p>
<a id="more"></a>
<h2 id="Constructors-Destructors-and-Assignment-Operator"><a href="#Constructors-Destructors-and-Assignment-Operator" class="headerlink" title="Constructors, Destructors and Assignment Operator"></a>Constructors, Destructors and Assignment Operator</h2><h3 id="Know-what-functions-CPP-silently-writes-and-calls"><a href="#Know-what-functions-CPP-silently-writes-and-calls" class="headerlink" title="Know what functions CPP silently writes and calls"></a>Know what functions CPP silently writes and calls</h3><p>For empty class, the complier will declare a copy constructor, a copy assignment operator, a destructor, <strong>if no any constructor is declared, one more default constructor is declared by compiler</strong>.<br>They are all public and inlined, and <strong>when called, they will be created (during compiling period)</strong>.</p>
<h3 id="Explicitly-disallow-the-use-of-compiler-generated-functions-you-do-not-want"><a href="#Explicitly-disallow-the-use-of-compiler-generated-functions-you-do-not-want" class="headerlink" title="Explicitly disallow the use of compiler-generated functions you do not want"></a>Explicitly disallow the use of compiler-generated functions you do not want</h3><ul>
<li><p>declare as private with no definition.<br>when member function or friend function calls, <strong>a linkage error</strong> will be reported.</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeForSale</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="comment">// ...</span></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    HomeForSale(<span class="keyword">const</span> HomeForSale&amp;);</div><div class="line">    HomeForSale&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> HomeForSale&amp;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
<li><p><strong>earlier? -&gt; compiling period</strong></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Uncopyable</span> &#123;</span></div><div class="line"><span class="keyword">protected</span>:</div><div class="line">    Uncopyable() &#123;&#125;</div><div class="line">    ~Uncopyable() &#123;&#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    Uncopyable(<span class="keyword">const</span> Uncopyable&amp;);</div><div class="line">    Uncopyable&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> Uncopyable&amp;);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeForSale</span>:</span> <span class="keyword">private</span> Uncopyable &#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>why?</strong><br>anyone tries to copy <code>HomeForSale</code>, the compiler will try to generate a copy constructor and a copy assignment operator, then “compiler-generated version” tries to call the ones in base classes respectively, and it will be refused due to the privateness of copying functions in base classes.</p>
<ul>
<li>Boost have one class <code>noncopyable</code> similarly that mentioned above.</li>
<li>CPP11 new feature, <code>=delete</code> </li>
</ul>
<h3 id="Declare-vitual-destructors-in-polymorphic-base-classes"><a href="#Declare-vitual-destructors-in-polymorphic-base-classes" class="headerlink" title="Declare vitual destructors in polymorphic base classes."></a>Declare vitual destructors in polymorphic base classes.</h3><ul>
<li>CPP points out specificly, it is a <strong>undefined behavior</strong> when a object of derived class is deleted by a pointer of base class, which has a non-virtual destructor.</li>
<li>Any class that has a virtual function should have a virtual destructor.</li>
<li>A class with no virtual destructor mustn’t be used as a base class, such as STL containers. In other words, <strong>if some class is not designed for using as a base class, it shouldn’t declare a virtual destructor</strong>.</li>
<li>Declare a pure virtual destrutor when creating an abstract class without any other pure virtual functions.<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AWOV</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="keyword">virtual</span> ~AWOV() = <span class="number">0</span>;</div><div class="line">&#125;;</div><div class="line">AWOV::~AWOV() &#123;&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Prevent-exceptions-from-leaving-destructors"><a href="#Prevent-exceptions-from-leaving-destructors" class="headerlink" title="Prevent exceptions from leaving destructors"></a>Prevent exceptions from leaving destructors</h3><p><strong>When 2 exceptions exist at the same time, the program either aborts or results in a undefined behavior</strong>.</p>
<p><strong>double insurance</strong><br>if customer need to response to the exceptions which was thrown by the run-time of some function, the class should provide a normal function (other than handled in the destructor).<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DBConn</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</div><div class="line">        db.close();</div><div class="line">        closed = <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">    ~DBConn() &#123;</div><div class="line">        <span class="keyword">if</span>(!closed) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                db.close();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">catch</span> (...) &#123;</div><div class="line">                <span class="comment">// log, then abort or swallow the exception</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    DBConnection db;</div><div class="line">    <span class="keyword">bool</span> closed;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h3 id="Never-call-virtual-functions-during-construction-or-destruction"><a href="#Never-call-virtual-functions-during-construction-or-destruction" class="headerlink" title="Never call virtual functions during construction or destruction"></a>Never call virtual functions during construction or destruction</h3><ul>
<li>virtual functions never downcast to derived classes, when base classed is constructing.</li>
<li>once called, it is a <strong>undefined behavior</strong> because the members haven’t been initialized yet.</li>
<li><strong>if needed, declare as non-virtual</strong><br>constructors of derived classes passes the parameters to the ones of base classes (static functions will also avoid the problem).<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Transaction</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">Transaction</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; logInfo)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">logTransaction</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; logInfo)</span> <span class="keyword">const</span></span>; <span class="comment">// non-virtual</span></div><div class="line">&#125;;</div><div class="line">Transaction::Transaction(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; logInfo) &#123;</div><div class="line">    logTransaction(logInfo);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BuyTransaction</span>:</span> <span class="keyword">public</span> Transaction &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    BuyTransaction( ... )</div><div class="line">        : Transaction(createLogString( ... ))</div><div class="line">    &#123;&#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="keyword">static</span> <span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">createLogString</span><span class="params">( ...)</span></span>;</div><div class="line">);</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Assignment-operator"><a href="#Assignment-operator" class="headerlink" title="Assignment operator"></a>Assignment operator</h3><ul>
<li>Have assignment operators return a reference to <code>*this</code></li>
<li>Handle assignment to self<br><strong>copy and swap</strong> technique<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Widget&amp; Widget::<span class="keyword">operator</span>=(<span class="keyword">const</span> Widget&amp; rhs) &#123;</div><div class="line">    Widget temp(rhs);</div><div class="line">    swap(*<span class="keyword">this</span>, temp);</div><div class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Copy-all-parts-of-an-object"><a href="#Copy-all-parts-of-an-object" class="headerlink" title="Copy all parts of an object"></a>Copy all parts of an object</h3><ul>
<li><p>compiler may generate no warnings or errors when you implement your own copy constructors or copy assignment operators</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Customer</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    Customer(<span class="keyword">const</span> Customer&amp; rhs);</div><div class="line">    Customer&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> Customer&amp; rhs);</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> name;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PriorityCustomer</span>:</span> <span class="keyword">public</span> Customer &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    PriorityCustomer(<span class="keyword">const</span> PriorityCustomer&amp; rhs);</div><div class="line">    PriorityCustomer&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> PriorityCustomer&amp; rhs);</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="keyword">int</span> priority;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">PriorityCustomer::PriorityCustomer(<span class="keyword">const</span> PriorityCustomer&amp; rhs)</div><div class="line">    : Customer(rhs),</div><div class="line">      priority(rhs.priority) &#123;&#125;</div><div class="line"></div><div class="line">PriorityCustomer&amp; PriorityCustomer::<span class="keyword">operator</span>=(<span class="keyword">const</span> PriorityCustomer&amp; rhs) &#123;</div><div class="line">    Customer::<span class="keyword">operator</span>=(rhs);</div><div class="line">    priority = rhs.priority;</div><div class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p><strong>Do not try to use some copying function to implement another one</strong>.<br>If you wanna avoid code duplicate, try to introduce a new function, maybe called <code>init()</code> to be called by the two copying functions.</p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Doing </category>
            
            <category> CPP </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Accustoming to CPP, Notes(1), Effective C++]]></title>
      <url>/2017/06/11/effective-cpp-accustoming-to-cpp/</url>
      <content type="html"><![CDATA[<p>(I read a Chinese version of the book, any translation problem plz point out. </p>
<a id="more"></a>
<h3 id="View-CPP-as-a-federation-of-languages"><a href="#View-CPP-as-a-federation-of-languages" class="headerlink" title="View CPP as a federation of languages"></a>View CPP as a federation of languages</h3><ul>
<li><p>a multiparadigm programming language</p>
<ul>
<li>procedural</li>
<li>object-oriented programming (OOP)</li>
<li>functional programming (FP)</li>
<li>generic</li>
<li>template metaprogramming (TMP)</li>
</ul>
</li>
<li><p>tips</p>
<ul>
<li>pass-by-value is more efficient for built-in types (C-like types)</li>
<li>pass-by-reference-to-const is better for user-defined types</li>
<li>pass-by-value is better for STL iterators and functors (both implemented based on C-pointers)</li>
</ul>
</li>
</ul>
<h3 id="Prefer-compliers-to-preprocessors"><a href="#Prefer-compliers-to-preprocessors" class="headerlink" title="Prefer compliers to preprocessors"></a>Prefer compliers to preprocessors</h3><h4 id="Use-consts-for-constants"><a href="#Use-consts-for-constants" class="headerlink" title="Use consts for constants"></a>Use consts for constants</h4><ul>
<li><p>consts can be in the symbol table and will be seen by compliers</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> <span class="keyword">char</span>* <span class="keyword">const</span> authorName = <span class="string">"Scott Meyers"</span>;</div><div class="line"><span class="comment">//std::string is better than char*-based string</span></div><div class="line"><span class="keyword">const</span> <span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">authorName</span><span class="params">(<span class="string">"Scott Meyers"</span>)</span></span>;</div></pre></td></tr></table></figure>
</li>
<li><p>consts in class for scope</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Well, it is a declaration not a definition. Normally CPP requires a definition for anything you use.</span></div><div class="line"><span class="comment">// But static consts in class with integral types(ints, chars, bools) need to be treated specially.</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GamePlayer</span> &#123;</span></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> NumTurns = <span class="number">5</span>; <span class="comment">//declaration</span></div><div class="line">    <span class="keyword">int</span> scores[NumTurns];</div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>No need to provide definitions when their addresses are never taken.</strong><br><strong>Some compliers may wrongly require a definition, then it will look like:</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// definiton, no more initialization due to done in declaration</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> GamePlayer::NumTurns;</div></pre></td></tr></table></figure></p>
<ul>
<li><p>#defines have no scope<br>once a macro is defined, it is taken into effect during all the later process of compiling(unless #undef is done).<br><strong>no encapsulation</strong></p>
</li>
<li><p>enum hack</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// some like #defines</span></div><div class="line"><span class="comment">// consts can be taken the addresses while enums cannot</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GamePlayer</span> &#123;</span></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="keyword">enum</span> &#123; NumTurns = <span class="number">5</span> &#125;;</div><div class="line">    <span class="keyword">int</span> scores[NumTurns];</div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>For acquaintance, enum hack is basic technique in TMP</strong></p>
<h4 id="Use-template-inlines-for-mini-functions"><a href="#Use-template-inlines-for-mini-functions" class="headerlink" title="Use template inlines for mini functions"></a>Use template inlines for mini functions</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// disgusting</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CALL_WITH_MAX(a, b) f((a) &gt; (b) ? (a) : (b))</span></div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">callWithMAX</span><span class="params">(<span class="keyword">const</span> T&amp; a, <span class="keyword">const</span> T&amp; b)</span> </span>&#123;</div><div class="line">    f(a &gt; b ? a : b);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Use-consts-whenever-possible"><a href="#Use-consts-whenever-possible" class="headerlink" title="Use consts whenever possible"></a>Use consts whenever possible</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">char</span> greeting[] = <span class="string">"Hello"</span>;</div><div class="line"><span class="keyword">char</span>* p = greeting;              <span class="comment">// non-const pointer, non-const data</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">char</span>* p = greeting;        <span class="comment">// non-const pointer, const data</span></div><div class="line"><span class="keyword">char</span>* <span class="keyword">const</span> p = greeting;        <span class="comment">// const pointer, non-const data</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">char</span>* <span class="keyword">const</span> p = greeting;  <span class="comment">// const pointer, const data</span></div></pre></td></tr></table></figure>
<ul>
<li><p>STL iterator<br>iterator acts like a T* pointer.</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec;</div><div class="line"><span class="comment">// iter acts like T* const</span></div><div class="line"><span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator iter = vec.begin(); </div><div class="line">*iter = <span class="number">10</span>;  <span class="comment">// ok</span></div><div class="line">++iter;      <span class="comment">// CE</span></div><div class="line"></div><div class="line"><span class="comment">// cIter acts like const T*</span></div><div class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::const_iterator cIter = vec.begin();</div><div class="line">++iter;      <span class="comment">// ok</span></div><div class="line">*iter = <span class="number">10</span>;  <span class="comment">// CE</span></div></pre></td></tr></table></figure>
</li>
<li><p>return const value</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rational</span> &#123;</span> <span class="comment">// ... &#125;;</span></div><div class="line"><span class="keyword">const</span> Rational <span class="keyword">operator</span>* (<span class="keyword">const</span> Rational&amp; lhs, <span class="keyword">const</span> Rational&amp; rhs);</div><div class="line"></div><div class="line">Rational a, b, c;</div><div class="line"><span class="keyword">if</span>(a * b = c) &#123;&#125; <span class="comment">// CE, without const it will be ok</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>CPP returns object by value, so the assignment is never legal, for only changing a copy.</strong></p>
<ul>
<li>const member function<br><strong>two member functions can be overloaded even if they are only different in constness.</strong><br><strong>in real, const member function is overloaded when const objects are used in passed by pointer-to-const or passed by reference-to-const.</strong><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TextBlock</span> &#123;</span></div><div class="line"><span class="keyword">public</span>: </div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span>&amp; <span class="keyword">operator</span>[](<span class="built_in">std</span>::<span class="keyword">size_t</span> position) <span class="keyword">const</span> &#123;</div><div class="line">        <span class="comment">// ...</span></div><div class="line">        <span class="keyword">return</span> text[position];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">char</span>&amp; <span class="keyword">operator</span>[](<span class="built_in">std</span>::<span class="keyword">size_t</span> position) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">const_cast</span>&lt;<span class="keyword">char</span>&amp;&gt;(</div><div class="line">            <span class="keyword">static_cast</span>&lt;<span class="keyword">const</span> TextBlock&amp;&gt;(*<span class="keyword">this</span>)[position]</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">const</span> TextBlock&amp; ctb)</span> </span>&#123;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; ctb[<span class="number">0</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>non-const overloaded function can be implemented by calling the const version is safe, otherwise it is not.</strong></p>
<ul>
<li>bitwise constness or logical constness<br><strong>bitwist constness is the definition of CPP’s constness, so the const member funcion cannot change any non-static member variable.</strong><br>use keyword <code>mutable</code> to release the constraint of CPP’s bitwise constness.<br><strong>write codes by using logical constness.</strong><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CTextBlock</span> &#123;</span></div><div class="line">    <span class="keyword">public</span>: </div><div class="line">        <span class="built_in">std</span>::<span class="keyword">size_t</span> length() <span class="keyword">const</span>;</div><div class="line">    <span class="keyword">private</span>:</div><div class="line">        <span class="keyword">char</span>* pText;</div><div class="line">        <span class="keyword">mutable</span> <span class="built_in">std</span>::<span class="keyword">size_t</span> textLength;</div><div class="line">        <span class="keyword">mutable</span> <span class="keyword">bool</span> lengthIsValid;</div><div class="line">&#125;;</div><div class="line"><span class="built_in">std</span>::<span class="keyword">size_t</span> CTextBlock::length() <span class="keyword">const</span> &#123;</div><div class="line">    <span class="keyword">if</span>(!lengthIsValid) &#123;</div><div class="line">        textLength = <span class="built_in">std</span>::<span class="built_in">strlen</span>(pText); <span class="comment">// can be changed</span></div><div class="line">        lengthIsValid = <span class="literal">true</span>;            <span class="comment">// same as above</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> textLength;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Make-sure-that-objects-are-initialized-before-used"><a href="#Make-sure-that-objects-are-initialized-before-used" class="headerlink" title="Make sure that objects are initialized before used"></a>Make sure that objects are initialized before used</h3><ul>
<li>objects will be initialized when declared in heap while they won’t when declared in stack.</li>
<li>it is not easy to memorize it, whatever, keep initialization always.</li>
<li>do not mix assignment and initialization.</li>
<li><strong>for user-defined types, always use the member initialization list and always list all the member variables in the member initialization list.</strong></li>
<li>sometimes, a class may have many constructors, and to avoid duplication, we can move the invitializatin of the variables that have same efficiency between assignment and initialization to some private function. (well, this ‘pseudo-intialization’ is not advocated, try member initialization list as much as possible)</li>
<li>The order of initialization:<ul>
<li>base classes is initialized earlier than derived classes.</li>
<li>member variables is initialized as the order of that they are declared even if the order of the appearance in member initialization list is different.</li>
</ul>
</li>
<li>non-local static objects<ul>
<li>static objects: global objects, objects defined in namespace, static objects in classes, functions, file scopes.</li>
<li>local static objects: static objects in functions.</li>
<li>no specific initialization order for non-local static objects in different translation unit.</li>
<li>Singleton:<br><strong>use local static objects to replace the non-local ones.</strong><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileSystem</span> &#123;</span> <span class="comment">// ... &#125;;</span></div><div class="line"><span class="function">FileSystem&amp; <span class="title">tfs</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> FileSystem fs;</div><div class="line">    <span class="keyword">return</span> fs;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Directory</span> &#123;</span> <span class="comment">// ... &#125;;</span></div><div class="line">Directory::Directory( params ) &#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">    <span class="built_in">std</span>::<span class="keyword">size_t</span> disks = tfs().numDisks();</div><div class="line">&#125;</div><div class="line"><span class="function">Directory&amp; <span class="title">tempDir</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> Directory td;</div><div class="line">    <span class="keyword">return</span> td;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Doing </category>
            
            <category> CPP </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Address Collecting]]></title>
      <url>/2017/05/18/Address-Collecting/</url>
      <content type="html"><![CDATA[<p>这里留地址吧，具体时间就截止到多说关闭(6.1)吧，到时候我就换Disqus了<br>喔，到时候收到了转给我打印费和邮费就好了。<br>(某ACMer卖模版月入百万！才不会说我是骗手机号的呢</p>
<a id="more"></a>
<p>那啥地址就按照这个格式留吧：</p>
<p>收件地址： 重庆市重庆大学A区中门11舍<br>收件人：老顽童<br>收件人号码：13123333333</p>
<p>嗨呀，以后就只能自己玩啦~</p>
]]></content>
      
        <categories>
            
            <category> Doing </category>
            
            <category> Life </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Backthoughts during These Days]]></title>
      <url>/2017/04/28/Backthoughts-during-These-Days/</url>
      <content type="html"><![CDATA[<p>“I’m sorry that you are not the person we choose”<br>“I’m sorry …”</p>
<a id="more"></a>
<p>Yeah, I gotta some problems myself, mainly from the ICPC regionals’ results…<br>I managed to avoid that, yet I can’t control the inner hints myself…</p>
<p>During the toutiao interview, the first two was OK.<br>The third one crashed..</p>
<p>Last year, a new team formed, and I became the vice coder instead of<br>the major coder…<br>Less and less onsite coding, makes me lose the judgement of coding time of a problem..</p>
<p>WAPS online Interview, anxiety made me … couldn’t think straightly..<br>Unexpectedly, onsite interview, I did a great job.. even I was not matched at last.<br>Anyway, it doesn’t matter.. Life is not all about money and comfort,<br>and I’d love to have some challenges which hard mode of life will be more exciting.</p>
<p>Well, going back to the third one of toutiao’ interview.<br>So bad! I AM the one who can code a complicated data structure problem,<br>and a complicated implementation problem too…<br>Calm down, and 30 minutes is OK.. Do believe myself…<br>Failure won’t take anything.<br>Results can’t be changed, more world later on.</p>
<p>2 times I failed at the third interview of toutiao.<br>I don’t believe the fate, just lack of some luck.<br>More details, see this link, <a href="/2017/04/28/Backthoughts-about-the-Failure-of-the-Autumn-and-Spring-Campus-Recruiting-of-Toutiao/">click me</a></p>
<p>Be better and More progress！<br>More effort on the hard mode chosed！</p>
]]></content>
      
        <categories>
            
            <category> Doing </category>
            
            <category> Life </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[头条秋招春招失败的思考]]></title>
      <url>/2017/04/28/Backthoughts-about-the-Failure-of-the-Autumn-and-Spring-Campus-Recruiting-of-Toutiao/</url>
      <content type="html"><![CDATA[<p>毕设交了一波初稿，总算回来填坑了。回头想想，不得不说头条面试反映了我的心境变化。</p>
<a id="more"></a>
<h2 id="秋招后台岗"><a href="#秋招后台岗" class="headerlink" title="秋招后台岗"></a>秋招后台岗</h2><h3 id="一面"><a href="#一面" class="headerlink" title="一面"></a>一面</h3><p>记得有2个题，其中一个应该非常水的题，没啥印象了。</p>
<h4 id="数组中乘积最大连续子数组"><a href="#数组中乘积最大连续子数组" class="headerlink" title="数组中乘积最大连续子数组"></a>数组中乘积最大连续子数组</h4><p>这个现在就是一眼的dp，只怪刷了那么多题的我还是刷题太少了。</p>
<ul>
<li>Old Solution<br>直接暴力是$O(n^3)$的，所以就显然的前缀积优化到$O(n^2)$<br>蓝儿因为有$0$，这里就会有些问题，为了避免除$0$要做一些处理<br>不过实际上只要乘了$0$这一段乘积就是$0$了，所以把所有$0$的位置抠出来就可以了<br>然后枚举每一段，就不会有事了，答案初始化为$0$就可以了，前提是有一个$0$。。</li>
<li>New Solution<br>很简单的dp啊，，$f[i][0/1]:$=到$i$这个位置的连续乘积最大值/最小值<br>就是套用最大连续子段和的套路，这破题我还被问过两遍<br>$HR$又做了一个更复杂的的树形的，不过那个时候我一眼秒了。。<br>就因为有负数嘛，所以就简单的维护下最小值就好了。。</li>
</ul>
<h3 id="二面"><a href="#二面" class="headerlink" title="二面"></a>二面</h3><h4 id="写个类似单调栈的玩意儿"><a href="#写个类似单调栈的玩意儿" class="headerlink" title="写个类似单调栈的玩意儿"></a>写个类似单调栈的玩意儿</h4><p>印象中应该让写了一个支持<code>push</code>,<code>pop</code>,<code>getMin</code>的栈，所有操作$O(1)$</p>
<ul>
<li>Solution<br>这东西也很简单啊，就维护数字栈的之后再顺手维护一个单调栈，细节注意一下就好了<br>我当时并没有想到单调栈，可能平时用的不多。不过还是有脑子的，随便一想就想到了。<br>我记得这个破题剑指offer上有吧，虽然一直没注意。</li>
</ul>
<h4 id="微信怎么拉取朋友圈信息"><a href="#微信怎么拉取朋友圈信息" class="headerlink" title="微信怎么拉取朋友圈信息"></a>微信怎么拉取朋友圈信息</h4><p>这东西我真不会啊，就xjb说了一下，本地存个跟帐号有关的hashvalue表示已经拉取了多少<br>每次拉取的时候，服务器也生成一个，比对一下，不适最新的就拉取就好了。<br>当然你问我什么别人点赞评论啥的，我真的不会啊。。</p>
<h4 id="服务器很少，流量很大，怎么负载均衡啊"><a href="#服务器很少，流量很大，怎么负载均衡啊" class="headerlink" title="服务器很少，流量很大，怎么负载均衡啊"></a>服务器很少，流量很大，怎么负载均衡啊</h4><p>不会啊，xjb扯淡啊，就随手说了一下缓存服务器，Nginx啥的(这东西我tm就听过名字。<br><del>讲道理啊，为啥不买设备啊喂！(大雾</del></p>
<h3 id="三面"><a href="#三面" class="headerlink" title="三面"></a>三面</h3><p>哇，这面跑不了啊，直接就问我后台技术栈啥的。<br>骗不过去了啊。然后就不知道啊。有点绝望啊。<br>意识不清醒了啊，打完比赛找不到工作一同交织在一起啊。<br>然后面试官问我读不读研啊。然后脑子一抽说想读啊。<br>然后我还耿直的去问头条有没有quit工作去读研啊<br><del>没见过比我更sb的人了</del><br>主要还是比赛打炸了，心态太差了。几个月都没调好。</p>
<h3 id="然后就没然后了啊"><a href="#然后就没然后了啊" class="headerlink" title="然后就没然后了啊"></a>然后就没然后了啊</h3><h2 id="春招算法岗"><a href="#春招算法岗" class="headerlink" title="春招算法岗"></a>春招算法岗</h2><h3 id="一面-1"><a href="#一面-1" class="headerlink" title="一面"></a>一面</h3><p>扯扯淡啊，自我介绍啥的啊，ACM打的怎么样啊。。</p>
<h4 id="二叉树最长路径长度"><a href="#二叉树最长路径长度" class="headerlink" title="二叉树最长路径长度"></a>二叉树最长路径长度</h4><p>一看就当普通树做了啊，然后就无脑说两次dfs求直径就好了啊。<br>他说能不能一次啊，那就无脑dp求一下直径啊。<br>他说还能不能再简单一点啊。 <del>(dp还不简单啊</del><br>哇 我又看了一下题，发现二叉树。<br>然后我就说那简化一下啊。</p>
<ul>
<li>Code<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></div><div class="line">    Node* ls, *rs;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = INT_MAX / <span class="number">2</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> maxd = -INF;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(Node* cur)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(cur == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> ldep = dfs(cur-&gt;ls);</div><div class="line">    <span class="keyword">int</span> rdep = dfs(cur-&gt;rs);</div><div class="line">   	maxd = max(maxd, ldep + rdep + <span class="number">1</span>);</div><div class="line">    <span class="keyword">return</span> max(ldep, rdep) + <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="脑筋急转弯"><a href="#脑筋急转弯" class="headerlink" title="脑筋急转弯"></a>脑筋急转弯</h4><p>有25个人，跑道一次只能跑5个人，问最少跑几次能得到冠亚季军啊。</p>
<ul>
<li>Solution<br>一眼看穿是多路归并啊，然后算了一下是8啊。。</li>
</ul>
<h3 id="二面-1"><a href="#二面-1" class="headerlink" title="二面"></a>二面</h3><p>不记得问了啥啊，就扔了一个题，然后问了点儿机器学习的东西</p>
<h4 id="复杂链表的复制"><a href="#复杂链表的复制" class="headerlink" title="复杂链表的复制"></a>复杂链表的复制</h4><ul>
<li><p>Description<br>有一个链表L,其每个节点有2个指针，一个指针next指向链表的下个节点，另一个random随机指向链表中的任一个节点，可能是自己或者为空，写一个程序，复制这个链表</p>
</li>
<li><p>Solution<br>剑指offer上有啊，看了一眼思路啊当时就，然后很慌啊。<br>不过面了那么多面试啊，一下子就冷静了啊。然后就会了啊。<br>就后面拷贝一份搞一搞啊。</p>
</li>
<li><p>Code</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> val;</div><div class="line">    Node *nxt, *random;</div><div class="line">    Node()&#123;&#125;</div><div class="line">    Node(<span class="keyword">int</span> val, Node *nxt, Node *random): val(val), nxt(nxt), random(random)&#123;&#125;</div><div class="line">    </div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function">Node* <span class="title">copyComplexList</span><span class="params">(Node *head)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(head == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">nullptr</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">for</span>(Node *cur = head; cur != <span class="literal">nullptr</span>; cur = cur-&gt;nxt-&gt;nxt)&#123;</div><div class="line">        Node *copied = <span class="keyword">new</span> Node(cur-&gt;val, cur-&gt;nxt, cur-&gt;random);</div><div class="line">        cur-&gt;nxt = copied;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(Node *cur = head-&gt;nxt; cur != <span class="literal">nullptr</span>; cur = cur-&gt;nxt-&gt;nxt)&#123;</div><div class="line">        cur-&gt;random = cur-&gt;random-&gt;nxt;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    Node *nHead = head-&gt;nxt;</div><div class="line">    <span class="keyword">for</span>(Node *cur = head; cur != <span class="literal">nullptr</span>; cur = cur-&gt;nxt)&#123;</div><div class="line">        Node *copied = cur-&gt;nxt;</div><div class="line">        Node *copiedNxt = copied-&gt;nxt-&gt;nxt;</div><div class="line">        Node *curNxt = cur-&gt;nxt-&gt;nxt;</div><div class="line">        cur-&gt;nxt = curNxt;</div><div class="line">        copied-&gt;nxt = copiedNxt;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> nHead;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h4><ul>
<li>手推一下LR吧<br>就直接把Hypothesis Function，Cost Function写一写，Gradient Decent推一推啊。<br>然后我就推了一下啊，sigmoid函数的导数差点不会推啊。。有惊无险啊</li>
<li>正则参数$\lambda$选取的影响啊<br>大了会overfitting啊，小了会underfitting啊。</li>
</ul>
<h4 id="一个奇怪的题"><a href="#一个奇怪的题" class="headerlink" title="一个奇怪的题"></a>一个奇怪的题</h4><ul>
<li><p>Description<br>对一个数组，有n个数据，找一个索引的位置k，使前k个数的方差var(k)和后面n-k个数的方差var(n-k)之和最小。</p>
</li>
<li><p>Solution<br>不知道能不能$O(1)$啊，不会做啊，就暴力展开了一下方差啊<br>然后$O(n)$枚举$k$，$O(1)$算答案，总复杂度$O(n)$</p>
</li>
<li><p>Code</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">var = \sum_&#123;i=1&#125;^n (x_i - avg)^2 </span></div><div class="line"><span class="comment">= \sum_&#123;i=1&#125;^n (x_i ^ 2 + avg^2 - 2*x_i*avg)</span></div><div class="line"><span class="comment">= \sum_&#123;i=1&#125;^n (x_i ^ 2 + (sum / n)^2 - 2 * x_i * (sum / n))</span></div><div class="line"><span class="comment">= \sum_&#123;i=1&#125;^n x_i^2 + sum^2 /n - 2*sum^2/n= \sum_&#123;i=1&#125;^n x_i^2 - sum^2/n</span></div><div class="line"><span class="comment">*/</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">findIndex</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; v)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> preSqSum = <span class="number">0</span>, totSqSum = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> preSum = <span class="number">0</span>, totSum = <span class="number">0</span>;</div><div class="line">    pair&lt;<span class="keyword">double</span>, <span class="keyword">int</span>&gt; varAndIdx = &#123;<span class="number">-1</span>, <span class="number">-1</span>&#125;;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v.size(); ++i)&#123;</div><div class="line">        totSqSum += v[i] * v[i];</div><div class="line">        totSum += v[i];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v.size(); ++i)&#123;</div><div class="line">        preSum += v[i];</div><div class="line">        preSqSum += v[i] * v[i];</div><div class="line">        <span class="keyword">int</span> sufSqSum = totSqSum - preSqSum;</div><div class="line">        <span class="keyword">int</span> sufSum = totSum - preSum;</div><div class="line">        <span class="keyword">double</span> preVar = preSqSum - <span class="number">1.0</span> * preSum * preSum / (i + <span class="number">1</span>);</div><div class="line">        <span class="keyword">double</span> sufVar = sufSqSum - <span class="number">1.0</span> * sufSum * sufSum/ (v.size() - i - <span class="number">1</span>);</div><div class="line">        varAndIdx = max(varAndIdx, &#123;preVar + sufVar, i&#125;);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> varAndIdx.second;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="三面-1"><a href="#三面-1" class="headerlink" title="三面"></a>三面</h3><h4 id="24点游戏"><a href="#24点游戏" class="headerlink" title="24点游戏"></a>24点游戏</h4><ul>
<li><p>Description<br>给定4个整数0～9，给出是否能计算得到24，加减乘除括号，普通算术运算。精度他说<code>1e-5</code></p>
</li>
<li><p>Solution<br>以前写过啊，蓝儿没脑子了啊，连面了两面。<br>就选择写暴力搜索所有表达式啊。<br>然后就因为<code>string v = &quot;&quot; + toChar(a) + toChar(b) + toChar(c) + toChar(d);</code><br>这个垃圾代码不CE挂了啊。。我以为会CE的啊。结果最后半天才反应到这里。<br>写了半个多小时，面试官他写了一个都写完了啊。。难受啊。。<br>我当时好怂啊，不自信啊。。结果面试结束后几分钟就调通了啊。</p>
</li>
<li><p>My Code<br>找不到最终版本了，就扔个有点小问题的吧。纪念一下我这个“C++大师”</p>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="built_in">string</span> op = <span class="string">"+-*/"</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">getPriority</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(c == <span class="string">'+'</span> || c == <span class="string">'-'</span>) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(c == <span class="string">'*'</span> || c == <span class="string">'/'</span>) <span class="keyword">return</span> <span class="number">2</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; inToPost(<span class="keyword">const</span> <span class="built_in">string</span>&amp; expr) &#123;</div><div class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt; opr;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; ret;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; expr.size(); ++i) &#123;</div><div class="line">        <span class="keyword">char</span> c = expr[i];</div><div class="line">        <span class="keyword">if</span>(c == <span class="string">'('</span>) opr.push(c);</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(c == <span class="string">')'</span>) &#123;</div><div class="line">            <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</div><div class="line">                <span class="keyword">char</span> top = opr.top(); opr.pop();</div><div class="line">                <span class="keyword">if</span>(top == <span class="string">'('</span>) <span class="keyword">break</span>;</div><div class="line">                ret.push_back(<span class="built_in">string</span>(<span class="number">1</span>, top));</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">isdigit</span>(c)) &#123;</div><div class="line">            <span class="built_in">string</span> digit;</div><div class="line">            <span class="keyword">for</span>(; i &lt; expr.size() &amp;&amp; <span class="built_in">isdigit</span>(expr[i]); ++i) digit += expr[i];</div><div class="line">            ret.push_back(digit);</div><div class="line">            --i;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">int</span> curP = getPriority(c);</div><div class="line">            <span class="keyword">for</span>(; opr.size() &amp;&amp; getPriority(opr.top()) &gt;= curP; opr.pop())</div><div class="line">                ret.push_back(<span class="built_in">string</span>(<span class="number">1</span>, opr.top()));</div><div class="line">            opr.push(c);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(; opr.size(); opr.pop()) ret.push_back(<span class="built_in">string</span>(<span class="number">1</span>, opr.top()));</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">double</span> <span class="title">calc</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; post)</span> </span>&#123;</div><div class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">double</span>&gt; opd;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span>&amp; s : post) &#123;</div><div class="line">        <span class="keyword">if</span>(<span class="built_in">isdigit</span>(s[<span class="number">0</span>])) opd.push(stod(s));</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            assert(opd.size());</div><div class="line">            <span class="keyword">double</span> y = opd.top(); opd.pop();</div><div class="line">            assert(opd.size());</div><div class="line">            <span class="keyword">double</span> x = opd.top(); opd.pop();</div><div class="line">            <span class="keyword">if</span>(s[<span class="number">0</span>] == <span class="string">'+'</span>) opd.push(x + y);</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s[<span class="number">0</span>] == <span class="string">'-'</span>) opd.push(x - y);</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s[<span class="number">0</span>] == <span class="string">'*'</span>) opd.push(x * y);</div><div class="line">            <span class="keyword">else</span> opd.push(x / y);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> opd.top();</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> dep, <span class="keyword">bool</span> lftBracketed, <span class="built_in">string</span> s)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(dep == s.size()) &#123;</div><div class="line">        <span class="keyword">if</span>(lftBracketed) s += <span class="string">')'</span>;</div><div class="line"><span class="comment">//        cout &lt;&lt; s &lt;&lt; endl;</span></div><div class="line">        <span class="keyword">if</span>(<span class="built_in">abs</span>(calc(inToPost(s)) - <span class="number">24</span>) &lt; <span class="number">1e-5</span>) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(<span class="built_in">isdigit</span>(s[dep])) &#123;</div><div class="line">        <span class="keyword">if</span>(dep &gt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</div><div class="line">                <span class="built_in">string</span> ns = s;</div><div class="line">                ns.insert(dep, <span class="number">1</span>, op[i]);</div><div class="line">                <span class="keyword">if</span>(check(dep + <span class="number">2</span>, lftBracketed, ns)) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">                <span class="keyword">if</span>(lftBracketed) &#123;</div><div class="line">                    ns.insert(dep + <span class="number">2</span>, <span class="number">1</span>, <span class="string">')'</span>);</div><div class="line">                    <span class="keyword">if</span>(check(dep + <span class="number">3</span>, <span class="number">0</span>, ns)) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    ns.insert(dep + <span class="number">1</span>, <span class="number">1</span>, <span class="string">'('</span>);</div><div class="line">                    <span class="keyword">if</span>(check(dep + <span class="number">3</span>, <span class="number">1</span>, ns)) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(check(dep + <span class="number">1</span>, lftBracketed, s)) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(check(dep + <span class="number">1</span>, lftBracketed, s)) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">twentyFour</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c, <span class="keyword">int</span> d)</span> </span>&#123;</div><div class="line">    <span class="keyword">auto</span> toChar = [](<span class="keyword">int</span> x) &#123;<span class="keyword">return</span> <span class="keyword">char</span>(<span class="string">'0'</span> + x);&#125;;</div><div class="line">    <span class="built_in">string</span> v = <span class="built_in">string</span>(<span class="string">""</span>) + toChar(a) + toChar(b) + toChar(c) + toChar(d);</div><div class="line">    sort(v.begin(), v.end());</div><div class="line"></div><div class="line">    <span class="keyword">bool</span> ok = <span class="literal">false</span>;</div><div class="line">    <span class="keyword">do</span> &#123;</div><div class="line">        ok |= check(<span class="number">0</span>, <span class="number">0</span>, v);</div><div class="line">    &#125; <span class="keyword">while</span>(!ok &amp;&amp; next_permutation(v.begin(), v.end()));</div><div class="line">    <span class="keyword">return</span> ok;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="built_in">string</span> test = <span class="string">"5*5-5/5"</span>;</div><div class="line">    <span class="comment">//cout &lt;&lt; calc(test) &lt;&lt; endl;</span></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; (calc(inToPost(test))) &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; twentyFour(<span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>) &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>Interviewer’s Code<br>没仔细读这个代码啊，改天研究一下正确性，写一个bugfree的24点感觉不容易啊。。</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> itertools</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">isEqual</span><span class="params">(v0, v1)</span>:</span></div><div class="line">    <span class="keyword">return</span> abs(v0 - v1) &lt; <span class="number">1e-6</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">expresssion</span><span class="params">(code, v0, v1)</span>:</span></div><div class="line">    <span class="keyword">if</span> code == <span class="number">0</span>:</div><div class="line">        <span class="keyword">return</span> v0 + v1</div><div class="line">    <span class="keyword">elif</span> code == <span class="number">1</span>:</div><div class="line">        <span class="keyword">return</span> v0 - v1</div><div class="line">    <span class="keyword">elif</span> code == <span class="number">2</span>:</div><div class="line">        <span class="keyword">return</span> v1 - v0</div><div class="line">    <span class="keyword">elif</span> code == <span class="number">3</span>:</div><div class="line">        <span class="keyword">return</span> v0 * v1</div><div class="line">    <span class="keyword">elif</span> code == <span class="number">4</span>:</div><div class="line">        <span class="keyword">if</span> isEqual(v1, <span class="number">0</span>):</div><div class="line">            <span class="keyword">return</span> float(<span class="string">'NaN'</span>)</div><div class="line">        <span class="keyword">return</span> float(v0)/v1</div><div class="line">    <span class="keyword">elif</span> code == <span class="number">5</span>:</div><div class="line">        <span class="keyword">if</span> isEqual(v0, <span class="number">0</span>):</div><div class="line">            <span class="keyword">return</span> float(<span class="string">'NaN'</span>)</div><div class="line">        <span class="keyword">return</span> float(v1)/v0</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">printExpr</span><span class="params">(code, v0, v1)</span>:</span></div><div class="line">    <span class="keyword">if</span> code == <span class="number">0</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">'%s+%s'</span> %(v0, v1)</div><div class="line">    <span class="keyword">if</span> code == <span class="number">1</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">'%s-%s'</span> %(v0, v1)</div><div class="line">    <span class="keyword">if</span> code == <span class="number">2</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">'%s-%s'</span> % (v1, v0)</div><div class="line">    <span class="keyword">if</span> code == <span class="number">3</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">'%s*%s'</span> % (v0, v1)</div><div class="line">    <span class="keyword">if</span> code == <span class="number">4</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">'%s/%s'</span> % (v0, v1)</div><div class="line">    <span class="keyword">if</span> code == <span class="number">5</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">'%s/%s'</span> %(v1, v0)</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(a, v)</span>:</span></div><div class="line">    <span class="keyword">if</span> len(a) == <span class="number">1</span>:</div><div class="line">        <span class="keyword">return</span> isEqual(a[<span class="number">0</span>], v)</div><div class="line">    <span class="keyword">elif</span> len(a) == <span class="number">2</span>:</div><div class="line">        <span class="keyword">for</span> code <span class="keyword">in</span> range(<span class="number">6</span>):</div><div class="line">            <span class="keyword">if</span> isEqual(expresssion(code, a[<span class="number">0</span>], a[<span class="number">1</span>]), v):</div><div class="line">                printExpr(code, a[<span class="number">0</span>], a[<span class="number">1</span>])</div><div class="line">                <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">    <span class="keyword">elif</span> len(a) == <span class="number">3</span>:</div><div class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> itertools.permutations(a):</div><div class="line">            <span class="keyword">for</span> code <span class="keyword">in</span> range(<span class="number">6</span>):</div><div class="line">                <span class="keyword">if</span> search([expresssion(code, b[<span class="number">0</span>], b[<span class="number">1</span>]), b[<span class="number">2</span>]], v):</div><div class="line">                    printExpr(code, b[<span class="number">0</span>], b[<span class="number">1</span>])</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">    <span class="keyword">elif</span> len(a) == <span class="number">4</span>:</div><div class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> itertools.permutations(a):</div><div class="line">            <span class="keyword">for</span> code <span class="keyword">in</span> range(<span class="number">6</span>):</div><div class="line">                <span class="keyword">if</span> search([expresssion(code, b[<span class="number">0</span>], b[<span class="number">1</span>]), b[<span class="number">2</span>], b[<span class="number">3</span>]], v):</div><div class="line">                    printExpr(code, b[<span class="number">0</span>], b[<span class="number">1</span>])</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">    <span class="keyword">elif</span> len(a) == <span class="number">4</span>:</div><div class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> itertools.permutations(a):</div><div class="line">            <span class="keyword">for</span> code <span class="keyword">in</span> range(<span class="number">6</span>):</div><div class="line">                <span class="keyword">if</span> search([expresssion(code, b[<span class="number">0</span>], b[<span class="number">1</span>]), b[<span class="number">2</span>], b[<span class="number">3</span>]], v):</div><div class="line">                    printExpr(code, b[<span class="number">0</span>], b[<span class="number">1</span>])</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"><span class="keyword">print</span> search([<span class="number">3</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">8</span>], <span class="number">24</span>)</div></pre></td></tr></table></figure>
<h3 id="然后就又没然后了啊"><a href="#然后就又没然后了啊" class="headerlink" title="然后就又没然后了啊"></a>然后就又没然后了啊</h3><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>好好学习辣！然后要自信！失败了并不会失去什么。</p>
]]></content>
      
        <categories>
            
            <category> Doing </category>
            
            <category> Interview </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[WAPS Interview]]></title>
      <url>/2017/04/28/WAPS-Interview/</url>
      <content type="html"><![CDATA[<p>3.31 rejected..<br>Since the campus recruitment in this year is over, a little summary here..</p>
<a id="more"></a>
<h3 id="Online-Coding"><a href="#Online-Coding" class="headerlink" title="Online Coding"></a>Online Coding</h3><h4 id=""><a href="#" class="headerlink" title="???"></a>???</h4><p>I forgot this one and no record, really easy though.</p>
<h4 id="Verify-Preorder-Serialization-of-a-Binary-Tree"><a href="#Verify-Preorder-Serialization-of-a-Binary-Tree" class="headerlink" title="Verify Preorder Serialization of a Binary Tree"></a>Verify Preorder Serialization of a Binary Tree</h4><p>One way to serialize a binary tree is to use pre-order traversal.<br>When we encounter a non-null node, we record the node’s value.<br>If it is a null node, we record using a sentinel value such as #.</p>
<ul>
<li><p>Examples<br>  • “9,3,4,#,#,1,#,#,2,#,6,#,#” → true<br>  • “1,#” → false<br>  • “9,#,#,1” → false</p>
</li>
<li><p>Solution<br>Just simply go pre-order traversal and check whether each node has two sons…<br>Careful about some corner cases..</p>
</li>
<li><p>Code<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-4-28/55313160-file_1493372200147_2948.png" alt=""></p>
</li>
</ul>
<h3 id="Onsite-Interview"><a href="#Onsite-Interview" class="headerlink" title="Onsite Interview"></a>Onsite Interview</h3><p>4 easy problems… I gotta have a solution only with a glance.</p>
<p>I only recall 2 of them.</p>
<h4 id="Anagram-Matching"><a href="#Anagram-Matching" class="headerlink" title="Anagram Matching"></a>Anagram Matching</h4><p>anagram: a word formed by rearranging the letters of another, such as cinema, formed from iceman<br>try to figgure out the number of occurrences of all the anagrams of $T$ in $S$, lowercase alphabets</p>
<ul>
<li>Solution<br>use the number of occurrences of each alphabet to hash all the anagrams of $T$<br>total time complexity is $O(\sum |S|),where\sum = 26$</li>
</ul>
<h4 id="Maximum-Weighted-Independent-Set-of-a-tree"><a href="#Maximum-Weighted-Independent-Set-of-a-tree" class="headerlink" title="Maximum Weighted Independent Set of a tree"></a>Maximum Weighted Independent Set of a tree</h4><p>choose some nodes that each pair of them have no edge.<br>try to maximize the total weight of the chosen nodes</p>
<ul>
<li>Solution<br>simple tree dp. $f[u][0/1]:=$ the maximum weight of the independent set that the subtree rooted at $u$, and choosing $u$ or not<br>and the transition is simple:<br>choose $u$, all of its sons mustn’t be choosed<br>not choose $u$, choosing or not choosing its sons is OK, choose the maximum one.<br>$ans=\max \{f[root][0], f[root][1]\}$<br>total time complexity is $O(N)$</li>
</ul>
<h4 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h4><p>Two interviewers are both very nice and patient. Good Expericence.</p>
<h4 id="VP-Interview"><a href="#VP-Interview" class="headerlink" title="VP Interview"></a>VP Interview</h4><p>Fvcking stupid that I talked about FP programming…<br>I’m not familiar with that..<br>I think the Japanese interviewer was a little sleepy, so absolutely my interview is a shit.. even he “woke up” when heard FP..<br>And it seemed that the Chinese one is weak.. some easy cpp questions..</p>
<p>Bad Expericence！<br>A Lesson：no more talking about the things without knowing a shit..</p>
<h3 id="Something-more"><a href="#Something-more" class="headerlink" title="Something more"></a>Something more</h3><p>No chance to attempt the indeed interview is a pity..<br>it would be very nice to have a free trip to Japan..</p>
]]></content>
      
        <categories>
            
            <category> Doing </category>
            
            <category> Interview </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[So Sad]]></title>
      <url>/2017/04/24/So-Sad/</url>
      <content type="html"><![CDATA[<p>Sooooo Sad! Nothing changes, am I wrong?<br>Defintely not, calm down for some time..</p>
<a id="more"></a>
<p>Well, many things to do…<br>Which one get the most priority? Am I clear?</p>
<p>Am I really prepared? I’m afraid that something may follow the process of history..</p>
<p>Try to be more precise on some certain thing.</p>
<p>Any time, calm down.<br>The desire can lead you to the paradise and also the hell…</p>
<p>Think about myself.<br>A Little afraid to failure… That’s not what I want.</p>
<p>I wanna get my straightness and bravery back!</p>
<p>Well, all things will be OK.</p>
]]></content>
      
        <categories>
            
            <category> Doing </category>
            
            <category> Life </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Codeforces Round 408 (Div. 2)]]></title>
      <url>/2017/04/12/Codeforces%20Round%20408%20(Div.%202)/</url>
      <content type="html"><![CDATA[<p>$C题直接读错题，被教育到死，DE其实好做，没仔细想就跑了。。$</p>
<a id="more"></a>
<h3 id="C-Bank-Hacking"><a href="#C-Bank-Hacking" class="headerlink" title="C. Bank Hacking"></a>C. Bank Hacking</h3><p>题意：<br>$N\le 10^5个点的树，点权，初始每个点黑色，现在要涂白$<br>$你的力量\ge 点权可以涂白，开始任选一点涂$<br>$涂白一个点导致和它之间相连的黑点点权+1，通过一个黑点相连的点权也+1$<br>$之后涂白一个点，必须保证它和一个白点相连$<br>$问最少需要多少力量怎么把所有点涂白$</p>
<p>分析：<br>$眼瞎没看到通过一个黑点相连，然后又没看到涂白的点必须和白点相连$<br>$这2个这么强的条件，你玩一下发现就是一圈一圈涂的，答案最多是maxA_i+2$<br>$然后你就枚举起点，相连的+1，其他的+2就可以了$<br>$map、multiset都怼不过去，按rank排序上BIT吧$<br>$其实维护一下maxA_i和maxA_i-1的个数就可以了，都没有说明答案maxA_i，不然有谁就谁+2$<br>$这里给出O(nlogn)的代码$</p>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2017-04-11</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cerr &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cerr &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, a[N];</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[N];</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BIT</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> n, b[N];</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> _n)</span> </span>&#123;</div><div class="line">        n = _n;</div><div class="line">        <span class="built_in">memset</span>(b, <span class="number">0</span>, <span class="keyword">sizeof</span> b);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> v)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span>(; i &lt;= n; i += i &amp; -i) b[i] += v;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(; i; i -= i &amp; -i) ret += b[i];</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">kth</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">18</span>; ~i; --i) &#123;</div><div class="line">            <span class="keyword">int</span> x = <span class="number">1</span> &lt;&lt; i;</div><div class="line">            <span class="keyword">if</span>(ret + x &lt;= n &amp;&amp; b[ret + x] &lt; k) &#123;</div><div class="line">                k -= b[ret + x];</div><div class="line">                ret += x;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ret + <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">&#125; bit;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) == <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) G[i].clear();</div><div class="line"></div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; xs;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a + i);</div><div class="line">            xs.push_back(a[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</div><div class="line">            <span class="keyword">int</span> u, v; <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</div><div class="line">            G[u].push_back(v);</div><div class="line">            G[v].push_back(u);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        sort(xs.begin(), xs.end());</div><div class="line">        xs.resize(unique(xs.begin(), xs.end()) - xs.begin());</div><div class="line">        <span class="keyword">auto</span> getRank = [&amp;](<span class="keyword">int</span> x) &#123;</div><div class="line">            <span class="keyword">return</span> lower_bound(xs.begin(), xs.end(), x) - xs.begin() + <span class="number">1</span>;</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> ans = INF;</div><div class="line">        bit.init(xs.size());</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) bit.add(getRank(a[i]), <span class="number">1</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">            <span class="keyword">int</span> cur = a[i];</div><div class="line">            bit.add(getRank(a[i]), <span class="number">-1</span>);</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> v : G[i]) &#123;</div><div class="line">                bit.add(getRank(a[v]), <span class="number">-1</span>);</div><div class="line">                cur = max(cur, a[v] + <span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">int</span> k = bit.sum(xs.size());</div><div class="line">            <span class="keyword">if</span>(k) &#123;</div><div class="line">                <span class="keyword">int</span> idx = bit.kth(k);</div><div class="line">                cur = max(cur, xs[idx - <span class="number">1</span>] + <span class="number">2</span>);</div><div class="line">            &#125;</div><div class="line">            ans = min(ans, cur);</div><div class="line"></div><div class="line">            bit.add(getRank(a[i]), <span class="number">1</span>);</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> v : G[i]) bit.add(getRank(a[v]), <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="D-Police-Stations"><a href="#D-Police-Stations" class="headerlink" title="D. Police Stations"></a>D. Police Stations</h3><p>题意：<br>$N\le 10^5的树，1\le K\le 10^5个标记点，给定距离0\le D &lt; N$<br>$问最多删去几条边使得，每个点到标记点的距离还能不超过D$<br>$保证有解$</p>
<p>分析:<br>$保证有解，所以其实就相当于每个标记点所在的连通块与其他的连接对半切$<br>$找到这个对半切的边就好了，答案一定是标记点数-1$<br>$直接从标记点开始bfs就好了，如果碰到访问过的点，切掉就ok，一定是对半切的$<br>$毕竟bfs是按照level来的，这样实现非常帅气啊$</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2017-04-11</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cerr &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cerr &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m, d;</div><div class="line"><span class="keyword">bool</span> cut[N], vis[N];</div><div class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; G[N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;m, &amp;d) == <span class="number">3</span>) &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; q; q.reserve(n);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</div><div class="line">            <span class="keyword">int</span> x; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line">            q.push_back(&#123;x, <span class="number">0</span>&#125;);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) G[i].clear();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</div><div class="line">            <span class="keyword">int</span> u, v; <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</div><div class="line">            G[u].push_back(&#123;v, i&#125;);</div><div class="line">            G[v].push_back(&#123;u, i&#125;);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span> vis);</div><div class="line">        <span class="built_in">memset</span>(cut, <span class="number">0</span>, <span class="keyword">sizeof</span> cut);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; q.size(); ++i) &#123;</div><div class="line">            <span class="keyword">int</span> u, fa; tie(u, fa) = q[i];</div><div class="line">            <span class="keyword">if</span>(vis[u]) <span class="keyword">continue</span>;</div><div class="line">            vis[u] = <span class="literal">true</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span>&amp; e : G[u]) &#123;</div><div class="line">                <span class="keyword">int</span> v, id; tie(v, id) = e;</div><div class="line">                <span class="keyword">if</span>(v == fa) <span class="keyword">continue</span>;</div><div class="line">                <span class="keyword">if</span>(vis[v]) &#123;</div><div class="line">                    cut[id] = <span class="literal">true</span>;</div><div class="line">                    <span class="keyword">continue</span>;</div><div class="line">                &#125;</div><div class="line">                q.push_back(&#123;v, u&#125;);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) <span class="keyword">if</span>(cut[i]) ans.push_back(i);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans.size());</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ans.size(); ++i)</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d%c"</span>, ans[i], <span class="string">" \n"</span>[i + <span class="number">1</span> == ans.size()]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="E-Exam-Cheating"><a href="#E-Exam-Cheating" class="headerlink" title="E. Exam Cheating"></a>E. Exam Cheating</h3><p>题意：<br>$N\le 10^3行，有2个人，各会一些其中一些行，主人公看P\le 10^3次$<br>$每次选择一个人看连续K\le 50行，问主人公最多能会多少行$</p>
<p>分析:<br>$首先有一个暴力的dp，f[i][j][a][b]:=1\sim i行，看了j次$<br>$上一次看使得第一个人可以免费看a行，第二个人b行的最多会的行数$<br>$转移就枚举不看，看第一个人，看第二个人，都看$<br>$复杂度是O(npk^2)，显然会T$<br>$注意连续这个条件，2个人加起来最多看2\times \lceil {n\over k}\rceil次$<br>$所以复杂度变成了O(n\times 2\times \lceil {n\over k}\rceil k^2)=O(n^2k)$<br>$cf跑得很快就可以过了$</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2017-04-11</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cerr &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cerr &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m, k;</div><div class="line"><span class="keyword">int</span> f[<span class="number">2</span>][<span class="number">1005</span>][<span class="number">55</span>][<span class="number">55</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;m, &amp;k) == <span class="number">3</span>) &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; q(n + <span class="number">1</span>, <span class="number">1</span>);</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a(n + <span class="number">1</span>, <span class="number">0</span>), b(n + <span class="number">1</span>, <span class="number">0</span>);</div><div class="line">        <span class="keyword">int</span> aCnt; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;aCnt);</div><div class="line">        <span class="keyword">while</span>(aCnt--) &#123;</div><div class="line">            <span class="keyword">int</span> x; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line">            a[x] = <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> bCnt; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;bCnt);</div><div class="line">        <span class="keyword">while</span>(bCnt--) &#123;</div><div class="line">            <span class="keyword">int</span> x; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line">            b[x] = <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> p = <span class="number">0</span>; <span class="built_in">memset</span>(f[p], <span class="number">0xc0</span>, <span class="keyword">sizeof</span> f[p]);</div><div class="line">        f[p][<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">        <span class="keyword">auto</span> getMax = [](<span class="keyword">int</span>&amp; x, <span class="keyword">int</span> y) &#123;<span class="keyword">if</span>(x &lt; y) x = y;&#125;;</div><div class="line"></div><div class="line">        m = min(m, <span class="number">2</span> * (n + k - <span class="number">1</span>) / k);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">            <span class="built_in">memset</span>(f[!p], <span class="number">0xc0</span>, <span class="keyword">sizeof</span> f[!p]);</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= m; ++j) &#123;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>; x &lt;= k; ++x) &#123;</div><div class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> y = <span class="number">0</span>; y &lt;= k; ++y) &#123;</div><div class="line">                        <span class="keyword">int</span> nj, nx, ny, val;</div><div class="line">                        nj = j, nx = max(<span class="number">0</span>, x - <span class="number">1</span>), ny = max(<span class="number">0</span>, y - <span class="number">1</span>), val = (nx &amp;&amp; a[i]) || (ny &amp;&amp; b[i]);</div><div class="line">                        getMax(f[!p][nj][nx][ny], f[p][j][x][y] + val);</div><div class="line">                        nj = j + <span class="number">1</span>, nx = k, ny = max(<span class="number">0</span>, y - <span class="number">1</span>), val = (nx &amp;&amp; a[i]) || (ny &amp;&amp; b[i]);</div><div class="line">                        getMax(f[!p][nj][nx][ny], f[p][j][x][y] + val);</div><div class="line">                        nj = j + <span class="number">1</span>, nx = max(<span class="number">0</span>, x - <span class="number">1</span>), ny = k, val = (nx &amp;&amp; a[i]) || (ny &amp;&amp; b[i]);</div><div class="line">                        getMax(f[!p][nj][nx][ny], f[p][j][x][y] + val);</div><div class="line">                        nj = j + <span class="number">2</span>, nx = k, ny = k, val = (nx &amp;&amp; a[i]) || (ny &amp;&amp; b[i]);</div><div class="line">                        getMax(f[!p][nj][nx][ny], f[p][j][x][y] + val);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            p = !p;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= m; ++j) &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>; x &lt;= k; ++x) &#123;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> y = <span class="number">0</span>; y &lt;= k; ++y) &#123;</div><div class="line">                    getMax(ans, f[p][j][x][y]);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 套题 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Codeforces Round 358 (Div. 2) E. Alyona and Triangles]]></title>
      <url>/2017/04/12/Codeforces%20Round%20358%20(Div.%202)%20E.%20Alyona%20and%20Triangles/</url>
      <content type="html"><![CDATA[<p>题意：<br>$N\le 5000个点，保证任意形成的三角形的面积\le S\le 10^{18}$<br>$现在构成出一个三角形面积不超过4S，使得包含这个N个点$</p>
<a id="more"></a>
<p>分析：<br>$求个凸包，然后n^2枚举2个点，two pointers旋转卡壳搞出第三个点$<br>$求出最大三角形，之后把每条边作为对角线搞出大三角形就好了$<br>$即原来三角形的每个点是新三角形每条边的中点$<br>$证明方式就反证一下，如果有点在大三角形外$<br>$那么他作为新的三角形的顶点，拥有更大的高，面积更大，矛盾$<br>$所以原来的构造方法正确$<br>$时间复杂度O(n^2)$<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-4-12/82888166-file_1491935866495_b4d6.png" alt=""></p>
<p>题外话：<br>$我觉得点积叉积还是写函数比较好，不重载运算符比较好$<br>$避免更多的括号，省得出事，而且好看，算是更新了一下板子$</p>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2017-04-10</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cerr &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cerr &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> Type;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> &#123;</span></div><div class="line">    Type x, y;</div><div class="line">    Point() &#123;&#125;</div><div class="line">    Point(Type x, Type y) : x(x), y(y) &#123;&#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">()</span> </span>&#123;<span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>, &amp;x, &amp;y);&#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">()</span> </span>&#123;<span class="built_in">printf</span>(<span class="string">"%lld %lld\n"</span>, x, y);&#125;</div><div class="line">    Point <span class="keyword">operator</span>+(<span class="keyword">const</span> Point&amp; p) <span class="keyword">const</span> &#123;</div><div class="line">        <span class="keyword">return</span> Point(x + p.x, y + p.y);</div><div class="line">    &#125;</div><div class="line">    Point <span class="keyword">operator</span>-(<span class="keyword">const</span> Point&amp; p) <span class="keyword">const</span> &#123;</div><div class="line">        <span class="keyword">return</span> Point(x - p.x, y - p.y);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Point&amp; p) <span class="keyword">const</span> &#123;</div><div class="line">        <span class="keyword">return</span> x != p.x ? x &lt; p.x : y &lt; p.y;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function">Type <span class="title">dot</span><span class="params">(<span class="keyword">const</span> Point&amp; A, <span class="keyword">const</span> Point&amp; B)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> A.x * B.x + A.y * B.y;</div><div class="line">&#125;</div><div class="line"><span class="function">Type <span class="title">det</span><span class="params">(<span class="keyword">const</span> Point&amp; A, <span class="keyword">const</span> Point&amp; B)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> A.x * B.y - A.y * B.x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//输入不能有重点，函数执行完后输入顺序被破坏</span></div><div class="line">Point ps[N], ch[N];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">convexHull</span><span class="params">(Point* p, <span class="keyword">int</span> n, Point* ch)</span> </span>&#123;</div><div class="line">    sort(p, p + n);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> m = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</div><div class="line">        <span class="keyword">while</span>(m &gt; <span class="number">1</span> &amp;&amp; det(ch[m - <span class="number">1</span>] - ch[m - <span class="number">2</span>], p[i] - ch[m - <span class="number">2</span>]) &lt;= <span class="number">0</span>) --m;</div><div class="line">        ch[m++] = p[i];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = n - <span class="number">2</span>, t = m; ~i; --i) &#123;</div><div class="line">        <span class="keyword">while</span>(m &gt; t &amp;&amp; det(ch[m - <span class="number">1</span>] - ch[m - <span class="number">2</span>], p[i] - ch[m - <span class="number">2</span>]) &lt;= <span class="number">0</span>) --m;</div><div class="line">        ch[m++] = p[i];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(n &gt; <span class="number">1</span>) --m;</div><div class="line">    <span class="keyword">return</span> m;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; rotatingCalipers(Point* ch, <span class="keyword">int</span> n) &#123;</div><div class="line">    <span class="keyword">if</span>(n &lt; <span class="number">3</span>) <span class="keyword">return</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;();</div><div class="line"></div><div class="line">    Type ans = <span class="number">0</span>;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ret(<span class="number">3</span>);</div><div class="line"></div><div class="line">    ch[n] = ch[<span class="number">0</span>];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>, k = j; j &lt; n; ++j) &#123;</div><div class="line">            <span class="keyword">while</span>(det(ch[j] - ch[i], ch[k + <span class="number">1</span>] - ch[i])</div><div class="line">                    &gt; det(ch[j] - ch[i], ch[k] - ch[i]))</div><div class="line">                k = (k + <span class="number">1</span>) % n;</div><div class="line">            <span class="keyword">if</span>(det(ch[j] - ch[i], ch[k] - ch[i]) &gt; ans) &#123;</div><div class="line">                ans = det(ch[j] - ch[i], ch[k] - ch[i]);</div><div class="line">                ret = &#123;i, j, k&#125;;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> n; <span class="keyword">long</span> <span class="keyword">long</span> s;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%lld"</span>, &amp;n, &amp;s);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) ps[i].read();</div><div class="line">    <span class="keyword">int</span> m = convexHull(ps, n, ch);</div><div class="line"></div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; triangle = rotatingCalipers(ch, m);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</div><div class="line">        Point p = ch[triangle[i]] + ch[triangle[(i + <span class="number">1</span>) % <span class="number">3</span>]] - ch[triangle[(i + <span class="number">2</span>) % <span class="number">3</span>]];</div><div class="line">        p.write();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 计算几何 </category>
            
            <category> 旋转卡壳 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[BestCoder Round 93]]></title>
      <url>/2017/04/12/BestCoder%20Round%2093/</url>
      <content type="html"><![CDATA[<p>补题学套路。。</p>
<a id="more"></a>
<h3 id="1001-MG-loves-gold"><a href="#1001-MG-loves-gold" class="headerlink" title="1001 MG loves gold"></a>1001 MG loves gold</h3><p>题意：<br>$N\le 10^5个数的序列，拆成尽快多的部分，使得每个部分不包含重复数字$</p>
<p>分析:<br>$直接贪心就好了，每次取尽可能长的不包含重复数字的，set判重即可$</p>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2017-04-01</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cerr &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cerr &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, a[N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">while</span>(t--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a + i);</div><div class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">        <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; mp;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>, j; i &lt;= n; i = j) &#123;</div><div class="line">            ++ans;</div><div class="line">            mp.clear();</div><div class="line">            <span class="keyword">for</span>(j = i; j &lt;= n &amp;&amp; !mp.count(a[j]); ++j) mp.insert(a[j]);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="1002-MG-loves-apple"><a href="#1002-MG-loves-apple" class="headerlink" title="1002 MG loves apple"></a>1002 MG loves apple</h3><p>题意：<br>$给定1个N\le 10^5位的不含前导零的数字，现删去恰好0\le K&lt;N个数字$<br>$使得剩下的数字，顺序不变，构成的合法数字，能被3整除$<br>$问是否可行$</p>
<p>分析：<br>$这个题跟CF EDU 18 C的贪心做法类似$<br>$首先一个数能被3整除跟数字和sum能被3整除一致$<br>$接下来就统计一下cnt_i的个，\%3=i的数个数$<br>$首先特判数字中含0，且k=n-1的情况，CF那个题也是$</p>
<p>$之后就枚举非0数字，使得它作为第一位，存不存在一种合法方案使得sum\%3=0$<br>$这里要注意，这个非0数字是不能删掉的，他前面的都必须删掉，后面的就枚举一下$<br>$枚举0,1,3选取的个数，当然是\%3后的，之后判断need的数去掉这些之后能不能被3整除$<br>$然后判一判就好了，注意细节$<br>$复杂度O(3^3n)$</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2017-04-01</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cerr &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cerr &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">char</span> a[N], r[N];</div><div class="line"><span class="keyword">int</span> cnt[<span class="number">3</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">go</span><span class="params">(<span class="keyword">int</span> mod, <span class="keyword">int</span> need)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> a = <span class="number">0</span>; a &lt; <span class="number">3</span>; ++a) &#123; <span class="comment">//1</span></div><div class="line">        <span class="keyword">if</span>(a &gt; cnt[<span class="number">1</span>]) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> b = <span class="number">0</span>; b &lt; <span class="number">3</span>; ++b) &#123; <span class="comment">//2</span></div><div class="line">            <span class="keyword">if</span>(b &gt; cnt[<span class="number">2</span>]) <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; <span class="number">3</span>; ++c) &#123; <span class="comment">//0</span></div><div class="line">                <span class="keyword">if</span>(c &gt; cnt[<span class="number">0</span>]) <span class="keyword">continue</span>;</div><div class="line">                <span class="keyword">if</span>((a + <span class="number">2</span> * b) % <span class="number">3</span> != mod) <span class="keyword">continue</span>;</div><div class="line">                <span class="keyword">if</span>(a + b + c &gt; need) <span class="keyword">continue</span>;</div><div class="line">                <span class="keyword">if</span>((need - a - b - c) % <span class="number">3</span> != <span class="number">0</span>) <span class="keyword">continue</span>;</div><div class="line">                <span class="keyword">int</span> t = (cnt[<span class="number">1</span>] - a) / <span class="number">3</span> + (cnt[<span class="number">2</span>] - b) / <span class="number">3</span> + (cnt[<span class="number">0</span>] - c) / <span class="number">3</span>;</div><div class="line">                <span class="keyword">if</span>(<span class="number">3</span> * t + a + b + c &gt;= need) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">while</span>(t--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%s"</span>, &amp;n, &amp;m, a + <span class="number">1</span>);</div><div class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) cnt[i] = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">            a[i] -= <span class="string">'0'</span>;</div><div class="line">            r[i] = a[i] % <span class="number">3</span>;</div><div class="line">            ++cnt[r[i]];</div><div class="line">            sum += r[i];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">bool</span> ok = <span class="literal">false</span>;</div><div class="line">        <span class="keyword">if</span>(m == n - <span class="number">1</span>)</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n &amp;&amp; !ok; ++i) ok |= a[i] == <span class="number">0</span>;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> need = m;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n &amp;&amp; !ok; ++i) &#123;</div><div class="line">            <span class="keyword">int</span> x = a[i];</div><div class="line">            <span class="keyword">if</span>(x) &#123;</div><div class="line">                --cnt[r[i]];</div><div class="line">                ok |= go(sum % <span class="number">3</span>, need);</div><div class="line">            &#125; <span class="keyword">else</span> --cnt[r[i]];</div><div class="line">            sum -= r[i];</div><div class="line">            <span class="keyword">if</span>(--need &lt; <span class="number">0</span>) <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">puts</span>(ok ? <span class="string">"yes"</span> : <span class="string">"no"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="1003-MG-loves-string"><a href="#1003-MG-loves-string" class="headerlink" title="1003 MG loves string"></a>1003 MG loves string</h3><p>题意：<br>$给定一个26个小写字母的置换A，即进行一次变换，所有字符(‘a’+i)都会变成A_i$<br>$问一个长度是N\le 10^9随机字符串，变换到自身的期望变换次数$<br>$输出期望答案乘上26^n以后模10^9+7的结果$</p>
<p>分析：<br>$可以发现不同的置换的环的长度不超过6个，1+2+3+4+5+6&gt;26$<br>$所以就枚举不同的置换的环的组合，至少出现一次的方案数$<br>$我们知道一个置换变回自己的次数是，每个环的长度的lcm$<br>$先统计出每个环长度的选取的字母的个数$<br>$f[sta]:=sta状态的环至少出现一次的方案数$<br>$算这个可以容斥来搞，随便选-非法的$<br>$g[sta]:=sta状态的环随便选的方案数，g[sta]=cnt[sta]^n$<br>$f[sta]=g[sta]-\displaystyle\sum_{s0\subset sta} f[s0]$<br>$之后乘上对应的lcm就可以了$<br>$复杂度为O(6^3logn)$</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2017-04-02</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cerr &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cerr &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="keyword">char</span> a[<span class="number">27</span>];</div><div class="line"><span class="keyword">int</span> f[<span class="number">1</span> &lt;&lt; <span class="number">6</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">while</span>(t--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%s"</span>, &amp;n, a);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i) a[i] -= <span class="string">'a'</span>;</div><div class="line"></div><div class="line">        <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; mp;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i) &#123;</div><div class="line">            <span class="keyword">int</span> cnt = <span class="number">1</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = a[i]; j != i; j = a[j]) ++cnt;</div><div class="line">            ++mp[cnt];</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; v(mp.begin(), mp.end());</div><div class="line">        <span class="keyword">auto</span> add = [&amp;](<span class="keyword">int</span>&amp; x, <span class="keyword">int</span> y) &#123;<span class="keyword">if</span>((x += y) &gt;= MOD) x -= MOD;&#125;;</div><div class="line">        <span class="keyword">auto</span> quickPow = [&amp;](<span class="keyword">int</span> x, <span class="keyword">int</span> y) &#123;</div><div class="line">            <span class="keyword">int</span> ret = <span class="number">1</span>;</div><div class="line">            <span class="keyword">for</span>(; y; y &gt;&gt;= <span class="number">1</span>) &#123;</div><div class="line">                <span class="keyword">if</span>(y &amp; <span class="number">1</span>) ret = <span class="number">1L</span>L * ret * x % MOD;</div><div class="line">                x = <span class="number">1L</span>L * x * x % MOD;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> ret;</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> s = <span class="number">1</span>; s &lt; <span class="number">1</span> &lt;&lt; v.size(); ++s) &#123;</div><div class="line">            <span class="keyword">int</span> sum = <span class="number">0</span>, lcm = <span class="number">1</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v.size(); ++i) &#123;</div><div class="line">                <span class="keyword">if</span>(s &gt;&gt; i &amp; <span class="number">1</span>) &#123;</div><div class="line">                    lcm = lcm / __gcd(lcm, v[i].first) * v[i].first;</div><div class="line">                    sum += v[i].second;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            f[s] = quickPow(sum, n);</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> s0 = s &amp; (s - <span class="number">1</span>); s0; s0 = (s0 - <span class="number">1</span>) &amp; s) add(f[s], MOD - f[s0]);</div><div class="line">            add(ans, <span class="number">1L</span>L * f[s] * lcm % MOD);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="1004-MG-loves-set"><a href="#1004-MG-loves-set" class="headerlink" title="1004 MG loves set"></a>1004 MG loves set</h3><p>题意：<br>$如果一个集合所有元素的平方的和小于等于所有元素的和的平方，那么就称这个集合为“和谐集合”。$<br>$给定n\le 30个数，询问有多少个非空子集是“和谐集合”$</p>
<p>分析：<br>$现有一个集合S，则题目的条件为\displaystyle\sum_{x\in S} x^2\le (\displaystyle\sum_{x\in S} x)^2$<br>$移项则有，(\displaystyle\sum_{x\in S} x)^2-\displaystyle\sum_{x\in S} x^2\ge 0，这个就是2\displaystyle\sum_{x, y\in S, x&lt;y}xy\ge 0$<br>$然后看到n=30，显然的折半枚举$<br>$令va=\displaystyle\sum_{x\in S} x，vb=2\displaystyle\sum_{x, y\in S, x&lt;y}xy$<br>$那么上面那个式子由2个集合合并可以表示为，2\times va\times va’+vb+vb’\ge 0$<br>$把(va, vb)看成直线，(va’, vb’)看成点，那么就是求直线上方的点数，KDT优化即可$<br>$时间复杂度为O(2^{15}log2^{15})$</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2017-04-03</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cerr &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cerr &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">const</span> LL LLINF = <span class="number">0x3f3f3f3f3f3f3f3f</span>LL;</div><div class="line"><span class="keyword">namespace</span> KDT &#123;</div><div class="line">    <span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1</span> &lt;&lt; <span class="number">16</span>, K = <span class="number">2</span>;</div><div class="line">    <span class="keyword">int</span> D;</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Point</span> &#123;</span></div><div class="line">        LL d[K];</div><div class="line">        <span class="keyword">inline</span> LL&amp; <span class="keyword">operator</span>[](<span class="keyword">int</span> k) &#123;<span class="keyword">return</span> d[k];&#125;</div><div class="line">        <span class="keyword">inline</span> <span class="keyword">const</span> LL&amp; <span class="keyword">operator</span>[](<span class="keyword">int</span> k) <span class="keyword">const</span> &#123;<span class="keyword">return</span> d[k];&#125;</div><div class="line">        <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Point&amp; p) <span class="keyword">const</span> &#123;</div><div class="line">            <span class="keyword">return</span> d[D] &lt; p.d[D];</div><div class="line">        &#125;</div><div class="line">    &#125; a[M];</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></div><div class="line">        Point key, maxd, mind;</div><div class="line">        Node* ch[<span class="number">2</span>];</div><div class="line">        <span class="keyword">int</span> sz;</div><div class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">up</span><span class="params">()</span> </span>&#123;</div><div class="line">            sz = ch[<span class="number">0</span>]-&gt;sz + ch[<span class="number">1</span>]-&gt;sz + <span class="number">1</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; K; ++i) &#123;</div><div class="line">                maxd[i] = max(maxd[i], ch[<span class="number">0</span>]-&gt;maxd[i]);</div><div class="line">                maxd[i] = max(maxd[i], ch[<span class="number">1</span>]-&gt;maxd[i]);</div><div class="line">                mind[i] = min(mind[i], ch[<span class="number">0</span>]-&gt;mind[i]);</div><div class="line">                mind[i] = min(mind[i], ch[<span class="number">1</span>]-&gt;mind[i]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125; pool[M], *ptr, *null, *root;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">onLine</span><span class="params">(<span class="keyword">const</span> Point&amp; p, <span class="keyword">const</span> Point&amp; q)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">2</span> * p[<span class="number">0</span>] * q[<span class="number">0</span>] + p[<span class="number">1</span>] + q[<span class="number">1</span>] &gt;= <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">h</span><span class="params">(Node* o, <span class="keyword">const</span> Point&amp; p)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line">        ret += onLine(&#123;o-&gt;mind[<span class="number">0</span>], o-&gt;mind[<span class="number">1</span>]&#125;, p);</div><div class="line">        ret += onLine(&#123;o-&gt;mind[<span class="number">0</span>], o-&gt;maxd[<span class="number">1</span>]&#125;, p);</div><div class="line">        ret += onLine(&#123;o-&gt;maxd[<span class="number">0</span>], o-&gt;mind[<span class="number">1</span>]&#125;, p);</div><div class="line">        ret += onLine(&#123;o-&gt;maxd[<span class="number">0</span>], o-&gt;maxd[<span class="number">1</span>]&#125;, p);</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">inline</span> Node* <span class="title">newNode</span><span class="params">(<span class="keyword">const</span> Point&amp; p)</span> </span>&#123;</div><div class="line">        ptr-&gt;key = p;</div><div class="line">        ptr-&gt;ch[<span class="number">0</span>] = ptr-&gt;ch[<span class="number">1</span>] = null;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; K; ++i)</div><div class="line">            ptr-&gt;maxd[i] = ptr-&gt;mind[i] = ptr-&gt;key[i];</div><div class="line">        <span class="keyword">return</span> ptr++;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">        ptr = pool;</div><div class="line">        null = ptr++;</div><div class="line">        null-&gt;sz = <span class="number">0</span>;</div><div class="line">        null-&gt;ch[<span class="number">0</span>] = null-&gt;ch[<span class="number">1</span>] = null;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; K; ++i) &#123;</div><div class="line">            null-&gt;mind[i] = LLINF;</div><div class="line">            null-&gt;maxd[i] = -LLINF;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(Node*&amp; o, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> dim)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(l &gt; r) <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">int</span> m = l + r &gt;&gt; <span class="number">1</span>;</div><div class="line">        D = dim;</div><div class="line">        nth_element(a + l, a + m, a + r + <span class="number">1</span>);</div><div class="line">        o = newNode(a[m]);</div><div class="line">        build(o-&gt;ch[<span class="number">0</span>], l, m - <span class="number">1</span>, (dim + <span class="number">1</span>) % K);</div><div class="line">        build(o-&gt;ch[<span class="number">1</span>], m + <span class="number">1</span>, r, (dim + <span class="number">1</span>) % K);</div><div class="line">        o-&gt;up();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(Node* o, <span class="keyword">const</span> Point&amp; p)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(o == null) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> have = h(o, p);</div><div class="line">        <span class="keyword">if</span>(!have) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span>(have == <span class="number">4</span>) <span class="keyword">return</span> o-&gt;sz;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> ret = onLine(o-&gt;key, p);</div><div class="line">        ret += query(o-&gt;ch[<span class="number">0</span>], p);</div><div class="line">        ret += query(o-&gt;ch[<span class="number">1</span>], p);</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//    freopen("C:\\Users\\TaoSama\\Desktop\\out.txt", "w", stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">while</span>(t--) &#123;</div><div class="line">        <span class="keyword">int</span> n; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v(n);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span>&amp; x : v) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line"></div><div class="line">        <span class="keyword">int</span> hf = (n + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> s = <span class="number">0</span>; s &lt; <span class="number">1</span> &lt;&lt; hf; ++s) &#123;</div><div class="line">            LL va = <span class="number">0</span>, vb = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; hf; ++i) &#123;</div><div class="line">                <span class="keyword">if</span>(s &gt;&gt; i &amp; <span class="number">1</span>) &#123;</div><div class="line">                    va += v[i];</div><div class="line">                    vb += <span class="number">1L</span>L * v[i] * v[i];</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            KDT::a[s + <span class="number">1</span>] = &#123;va, va* va - vb&#125;;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        KDT::init();</div><div class="line">        KDT::Node*&amp; root = KDT::root;</div><div class="line">        KDT::build(root, <span class="number">1</span>, <span class="number">1</span> &lt;&lt; hf, <span class="number">0</span>);</div><div class="line"></div><div class="line">        n &gt;&gt;= <span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> s = <span class="number">0</span>; s &lt; <span class="number">1</span> &lt;&lt; n; ++s) &#123;</div><div class="line">            LL va = <span class="number">0</span>, vb = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</div><div class="line">                <span class="keyword">if</span>(s &gt;&gt; i &amp; <span class="number">1</span>) &#123;</div><div class="line">                    va += v[hf + i];</div><div class="line">                    vb += <span class="number">1L</span>L * v[hf + i] * v[hf + i];</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            ans += KDT::query(root, &#123;va, va * va - vb&#125;);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans - <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 套题 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Hihocode 1496 寻找最大值（高维前缀和）]]></title>
      <url>/2017/04/05/Hihocode%201496%20%E5%AF%BB%E6%89%BE%E6%9C%80%E5%A4%A7%E5%80%BC%EF%BC%88%E9%AB%98%E7%BB%B4%E5%89%8D%E7%BC%80%E5%92%8C%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：<br>$给定一个长度为N\le 10^5的数列，1\le A_i\le 2^{20}$<br>$求\displaystyle\max_{i, j, i\neq j}\{A_i\times A_j\times (A_i\&amp; A_j)\}的值$</p>
<a id="more"></a>
<p>分析：<br>$这个题显然不能枚举A_i和A_j，考虑枚举A_i\&amp; A_j的值$<br>$令z=A_i\&amp;A_j，事实上条件可以不用这么严格$<br>$只要找到z的超集Z’即可，即z\supset Z’$<br>$假如存在Z’中的两个元素z’_1，z’_2分别是最大值和次大值$<br>$满足z’_1\&amp; z’_2=z，那么这个必然是z的答案$<br>$假如z’_1\&amp; z’_2&gt;z，那么令z’_1\&amp; z’_2=y$<br>$那么这个答案必然在y处更新，且答案更大，也就是说不会影响答案$<br>$所以问题就变成了如何求z的超集的最大值和次大值了$</p>
<p>$这是一个高位前缀和问题，即20维空间，每一维大小是2$<br>$所以把1的答案都加到0上即可，因为1是0的超集$<br>$同理子集问题也可以这么搞，不过是0加到1上，0是1的子集$<br>$具体看代码，注意循环顺序，感受一下前缀和$</p>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2017-04-04</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cerr &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cerr &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n;</div><div class="line">pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; f[<span class="number">1</span> &lt;&lt; <span class="number">20</span>];</div><div class="line"></div><div class="line">pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; <span class="keyword">operator</span>+(pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; A, pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; B) &#123;</div><div class="line">    pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; ret = A;</div><div class="line">    <span class="keyword">if</span>(B.first &gt; ret.first) &#123;</div><div class="line">        swap(ret.first, ret.second);</div><div class="line">        ret.first = B.first;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(B.second &gt; ret.second) ret.second = B.second;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">while</span>(t--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1</span> &lt;&lt; <span class="number">20</span>; ++i) f[i] = &#123;<span class="number">0</span>, <span class="number">0</span>&#125;;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">            <span class="keyword">int</span> x; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line">            f[x] = f[x] + make_pair(x, <span class="number">0</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; ++i)</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">1</span> &lt;&lt; <span class="number">20</span>; ++j)</div><div class="line">                <span class="keyword">if</span>(j &gt;&gt; i &amp; <span class="number">1</span>) f[j ^ (<span class="number">1</span> &lt;&lt; i)] = f[j ^ (<span class="number">1</span> &lt;&lt; i)] + f[j];</div><div class="line"></div><div class="line">        <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1</span> &lt;&lt; <span class="number">20</span>; ++i)</div><div class="line">            ans = max(ans, <span class="number">1L</span>L * i * f[i].first * f[i].second);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 数学 </category>
            
            <category> FFT/NTT/FWT </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 高维前缀和 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hihocode 1492 Parentheses Sequence（dp）]]></title>
      <url>/2017/04/05/Hihocode%201492%20Parentheses%20Sequence%EF%BC%88dp%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：<br>$给定一个长度为N\le 10^3的括号串，可以插入括号$<br>$问变成合法的括号串的最短插入次数，和方法数$</p>
<a id="more"></a>
<p>分析：<br>$首先回顾一下如何表示一个合法的括号串$<br>$令’(‘=1，’)’=-1，那么需要前缀和\ge 0，且和=0$<br>$那么显然我们有一个三方的dp$<br>$f[i][j][k]:=1\sim i，插入了j个括号，sum=k的方法数$<br>$再开个bool表示一下状态存不存在即可$<br>$这样就可以找到最少多少个，以及相应的方案数了$</p>
<p>$蓝儿三方是不能过的，思考一下，这其实是一个背包问题$<br>$背包的是sum，所以其实我们看成是一个图的问题，即n\times sum个节点的图$<br>$那么插入的括号的个数自然变成了最短路，方法数自然变成了最短路方案数$<br>$然后dp就变成了f[i][k]:=1\sim i，sum=k的最少插入括号数和方法数$<br>$最后减去原来的括号个数即可$<br>$这个背包化图的思路可以做一下上次CF 407的C：$<a href="http://codeforces.com/problemset/problem/788/C" target="_blank" rel="external">题目链接</a></p>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2017-04-04</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cerr &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cerr &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e3</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="keyword">char</span> s[N];</div><div class="line"><span class="keyword">int</span> f[N][N], g[N][N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span>&amp; x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>((x += y) &gt;= MOD) x -= MOD;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s + <span class="number">1</span>);</div><div class="line">    n = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</div><div class="line"></div><div class="line">    <span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; q;</div><div class="line">    <span class="built_in">memset</span>(f, <span class="number">-1</span>, <span class="keyword">sizeof</span> f);</div><div class="line">    f[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>, g[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">    q.push(&#123;<span class="number">0</span>, <span class="number">0</span>&#125;);</div><div class="line">    <span class="keyword">while</span>(q.size()) &#123;</div><div class="line">        <span class="keyword">int</span> i, j; tie(i, j) = q.front(); q.pop();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">-1</span>; k &lt;= <span class="number">1</span>; k += <span class="number">2</span>) &#123;</div><div class="line">            <span class="keyword">char</span> c = k == <span class="number">1</span> ? <span class="string">'('</span> : <span class="string">')'</span>;</div><div class="line">            <span class="keyword">int</span> ni = min(n, i + (s[i + <span class="number">1</span>] == c));</div><div class="line">            <span class="keyword">int</span> nj = j + k;</div><div class="line">            <span class="keyword">if</span>(nj &gt;= <span class="number">0</span> &amp;&amp; nj &lt;= n) &#123;</div><div class="line">                <span class="keyword">if</span>(f[ni][nj] == <span class="number">-1</span>) &#123;</div><div class="line">                    f[ni][nj] = f[i][j] + <span class="number">1</span>;</div><div class="line">                    g[ni][nj] = g[i][j];</div><div class="line">                    q.push(&#123;ni, nj&#125;);</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span>(f[ni][nj] == f[i][j] + <span class="number">1</span>) &#123;</div><div class="line">                    add(g[ni][nj], g[i][j]);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, f[n][<span class="number">0</span>] - n, g[n][<span class="number">0</span>]);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 动态规划 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[BestCoder Round 92]]></title>
      <url>/2017/04/05/BestCoder%20Round%2092/</url>
      <content type="html"><![CDATA[<p>好久没写题解了。。感觉还是经常写点文字。题解勉强算是吧(雾</p>
<a id="more"></a>
<h3 id="1001-Skip-the-Class"><a href="#1001-Skip-the-Class" class="headerlink" title="1001 Skip the Class"></a>1001 Skip the Class</h3><p>直接对于每种课程维护最大值和次大值即可</p>
<h3 id="1002-Count-the-Sheep"><a href="#1002-Count-the-Sheep" class="headerlink" title="1002 Count the Sheep"></a>1002 Count the Sheep</h3><p>题意：<br>$给定N\le 10^5个男羊，M\le 10^5个女羊，K\le 10^5个朋友关系$<br>$问满足A-B、B-C、C-D是朋友关系且A、B、C、D各不相同的，A-B-C-D这样序列的方案数$</p>
<p>分析：<br>$直接枚举B-C边，然后统计下两边的度就好了，别忘了减去自己$</p>
<h3 id="1003-Girls-Love-233"><a href="#1003-Girls-Love-233" class="headerlink" title="1003 Girls Love 233"></a>1003 Girls Love 233</h3><p>题意：<br>$给定长度N\le 100的由字符’2’和’3’构成的字符串$<br>$有\lfloor{M\over 2}\rfloor次操作次数，每次可以交换2个相邻的字符$<br>$最多能使这个字符串中有多少个子串”233”呢$</p>
<p>分析：<br>$官方题解给了一个很妙的dp$<br>$可以发现答案其实只跟’2’有关，即’3’和’3’换是毫无意义的$<br>$于是我们可以抠出来所有’2’的位置，那么只对’2’有交换的花费$<br>$接下来考虑dp，f[i][j][k][3]:=$<br>$选取了i个’2’，j个’3’，使用了k次交换，状态是s的最多子串数$<br>$s状态显然有i\in [0,3):’2’后面有i个’3’，如果有第一次有2个’3’显然答案+1$<br>$最终ans=\displaystyle\max_{k, s}\{ f[c2][c3][k][s]\}$</p>
<p>代码:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2017-02-27</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cerr &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cerr &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e2</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">char</span> s[N];</div><div class="line"><span class="keyword">int</span> f[N][N][N / <span class="number">2</span>][<span class="number">3</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">getMax</span><span class="params">(<span class="keyword">int</span>&amp; x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(x &lt; y) x = y;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">while</span>(t--) &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; p(<span class="number">1</span>, <span class="number">0</span>);</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%s"</span>, &amp;n, &amp;m, s + <span class="number">1</span>);  m &gt;&gt;= <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="keyword">if</span>(s[i] == <span class="string">'2'</span>) p.push_back(i);</div><div class="line">        <span class="keyword">int</span> c2 = p.size() - <span class="number">1</span>, c3 = n - c2;</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= c2; ++i)</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= c3; ++j)</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= m; ++k)</div><div class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> z = <span class="number">0</span>; z &lt; <span class="number">3</span>; ++z)</div><div class="line">                        f[i][j][k][z] = -INF;</div><div class="line">        f[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>][<span class="number">2</span>] = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= c2; ++i) &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= c3; ++j) &#123;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= m; ++k) &#123;</div><div class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> z = <span class="number">0</span>; z &lt; <span class="number">3</span>; ++z) &#123;</div><div class="line">                        <span class="keyword">if</span>(f[i][j][k][z] &lt; <span class="number">0</span>) <span class="keyword">continue</span>;</div><div class="line">                        <span class="keyword">if</span>(i &lt; c2) &#123;</div><div class="line">                            <span class="keyword">int</span> nk = k + <span class="built_in">abs</span>(i + j + <span class="number">1</span> - p[i + <span class="number">1</span>]);</div><div class="line">                            <span class="keyword">if</span>(nk &lt;= m) getMax(f[i + <span class="number">1</span>][j][nk][<span class="number">0</span>], f[i][j][k][z]);</div><div class="line">                        &#125;</div><div class="line">                        <span class="keyword">if</span>(j &lt; c3) &#123;</div><div class="line">                            <span class="keyword">int</span> nz = z, one = <span class="number">0</span>;</div><div class="line">                            <span class="keyword">if</span>(nz != <span class="number">2</span>) &#123;</div><div class="line">                                <span class="keyword">if</span>(++nz == <span class="number">2</span>) ++one;</div><div class="line">                            &#125;</div><div class="line">                            getMax(f[i][j + <span class="number">1</span>][k][nz], f[i][j][k][z] + one);</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= m; ++k)</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> z = <span class="number">0</span>; z &lt; <span class="number">3</span>; ++z)</div><div class="line">                getMax(ans, f[c2][c3][k][z]);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="1004-Game-Arrangement"><a href="#1004-Game-Arrangement" class="headerlink" title="1004 Game Arrangement"></a>1004 Game Arrangement</h3><p>题意：<br>$给定N\le 10^4段空闲时间[L_i, R_i]，1\le L_i\le R_i\le 10^9$<br>$给定M\le 10^4个游戏的感兴趣时段[l_i, r_i]，1\le l_i\le r_i\le 10^9，并且需要持续时间1\le d_i\le 10^9$<br>$对于i类游戏只能全在它的感兴趣时段，以及某段空闲时段才可以玩$<br>$问最多能玩游戏的次数$</p>
<p>分析:<br>$如果数据范围不是10^9的话，显然可以按时间来dp，就不多说了$<br>$可以考虑贪心，因为物品的价值都是1，就可以贪心了$<br>$对于当前时间，对某个游戏肯定选择持续短的，就可以用堆或者set来贪心了$<br>$首先把空闲时间和游戏按照起始时间排序$<br>$考虑枚举每一段空闲时间，首先把当前能玩的游戏全部加进去堆里$<br>$再把一把都玩不了的都删了，然后取出第一个能玩的$<br>$当前这个游戏能玩多久由三个东西限制，一个是空闲时间，一个是感兴趣时间$<br>$还有下一个游戏的开始时间来限制$<br>$肯定尝试下取整个是一定可以的$<br>$然后你以为就对了？？显然不是，我还可以后延续到下一个游戏的时间$<br>$所以就考虑再玩一个，但是只是尝试，所以拆成两半，一个是现在玩一些$<br>$剩下的时间成为一个新的游戏塞进去，之后直接尝试下一个游戏就可以了$<br>$这样贪心就对了$<br>$注意一下边界的细节，时间复杂度是O(nlogn)$<br>$感谢bc大佬的代码$</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2017-02-27</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cerr &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cerr &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> l, r, d;</div><div class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Node&amp; r) <span class="keyword">const</span> &#123;</div><div class="line">        <span class="keyword">return</span> d &gt; r.d;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">see</span><span class="params">()</span> </span>&#123;</div><div class="line">        pr(l); pr(r); prln(d);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">while</span>(t--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">        <span class="built_in">vector</span>&lt;Node&gt; a, b;</div><div class="line">        a.reserve(n); b.reserve(m);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">            <span class="keyword">int</span> l, r; <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;l, &amp;r);</div><div class="line">            <span class="keyword">if</span>(a.size() &amp;&amp; a.back().r + <span class="number">1</span> == l)</div><div class="line">                a.back().r = r;</div><div class="line">            <span class="keyword">else</span> a.push_back(&#123;l, r, <span class="number">0</span>&#125;);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</div><div class="line">            <span class="keyword">int</span> l, r, d; <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;l, &amp;r, &amp;d);</div><div class="line">            b.push_back(&#123;l, r, d&#125;);</div><div class="line">        &#125;</div><div class="line">        b.push_back(&#123;INF, <span class="number">-1</span>, <span class="number">-1</span>&#125;);</div><div class="line">        sort(b.begin(), b.end(), [](<span class="keyword">const</span> Node &amp; a, <span class="keyword">const</span> Node &amp; b) &#123;</div><div class="line">            <span class="keyword">return</span> a.l &lt; b.l;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">        priority_queue&lt;Node&gt; q;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; a.size(); ++i) &#123;</div><div class="line">            <span class="keyword">int</span> cur = a[i].l;</div><div class="line">            <span class="keyword">for</span>(; cur &lt;= a[i].r;) &#123;</div><div class="line">                <span class="keyword">for</span>(; b[j].l &lt;= cur; ++j) q.push(b[j]); <span class="comment">//insert</span></div><div class="line">                <span class="keyword">while</span>(q.size() &amp;&amp; q.top().r - q.top().d + <span class="number">1</span> &lt; cur) q.pop(); <span class="comment">//delete</span></div><div class="line">                <span class="keyword">if</span>(!q.size()) &#123;cur = b[j].l; <span class="keyword">continue</span>;&#125;</div><div class="line"></div><div class="line">                Node tp = q.top();</div><div class="line">                <span class="keyword">int</span> r = min(a[i].r, tp.r);</div><div class="line">                <span class="keyword">int</span> cnt = (min(r, b[j].l - <span class="number">1</span>) - cur + <span class="number">1</span>) / tp.d;</div><div class="line">                ans += cnt;</div><div class="line">                cur += cnt * tp.d;</div><div class="line">                <span class="keyword">if</span>(!cnt) &#123;</div><div class="line">                    <span class="keyword">int</span> nxt = cur + tp.d - <span class="number">1</span>;</div><div class="line">                    <span class="keyword">if</span>(nxt &lt;= r) q.push(&#123;b[j].l, nxt, nxt - b[j].l + <span class="number">1</span>&#125;);</div><div class="line">                    cur = b[j].l;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 套题 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Notes, A Byte of Python]]></title>
      <url>/2017/03/25/Notes,%20A%20Byte%20of%20Python/</url>
      <content type="html"><![CDATA[<ul>
<li>总结一下$python$的语法对于一个$cpp programmer$来说如何快速上手</li>
<li>工具查阅。。</li>
</ul>
<a id="more"></a>
<h3 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h3><h4 id="数"><a href="#数" class="headerlink" title="数"></a>数</h4><ul>
<li>整数(int) <code>type(1)</code></li>
<li>长整数(long) <code>type(1L)</code></li>
<li>浮点数(float) <code>type(1.0)</code> <strong>python不区分单双精度浮点数</strong></li>
<li>复数(complex) <code>type(2.3+5j)</code></li>
</ul>
<h4 id="字符串-str"><a href="#字符串-str" class="headerlink" title="字符串(str)"></a>字符串(str)</h4><ul>
<li><p><strong>‘和”意思相同</strong> <code>&#39;hello&#39; &quot;hello&quot;</code><br><code>&#39;&#39;&#39;或者&quot;&quot;&quot;</code>多行引号 <strong>里面随便用’和” 会自动转义</strong> </p>
</li>
<li><p>自然字符串<br>r或者R前缀 不会转义 <code>r&quot;new line\n&quot;</code></p>
</li>
<li><p>Unicode字符串<br>u或者U前缀 <code>u&quot;This is a unicode string&quot;</code></p>
</li>
<li><p>Tips:<br><strong>字符串是不可变的</strong><br><strong>正则表示式 一定要用自然字符串</strong><br><strong>行连接: (下面两个等价)</strong> </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">print</span>\</div><div class="line">i</div><div class="line"><span class="keyword">print</span> i</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ul>
<li>命名规则<br>类似于C/C++或者Java</li>
</ul>
<h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><ul>
<li><code>+ - * / % &lt;&lt; &gt;&gt; &amp; | ^ ~ &lt; &gt; &lt;= &gt;= == !=</code> 不变</li>
<li><code>x**y</code> ==&gt; $x^y$</li>
<li>//取整除 <code>5//2.1=2.0</code></li>
<li><p>逻辑运算符 <code>not and or</code></p>
</li>
<li><p>运算符优先级</p>
</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">运算符</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">lambda</td>
<td style="text-align:center">lambda表达式</td>
</tr>
<tr>
<td style="text-align:center">or</td>
<td style="text-align:center">布尔“或”</td>
</tr>
<tr>
<td style="text-align:center">and</td>
<td style="text-align:center">布尔“与”</td>
</tr>
<tr>
<td style="text-align:center">not</td>
<td style="text-align:center">x 布尔“非”</td>
</tr>
<tr>
<td style="text-align:center">in，not in</td>
<td style="text-align:center">成员测试</td>
</tr>
<tr>
<td style="text-align:center">is，is not</td>
<td style="text-align:center">同一性测试</td>
</tr>
<tr>
<td style="text-align:center">&lt;，&lt;=，&gt;，>=，!=，==</td>
<td style="text-align:center">比较</td>
</tr>
<tr>
<td style="text-align:center">&#124;</td>
<td style="text-align:center">按位或</td>
</tr>
<tr>
<td style="text-align:center">^</td>
<td style="text-align:center">按位异或</td>
</tr>
<tr>
<td style="text-align:center">&amp;</td>
<td style="text-align:center">按位与</td>
</tr>
<tr>
<td style="text-align:center">&lt;&lt;，&gt;&gt;</td>
<td style="text-align:center">移位</td>
</tr>
<tr>
<td style="text-align:center">+，-</td>
<td style="text-align:center">加法与减法</td>
</tr>
<tr>
<td style="text-align:center">*，/，%</td>
<td style="text-align:center">乘法、除法与取余</td>
</tr>
<tr>
<td style="text-align:center">+x，-x</td>
<td style="text-align:center">正负号</td>
</tr>
<tr>
<td style="text-align:center">~x</td>
<td style="text-align:center">按位翻转</td>
</tr>
<tr>
<td style="text-align:center">**</td>
<td style="text-align:center">指数</td>
</tr>
<tr>
<td style="text-align:center">x.attribute</td>
<td style="text-align:center">属性参考</td>
</tr>
<tr>
<td style="text-align:center">x[index]</td>
<td style="text-align:center">下标</td>
</tr>
<tr>
<td style="text-align:center">x[index:index]</td>
<td style="text-align:center">寻址段</td>
</tr>
<tr>
<td style="text-align:center">f(arguments…)</td>
<td style="text-align:center">函数调用</td>
</tr>
<tr>
<td style="text-align:center">(experession,…)</td>
<td style="text-align:center">绑定或元组显示</td>
</tr>
<tr>
<td style="text-align:center">[expression,…]</td>
<td style="text-align:center">列表显示</td>
</tr>
<tr>
<td style="text-align:center">{key:datum,…}</td>
<td style="text-align:center">字典显示</td>
</tr>
<tr>
<td style="text-align:center">`expression,…`</td>
<td style="text-align:center">字符串转换</td>
</tr>
</tbody>
</table>
<h3 id="控制语句-不要忘记"><a href="#控制语句-不要忘记" class="headerlink" title="控制语句 (不要忘记:)"></a>控制语句 (不要忘记:)</h3><p><strong>else部分是可选的。如果包含else，它总是在循环结束后执行一次，除非遇到break</strong></p>
<ul>
<li><p>if和while</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># !/usr/bin/python</span></div><div class="line">number = <span class="number">23</span></div><div class="line">running = <span class="keyword">True</span></div><div class="line"><span class="keyword">while</span> running:</div><div class="line">    guess=int(raw_input(<span class="string">"Enter an integer:"</span>))</div><div class="line">    <span class="keyword">if</span> guess == number:</div><div class="line">        print(<span class="string">"Congratulation, you guessd it."</span>)</div><div class="line">        running = <span class="keyword">False</span></div><div class="line">    <span class="keyword">elif</span> guess &lt; number:</div><div class="line">        print(<span class="string">"No, it is a little higher"</span>)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        print(<span class="string">"No, it is a little lower"</span>)</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    print(<span class="string">"The while loop is over."</span>)</div><div class="line">print(<span class="string">"Done"</span>)</div></pre></td></tr></table></figure>
</li>
<li><p>for, break和continue</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>):</div><div class="line">    <span class="keyword">if</span> x == <span class="number">2</span>:</div><div class="line">        <span class="keyword">continue</span></div><div class="line">    <span class="keyword">if</span> x == <span class="number">4</span>:</div><div class="line">        <span class="keyword">break</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="函数-不要忘记"><a href="#函数-不要忘记" class="headerlink" title="函数 (不要忘记:)"></a>函数 (不要忘记:)</h3><ul>
<li><p>实参传递方式类似Java, 值类型值传递，对象类型引用传递</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">maximum</span><span class="params">(x, y)</span>:</span></div><div class="line">    <span class="keyword">if</span> x &gt; y:</div><div class="line">        <span class="keyword">return</span> x</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> y</div></pre></td></tr></table></figure>
</li>
<li><p>默认参数</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">printWord</span><span class="params">(word, times = <span class="number">1</span>)</span>:</span></div><div class="line">    print(word * times)</div></pre></td></tr></table></figure>
</li>
<li><p>关键参数</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(a, b = <span class="number">5</span>, c = <span class="number">10</span>)</span>:</span></div><div class="line">    print(<span class="string">'a is %d, b is %d, c is %d'</span> % (a, b, c))</div><div class="line"><span class="comment">#####################################################</span></div><div class="line">func(<span class="number">3</span>, <span class="number">7</span>)</div><div class="line">func(<span class="number">25</span>, c = <span class="number">24</span>)</div><div class="line">func(c = <span class="number">50</span>, a = <span class="number">100</span>)</div></pre></td></tr></table></figure>
</li>
<li><p>DocStrings<br>文档字符串的惯例是一个多行字符串，它的首行以大写字母开始，句号结尾。第二行是空行，从第三行开始是详细的描述。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">printMax</span><span class="params">(x, y)</span>:</span></div><div class="line">    <span class="string">'''Prints the maximum of two numbers.</span></div><div class="line"><span class="string">    </span></div><div class="line"><span class="string">    The two values must be integers.'''</span></div><div class="line">    </div><div class="line">    <span class="keyword">if</span> x &gt; y:</div><div class="line">        <span class="keyword">print</span> x, <span class="string">'is maximum'</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">print</span> y, <span class="string">'is maximum'</span></div><div class="line"><span class="comment">##########################################</span></div><div class="line">printMax(<span class="number">3</span>, <span class="number">5</span>)</div><div class="line"><span class="keyword">print</span> printMax.__doc__</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><p><strong>每个.py程序都是1个模块(可以类似cpp类一样用.来访问模块内的成员)</strong></p>
<ul>
<li>from..import语句<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">print</span> <span class="string">'The command line arguments are:'</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> sys.argv:</div><div class="line">        <span class="keyword">print</span> i</div><div class="line"><span class="keyword">print</span> <span class="string">'\n\nThe PYTHONPATH is'</span>, sys.path, <span class="string">'\n'</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>如果你想要直接输入<code>argv</code>变量到你的程序中（避免在每次使用它时打sys.），那么你可以使用<code>from sys import argv</code>语句。<br>如果你想要输入所有sys模块使用的名字，那么你可以使用<code>from sys import *</code>语句。这对于所有模块都适用。<br>一般说来，应该避免使用<code>from..import</code>而使用<code>import</code>语句，因为这样可以使你的程序更加易读，也可以避免名称的冲突。</p>
<ul>
<li><p>使用模块的<code>__name__</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">'This program is being run by itself'</span></div><div class="line"><span class="keyword">else</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">'I am being imported from another module'</span></div></pre></td></tr></table></figure>
</li>
<li><p>dir()函数<br>可以使用内建的dir函数来列出模块定义的标识符。标识符有函数、类和变量。<br>当你为dir()提供一个模块名的时候，它返回模块定义的名称列表。<br>如果不提供参数，它返回当前模块中定义的名称列表。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> sys</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dir() <span class="comment"># get list of attributes for current module</span></div><div class="line">[<span class="string">'__builtins__'</span>, <span class="string">'__doc__'</span>, <span class="string">'__name__'</span>, <span class="string">'sys'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">5</span> <span class="comment"># create a new variable 'a'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dir()</div><div class="line">[<span class="string">'__builtins__'</span>, <span class="string">'__doc__'</span>, <span class="string">'__name__'</span>, <span class="string">'a'</span>, <span class="string">'sys'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> a <span class="comment"># delete/remove a name</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dir()</div><div class="line">[<span class="string">'__builtins__'</span>, <span class="string">'__doc__'</span>, <span class="string">'__name__'</span>, <span class="string">'sys'</span>]</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line">list.append(<span class="number">4</span>)</div><div class="line">list.pop(<span class="number">0</span>) <span class="comment"># del list[0]</span></div><div class="line">list.sort()</div><div class="line">print(list)</div></pre></td></tr></table></figure>
<h4 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">empty = ()</div><div class="line">single = (<span class="number">1</span>, )</div><div class="line">zoo = (<span class="string">"wolf"</span>, <span class="string">"elephant"</span>, <span class="string">"penguin"</span>)</div><div class="line"><span class="keyword">print</span> <span class="string">"number of animals in the zoo is"</span>, len(zoo) <span class="comment"># 3</span></div><div class="line">new_zoo = (<span class="string">"monkey"</span>, <span class="string">"dolphin"</span>, zoo)</div><div class="line"><span class="keyword">print</span> <span class="string">"number of animals in the new zoo is"</span>, len(new_zoo) <span class="comment"># 3</span></div></pre></td></tr></table></figure>
<p>元组最通常的用法是用在打印语句<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">age = <span class="number">22</span></div><div class="line">name = <span class="string">'Swaroop'</span></div><div class="line"><span class="keyword">print</span> <span class="string">'%s is %d years old'</span> % (name, age)</div><div class="line"><span class="keyword">print</span> <span class="string">'Why is %s playing with that python?'</span> % name</div></pre></td></tr></table></figure></p>
<h4 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h4><p>只能使用不可变的对象（比如字符串）来作为字典的键，但是你可以把不可变或可变的对象作为字典的值。<br>基本说来就是，你应该只使用简单的对象作为键。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">ab = &#123; <span class="string">'Swaroop'</span> : <span class="string">'swaroopch@byteofpython.info'</span>,</div><div class="line">       <span class="string">'Larry'</span> : <span class="string">'larry@wall.org'</span>,</div><div class="line">       <span class="string">'Matsumoto'</span> : <span class="string">'matz@ruby-lang.org'</span>,</div><div class="line">       <span class="string">'Spammer'</span> : <span class="string">'spammer@hotmail.com'</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">print</span> <span class="string">"Swaroop's address is %s"</span> % ab[<span class="string">'Swaroop'</span>]</div></pre></td></tr></table></figure></p>
<h4 id="序列"><a href="#序列" class="headerlink" title="序列"></a>序列</h4><p>列表、元组和字符串都是序列，序列的两个主要特点是索引操作符和切片操作符。<br>索引操作符让我们可以从序列中抓取一个特定项目。切片操作符让我们能够获取序列的一个切片，即一部分序列</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">shoplist = [<span class="string">'apple'</span>, <span class="string">'mango'</span>, <span class="string">'carrot'</span>, <span class="string">'banana'</span>]</div><div class="line"><span class="comment"># Indexing or 'Subscription' operation</span></div><div class="line"><span class="keyword">print</span> <span class="string">'Item 0 is'</span>, shoplist[<span class="number">0</span>]</div><div class="line"><span class="keyword">print</span> <span class="string">'Item -1 is'</span>, shoplist[<span class="number">-1</span>]</div><div class="line"><span class="comment"># Slicing on a list</span></div><div class="line"><span class="keyword">print</span> <span class="string">'Item 1 to 3 is'</span>, shoplist[<span class="number">1</span>:<span class="number">3</span>]</div><div class="line"><span class="keyword">print</span> <span class="string">'Item 2 to end is'</span>, shoplist[<span class="number">2</span>:]</div><div class="line"><span class="keyword">print</span> <span class="string">'Item 1 to -1 is'</span>, shoplist[<span class="number">1</span>:<span class="number">-1</span>]</div><div class="line"><span class="keyword">print</span> <span class="string">'Item start to end is'</span>, shoplist[:]</div><div class="line"><span class="comment"># Slicing on a string</span></div><div class="line">name = <span class="string">'swaroop'</span></div><div class="line"><span class="keyword">print</span> <span class="string">'characters 1 to 3 is'</span>, name[<span class="number">1</span>:<span class="number">3</span>]</div><div class="line"><span class="keyword">print</span> <span class="string">'characters 2 to end is'</span>, name[<span class="number">2</span>:]</div><div class="line"><span class="keyword">print</span> <span class="string">'characters 1 to -1 is'</span>, name[<span class="number">1</span>:<span class="number">-1</span>]</div><div class="line"><span class="keyword">print</span> <span class="string">'characters start to end is'</span>, name[:]</div><div class="line"><span class="comment">#################################################</span></div><div class="line">Item <span class="number">0</span> <span class="keyword">is</span> apple</div><div class="line">Item <span class="number">-1</span> <span class="keyword">is</span> banana</div><div class="line">Item <span class="number">1</span> to <span class="number">3</span> <span class="keyword">is</span> [<span class="string">'mango'</span>, <span class="string">'carrot'</span>]</div><div class="line">Item <span class="number">2</span> to end <span class="keyword">is</span> [<span class="string">'carrot'</span>, <span class="string">'banana'</span>]</div><div class="line">Item <span class="number">1</span> to <span class="number">-1</span> <span class="keyword">is</span> [<span class="string">'mango'</span>, <span class="string">'carrot'</span>]</div><div class="line">Item start to end <span class="keyword">is</span> [<span class="string">'apple'</span>, <span class="string">'mango'</span>, <span class="string">'carrot'</span>, <span class="string">'banana'</span>]</div><div class="line">characters <span class="number">1</span> to <span class="number">3</span> <span class="keyword">is</span> wa</div><div class="line">characters <span class="number">2</span> to end <span class="keyword">is</span> aroop</div><div class="line">characters <span class="number">1</span> to <span class="number">-1</span> <span class="keyword">is</span> waroo</div><div class="line">characters start to end <span class="keyword">is</span> swaroop</div></pre></td></tr></table></figure>
<h4 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h4><p>当你创建一个对象并给它赋一个变量的时候，这个变量仅仅引用那个对象，而不是表示这个对象本身！<br>也就是说，变量名指向你计算机中存储那个对象的内存。这被称作名称到对象的绑定。<br><strong>必须使用切片操作符来取得拷贝</strong></p>
<h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><h4 id="类的声明"><a href="#类的声明" class="headerlink" title="类的声明"></a>类的声明</h4><p>基本跟cpp差不多，类中定义的变量，类似于cpp中的类的静态成员变量(比如下中的population)<br>如果你使用的数据成员名称以双下划线前缀比如__privatevar，Python的名称管理体系会有效地把它作为私有变量。<br>一个惯例，如果某个变量只想在类或对象中使用，就应该以单下划线前缀。<br>其他的名称都将作为公共的，可以被其他类/对象使用。<br>记住这只是一个惯例，并不是Python所要求的（与双下划线前缀不同）。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></div><div class="line">    <span class="string">'''Represents a person.'''</span></div><div class="line">    population = <span class="number">0</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></div><div class="line">        <span class="string">'''Initializes the person's data.'''</span></div><div class="line">        self.name = name</div><div class="line">        <span class="keyword">print</span> <span class="string">'(Initializing %s)'</span> % self.name</div><div class="line">        <span class="comment"># When this person is created, he/she</span></div><div class="line">        <span class="comment"># adds to the population</span></div><div class="line">        Person.population += <span class="number">1</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">'''I am dying.'''</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'%s says bye.'</span> % self.name</div><div class="line">        Person.population -= <span class="number">1</span></div><div class="line">        <span class="keyword">if</span> Person.population == <span class="number">0</span>:</div><div class="line">            <span class="keyword">print</span> <span class="string">'I am the last one.'</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">print</span> <span class="string">'There are still %d people left.'</span> % Person.population</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sayHi</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">'''Greeting by the person.</span></div><div class="line"><span class="string">        Really, that's all it does.'''</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'Hi, my name is %s.'</span> % self.name</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">howMany</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">'''Prints the current population.'''</span></div><div class="line">        <span class="keyword">if</span> Person.population == <span class="number">1</span>:</div><div class="line">            <span class="keyword">print</span> <span class="string">'I am the only person here.'</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">print</span> <span class="string">'We have %d persons here.'</span> % Person.population</div><div class="line"></div><div class="line"><span class="comment">###########################################</span></div><div class="line">swaroop = Person(<span class="string">'Swaroop'</span>)</div><div class="line">swaroop.sayHi()</div><div class="line">swaroop.howMany()</div><div class="line">kalam = Person(<span class="string">'Abdul Kalam'</span>)</div><div class="line">kalam.sayHi()</div><div class="line">kalam.howMany()</div><div class="line">swaroop.sayHi()</div><div class="line">swaroop.howMany()</div><div class="line"><span class="comment">###########################################</span></div><div class="line">(Initializing Swaroop)</div><div class="line">Hi, my name <span class="keyword">is</span> Swaroop.</div><div class="line">I am the only person here.</div><div class="line">(Initializing Abdul Kalam)</div><div class="line">Hi, my name <span class="keyword">is</span> Abdul Kalam.</div><div class="line">We have <span class="number">2</span> persons here.</div><div class="line">Hi, my name <span class="keyword">is</span> Swaroop.</div><div class="line">We have <span class="number">2</span> persons here.</div><div class="line">Abdul Kalam says bye.</div><div class="line">There are still <span class="number">1</span> people left.</div><div class="line">Swaroop says bye.</div><div class="line">I am the last one.</div></pre></td></tr></table></figure></p>
<h4 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h4><p><strong>Python不会自动调用基本类的constructor，你得亲自专门调用它</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SchoolMember</span>:</span></div><div class="line">    <span class="string">'''Represents any school member.'''</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></div><div class="line">        self.name = name</div><div class="line">        self.age = age</div><div class="line">        <span class="keyword">print</span> <span class="string">'(Initialized SchoolMember: %s)'</span> % self.name</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tell</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">'''Tell my details.'''</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'Name:"%s" Age:"%s"'</span> % (self.name, self.age),</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span><span class="params">(SchoolMember)</span>:</span></div><div class="line">    <span class="string">'''Represents a teacher.'''</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age, salary)</span>:</span></div><div class="line">        SchoolMember.__init__(self, name, age)</div><div class="line">        self.salary = salary</div><div class="line">        <span class="keyword">print</span> <span class="string">'(Initialized Teacher: %s)'</span> % self.name</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tell</span><span class="params">(self)</span>:</span></div><div class="line">        SchoolMember.tell(self)</div><div class="line">        <span class="keyword">print</span> <span class="string">'Salary: "%d"'</span> % self.salary</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(SchoolMember)</span>:</span></div><div class="line">    <span class="string">'''Represents a student.'''</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age, marks)</span>:</span></div><div class="line">        SchoolMember.__init__(self, name, age)</div><div class="line">        self.marks = marks</div><div class="line">        <span class="keyword">print</span> <span class="string">'(Initialized Student: %s)'</span> % self.name</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tell</span><span class="params">(self)</span>:</span></div><div class="line">        SchoolMember.tell(self)</div><div class="line">        <span class="keyword">print</span> <span class="string">'Marks: "%d"'</span> % self.marks</div><div class="line"></div><div class="line"><span class="comment">##############################################################</span></div><div class="line">t = Teacher(<span class="string">'Mrs. Shrividya'</span>, <span class="number">40</span>, <span class="number">30000</span>)</div><div class="line">s = Student(<span class="string">'Swaroop'</span>, <span class="number">22</span>, <span class="number">75</span>)</div><div class="line"><span class="keyword">print</span> <span class="comment"># prints a blank line</span></div><div class="line">members = [t, s]</div><div class="line"><span class="keyword">for</span> member <span class="keyword">in</span> members:</div><div class="line">member.tell() <span class="comment"># works for both Teachers and Students</span></div><div class="line"><span class="comment">##############################################################</span></div><div class="line">(Initialized SchoolMember: Mrs. Shrividya)</div><div class="line">(Initialized Teacher: Mrs. Shrividya)</div><div class="line">(Initialized SchoolMember: Swaroop)</div><div class="line">(Initialized Student: Swaroop)</div><div class="line">Name:<span class="string">"Mrs. Shrividya"</span> Age:<span class="string">"40"</span> Salary: <span class="string">"30000"</span></div><div class="line">Name:<span class="string">"Swaroop"</span> Age:<span class="string">"22"</span> Marks: <span class="string">"75"</span></div></pre></td></tr></table></figure></p>
<h3 id="I-O"><a href="#I-O" class="headerlink" title="I/O"></a>I/O</h3><h4 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">poem = <span class="string">'''\</span></div><div class="line"><span class="string">Programming is fun</span></div><div class="line"><span class="string">When the work is done</span></div><div class="line"><span class="string">if you wanna make your work also fun:</span></div><div class="line"><span class="string">use Python!</span></div><div class="line"><span class="string">'''</span></div><div class="line">f = file(<span class="string">'poem.txt'</span>, <span class="string">'w'</span>) <span class="comment"># open for 'w'riting</span></div><div class="line">f.write(poem) <span class="comment"># write text to file</span></div><div class="line">f.close() <span class="comment"># close the file</span></div><div class="line">f = file(<span class="string">'poem.txt'</span>) <span class="comment"># if no mode is specified, 'r'ead mode is assumed by default</span></div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    line = f.readline()</div><div class="line">    <span class="keyword">if</span> len(line) == <span class="number">0</span>: <span class="comment"># Zero length indicates EOF</span></div><div class="line">        <span class="keyword">break</span></div><div class="line">    <span class="keyword">print</span> line, <span class="comment"># Notice comma to avoid automatic newline added by Python</span></div><div class="line">f.close() <span class="comment"># close the file</span></div></pre></td></tr></table></figure>
<h4 id="储存器"><a href="#储存器" class="headerlink" title="储存器"></a>储存器</h4><p>Python提供一个标准的模块，称为pickle。<br>使用它你可以在一个文件中储存何Python对象，之后你又可以把它完整无缺地取出来。这被称为 持久地 储存对象。<br>还有另一个模块称为cPickle，它的功能和pickle模块完全相同，只不过它是C语言编写的，因此要快得多（比pickle快1000倍）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> cPickle <span class="keyword">as</span> p</div><div class="line"><span class="comment">#import pickle as p</span></div><div class="line">shoplistfile = <span class="string">'shoplist.data'</span></div><div class="line"><span class="comment"># the name of the file where we will store the object</span></div><div class="line">shoplist = [<span class="string">'apple'</span>, <span class="string">'mango'</span>, <span class="string">'carrot'</span>]</div><div class="line"><span class="comment"># Write to the file</span></div><div class="line">f = file(shoplistfile, <span class="string">'w'</span>)</div><div class="line">p.dump(shoplist, f) <span class="comment"># dump the object to a file</span></div><div class="line">f.close()</div><div class="line"><span class="keyword">del</span> shoplist <span class="comment"># remove the shoplist</span></div><div class="line"><span class="comment"># Read back from the storage</span></div><div class="line">f = file(shoplistfile)</div><div class="line">storedlist = p.load(f)</div><div class="line"><span class="keyword">print</span> storedlist</div></pre></td></tr></table></figure></p>
<h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><p><strong>else可以和try…except连用，不能只与try…finally连用</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment"># Filename: raising.py</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShortInputException</span><span class="params">(Exception)</span>:</span></div><div class="line">    <span class="string">'''A user-defined exception class.'''</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, length, atleast)</span>:</span></div><div class="line">    Exception.__init__(self)</div><div class="line">    self.length = length</div><div class="line">    self.atleast = atleast</div><div class="line"><span class="keyword">try</span>:</div><div class="line">    s = raw_input(<span class="string">'Enter something --&gt; '</span>)</div><div class="line">    <span class="keyword">if</span> len(s) &lt; <span class="number">3</span>:</div><div class="line">        <span class="keyword">raise</span> ShortInputException(len(s), <span class="number">3</span>)</div><div class="line">    <span class="comment"># Other work can continue as usual here</span></div><div class="line"><span class="keyword">except</span> EOFError:</div><div class="line">    <span class="keyword">print</span> <span class="string">'\nWhy did you do an EOF on me?'</span></div><div class="line"><span class="keyword">except</span> ShortInputException, x:</div><div class="line">    <span class="keyword">print</span> <span class="string">'ShortInputException: The input was of length %d, \</span></div><div class="line"><span class="string">was expecting at least %d'</span> % (x.length, x.atleast)</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">'No exception was raised.'</span></div></pre></td></tr></table></figure></p>
<h3 id="Python标准库"><a href="#Python标准库" class="headerlink" title="Python标准库"></a>Python标准库</h3><h4 id="sys模块"><a href="#sys模块" class="headerlink" title="sys模块"></a>sys模块</h4><ul>
<li><code>sys.argv</code>列表中总是至少有一个项目。<code>sys.argv[0]</code>（由于Python从0开始计数）就是当前运行的程序名称。其他的命令行参数在这个项目之后。</li>
<li><code>sys.version</code>字符串给你提供安装的Python的版本信息</li>
<li><code>sys.stdin、sys.stdout和sys.stderr</code>分别对应程序的标准输入、标准输出和标准错误流。</li>
</ul>
<h4 id="os模块"><a href="#os模块" class="headerlink" title="os模块"></a>os模块</h4><ul>
<li><code>os.name</code>字符串指示你正在使用的平台。比如对于Windows，它是’nt’，而对于Linux/Unix<br>用户，它是’posix’。</li>
<li><code>os.getcwd()</code>函数得到当前工作目录，即当前Python脚本工作的目录路径。</li>
<li><code>os.getenv()和os.putenv()</code>函数分别用来读取和设置环境变量。</li>
<li><code>os.listdir()</code>返回指定目录下的所有文件和目录名。</li>
<li><code>os.remove()</code>函数用来删除一个文件。</li>
<li><code>os.system()</code>函数用来运行shell命令。</li>
<li><code>os.linesep</code>字符串给出当前平台使用的行终止符。例如，Windows使用’\r\n’，Linux使<br>用’\n’而Mac使用’\r’。</li>
<li><p><code>os.path.split()</code>函数返回一个路径的目录名和文件名。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.split(<span class="string">'/home/swaroop/byte/code/poem.txt'</span>)</div><div class="line">(<span class="string">'/home/swaroop/byte/code'</span>, <span class="string">'poem.txt'</span>)</div></pre></td></tr></table></figure>
</li>
<li><p><code>os.path.isfile()和os.path.isdir()</code>函数分别检验给出的路径是一个文件还是目录</p>
</li>
<li><code>os.path.exists()</code>函数用来检验给出的路径是否真地存在</li>
</ul>
<h3 id="更多关于Python"><a href="#更多关于Python" class="headerlink" title="更多关于Python"></a>更多关于Python</h3><h4 id="列表综合（List-Comprehension）"><a href="#列表综合（List-Comprehension）" class="headerlink" title="列表综合（List Comprehension）"></a>列表综合（List Comprehension）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line">listone = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</div><div class="line">listtwo = [<span class="number">2</span>*i <span class="keyword">for</span> i <span class="keyword">in</span> listone <span class="keyword">if</span> i &gt; <span class="number">2</span>]</div><div class="line"><span class="keyword">print</span> listtwo</div></pre></td></tr></table></figure>
<h4 id="在函数中接收元组和列表"><a href="#在函数中接收元组和列表" class="headerlink" title="在函数中接收元组和列表"></a>在函数中接收元组和列表</h4><p>在args变量前有<code>*</code>前缀，多余的函数参数都会作为一个元组存储在args中<br>如果使用的是<code>**</code>前缀，多余的参数则会被认为是一个字典的键/值对<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">powersum</span><span class="params">(power, *args)</span>:</span></div><div class="line"><span class="meta">... </span><span class="string">'''Return the sum of each argument raised to specified power.'''</span></div><div class="line"><span class="meta">... </span>total = <span class="number">0</span></div><div class="line"><span class="meta">... </span><span class="keyword">for</span> i <span class="keyword">in</span> args:</div><div class="line"><span class="meta">... </span>total += pow(i, power)</div><div class="line"><span class="meta">... </span><span class="keyword">return</span> total</div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>powersum(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</div><div class="line"><span class="number">25</span></div></pre></td></tr></table></figure></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>dict = &#123;&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> dict</div><div class="line">&#123;&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">addKVs</span><span class="params">(**args)</span>:</span></div><div class="line"><span class="meta">... </span>    <span class="keyword">for</span> key <span class="keyword">in</span> args.keys():</div><div class="line"><span class="meta">... </span>            dict[key] = args[key]</div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>addKVs(a=<span class="number">1</span>,b=<span class="number">2</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> dict</div><div class="line">&#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>&#125;</div></pre></td></tr></table></figure>
<h4 id="lambda-expression"><a href="#lambda-expression" class="headerlink" title="lambda expression"></a>lambda expression</h4><p>语法：<code>lambda [arg1[,arg2,arg3....argN]]:expression</code><br>注意：<br>只能使用表达式，即便是print语句也不能用在lambda形式中<br><code>for..in..if</code>能做的，最好不要选择lambda<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">fuck = <span class="keyword">lambda</span> : <span class="string">'hello world'</span></div><div class="line"><span class="keyword">print</span> fuck()</div><div class="line">addition = <span class="keyword">lambda</span> a, b : a + b</div><div class="line"><span class="keyword">print</span> addition(<span class="number">1</span>, <span class="number">2</span>)</div><div class="line"><span class="comment">###########################</span></div><div class="line">hello world</div><div class="line"><span class="number">3</span></div></pre></td></tr></table></figure></p>
<h4 id="exec、eval、assert、repr"><a href="#exec、eval、assert、repr" class="headerlink" title="exec、eval、assert、repr"></a>exec、eval、assert、repr</h4><ul>
<li><p><code>exec</code>语句用来执行储存在字符串或文件中的Python语句</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">exec</span> <span class="string">'print "Hello World"'</span></div><div class="line">Hello World</div></pre></td></tr></table></figure>
</li>
<li><p><code>eval</code>语句用来计算存储在字符串中的有效Python表达式</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>eval(<span class="string">'2*3'</span>)</div><div class="line"><span class="number">6</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>assert</code>语句用来声明某个条件是真的</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>mylist = [<span class="string">'item'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">assert</span> len(mylist) &gt;= <span class="number">1</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>mylist.pop()</div><div class="line"><span class="string">'item'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">assert</span> len(mylist) &gt;= <span class="number">1</span></div><div class="line">Traceback (most recent call last):</div><div class="line">File "&lt;stdin&gt;", line 1, in ?</div><div class="line">AssertionError</div></pre></td></tr></table></figure>
</li>
<li><p><code>repr</code>函数和<code>反引号</code>（也称转换符）用来获取对象的可打印表示形式<br>注意，在大多数时候有<code>eval(repr(object)) == object</code><br>可通过定义类的<code>__repr__</code>方法来控制对象被<code>repr</code>函数调用时返回的内容</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>i = []</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>i.append(<span class="string">'item'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>`i`</div><div class="line"><span class="string">"['item']"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>repr(i)</div><div class="line"><span class="string">"['item']"</span></div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> Doing </category>
            
            <category> Python </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Coursera, Machine Learning]]></title>
      <url>/2017/03/07/Coursera%20Machine%20Learning/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>总算是开始学习$ML$了，这个$Stanford$的课看了一下$Materials$发现被精简了好多啊<br>好处是通俗易懂，入门必备啊。。真是适合我这种数学渣</p>
<a id="more"></a>
<h3 id="笔记和编程作业答案"><a href="#笔记和编程作业答案" class="headerlink" title="笔记和编程作业答案"></a>笔记和编程作业答案</h3><p>这里丢一波地址，毕竟博客的$md$对$Latex$的兹磁其实是一般的<br>还是作业部落比较好用，主要是博客还得$push$吧，笔记应该是随心写的那种<br>所以酱紫比较好</p>
<ul>
<li><a href="https://www.zybuluo.com/TaoSama/note/675864" target="_blank" rel="external">My Notes</a></li>
<li><a href="https://github.com/TaoSama/Coursera/tree/master/Machine%20Learning" target="_blank" rel="external">My Exercises</a></li>
</ul>
<hr>
<p><del>Updated</del></p>
<h3 id="完成了"><a href="#完成了" class="headerlink" title="完成了"></a>完成了</h3><ul>
<li><strong>现在是2017年3月12日 03:35:01，历时7天整，最终以$99.2\%$的成绩通过了</strong></li>
<li>基本都是一次通过，拿满可能做了$2\sim 3$次</li>
<li><p>除了Anomaly Detection和Recommender Systems各错了一个，前者做了$6$遍还是没拿满，我!@#$%^&amp;</p>
</li>
<li><p>看到这个绿图还是很欣慰啊，就跟你大半夜日题看到$AC$一样的，勉强入门了？？</p>
</li>
</ul>
<p><img src="http://7xru22.com1.z0.glb.clouddn.com/17-3-12/37459681-file_1489260426139_8708.png" alt=""></p>
<h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><ul>
<li>加油加油，我发现我还是爱学习的？ 爱数学？(雾</li>
<li>接下来可以玩一玩平台，工具啥的了</li>
<li>具体数学推导深入啥的，玩的过程中学可能更有效一点的</li>
<li>好像摆脱颓废的状态了，果然是忙起来就好了。。</li>
<li>感觉有空还是要把$cs229$的$lecture notes$看一看的，读了第一个感觉非常好啊</li>
<li>然后跟着他们一起学一学$DL$？ 再上一波$cs231n$了估计要</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Doing </category>
            
            <category> Machine Learning </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Reborn and Walk Alone]]></title>
      <url>/2017/02/28/Roborn-and-Walk-Alone/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>时光太瘦，指缝太宽，不经意的一瞥，已隔经年<br> <div style="text-align:right">——安意如</div><br>作为一个记忆是有限覆盖式的人（摊手），我大概已经不太记得这个人生$2\sim 3$年往前的事情了，不知是幸运还是悲哀。<br>四年太快，马上就要毕业了，最近又传来噩耗，能不能毕业都不一定了，自作孽真是的。<br>无数次幻想如果没有得到想要的结果就退役了是怎么样的，正儿八经儿从坎普回来发现其实也没啥区别。<br>仿佛我的力气早已经在一年前透支了，突然找不回从前努力的那个自己了，这个样子不行啊，每天浑浑噩噩的。<br>明天就是三月了，即使是在最后一秒回头也是不晚的，毕竟不是生死，真希望自己踽踽独行，踌躇满志。</p>
<a id="more"></a>
<h3 id="莫名其妙的终于下了决定"><a href="#莫名其妙的终于下了决定" class="headerlink" title="莫名其妙的终于下了决定"></a>莫名其妙的终于下了决定</h3><p>讲道理，迷茫的时候$salary-oriented$是很兹磁的啊，所谓技多不压身，学一波都是挺好玩的<br>$ML、CV$什么的，周围学的人都已经建立正反馈了，而我还没找到正反馈，不过我想应该不难<br>其他方向的孩子们早都深入了，观望真是一件最愚蠢的事情，开始做什么的才是硬道理啊</p>
<h3 id="博客重新搞了搞"><a href="#博客重新搞了搞" class="headerlink" title="博客重新搞了搞"></a>博客重新搞了搞</h3><p>以前黑灰的实在是看着好压抑啊，然后又去把<code>landscape</code>原版拿来搞一搞，借鉴了一下别人的<br>发现自己实在是缺乏美(前端)的眼睛(skill)，也就只有$xjb$修一修$bug$，然后再随便调一调配色这种水平<br>看起来勉强是能看了，终于把<a href="//taosama.com">taosama.com</a>买下来了，然后又可以重新愉快的写博客了？？？</p>
<h3 id="然后就开始重新写博客了？"><a href="#然后就开始重新写博客了？" class="headerlink" title="然后就开始重新写博客了？"></a>然后就开始重新写博客了？</h3><p>把东西整理一下，然后又可以随便刷刷题，打打$cf$，学学东西<br>实习学的东西也可以整理一波。。然后就正儿八经儿的开始学习了？<br>毕竟三月了，新的开始。。</p>
<h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>好好学习，好好打游戏。。好好看视频。。别特么胡思乱想。。</p>
]]></content>
      
        <categories>
            
            <category> Doing </category>
            
            <category> Life </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[VS2013 + opencv2.4.8 环境搭建]]></title>
      <url>/2016/11/01/set-up-environment-of-vs2013-with-opencv248/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>第一天来实习呀，宇哥让我搭建一波环境，来之前搞过一波$win+qt$的，过来发现这边并不是玩$linux$<br>而是$win10+vs$的节奏，然后我就知道要开始开(踩)心(坑)之旅了</p>
<h3 id="开始搭建环境"><a href="#开始搭建环境" class="headerlink" title="开始搭建环境"></a>开始搭建环境</h3><h4 id="工具下载"><a href="#工具下载" class="headerlink" title="工具下载"></a>工具下载</h4><ul>
<li>$vs 2013 ultimate$安装，可以去<a href="http://www.itellyou.cn/" target="_blank" rel="external">MSDN, I tell you</a>下载</li>
<li>$cmake$，直接<a href="http://www.cmake.org/" target="_blank" rel="external">官网</a>下载就好了，最新版本就好</li>
<li>$opencv 2.4.8$，直接去官网下载源码就好</li>
</ul>
<h4 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h4><ul>
<li>$cmake gui$选择$opencv$源码根目录，再选择一个输出目录<br>编译静态库就不打勾这2个， <code>BUILD_SHARED_LIBS</code>，<code>BUILD_WITH_STATIC_CRT</code><br><code>QT</code> 方案就 <code>WITH_OPENGL</code> 和 <code>WITH_QT</code> 勾一下</li>
<li>点击$configure$，选择$Visual Studio 12 2013$就好，编译器就默认就行</li>
<li>$configure$完之后点击$generate$，之后$open project$</li>
<li>打开$OpenCV$工程之后，分别在$Debug$和$Release$模式下，$CMakeTargets$下$ALL_BUILD$和$INSTALL$先后构建一下</li>
</ul>
<h4 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h4><ul>
<li><p>新建一个控制台工程，选择空项目，新建 <code>main.cpp</code>，找一段官网代码</p>
  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/highgui/highgui.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	<span class="keyword">if</span> (argc != <span class="number">2</span>)</div><div class="line">	&#123;</div><div class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">" Usage: display_image ImageToLoadAndDisplay"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	Mat image;</div><div class="line">	image = imread(argv[<span class="number">1</span>], IMREAD_COLOR); <span class="comment">// Read the file</span></div><div class="line"></div><div class="line">	<span class="keyword">if</span> (!image.data) <span class="comment">// Check for invalid input</span></div><div class="line">	&#123;</div><div class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"Could not open or find the image"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	namedWindow(<span class="string">"Display window"</span>, WINDOW_AUTOSIZE); <span class="comment">// Create a window for display.</span></div><div class="line">	imshow(<span class="string">"Display window"</span>, image); <span class="comment">// Show our image inside it.</span></div><div class="line"></div><div class="line">	waitKey(<span class="number">0</span>); <span class="comment">// Wait for a keystroke in the window</span></div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>有了上面这个 打开的工程就可以为所有工程添加依赖了</p>
</li>
<li><p>$View\to Property Manager\to 工程名字\to Debug | Win32\to Microsoft.Cpp.Win32.user$<br>上面这个位置找到之后，就可以添加包含目录和库目录了</p>
<ul>
<li>$Common Properties\to VC++ Directories$<br><strong>包含目录</strong>，编译后目录下的 <code>...\install\include</code>，<code>...\install\include\opencv</code>，<code>...\install\include\opencv2</code>三个目录添加就好<br><strong>库目录</strong>，静态库，编译后目录下的 <code>...\install\x86\vc12\staticlib</code><br><strong>可执行文件目录</strong>，直接添加到环境变量里去，<code>...\install\x86\vc12\bin</code></li>
<li><p>$Linker\to Input$<br><strong>库文件依赖</strong>，静态库依赖，库目录里的全部塞进去就行，$Debug$就添加 <code>*d.lib</code>版本的，$Release$添加 <code>*.lib</code>版本的</p>
   <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">opencv_core248d.lib</div><div class="line">opencv_imgproc248d.lib</div><div class="line">opencv_highgui248d.lib</div><div class="line">opencv_ml248d.lib</div><div class="line">opencv_video248d.lib</div><div class="line">opencv_features2d248d.lib</div><div class="line">opencv_calib3d248d.lib</div><div class="line">opencv_objdetect248d.lib</div><div class="line">opencv_contrib248d.lib</div><div class="line">opencv_legacy248d.lib</div><div class="line">opencv_flann248d.lib</div><div class="line">libpngd.lib</div><div class="line">libtiffd.lib</div><div class="line">zlibd.lib</div><div class="line">IlmImfd.lib</div><div class="line">libjasperd.lib</div><div class="line">libjpegd.lib</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h3 id="各种坑点"><a href="#各种坑点" class="headerlink" title="各种坑点"></a>各种坑点</h3><ul>
<li><p><strong>静态库需要注意</strong>，<code>highgui</code>会需要下面这一堆。。。。库文件依赖里加一下（<strong>大坑</strong>）<br> <a href="http://stackoverflow.com/questions/8098272/opencv-unresolved-external-symbols-other-libraries-needed" target="_blank" rel="external">参考1</a>，<a href="http://blog.csdn.net/u011636160/article/details/51702368" target="_blank" rel="external">参考2</a></p>
  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">comctl32.lib</div><div class="line">vfw32.lib</div><div class="line">user32.lib</div><div class="line">gdi32.lib</div><div class="line">winmm.lib</div><div class="line">uuid.lib</div><div class="line">winspool.lib</div><div class="line">wsock32.lib</div><div class="line">rpcrt4.lib</div><div class="line">odbc32.lib</div><div class="line">oleaut32.lib</div><div class="line">advapi32.lib</div><div class="line">comdlg32.lib</div><div class="line">ole32.lib</div></pre></td></tr></table></figure>
</li>
<li><p><code>error LNK2038: 检测到“RuntimeLibrary”的不匹配项:  值“MTd_StaticDebug”不匹配值“MDd_DynamicDebug”</code><br><strong>解决方案：</strong><br>$在工程上右键\to 属性\to C/C++\to 代码生成\to 运行库$<br>有四个选项及含义分别如下：<br>多线程调试Dll (/MDd) 对应的是MD_DynamicDebug<br>多线程Dll (/MD) 对应的是MD_DynamicRelease<br>多线程(/MT) 对应的是MD_StaticRelease<br>多线程(/MTd)对应的是MD_StaticDebug<br><strong>根据错误提示修改即可</strong></p>
</li>
</ul>
<h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>$windows$有毒，$vs$有毒。。</p>
]]></content>
      
        <categories>
            
            <category> Doing </category>
            
            <category> Computer Vision </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[51nod 1610 路径计数（dp、容斥）]]></title>
      <url>/2016/09/23/51nod%201610%20%E8%B7%AF%E5%BE%84%E8%AE%A1%E6%95%B0%EF%BC%88dp%E3%80%81%E5%AE%B9%E6%96%A5%E5%8E%9F%E7%90%86%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意： </p>
<blockquote>
<p>$给定一个N\le 100点，M\le 5\times 10^4边的有向无环图$<br>$一条路径的值:=路径上所有边权的最大公约数$<br>$Q\le 500次修改操作，每次修改一条边的边权\le 100$<br>$每次修改后输出有向无环图上路径的值为1的路径数量，答案模10^9+7$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$修改1条边所能影响的是他的约数那些边，看数据发现每次询问最多只兹磁O(n^2)$<br>$暴力做是不行的，考虑对倍数容斥一下$<br>$f[div][i][j]:=值为div倍数的i\to j的方法数$<br>$根据拓扑序dp一下就得到dp[div][i]:=以i结尾的值为div倍数的方法数$<br>$g[i]:=值为i的倍数的方法数，h[i]:=值为i的方法数，这个容斥一下就好了$<br>$对于每次修改显然只影响约数那些，拿出来暴力重新dp，再容斥算答案就好了$<br>$本题约数级别是sqrt(100)也就是10，所以复杂度是O(100\times n^2+q\times 10\times 100^2)$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-08-29</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">5e4</span> + <span class="number">10</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line">LL f[N][N][N], g[N], h[N];</div><div class="line"><span class="comment">//x倍数的i-&gt;j的路径数, x的倍数的路径数, x的路径数</span></div><div class="line"></div><div class="line"><span class="keyword">int</span> u[M], v[M], c[M];</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[N], topo;</div><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; divisors[N];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">gao</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; ++i)</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt; N; j += i)</div><div class="line">            divisors[j].push_back(i);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, a, b) for(int i = a; i &lt;= b; ++i)</span></div><div class="line"></div><div class="line"><span class="function">LL <span class="title">calc</span><span class="params">(<span class="keyword">int</span> div)</span> </span>&#123;</div><div class="line">    LL sum = <span class="number">0</span>;</div><div class="line">    <span class="built_in">vector</span>&lt;LL&gt; dp(n + <span class="number">1</span>, <span class="number">0</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; topo.size(); ++i) &#123;</div><div class="line">        <span class="keyword">int</span> u = topo[i];</div><div class="line">        sum = (sum + dp[u]) % MOD;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; topo.size(); ++j) &#123;</div><div class="line">            <span class="keyword">int</span> v = topo[j];</div><div class="line">            dp[v] += f[div][u][v] * (<span class="number">1</span> + dp[u]);</div><div class="line">            dp[v] %= MOD;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> sum;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">solve</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">100</span>; i; --i) &#123;</div><div class="line">        h[i] = g[i];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i + i; j &lt;= <span class="number">100</span>; j += i) h[i] -= h[j];</div><div class="line">        h[i] = (h[i] % MOD + MOD) % MOD;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> h[<span class="number">1</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    gao();</div><div class="line"></div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; in(n + <span class="number">1</span>, <span class="number">0</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, u + i, v + i, c + i);</div><div class="line">        G[u[i]].push_back(v[i]); ++in[v[i]];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> div : divisors[c[i]]) ++f[div][u[i]][v[i]];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="keyword">if</span>(!in[i]) topo.push_back(i);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; topo.size(); ++i) &#123;</div><div class="line">        <span class="keyword">int</span> u = topo[i];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> v : G[u]) <span class="keyword">if</span>(--in[v] == <span class="number">0</span>) topo.push_back(v);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; ++i) g[i] = calc(i);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, solve());</div><div class="line"></div><div class="line">    <span class="keyword">int</span> q; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;q);</div><div class="line">    <span class="keyword">while</span>(q--) &#123;</div><div class="line">        <span class="keyword">int</span> x, y; <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</div><div class="line"></div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; affected;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> div : divisors[c[x]]) &#123;</div><div class="line">            --f[div][u[x]][v[x]];</div><div class="line">            affected.push_back(div);</div><div class="line">        &#125;</div><div class="line">        c[x] = y;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> div : divisors[c[x]]) &#123;</div><div class="line">            ++f[div][u[x]][v[x]];</div><div class="line">            affected.push_back(div);</div><div class="line">        &#125;</div><div class="line">        sort(affected.begin(), affected.end());</div><div class="line">        affected.resize(unique(affected.begin(), affected.end()) - affected.begin());</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> div : affected) g[div] = calc(div);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, solve());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 数学 </category>
            
            <category> 容斥 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 容斥 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CSU 1805 Three Capitals（BEST定理、MatrixTree定理）]]></title>
      <url>/2016/09/22/CSU%201805%20Three%20Capitals%EF%BC%88BEST%E5%AE%9A%E7%90%86%E3%80%81MatrixTree%E5%AE%9A%E7%90%86%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意： </p>
<blockquote>
<p>$给定无向图3个点A、B、G，AB间有a条边，AG间有b条边，BG间有c条边$<br>$求从A出发回到A的欧拉回路的个数，答案模10^9+7$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$叉姐给出1个有向图欧拉回路计数的定理$<br>$有向图欧拉回路的话，判定条件：连通，每个点入度=出度$<br>$有向图欧拉回路计数(BSET Theorem)：$<br>$ec(G)=t_s(G)\cdot deg(s)! \cdot \prod_{v\in V, v\ne s} (deg(v)-1)!, t_s(G):=以s为根的外向树的个数$<br>$注意特判1个点答案是1$<br>$生成树计数(Kirchhoff Theorem)：$<br>$基尔霍夫矩阵K=度数矩阵D-邻接矩阵A$<br>$重边：按照边数计算，自环：不计入度数$<br>$无向图生成树计数：c=|K的任意1个n-1阶主子式|$<br>$有向图外向树计数：c=|去掉根所在的那阶得到的主子式|$</p>
</blockquote>
<hr>
<blockquote>
<p>$以上是学习内容，这个题只要枚举一条边的其中1个方向的边数$<br>$然后根据欧拉回路判定性条件解出其他边的2个方向的边数$<br>$然后直接套定理解出个数，注意选边的时候要乘组合数$<br>$然后这个题就做完了，时间复杂度O(n)$</p>
</blockquote>
<p>$代码：$<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-09-07</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line">LL a[N][N], ans[N];</div><div class="line"><span class="keyword">bool</span> isFreeX[N];</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">gauss</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) isFreeX[i] = <span class="literal">false</span>;</div><div class="line">    LL ret = <span class="number">1</span>, neg = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> r = <span class="number">1</span>, c = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(; r &lt; n &amp;&amp; c &lt; m; ++r, ++c) &#123;</div><div class="line">        <span class="keyword">int</span> p = r;</div><div class="line">        <span class="keyword">for</span>(; p &lt; n; ++p) <span class="keyword">if</span>(a[p][c]) <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">if</span>(p == n) &#123;--r; isFreeX[c] = <span class="literal">true</span>; <span class="keyword">continue</span>;&#125;</div><div class="line">        <span class="keyword">if</span>(p != r) &#123;</div><div class="line">            neg ^= <span class="number">1</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = c; i &lt;= m; ++i) swap(a[p][i], a[r][i]);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//eliminate coefficient</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = r + <span class="number">1</span>; i &lt; n; ++i) &#123;</div><div class="line">            <span class="keyword">while</span>(a[i][c]) &#123;</div><div class="line">                LL delta = a[i][c] / a[r][c];</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = c; j &lt;= m; ++j) &#123;</div><div class="line">                    a[i][j] += MOD - delta * a[r][j] % MOD;</div><div class="line">                    a[i][j] %= MOD;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span>(!a[i][c]) <span class="keyword">break</span>;</div><div class="line">                neg ^= <span class="number">1</span>;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = c; j &lt;= m; ++j) swap(a[r][j], a[i][j]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(r != n) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; r; ++i) ret = ret * a[i][i] % MOD;</div><div class="line">    <span class="keyword">if</span>(neg) ret = (-ret + MOD) % MOD;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> A, B, C;</div><div class="line"><span class="keyword">int</span> deg[N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span>&amp; x, <span class="keyword">int</span> A)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(x &amp; <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    x /= <span class="number">2</span>;</div><div class="line">    <span class="keyword">return</span> x &gt;= <span class="number">0</span> &amp;&amp; x &lt;= A;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e5</span> + <span class="number">10</span>;</div><div class="line">LL fact[M], finv[M];</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">quick</span><span class="params">(LL x, LL n)</span> </span>&#123;</div><div class="line">    LL ret = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(; n; n &gt;&gt;= <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">if</span>(n &amp; <span class="number">1</span>) ret = ret * x % MOD;</div><div class="line">        x = x * x % MOD;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">comb</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(n &lt; m) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">return</span> fact[n] * finv[m] % MOD * finv[n - m] % MOD;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    fact[<span class="number">0</span>] = finv[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; M; ++i) &#123;</div><div class="line">        fact[i] = fact[i - <span class="number">1</span>] * i % MOD;</div><div class="line">        finv[i] = quick(fact[i], MOD - <span class="number">2</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;A, &amp;B, &amp;C) == <span class="number">3</span>) &#123;</div><div class="line">        LL ans = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>; x &lt;= A; ++x) &#123; <span class="comment">//x in-degrees from A; y from C, z from B</span></div><div class="line">            <span class="keyword">int</span> y = <span class="number">2</span> * x + C - A;</div><div class="line">            <span class="keyword">if</span>(!check(y, C)) <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">int</span> z = <span class="number">2</span> * y + B - C;</div><div class="line">            <span class="keyword">if</span>(!check(z, B)) <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">if</span>(x + B - z != A - x + z) <span class="keyword">continue</span>; <span class="comment">//check A</span></div><div class="line"></div><div class="line">            deg[<span class="number">0</span>] = x + B - z;</div><div class="line">            deg[<span class="number">1</span>] = y + A - x;</div><div class="line">            deg[<span class="number">2</span>] = z + C - y;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) a[i][i] = deg[i];</div><div class="line">            a[<span class="number">0</span>][<span class="number">1</span>] = -(A - x); a[<span class="number">0</span>][<span class="number">2</span>] = -z;</div><div class="line">            a[<span class="number">1</span>][<span class="number">0</span>] = -x;  a[<span class="number">1</span>][<span class="number">2</span>] = -(C - y);</div><div class="line">            a[<span class="number">2</span>][<span class="number">0</span>] = -(B - z); a[<span class="number">2</span>][<span class="number">1</span>] = -y;</div><div class="line"></div><div class="line">            LL cur = comb(A, x) * comb(C, y) % MOD * comb(B, z) % MOD;</div><div class="line"></div><div class="line">            <span class="comment">//BEST Theorem</span></div><div class="line">            cur = cur * gauss(<span class="number">3</span>, <span class="number">3</span>) % MOD;</div><div class="line">            cur = cur * deg[<span class="number">0</span>] % MOD;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) cur = cur * fact[deg[i] - <span class="number">1</span>] % MOD;</div><div class="line">            ans = (ans + cur) % MOD;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 图论 </category>
            
            <category> 生成树计数 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 生成树计数 </tag>
            
            <tag> 有向图欧拉回路计数 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[IFrog 1032 - A-B（容斥）]]></title>
      <url>/2016/09/22/IFrog%201032%20-%20A-B%EF%BC%88%E5%AE%B9%E6%96%A5%E5%8E%9F%E7%90%86%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意： </p>
<blockquote>
<p>$n\le 500个球，需要把他们放到m\le 500个盒子里，盒子不同，可以为空$<br>$要求拥有最多球的盒子唯一，问方案数，答案模998244353$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$容斥原理套路题，枚举最多球的个数x，令事件A_i:=i号盒子\ge x的解的方法数$<br>$显然E_x=$<img src="http://7xru22.com1.z0.glb.clouddn.com/16-9-21/99036938.jpg" alt=""><br>$所以容斥一波就好了，注意这里是有序的，所以容斥的时候要乘C(m-1, i)$<br>$因为选出1个盒子放最大的，最后插到m-1个盒子里有m种可能$<br>$对于n个球放进m个不同的盒子可以为空用隔板法来求，即calc(n, m)=C(n+m-1, m-1)$<br>$ans=m\sum_{x} E_x =m\sum_{x}\sum_{i=0}^{m-1} (-1)^i \cdot C(m-1, i) \cdot calc(m-1-x-i\times x, m-1)$<br>$阶乘预处理一下组合数，时间复杂度O(nm)$</p>
</blockquote>
<p>$代码：$<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-09-22</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">500</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">998244353</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">quick</span><span class="params">(LL x, LL n)</span> </span>&#123;</div><div class="line">    LL ret = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(; n; n &gt;&gt;= <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">if</span>(n &amp; <span class="number">1</span>) ret = ret * x % MOD;</div><div class="line">        x = x * x % MOD;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line">LL fact[N], invf[N];</div><div class="line"><span class="function">LL <span class="title">C</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(n &lt; m) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">return</span> fact[n] * invf[m] % MOD * invf[n - m] % MOD;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">calc</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> C(n + m - <span class="number">1</span>, m - <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">solve</span><span class="params">(<span class="keyword">int</span> lft, <span class="keyword">int</span> x, <span class="keyword">int</span> m)</span> </span>&#123;</div><div class="line">    LL ret = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m; ++i) &#123;</div><div class="line">        <span class="keyword">if</span>(lft - i * x &lt; <span class="number">0</span>) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">if</span>(i &amp; <span class="number">1</span>) ret -= C(m, i) * calc(lft - i * x, m) % MOD;</div><div class="line">        <span class="keyword">else</span> ret += C(m, i) * calc(lft - i * x, m) % MOD;</div><div class="line">        ret %= MOD;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> (ret + MOD) % MOD;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    fact[<span class="number">0</span>] = invf[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; ++i) &#123;</div><div class="line">        fact[i] = fact[i - <span class="number">1</span>] * i % MOD;</div><div class="line">        invf[i] = quick(fact[i], MOD - <span class="number">2</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m) &#123;</div><div class="line">        <span class="keyword">if</span>(m == <span class="number">1</span>) &#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">"1\n"</span>; <span class="keyword">continue</span>;&#125;</div><div class="line"></div><div class="line">        LL ans = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = n / m + <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">            ans += solve(n - i, i, m - <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        ans = ans * m % MOD;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 数学 </category>
            
            <category> 容斥 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 容斥 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Codeforces 451E. Devu and Flowers（容斥）]]></title>
      <url>/2016/09/21/Codeforces%20451E.%20Devu%20and%20Flowers%EF%BC%88%E5%AE%B9%E6%96%A5%E5%8E%9F%E7%90%86%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意： </p>
<blockquote>
<p>$求x_1+x_2+…+x_n\le s, x_1\le f1, x_2\le f_2,…,x_n\le f_n的方法数，答案模10^9 + 7$<br>$n\le 20, f_i\le 10^{12}, s\le 10^{14}$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$容斥原理套路题，令事件A_i:=至少x_i&gt;f_i的解的方法数$<br>$显然ans=$<img src="http://7xru22.com1.z0.glb.clouddn.com/16-9-21/99036938.jpg" alt=""><br>$所以容斥一波就好了，计算每个的时候，先把超过的部分减掉，剩下的就转化成了$<br>$left个物品装进n个盒子，盒子可以为空的问题，这个用隔板法就可以了$<br>$大组合数取模用lucas，组合数由于1个很小，直接暴力就可以了$</p>
</blockquote>
<p>$代码：$<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-09-17</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">quick</span><span class="params">(LL x, LL n)</span> </span>&#123;</div><div class="line">    LL ret = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(; n; n &gt;&gt;= <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">if</span>(n &amp; <span class="number">1</span>) ret = ret * x % MOD;</div><div class="line">        x = x * x % MOD;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">C</span><span class="params">(LL n, LL m)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(n &lt; m) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    m = min(m, n - m);</div><div class="line"></div><div class="line">    LL up = <span class="number">1</span>, dw = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</div><div class="line">        up = up * (n - i) % MOD;</div><div class="line">        dw = dw * (i + <span class="number">1</span>) % MOD;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> up * quick(dw, MOD - <span class="number">2</span>) % MOD;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">lucas</span><span class="params">(LL n, LL m)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(m == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">return</span> C(n % MOD, m % MOD) * lucas(n / MOD, m / MOD) % MOD;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">calc</span><span class="params">(LL n, LL m)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> lucas(n + m - <span class="number">1</span>, m - <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n;</div><div class="line">LL s, f[N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; s) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) <span class="built_in">cin</span> &gt;&gt; f[i];</div><div class="line"></div><div class="line">        LL ans = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1</span> &lt;&lt; n; ++i) &#123;</div><div class="line">            LL lft = s, cnt = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</div><div class="line">                <span class="keyword">if</span>(i &gt;&gt; j &amp; <span class="number">1</span>) &#123;</div><div class="line">                    lft -= f[j] + <span class="number">1</span>;</div><div class="line">                    ++cnt;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(lft &lt; <span class="number">0</span>) <span class="keyword">continue</span>;</div><div class="line"></div><div class="line">            <span class="keyword">if</span>(cnt &amp; <span class="number">1</span>) ans -= calc(lft, n);</div><div class="line">            <span class="keyword">else</span> ans += calc(lft, n);</div><div class="line">            ans %= MOD;</div><div class="line">        &#125;</div><div class="line">        ans = (ans + MOD) % MOD;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 数学 </category>
            
            <category> 容斥 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 容斥 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Codeforces 662C. Binary Table（FWT）]]></title>
      <url>/2016/09/21/Codeforces%20662C%20C.%20Binary%20Table%EF%BC%88FWT%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意： </p>
<blockquote>
<p>$给定N\times M的01矩阵，N\le 20，M\le 10^5，每次可以选择flip一行或者一列$<br>$求最后最少能有几个1$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$显然每行每列的决定都是翻还是不翻，所以一个很暴力的想法就是二进制枚举其中1个$<br>$我们得到了一个O(2^nm)的暴力做法，我们来表示一下这个做法$<br>$f[msk]=\sum_{i=1}^m min(Ones_{col_i \oplus msk}, n - Ones_{col_i \oplus msk} ), msk \in [0, 2^n)$<br>$事实上我们其实并不关心每个col_i \oplus msk是多少，只关心这些值有哪些，各有多少个$<br>$换句话说(其实就是往fwt凑)，令cnt_k为col_i=k的i有多少，式子变一下$<br>$f[msk]=\sum_{k \in [0, 2^n) }cnt_k\times min(Ones_{msk\oplus k}, n-Ones_{msk\oplus k})，然后这很卷积。。$<br>$然后就做完了，时间复杂度O(n 2^n)$</p>
</blockquote>
<p>$代码：$<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-09-21</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">fwtXor</span><span class="params">(LL* a, <span class="keyword">int</span> len)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(len == <span class="number">1</span>) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">int</span> h = len &gt;&gt; <span class="number">1</span>;</div><div class="line">    fwtXor(a, h);</div><div class="line">    fwtXor(a + h, h);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; h; ++i) &#123;</div><div class="line">        LL x1 = a[i];</div><div class="line">        LL x2 = a[i + h];</div><div class="line">        a[i] = (x1 + x2);</div><div class="line">        a[i + h] = (x1 - x2);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">ifwtXor</span><span class="params">(LL* a, <span class="keyword">int</span> len)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(len == <span class="number">1</span>) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">int</span> h = len &gt;&gt; <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; h; ++i) &#123;</div><div class="line">        <span class="comment">// y1=x1+x2</span></div><div class="line">        <span class="comment">// y2=x1-x2</span></div><div class="line">        LL y1 = a[i];</div><div class="line">        LL y2 = a[i + h];</div><div class="line">        a[i] = (y1 + y2) / <span class="number">2</span>;</div><div class="line">        a[i + h] = (y1 - y2) / <span class="number">2</span>;</div><div class="line">    &#125;</div><div class="line">    ifwtXor(a, h);</div><div class="line">    ifwtXor(a + h, h);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> C = <span class="number">1</span> &lt;&lt; <span class="number">20</span>;</div><div class="line"><span class="keyword">int</span> n, m, a[N];</div><div class="line"><span class="keyword">char</span> buf[N];</div><div class="line">LL cnt[C], f[C];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, buf);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j)</div><div class="line">            a[j] |= (buf[j] - <span class="string">'0'</span>) &lt;&lt; i;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) ++cnt[a[i]];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1</span> &lt;&lt; n; ++i) &#123;</div><div class="line">        <span class="keyword">int</span> b = __builtin_popcount(i);</div><div class="line">        f[i] = min(b, n - b);</div><div class="line">    &#125;</div><div class="line">    fwtXor(cnt, <span class="number">1</span> &lt;&lt; n);</div><div class="line">    fwtXor(f, <span class="number">1</span> &lt;&lt; n);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; C; ++i) f[i] *= cnt[i];</div><div class="line">    ifwtXor(f, <span class="number">1</span> &lt;&lt; n);</div><div class="line"></div><div class="line">    LL ans = INF;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1</span> &lt;&lt; n; ++i) ans = min(ans, f[i]);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, ans);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 数学 </category>
            
            <category> FFT/NTT/FWT </category>
            
        </categories>
        
        
        <tags>
            
            <tag> FWT </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[FWT小结]]></title>
      <url>/2016/09/10/FWT%E5%B0%8F%E7%BB%93/</url>
      <content type="html"><![CDATA[<h2 id="Ⅰ-快速沃尔什变换认知"><a href="#Ⅰ-快速沃尔什变换认知" class="headerlink" title="Ⅰ. 快速沃尔什变换认知"></a>Ⅰ. 快速沃尔什变换认知</h2><ul>
<li>这东西英文名叫$Fast Walsh$-$Hadamard Transform$</li>
<li>$FWT$是用来快速计算位运算卷积的，至于什么是卷积，可以先学习一下$FFT$</li>
<li><a href="https://www.zybuluo.com/TaoSama/note/171617" target="_blank" rel="external">FFT小结，点击链接</a></li>
<li>既然提到了位运算，必然要和子集扯上关系，也就是说可以来求子集卷积</li>
</ul>
<a id="more"></a>
<h2 id="Ⅱ-快速沃尔什变换"><a href="#Ⅱ-快速沃尔什变换" class="headerlink" title="Ⅱ. 快速沃尔什变换"></a>Ⅱ. 快速沃尔什变换</h2><h3 id="形式"><a href="#形式" class="headerlink" title="形式"></a>形式</h3><ul>
<li>类似于$FFT$的卷积形式，假设$\otimes$为卷积符号，对于$2$个等长的系数向量$\overrightarrow{a}$和$\overrightarrow{b}$</li>
<li>对于它们的卷积$\overrightarrow{c}=\overrightarrow{a}⊗\overrightarrow{b}$，有$C_k= \displaystyle \sum_{i\otimes j=k} A_i \times B_j$</li>
<li>其实当$\otimes$为$+$的时候，就是普通的卷积形式了</li>
</ul>
<h3 id="计算"><a href="#计算" class="headerlink" title="计算"></a>计算</h3><p> 假设$2$个向量长度都是$n$，那么暴力计算位运算卷积是$O(n^2)$的</p>
<h4 id="变换"><a href="#变换" class="headerlink" title="变换"></a>变换</h4><ul>
<li>类比$FFT$，假设我们知道一种类似于$DFT$的变换$tf$，可以使向量$X$产生一个新向量$tf(X)$</li>
<li>以及类似于$IDFT$的变换$utf$，能使得$utf(tf(X))=X$</li>
<li>并且变换$tf$必须具有这样的性质：$tf(X\otimes Y)=tf(X)\times tf(Y)$</li>
</ul>
<h4 id="分治"><a href="#分治" class="headerlink" title="分治"></a>分治</h4><ul>
<li>类比$FFT$，我们考虑分治，接下来为了方便，我们令$\otimes$为$xor$运算，即$\oplus$</li>
<li>令$Z=X\otimes Y$</li>
<li>考虑$X$和$Y$都只有$1$个元素的时候，此时不需要变换，显然有$Z_{0\oplus 0=0}=X_0 \times Y_0$，即满足$tf(X)=X=utf(X)$</li>
<li>考虑各有$2$个元素的时候，令$X=(a, b), Y=(c, d)$，此时$Z$<br>$Z_0=ac+bd, Z_1=ad+bc$，即$(a, b)\otimes (c, d)=(ac + bd, ad + bc)$</li>
</ul>
<hr>
<ul>
<li>令$tf(a, b) = (a - b, a + b)$<br>那么$tf(a, b) \times tf(c, d)$<br>$= (a - b, a + b) \times (c - d, c + d)$<br>$= ( (a-b)\times(c-d) , (a+b)\times(c+d) )$<br>$= ( ac - ad - bc + bd, ac + ad + bc + bd )$<br>$ = ( ac + bd - ad - bc, ac + bd + ad + bc )$<br>$= tf( ac + bd, ad + bc )$<br>$ = tf( (a,b) \otimes (c,d ) )$</li>
<li>显然我们可以发现，对于偶数长度的向量，均分成$2$个向量都满足这个性质</li>
<li>当然也可以用数学归纳法证一波，具体去看<a href="#Reference">Reference</a>里的证明吧</li>
<li>之后我们就可以利用这个性质来递归的变换</li>
<li>令$X$是个偶数长度的向量，且$X=(X1, X2)$，$X1$和$X2$各是$X$的一半</li>
<li>那么有$tf(X1, X2) = (tf(X1) - tf(X2), tf(X1) + tf(X2))$</li>
<li>具体就是先递归变换$2$个等长的子序列，$X1$和$X2$都递归变换过了，<br>那么新的$X1=X1-X2$，同理新的$X2=X1+X2$</li>
</ul>
<hr>
<ul>
<li>当然逆变换$utf$也很好构造，只需要反向回去就好了，每次解一下方程</li>
<li>令$Y1 = tf(X1) - tf(X2), Y2 = tf(X1) + tf(X2)$，<br>现在$Y1$和$Y2$已知，解出$tf(X1)$和$tf(X2)$即可</li>
</ul>
<h4 id="三种位运算变换总结"><a href="#三种位运算变换总结" class="headerlink" title="三种位运算变换总结"></a>三种位运算变换总结</h4><ul>
<li>$tfxor(A)=(tfxor(A_0+A_1), tfxor(A_0−A_1))$<br>$utfxor(A)=(utfxor( (A_0+A_1)/2), utfxor( (A_0−A_1)/2))$</li>
<li>$tfand(A)=(tfand(A_0+A_1), tfand(A_1))$<br>$utfand(A)=(utfand(A_0−A_1), utfand(A_1))$</li>
<li>$tfor(A)=(tfor(A_0), tfor(A_1+A_0))$<br>$utfor(A)=(utfor(A_0), utfor(A_1−A_0))$</li>
</ul>
<h3 id="时间复杂度与写法"><a href="#时间复杂度与写法" class="headerlink" title="时间复杂度与写法"></a>时间复杂度与写法</h3><ul>
<li>时间复杂度$T(n) = 2T(n/2)+O(n)$，根据主定理为$O(nlogn)$</li>
<li>写法就跟$FFT$类似了，先把长度扩展到$2$的幂次，之后按照前面说的分治就好了</li>
<li>具体可以参照下面的板子题</li>
</ul>
<h3 id="位运算卷积与子集卷积"><a href="#位运算卷积与子集卷积" class="headerlink" title="位运算卷积与子集卷积"></a>位运算卷积与子集卷积</h3><ul>
<li>我没有太深的理解，基本的理解就是，其实它们是共通的</li>
<li>把数看成二进制下的子集，那么 <code>&amp;</code> 便是集合交，<code>|</code> 是集合并，<code>^</code> 是集合对称差</li>
<li>所以很多时候题目可以从这$2$个角度都能说通，也提供了另一个思维方向</li>
</ul>
<h2 id="Ⅲ-题目选讲"><a href="#Ⅲ-题目选讲" class="headerlink" title="Ⅲ.  题目选讲"></a>Ⅲ.  题目选讲</h2><h3 id="IForg-1028-Bob-and-Alice-are-playing-numbers"><a href="#IForg-1028-Bob-and-Alice-are-playing-numbers" class="headerlink" title="IForg 1028 Bob and Alice are playing numbers"></a><a href="http://www.ifrog.net/acm/problem/1028" target="_blank" rel="external">IForg 1028 Bob and Alice are playing numbers</a></h3><p>分析：<br>板子题，$n$个数里选$2$个数进行三种位运算的最大值<br>数的大小只有$10^6$，$cnt[i]:=i$这个数出现了多少次<br>然后卷积一下自己，减去自己和自己的，倒着枚举找到最大的那个就做完了</p>
<p>代码:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-09-09</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">quick</span><span class="params">(LL x, LL n)</span> </span>&#123;</div><div class="line">    LL ret = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(; n; n &gt;&gt;= <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">if</span>(n &amp; <span class="number">1</span>) ret = ret * x % MOD;</div><div class="line">        x = x * x % MOD;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> LL invTwo = quick(<span class="number">2</span>, MOD - <span class="number">2</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">fwtXor</span><span class="params">(LL* a, <span class="keyword">int</span> len)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(len == <span class="number">1</span>) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">int</span> h = len &gt;&gt; <span class="number">1</span>;</div><div class="line">    fwtXor(a, h);</div><div class="line">    fwtXor(a + h, h);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; h; ++i) &#123;</div><div class="line">        LL x1 = a[i];</div><div class="line">        LL x2 = a[i + h];</div><div class="line">        a[i] = (x1 + x2) % MOD;</div><div class="line">        a[i + h] = (x1 - x2 + MOD) % MOD;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">ifwtXor</span><span class="params">(LL* a, <span class="keyword">int</span> len)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(len == <span class="number">1</span>) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">int</span> h = len &gt;&gt; <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; h; ++i) &#123;</div><div class="line">        <span class="comment">// y1=x1+x2</span></div><div class="line">        <span class="comment">// y2=x1-x2</span></div><div class="line">        LL y1 = a[i];</div><div class="line">        LL y2 = a[i + h];</div><div class="line">        a[i] = (y1 + y2) * invTwo % MOD;</div><div class="line">        a[i + h] = (y1 - y2 + MOD) * invTwo % MOD;</div><div class="line">    &#125;</div><div class="line">    ifwtXor(a, h);</div><div class="line">    ifwtXor(a + h, h);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">fwtAnd</span><span class="params">(LL* a, <span class="keyword">int</span> len)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(len == <span class="number">1</span>) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">int</span> h = len &gt;&gt; <span class="number">1</span>;</div><div class="line">    fwtAnd(a, h);</div><div class="line">    fwtAnd(a + h, h);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; h; ++i) &#123;</div><div class="line">        LL x1 = a[i];</div><div class="line">        LL x2 = a[i + h];</div><div class="line">        a[i] = (x1 + x2) % MOD;</div><div class="line">        a[i + h] = x2;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">ifwtAnd</span><span class="params">(LL* a, <span class="keyword">int</span> len)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(len == <span class="number">1</span>) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">int</span> h = len &gt;&gt; <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; h; ++i) &#123;</div><div class="line">        <span class="comment">// y1=x1+x2</span></div><div class="line">        <span class="comment">// y2=x2</span></div><div class="line">        LL y1 = a[i];</div><div class="line">        LL y2 = a[i + h];</div><div class="line">        a[i] = (y1 - y2 + MOD) % MOD;</div><div class="line">        a[i + h] = y2;</div><div class="line">    &#125;</div><div class="line">    ifwtAnd(a, h);</div><div class="line">    ifwtAnd(a + h, h);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">fwtOr</span><span class="params">(LL* a, <span class="keyword">int</span> len)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(len == <span class="number">1</span>) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">int</span> h = len &gt;&gt; <span class="number">1</span>;</div><div class="line">    fwtOr(a, h);</div><div class="line">    fwtOr(a + h, h);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; h; ++i) &#123;</div><div class="line">        LL x1 = a[i];</div><div class="line">        LL x2 = a[i + h];</div><div class="line">        a[i] = x1;</div><div class="line">        a[i + h] = (x2 + x1) % MOD;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">ifwtOr</span><span class="params">(LL* a, <span class="keyword">int</span> len)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(len == <span class="number">1</span>) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">int</span> h = len &gt;&gt; <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; h; ++i) &#123;</div><div class="line">        <span class="comment">// y1=x1</span></div><div class="line">        <span class="comment">// y2=x2+x1</span></div><div class="line">        LL y1 = a[i];</div><div class="line">        LL y2 = a[i + h];</div><div class="line">        a[i] = y1;</div><div class="line">        a[i + h] = (y2 - y1 + MOD) % MOD;</div><div class="line">    &#125;</div><div class="line">    ifwtOr(a, h);</div><div class="line">    ifwtOr(a + h, h);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, op;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> C = <span class="number">1</span> &lt;&lt; <span class="number">20</span>;</div><div class="line">LL a[N], cnt[C + <span class="number">10</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">gao</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = C; ~i; --i) <span class="keyword">if</span>(cnt[i]) <span class="keyword">return</span> i;</div><div class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">while</span>(t--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;op);</div><div class="line">        <span class="built_in">memset</span>(cnt, <span class="number">0</span>, <span class="keyword">sizeof</span> cnt);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, a + i);</div><div class="line">            ++cnt[a[i]];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">static</span> <span class="keyword">int</span> kase = <span class="number">0</span>;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d: "</span>, ++kase);</div><div class="line">        <span class="keyword">if</span>(op == <span class="number">1</span>) &#123;</div><div class="line">            fwtAnd(cnt, C);</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; C; ++i) cnt[i] = cnt[i] * cnt[i] % MOD;</div><div class="line">            ifwtAnd(cnt, C);</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) --cnt[a[i] &amp; a[i]];</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, gao());</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="number">2</span>) &#123;</div><div class="line">            fwtXor(cnt, C);</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; C; ++i) cnt[i] = cnt[i] * cnt[i] % MOD;</div><div class="line">            ifwtXor(cnt, C);</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) --cnt[a[i] ^ a[i]];</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, gao());</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            fwtOr(cnt, C);</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; C; ++i) cnt[i] = cnt[i] * cnt[i] % MOD;</div><div class="line">            ifwtOr(cnt, C);</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) --cnt[a[i] | a[i]];</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, gao());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="SRM-518-NIM"><a href="#SRM-518-NIM" class="headerlink" title="SRM 518 NIM"></a>SRM 518 NIM</h3><p>题意:<br>$2$个人玩$nim$游戏，能选$K\le 10^9$堆，每堆必须是素数$p_i\le L\le 10^6$，后手赢的方案数</p>
<p>分析:<br>$nim$游戏，由$SG$定理知，先手$xorsum$为$0$输，即后手赢<br>问题就变成了这个，之后就可以$dp$了，$f[i][j]:=$选$i$堆异或和为$j$的方法数<br>显然$f[1][j]$是知道的，转移是$f[i][j]=\displaystyle\sum_{x\oplus y=j} f[i-1][x] \times f[1][y]$<br>发现这是个$and$卷积的形式，答案就是卷积的$k$次幂，所以直接做就好了</p>
<p>主要代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">fwtXor(a, L)</div><div class="line">a[i] = a[i] ^ k</div><div class="line">ifwtXor(a, L)</div><div class="line">ans = a[0]</div></pre></td></tr></table></figure></p>
<h3 id="Codeforces-449D-Jzzhu-and-Numbers"><a href="#Codeforces-449D-Jzzhu-and-Numbers" class="headerlink" title="Codeforces 449D Jzzhu and Numbers"></a>Codeforces 449D Jzzhu and Numbers</h3><p>题意：<br>给定长度为$N\le 10^6$的数列，$A_i\le 10^6$，选出$0&lt;k\le N$个数<br>使得它们二进制与起来的值为$0$，求方法数<br>分析：<br>题解给了一个容斥的做法，是基于子集卷积的<br>$f[s]:=$子集状态为$s$的方法数，$g[s]:=s$中$1$的个数<br>$f[s]$可由$fwt$子集卷积变换得到，之后我们根据容斥原理：<br>$ans=2^n+\displaystyle\sum_{s=1}^{2^{20}-1}(-1)^{g(s)}\cdot2^{f(s)}$，这里空集被容斥掉了<br>事实上，可以不用自己容斥，无论是哪种理解，对于某个$f[s]$，可以随便选<br>即变成$2^{f[s]}$，然后再$ifwt$变换回去，答案就是$f[0]$，这里空集同样被容斥掉了<br>从这里我们看出其实卷积也有容斥的感觉<br>(试了一下代码发现$fwt$变换其实就是所谓的高维前缀和)</p>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-09-09</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">fwtAnd</span><span class="params">(LL* a, <span class="keyword">int</span> len)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(len == <span class="number">1</span>) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">int</span> h = len &gt;&gt; <span class="number">1</span>;</div><div class="line">    fwtAnd(a, h);</div><div class="line">    fwtAnd(a + h, h);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; h; ++i) &#123;</div><div class="line">        LL x1 = a[i];</div><div class="line">        LL x2 = a[i + h];</div><div class="line">        a[i] = (x1 + x2) % MOD;</div><div class="line">        a[i + h] = x2 % MOD;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">ifwtAnd</span><span class="params">(LL* a, <span class="keyword">int</span> len)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(len == <span class="number">1</span>) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">int</span> h = len &gt;&gt; <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; h; ++i) &#123;</div><div class="line">        <span class="comment">// y1=x1+x2</span></div><div class="line">        <span class="comment">// y2=x2</span></div><div class="line">        LL y1 = a[i];</div><div class="line">        LL y2 = a[i + h];</div><div class="line">        a[i] = (y1 - y2 + MOD) % MOD;</div><div class="line">        a[i + h] = y2 % MOD;</div><div class="line">    &#125;</div><div class="line">    ifwtAnd(a, h);</div><div class="line">    ifwtAnd(a + h, h);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> C = <span class="number">1</span> &lt;&lt; <span class="number">20</span>;</div><div class="line">LL cnt[C + <span class="number">10</span>], two[C + <span class="number">10</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    two[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; C; ++i) two[i] = two[i - <span class="number">1</span>] * <span class="number">2</span> % MOD;</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) == <span class="number">1</span>) &#123;</div><div class="line">        <span class="built_in">memset</span>(cnt, <span class="number">0</span>, <span class="keyword">sizeof</span> cnt);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">            <span class="keyword">int</span> x; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line">            ++cnt[x];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        fwtAnd(cnt, C);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; C; ++i) cnt[i] = two[cnt[i]];</div><div class="line">        ifwtAnd(cnt, C);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, cnt[<span class="number">0</span>]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://apps.topcoder.com/wiki/display/tc/SRM+518" target="_blank" rel="external">SRM 518 NIM官方题解，含有证明</a></li>
<li><a href="http://picks.logdown.com/posts/179290-fast-walsh-hadamard-transform" target="_blank" rel="external">PICKS关于FWT，构造方案</a></li>
<li><a href="http://www.chanmefang.com/index.php/2015/11/11/fwt/" target="_blank" rel="external">板子来源参考</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 小结 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Educational Codeforces Round 16（在线AC自动机、二进制分组）]]></title>
      <url>/2016/09/08/Educational%20Codeforces%20Round%2016%EF%BC%88%E5%9C%A8%E7%BA%BFAC%E8%87%AA%E5%8A%A8%E6%9C%BA%E3%80%81%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%88%86%E7%BB%84%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意： </p>
<blockquote>
<p>$给定N\le 3\times 10^5次操作，操作一个字符串集合$<br>$1 s:向集合添加字符串s$<br>$2 s:从集合删除字符串s$<br>$3 s:查询字符串s在集合的所有字符串中出现了多少次$<br>$保证添加和删除操作合法，且\sum |S|\le 3\times 10^5$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$首先兹磁这种操作的有ac自动机，但是ac自动机是个离线的数据结构$<br>$如何每次插入都build，那么总复杂度是1+2+\cdots+L=O(L^2)显然是不行的$<br>$考虑均摊一下build的复杂度，维护一大一小ac自动机big、small$<br>$每次添加和删除操作都往small的搞，每次都build，small如果大了就暴力合并到big上$<br>$设总长是L，假设1个阈值D\le L，那么小的build满的复杂度是1+2+\cdots+D=O(D^2)$<br>$显然一共有{L\over D}轮，这个复杂度是O({L\over D}\times D^2)=O(LD)$<br>$把small合并到big上，每次都build，这个复杂度第k次是kD$<br>$同理一共有{L\over D}轮，这个复杂度是D+2D+\cdots=O({L\over D}\times D+({L\over D})^2\times D)=O({L^2\over D})$<br>$那么总复杂度就是O(D^2+{L^2\over D})=O({L^2\over D})$<br>$显然当D=\sqrt L时，复杂度最好为O(L^{1.5})$</p>
</blockquote>
<hr>
<blockquote>
<p>$类似的我们还可以维护2^i大小的AC自动机，根据同样的复杂度分析$<br>$直观来讲每个字符移动了log次，所以总复杂度是O(LlogL)$</p>
<p>$对于这种做法我们称之为二进制分组，对于这种贡献独立的题$<br>$我们以一个log的代价来让离线在线$</p>
</blockquote>
<hr>
<blockquote>
<p>$懒的写内存池了，直接用容器写数据结构了，跑的比数组还快。。$<br>$O2真可怕，看了下别人用了map写的比我的快了一倍$</p>
</blockquote>
<p>$代码：$<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-08-23</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ACAutomata</span> &#123;</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> S = <span class="number">26</span>;</div><div class="line">    <span class="keyword">int</span> sz, root;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; nxt;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; fail, cnt;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">idx</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123;<span class="keyword">return</span> c - <span class="string">'a'</span>;&#125;</div><div class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">newNode</span><span class="params">()</span> </span>&#123;</div><div class="line">        cnt.push_back(<span class="number">0</span>);</div><div class="line">        nxt.push_back(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(S, <span class="number">0</span>));</div><div class="line">        <span class="keyword">return</span> sz++;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">        sz = <span class="number">0</span>;</div><div class="line">        nxt.clear();</div><div class="line">        cnt.clear();</div><div class="line">        fail.clear();</div><div class="line">        root = newNode();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* s, <span class="keyword">int</span> d)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> u = root;</div><div class="line">        <span class="keyword">for</span>(; *s; ++s) &#123;</div><div class="line">            <span class="keyword">int</span> c = idx(*s);</div><div class="line">            <span class="keyword">int</span>&amp; v = nxt[u][c];</div><div class="line">            <span class="keyword">if</span>(!v) v = newNode();</div><div class="line">            u = v;</div><div class="line">        &#125;</div><div class="line">        cnt[u] += d;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; q;</div><div class="line">        fail.resize(nxt.size());</div><div class="line">        fail[root] = root;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; S; ++i) &#123;</div><div class="line">            <span class="keyword">int</span>&amp; v = nxt[root][i];</div><div class="line">            <span class="keyword">if</span>(v) &#123;</div><div class="line">                fail[v] = root;</div><div class="line">                q.push_back(v);</div><div class="line">            &#125; <span class="keyword">else</span> v = root;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; q.size(); ++k) &#123;</div><div class="line">            <span class="keyword">int</span> u = q[k];</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; S; ++i) &#123;</div><div class="line">                <span class="keyword">int</span>&amp; v = nxt[u][i];</div><div class="line">                <span class="keyword">if</span>(v) &#123;</div><div class="line">                    fail[v] = nxt[fail[u]][i];</div><div class="line">                    cnt[v] += cnt[nxt[fail[u]][i]];</div><div class="line">                    q.push_back(v);</div><div class="line">                &#125; <span class="keyword">else</span> v = nxt[fail[u]][i];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function">LL <span class="title">query</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* s)</span> </span>&#123;</div><div class="line">        LL ret = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> u = root;</div><div class="line">        <span class="keyword">for</span>(; *s; ++s) &#123;</div><div class="line">            <span class="keyword">int</span> c = idx(*s);</div><div class="line">            u = nxt[u][c];</div><div class="line">            ret += cnt[u];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">int</span> q, op[N];</div><div class="line"><span class="built_in">string</span> s[N];</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">StaticToDynamic</span> &#123;</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> LOG = <span class="number">20</span>;</div><div class="line">    ACAutomata ac[LOG];</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; g[LOG];</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; LOG; ++i) &#123;</div><div class="line">            g[i].clear();</div><div class="line">            ac[i].init();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">inline</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> x == <span class="number">1</span> ? <span class="number">1</span> : <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> p = <span class="number">-1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; LOG &amp;&amp; !~p; ++i) <span class="keyword">if</span>(g[i].empty()) p = i;</div><div class="line">        g[p].push_back(id);</div><div class="line">        ac[p].insert(s[id].c_str(), get(op[id]));</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; p; ++i) &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> id : g[i]) &#123;</div><div class="line">                g[p].push_back(id);</div><div class="line">                ac[p].insert(s[id].c_str(), get(op[id]));</div><div class="line">            &#125;</div><div class="line">            g[i].clear();</div><div class="line">            ac[i].init();</div><div class="line">        &#125;</div><div class="line">        ac[p].build();</div><div class="line">    &#125;</div><div class="line">    <span class="function">LL <span class="title">query</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">        LL ret = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; LOG; ++i) ret += ac[i].query(s[id].c_str());</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line">&#125; solver;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; q) &#123;</div><div class="line">        solver.init();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; ++i) &#123;</div><div class="line">            <span class="built_in">cin</span> &gt;&gt; op[i] &gt;&gt; s[i];</div><div class="line">            <span class="keyword">if</span>(op[i] &lt;= <span class="number">2</span>) &#123;</div><div class="line">                solver.add(i);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="built_in">cout</span> &lt;&lt; solver.query(i) &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<p>别人的：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">AC</span> &#123;</span></div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; keys;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">map</span>&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt;&gt; trie;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; endp;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; fail;</div><div class="line">    AC() &#123;</div><div class="line">        trie.resize(<span class="number">1</span>);</div><div class="line">        endp.resize(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">reset</span><span class="params">()</span> </span>&#123;</div><div class="line">        keys.clear();</div><div class="line">        trie.clear();</div><div class="line">        endp.clear();</div><div class="line">        fail.clear();</div><div class="line">        trie.resize(<span class="number">1</span>);</div><div class="line">        endp.resize(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add_string</span><span class="params">(<span class="built_in">string</span>&amp; s)</span> </span>&#123;</div><div class="line">        keys.push_back(s);</div><div class="line">        <span class="keyword">int</span> cur = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="keyword">int</span>)s.length(); i++) &#123;</div><div class="line">            <span class="keyword">if</span>(trie[cur].count(s[i]))</div><div class="line">                cur = trie[cur][s[i]];</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                cur = trie[cur][s[i]] = trie.size();</div><div class="line">                trie.push_back(<span class="built_in">map</span>&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt;());</div><div class="line">                endp.push_back(<span class="number">0</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        endp[cur]++;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span> </span>&#123;</div><div class="line">        fail.resize(trie.size());</div><div class="line">        <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, pair&lt;<span class="keyword">int</span>, <span class="keyword">char</span>&gt;&gt;&gt; Q;</div><div class="line">        Q.push_back(&#123;<span class="number">0</span>, &#123;<span class="number">0</span>, <span class="string">'\0'</span>&#125;&#125;);</div><div class="line">        fail[<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="keyword">int</span>)Q.size(); i++) &#123;</div><div class="line">            <span class="keyword">int</span> u = Q[i].first;</div><div class="line">            <span class="keyword">int</span> p = Q[i].second.first;</div><div class="line">            <span class="keyword">char</span> c = Q[i].second.second;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; it : trie[u])</div><div class="line">                Q.push_back(&#123;it.second, &#123;u, it.first&#125;&#125;);</div><div class="line">            <span class="keyword">if</span>(u == <span class="number">0</span>)</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">int</span> f = fail[p];</div><div class="line">            <span class="keyword">while</span>(f != <span class="number">0</span> &amp;&amp; !trie[f].count(c))</div><div class="line">                f = fail[f];</div><div class="line">            <span class="keyword">if</span>(!trie[f].count(c) || trie[f][c] == u)</div><div class="line">                fail[u] = <span class="number">0</span>;</div><div class="line">            <span class="keyword">else</span></div><div class="line">                fail[u] = trie[f][c];</div><div class="line">            endp[u] += endp[fail[u]];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">count</span><span class="params">(<span class="built_in">string</span>&amp; s)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(keys.empty())</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">long</span> <span class="keyword">long</span> ret = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> cur = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="keyword">int</span>)s.length(); i++) &#123;</div><div class="line">            <span class="keyword">while</span>(cur != <span class="number">0</span> &amp;&amp; !trie[cur].count(s[i]))</div><div class="line">                cur = fail[cur];</div><div class="line">            <span class="keyword">if</span>(trie[cur].count(s[i]))</div><div class="line">                cur = trie[cur][s[i]];</div><div class="line">            ret += endp[cur];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">StaticToDynamic</span> &#123;</span></div><div class="line">    AC ac[<span class="number">19</span>];</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="built_in">string</span>&amp; s)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> k = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">19</span>; i++) <span class="keyword">if</span>(ac[i].keys.empty()) &#123;</div><div class="line">                k = i;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        ac[k].add_string(s);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; it : ac[i].keys)</div><div class="line">                ac[k].add_string(it);</div><div class="line">            ac[i].reset();</div><div class="line">        &#125;</div><div class="line">        ac[k].build();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">count</span><span class="params">(<span class="built_in">string</span>&amp; s)</span> </span>&#123;</div><div class="line">        <span class="keyword">long</span> <span class="keyword">long</span> ret = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">19</span>; i++)</div><div class="line">            ret += ac[i].count(s);</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line">&#125; r, g;</div><div class="line"></div><div class="line"><span class="keyword">char</span> buf[<span class="number">300001</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> N;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;N);</div><div class="line">    <span class="keyword">while</span>(N--) &#123;</div><div class="line">        <span class="keyword">int</span> t;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%s"</span>, &amp;t, buf);</div><div class="line">        string s(buf, buf + strlen(buf));</div><div class="line">        <span class="keyword">if</span>(t == <span class="number">1</span>)</div><div class="line">            r.add(s);</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(t == <span class="number">2</span>)</div><div class="line">            g.add(s);</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, r.count(s) - g.count(s));</div><div class="line">            fflush(<span class="built_in">stdout</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 字符串 </category>
            
            <category> AC自动机 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 二进制分组 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[POJ 2482 Stars in Your Window（扫描线、线段树）]]></title>
      <url>/2016/08/29/POJ%202482%20Stars%20in%20Your%20Window%EF%BC%88%E6%89%AB%E6%8F%8F%E7%BA%BF%E3%80%81%E7%BA%BF%E6%AE%B5%E6%A0%91%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意： </p>
<blockquote>
<p>$给定N\le 10^4个星星，每个有权值1\le w_i\le 100$<br>$现有W\times H的矩形，问能严格框住的星星最大权值和是多少$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$考虑把问题转化一下，先不管严格框住，考虑极限情况，一个星星位于左下角$<br>$那么就可以得到框住它的矩形是(x, y)，(x+w, y+h)了$<br>$问题就转化成了类似于矩形面积并的问题，不过这里是求最大值$<br>$之后扫描线一波、线段树区间更新一波就好了$<br>$对于严格的情况，闭区间，可以把y+h变成y+h-1，w+h变成w+h-1$<br>$但是扫描线的时候要注意，因为是闭区间了，所以当重合的时候，要先添加再删除$<br>$当然扫描线每次都要注意这个的。。$<br>$嘛，只有查询maxv[1]，写个标记永久化偷懒不用pushDown$<br>$时间复杂度O(nlogn)$</p>
</blockquote>
<p>$代码：$<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-08-24</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e4</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line">LL x[N], y[N], r[N];</div><div class="line">LL maxv[N &lt;&lt; <span class="number">3</span>], addv[N &lt;&lt; <span class="number">3</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> v, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> rt)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R) &#123;</div><div class="line">        maxv[rt] += v;</div><div class="line">        addv[rt] += v;</div><div class="line">        <span class="keyword">return</span> ;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> m = l + r &gt;&gt; <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span>(L &lt;= m) update(L, R, v, l, m, rt &lt;&lt; <span class="number">1</span>);</div><div class="line">    <span class="keyword">if</span>(R &gt; m) update(L, R, v, m + <span class="number">1</span>, r, rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">    maxv[rt] = max(maxv[rt &lt;&lt; <span class="number">1</span>], maxv[rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]) + addv[rt];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, w, h;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> y1 fddsfsdfds</span></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Line</span> &#123;</span></div><div class="line">    LL x, d, y1, y2;</div><div class="line">    Line() &#123;&#125;</div><div class="line">    Line(LL x, LL d, LL y1, LL y2): x(x), d(d), y1(y1), y2(y2) &#123;&#125;</div><div class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Line&amp; l) <span class="keyword">const</span> &#123;</div><div class="line">        <span class="keyword">if</span>(x == l.x) <span class="keyword">return</span> d &lt; l.d;</div><div class="line">        <span class="keyword">return</span> x &lt; l.x;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;w, &amp;h) == <span class="number">3</span>) &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;LL&gt; ys;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld"</span>, x + i, y + i, r + i);</div><div class="line">            ys.push_back(y[i]);</div><div class="line">            ys.push_back(y[i] + h - <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        sort(ys.begin(), ys.end());</div><div class="line">        ys.resize(unique(ys.begin(), ys.end()) - ys.begin());</div><div class="line"></div><div class="line">        <span class="built_in">vector</span>&lt;Line&gt; events;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">            LL y1 = lower_bound(ys.begin(), ys.end(), y[i]) - ys.begin() + <span class="number">1</span>;</div><div class="line">            LL y2 = lower_bound(ys.begin(), ys.end(), y[i] + h - <span class="number">1</span>) - ys.begin() + <span class="number">1</span>;</div><div class="line">            events.push_back(Line(x[i], -r[i], y1, y2)); <span class="comment">//+ first</span></div><div class="line">            events.push_back(Line(x[i] + w - <span class="number">1</span>, r[i], y1, y2)); </div><div class="line">        &#125;</div><div class="line">        sort(events.begin(), events.end());</div><div class="line"></div><div class="line">        <span class="built_in">memset</span>(maxv, <span class="number">0</span>, <span class="keyword">sizeof</span> maxv);</div><div class="line">        <span class="built_in">memset</span>(addv, <span class="number">0</span>, <span class="keyword">sizeof</span> addv);</div><div class="line"></div><div class="line">        LL ans = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; events.size(); ++i) &#123;</div><div class="line">            Line&amp; e = events[i];</div><div class="line">            LL d = -e.d, y1 = e.y1, y2 = e.y2;</div><div class="line">            update(y1, y2, d, <span class="number">1</span>, ys.size(), <span class="number">1</span>);</div><div class="line"><span class="comment">//            pr(e.x); pr(d);pr(y1);pr(y2);prln(maxv[1]);</span></div><div class="line">            ans = max(ans, maxv[<span class="number">1</span>]);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 计算几何 </category>
            
            <category> 扫描线 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 扫描线 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[POJ 3168 Barn Expansion（扫描线）]]></title>
      <url>/2016/08/29/POJ%203168%20Barn%20Expansion%EF%BC%88%E6%89%AB%E6%8F%8F%E7%BA%BF%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意： </p>
<blockquote>
<p>$给定N\le 2.5\times 10^4个矩形，保证没有重合，且任何边相切或者顶点重合的是不好的$<br>$问最后还有几个好的$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$- - 一眼扫描线了，关键是y轴怎么搞$<br>$蓝儿扫描线的时候自己太naive复杂度爆炸$<br>$事实上把矩形看作4个事件，y方向各自1个出入$<br>$然后我们发现相切的情况实际上就是前缀和\ge 2$<br>$嘛，注意顶点的情况，这个时候要先算进入事件$<br>$时间复杂度O(nlogn)$</p>
</blockquote>
<p>$代码：$<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-08-24</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="keyword">int</span> bx[N], by[N], ux[N], uy[N];</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Line</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> x, y, id;</div><div class="line">    Line() &#123;&#125;</div><div class="line">    Line(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> id): x(x), y(y), id(id) &#123;&#125;</div><div class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Line&amp; l) <span class="keyword">const</span> &#123;</div><div class="line">        <span class="keyword">if</span>(x == l.x) &#123;</div><div class="line">            <span class="keyword">if</span>(y == l.y) <span class="keyword">return</span> id &lt; l.id; <span class="comment">//+ first</span></div><div class="line">            <span class="keyword">return</span> y &lt; l.y;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> x &lt; l.x;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; bad, <span class="keyword">int</span>* bx, <span class="keyword">int</span>* ux, <span class="keyword">int</span>* by, <span class="keyword">int</span>* uy)</span> </span>&#123;</div><div class="line">    <span class="built_in">vector</span>&lt;Line&gt; events;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">        events.push_back(Line(bx[i], by[i], -i));</div><div class="line">        events.push_back(Line(bx[i], uy[i], i));</div><div class="line">        events.push_back(Line(ux[i], by[i], -i));</div><div class="line">        events.push_back(Line(ux[i], uy[i], i));</div><div class="line">    &#125;</div><div class="line">    sort(events.begin(), events.end());</div><div class="line"></div><div class="line">    <span class="keyword">int</span> sum = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; events.size(); ++i) &#123;</div><div class="line">        sum += events[i].id &lt; <span class="number">0</span> ? <span class="number">1</span> : <span class="number">-1</span>;</div><div class="line">        <span class="keyword">int</span> preID = <span class="built_in">abs</span>(events[i - <span class="number">1</span>].id), curID = <span class="built_in">abs</span>(events[i].id);</div><div class="line">        <span class="keyword">if</span>(sum &gt;= <span class="number">2</span>) bad[preID] = bad[curID] = <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) == <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, bx + i, by + i, ux + i, uy + i);</div><div class="line"></div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; bad(n + <span class="number">1</span>, <span class="literal">false</span>);</div><div class="line">        solve(bad, bx, ux, by, uy);</div><div class="line">        solve(bad, by, uy, bx, ux);</div><div class="line"></div><div class="line">        <span class="keyword">int</span> ans = n - count(bad.begin(), bad.end(), <span class="literal">true</span>);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 计算几何 </category>
            
            <category> 扫描线 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 扫描线 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[POJ 1418 Viva Confetti（极角扫描）]]></title>
      <url>/2016/08/29/POJ%201418%20Viva%20Confetti%EF%BC%88%E6%9E%81%E8%A7%92%E6%89%AB%E6%8F%8F%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意： </p>
<blockquote>
<p>$给定N\le 100个圆，按输入顺序1个1个放，问最后能看到哪些圆$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$这个题的做法来自于题解了，感觉我也是似懂非懂$<br>$考虑对于每个圆来说与其他圆的相交部分，是一段圆弧，极角表示法$<br>$极角排序后，对于任意2个交点的每段圆弧，求它们的中点$<br>$之后向内向外偏移一点，求上面那个第一个盖住它的就是可以看见的$<br>$由于是从下往上找的，所以最后留下的就是都可以看见的$<br>$时间复杂度O(n^3logn)$</p>
</blockquote>
<p>$代码：$<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-08-23</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;complex&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">complex</span>&lt;<span class="keyword">double</span>&gt; P;</div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> EPS = <span class="number">5e-13</span>, PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</div><div class="line"></div><div class="line"><span class="keyword">int</span> n;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">double</span> <span class="title">normalize</span><span class="params">(<span class="keyword">double</span> r)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(r &lt; <span class="number">0.0</span>) r += <span class="number">2</span> * PI;</div><div class="line">    <span class="keyword">if</span>(r &gt;= <span class="number">2</span> * PI) r -= <span class="number">2</span> * PI;</div><div class="line">    <span class="keyword">return</span> r;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) == <span class="number">1</span> &amp;&amp; n) &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;P&gt; ps(n);</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; rs(n);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</div><div class="line">            <span class="keyword">double</span> x, y, r;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%lf%lf%lf"</span>, &amp;x, &amp;y, &amp;r);</div><div class="line">            ps[i] = P(x, y);</div><div class="line">            rs[i] = r;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; visible(n, <span class="number">0</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</div><div class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; angles;</div><div class="line">            angles.push_back(<span class="number">0</span>);</div><div class="line">            angles.push_back(<span class="number">2</span> * PI);</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</div><div class="line">                <span class="keyword">if</span>(i == j) <span class="keyword">continue</span>;</div><div class="line">                P v = ps[j] - ps[i];</div><div class="line">                <span class="keyword">double</span> a = <span class="built_in">abs</span>(v);</div><div class="line">                <span class="keyword">double</span> b = rs[i];</div><div class="line">                <span class="keyword">double</span> c = rs[j];</div><div class="line">                <span class="keyword">if</span>(a + b &lt; c || a + c &lt; b || b + c &lt; a) <span class="keyword">continue</span>;</div><div class="line"></div><div class="line">                <span class="keyword">double</span> angle = arg(v);</div><div class="line">                <span class="keyword">double</span> delta = <span class="built_in">acos</span>((a * a + b * b - c * c) / (<span class="number">2</span> * a * b));</div><div class="line">                angles.push_back(normalize(angle - delta));</div><div class="line">                angles.push_back(normalize(angle + delta));</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            sort(angles.begin(), angles.end());</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j + <span class="number">1</span> &lt; angles.size(); ++j) &#123;</div><div class="line">                <span class="keyword">double</span> theta = (angles[j] + angles[j + <span class="number">1</span>]) / <span class="number">2</span>;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> d = <span class="number">-1</span>; d &lt;= <span class="number">1</span>; d += <span class="number">2</span>) &#123;</div><div class="line">                    P o = ps[i] + polar(rs[i] + d * EPS, theta);</div><div class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> k = n - <span class="number">1</span>; ~k; --k) &#123;</div><div class="line">                        <span class="keyword">if</span>(<span class="built_in">abs</span>(ps[k] - o) &lt; rs[k]) &#123;</div><div class="line">                            visible[k] = <span class="literal">true</span>;</div><div class="line">                            <span class="keyword">break</span>;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> ans = count(visible.begin(), visible.end(), <span class="literal">true</span>);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 计算几何 </category>
            
            <category> 极角扫描 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 极角扫描 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[AOJ 1313 Intersection of Two Prisms（数值积分）]]></title>
      <url>/2016/08/28/AOJ%201313%20Intersection%20of%20Two%20Prisms%EF%BC%88%E6%95%B0%E5%80%BC%E7%A7%AF%E5%88%86%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意： </p>
<blockquote>
<p>$三维平面2个棱柱的交体积$<br>$一个底面在XOY平面，Z轴无限延伸，一个底面在XOZ平面，Y轴无限延伸$<br>$2个凸多边形顶点数分别为N\le 100，M\le 100$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$考虑x=a平面对于2个棱柱的切面，切面在YOZ平面的投影是个矩形$<br>$之后用这个矩形对x积分就得到了交体积$<br>$直接用Simpson近似一下就好了，具体的话拿出x的每一段就好了$<br>$由于体积就3次函数不是很高，并且要求精度才3位，就不需要自适应了$<br>$时间复杂度O(n^2)$</p>
</blockquote>
<p>$代码：$<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-08-23</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> y1 asdadasdasd</span></div><div class="line"></div><div class="line"><span class="keyword">int</span> m, n;</div><div class="line"><span class="keyword">double</span> x1[N], y1[N], x2[N], z2[N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">double</span> <span class="title">width</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span>* x, <span class="keyword">double</span>* y, <span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    <span class="keyword">double</span> l = INF, r = -INF;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">        <span class="keyword">double</span> x1 = x[i], x2 = x[i + <span class="number">1</span>], y1 = y[i], y2 = y[i + <span class="number">1</span>];</div><div class="line">        <span class="keyword">if</span>((a - x1) * (a - x2) &lt;= <span class="number">0</span>) &#123; <span class="comment">//intersect</span></div><div class="line">            <span class="keyword">double</span> b = y1 + (y2 - y1) * (a - x1) / (x2 - x1);</div><div class="line">            l = min(l, b);</div><div class="line">            r = max(r, b);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> max(<span class="number">0.0</span>, r - l);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">double</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">double</span> ret = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">double</span> minX = *min_element(x1 + <span class="number">1</span>, x1 + <span class="number">1</span> + m);</div><div class="line">    <span class="keyword">double</span> maxX = *max_element(x1 + <span class="number">1</span>, x1 + <span class="number">1</span> + m);</div><div class="line">    minX = max(minX, *min_element(x2 + <span class="number">1</span>, x2 + <span class="number">1</span> + n));</div><div class="line">    maxX = min(maxX, *max_element(x2 + <span class="number">1</span>, x2 + <span class="number">1</span> + n));</div><div class="line"></div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; xs;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</div><div class="line">        <span class="keyword">if</span>(x1[i] &gt;= minX &amp;&amp; x1[i] &lt;= maxX)</div><div class="line">            xs.push_back(x1[i]);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</div><div class="line">        <span class="keyword">if</span>(x2[i] &gt;= minX &amp;&amp; x2[i] &lt;= maxX)</div><div class="line">            xs.push_back(x2[i]);</div><div class="line"></div><div class="line">    sort(xs.begin(), xs.end());</div><div class="line">    xs.resize(unique(xs.begin(), xs.end()) - xs.begin());</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i + <span class="number">1</span> &lt; xs.size(); ++i) &#123;</div><div class="line">        <span class="keyword">double</span> a = xs[i], b = xs[i + <span class="number">1</span>], c = (a + b) / <span class="number">2</span>;</div><div class="line">        <span class="keyword">double</span> fa = width(a, x1, y1, m) * width(a, x2, z2, n);</div><div class="line">        <span class="keyword">double</span> fb = width(b, x1, y1, m) * width(b, x2, z2, n);</div><div class="line">        <span class="keyword">double</span> fc = width(c, x1, y1, m) * width(c, x2, z2, n);</div><div class="line">        ret += (b - a) / <span class="number">6</span> * (fa + <span class="number">4</span> * fc + fb);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;m, &amp;n) == <span class="number">2</span> &amp;&amp; (m || n)) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) <span class="built_in">scanf</span>(<span class="string">"%lf%lf"</span>, x1 + i, y1 + i);</div><div class="line">        x1[m + <span class="number">1</span>] = x1[<span class="number">1</span>], y1[m + <span class="number">1</span>] = y1[<span class="number">1</span>];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">"%lf%lf"</span>, x2 + i, z2 + i);</div><div class="line">        x2[n + <span class="number">1</span>] = x2[<span class="number">1</span>], z2[n + <span class="number">1</span>] = z2[<span class="number">1</span>];</div><div class="line"></div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%.12f\n"</span>, solve());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 计算几何 </category>
            
            <category> 数值积分 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数值积分 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[POJ 1981 Circle and Points（极限情况、极角扫描）]]></title>
      <url>/2016/08/28/POJ%201981%20Circle%20and%20Points%EF%BC%88%E6%9E%81%E9%99%90%E6%83%85%E5%86%B5%E3%80%81%E6%9E%81%E8%A7%92%E6%89%AB%E6%8F%8F%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意： </p>
<blockquote>
<p>$N\le 300个点，问1个单位圆最多能包住几个点，在边界上也可以$<br>$保证最多只有2个点在圆上$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$极限情况辣，肯定是有2个点在圆上的，暴力枚举2个点是n^2$<br>$然后几何姿势找到圆心，转转向量啥的，之后再看有多个在圆内，O(n^3)$<br>$蓝儿其实可以不这么想，考虑能包住每个点的圆是啥样的$<br>$也就是说每个点作为圆心的单位圆，对于任意2个点能共同包住的部分显然是相交的那部分$<br>$这是一个圆弧，我们可以用极角来表示这些圆弧，进入角度和出去角度$<br>$事实上对于每个点，和其他点的形成的圆交的圆弧，求一个并，那么最大的并就是答案了$<br>$至于求并，极角排序以后，+1-1极角扫描合并就可以了$<br>$时间复杂度O(n^2logn)$</p>
</blockquote>
<p>$代码O(n^3)：$<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-08-23</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">300</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> EPS = <span class="number">1e-8</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">sgn</span><span class="params">(<span class="keyword">double</span> x)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> x &lt; -EPS ? <span class="number">-1</span> : x &gt; EPS;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> &#123;</span></div><div class="line">    <span class="keyword">double</span> x, y;</div><div class="line">    Point() &#123;&#125;</div><div class="line">    Point(<span class="keyword">double</span> x, <span class="keyword">double</span> y): x(x), y(y) &#123;&#125;</div><div class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%lf%lf"</span>, &amp;x, &amp;y);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">inline</span> Point <span class="keyword">operator</span>+(<span class="keyword">const</span> Point&amp; p) <span class="keyword">const</span> &#123;</div><div class="line">        <span class="keyword">return</span> Point(x + p.x, y + p.y);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">inline</span> Point <span class="keyword">operator</span>-(<span class="keyword">const</span> Point&amp; p) <span class="keyword">const</span> &#123;</div><div class="line">        <span class="keyword">return</span> Point(x - p.x, y - p.y);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">inline</span> Point <span class="keyword">operator</span>*(<span class="keyword">const</span> <span class="keyword">double</span>&amp; k) <span class="keyword">const</span> &#123;</div><div class="line">        <span class="keyword">return</span> Point(k * x, k * y);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">inline</span> <span class="keyword">double</span> <span class="keyword">operator</span>*(<span class="keyword">const</span> Point&amp; p) <span class="keyword">const</span> &#123;</div><div class="line">        <span class="keyword">return</span> x * p.x + y * p.y;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">inline</span> <span class="keyword">double</span> <span class="keyword">operator</span>^(<span class="keyword">const</span> Point&amp; p) <span class="keyword">const</span> &#123;</div><div class="line">        <span class="keyword">return</span> x * p.y - y * p.x;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">inline</span> Point <span class="title">rotate</span><span class="params">(<span class="keyword">double</span> rad)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> Point(x * <span class="built_in">cos</span>(rad) - y * <span class="built_in">sin</span>(rad), x * <span class="built_in">sin</span>(rad) + y * <span class="built_in">cos</span>(rad));</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">length</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">sqrt</span>(x * x + y * y);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">norm</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">double</span> l = length();</div><div class="line">        x /= l, y /= l;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">see</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%.4f %.4f\n"</span>, x, y);</div><div class="line">    &#125;</div><div class="line">&#125; ps[N];</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> Point Vector;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"><span class="comment">//    ios_base::sync_with_stdio(0);</span></div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) == <span class="number">1</span> &amp;&amp; n) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) ps[i].read();</div><div class="line"></div><div class="line">        <span class="keyword">int</span> ans = <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n; ++j) &#123;</div><div class="line">                <span class="keyword">if</span>(i == j) <span class="keyword">continue</span>;</div><div class="line"></div><div class="line">                Vector AB = ps[j] - ps[i]; <span class="comment">//B-A=AB</span></div><div class="line">                <span class="keyword">double</span> c = AB.length();</div><div class="line">                <span class="keyword">if</span>(sgn(c - <span class="number">2</span>) &gt; <span class="number">0</span>) <span class="keyword">continue</span>;</div><div class="line"></div><div class="line">                <span class="keyword">double</span> cosTheta = (c * c + <span class="number">1</span> - <span class="number">1</span>) / (<span class="number">2</span> * c);</div><div class="line">                <span class="keyword">double</span> theta = <span class="built_in">acos</span>(cosTheta);</div><div class="line">                Vector AO = AB.rotate(theta); AO.norm();</div><div class="line">                Point O = ps[i] + AO;</div><div class="line"></div><div class="line">                <span class="keyword">int</span> cnt = <span class="number">0</span>;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; ++k)</div><div class="line">                    <span class="keyword">if</span>(sgn((ps[k] - O).length() - <span class="number">1</span>) &lt;= <span class="number">0</span>) ++cnt;</div><div class="line">                ans = max(ans, cnt);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>$O(n^2logn)：$<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-08-23</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">300</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> EPS = <span class="number">1e-8</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">sgn</span><span class="params">(<span class="keyword">double</span> x)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> x &lt; -EPS ? <span class="number">-1</span> : x &gt; EPS;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> &#123;</span></div><div class="line">    <span class="keyword">double</span> x, y;</div><div class="line">    Point() &#123;&#125;</div><div class="line">    Point(<span class="keyword">double</span> x, <span class="keyword">double</span> y): x(x), y(y) &#123;&#125;</div><div class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%lf%lf"</span>, &amp;x, &amp;y);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">inline</span> Point <span class="keyword">operator</span>+(<span class="keyword">const</span> Point&amp; p) <span class="keyword">const</span> &#123;</div><div class="line">        <span class="keyword">return</span> Point(x + p.x, y + p.y);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">inline</span> Point <span class="keyword">operator</span>-(<span class="keyword">const</span> Point&amp; p) <span class="keyword">const</span> &#123;</div><div class="line">        <span class="keyword">return</span> Point(x - p.x, y - p.y);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">inline</span> Point <span class="keyword">operator</span>*(<span class="keyword">const</span> <span class="keyword">double</span>&amp; k) <span class="keyword">const</span> &#123;</div><div class="line">        <span class="keyword">return</span> Point(k * x, k * y);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">inline</span> <span class="keyword">double</span> <span class="keyword">operator</span>*(<span class="keyword">const</span> Point&amp; p) <span class="keyword">const</span> &#123;</div><div class="line">        <span class="keyword">return</span> x * p.x + y * p.y;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">inline</span> <span class="keyword">double</span> <span class="keyword">operator</span>^(<span class="keyword">const</span> Point&amp; p) <span class="keyword">const</span> &#123;</div><div class="line">        <span class="keyword">return</span> x * p.y - y * p.x;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">inline</span> Point <span class="title">rotate</span><span class="params">(<span class="keyword">double</span> rad)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> Point(x * <span class="built_in">cos</span>(rad) - y * <span class="built_in">sin</span>(rad), x * <span class="built_in">sin</span>(rad) + y * <span class="built_in">cos</span>(rad));</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">length</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">sqrt</span>(x * x + y * y);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">angle</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">atan2</span>(y, x);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">norm</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">double</span> l = length();</div><div class="line">        x /= l, y /= l;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">see</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%.4f %.4f\n"</span>, x, y);</div><div class="line">    &#125;</div><div class="line">&#125; ps[N];</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> Point Vector;</div><div class="line">pair&lt;<span class="keyword">double</span>, <span class="keyword">int</span>&gt; angles[N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"><span class="comment">//    ios_base::sync_with_stdio(0);</span></div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) == <span class="number">1</span> &amp;&amp; n) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) ps[i].read();</div><div class="line"></div><div class="line">        <span class="keyword">int</span> ans = <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">            <span class="keyword">int</span> m = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</div><div class="line">                <span class="keyword">if</span>(i == j) <span class="keyword">continue</span>;</div><div class="line">                Vector AB = ps[j] - ps[i];</div><div class="line">                <span class="keyword">double</span> c = AB.length();</div><div class="line">                <span class="keyword">if</span>(sgn(c - <span class="number">2</span>) &gt; <span class="number">0</span>) <span class="keyword">continue</span>;</div><div class="line">                <span class="keyword">double</span> angle = AB.angle();</div><div class="line">                <span class="keyword">double</span> delta = <span class="built_in">acos</span>(c / <span class="number">2</span>);</div><div class="line">                angles[m++] = make_pair(angle - delta, <span class="number">1</span>);</div><div class="line">                angles[m++] = make_pair(angle + delta, <span class="number">-1</span>);</div><div class="line">            &#125;</div><div class="line">            sort(angles, angles + m);</div><div class="line"></div><div class="line">            <span class="keyword">int</span> cnt = <span class="number">1</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j) &#123;</div><div class="line">                cnt += angles[j].second;</div><div class="line">                ans = max(ans, cnt);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 计算几何 </category>
            
            <category> 极角扫描 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 极角扫描 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[POJ 2187 Beauty Contest（凸包、旋转卡壳、最远点对）]]></title>
      <url>/2016/08/28/POJ%202187%20Beauty%20Contest%EF%BC%88%E5%87%B8%E5%8C%85%E3%80%81%E6%97%8B%E8%BD%AC%E5%8D%A1%E5%A3%B3%E3%80%81%E6%9C%80%E8%BF%9C%E7%82%B9%E5%AF%B9%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意： </p>
<blockquote>
<p>$N\le 5\times 10^4个点，求最远点的距离的平方$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$凸包，然后旋转卡壳辣$<br>$类似two pointers的做法，一图流$<br><img src="http://7xru22.com1.z0.glb.clouddn.com/16-8-28/14749437.jpg" alt=""></p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-08-22</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> x, y;</div><div class="line">    Point() &#123;&#125;</div><div class="line">    Point(<span class="keyword">int</span> x, <span class="keyword">int</span> y): x(x), y(y) &#123;&#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</div><div class="line">    &#125;</div><div class="line">    Point <span class="keyword">operator</span>-(<span class="keyword">const</span> Point&amp; p) <span class="keyword">const</span> &#123;</div><div class="line">        <span class="keyword">return</span> Point(x - p.x, y - p.y);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> <span class="keyword">operator</span>*(<span class="keyword">const</span> Point&amp; p) <span class="keyword">const</span> &#123;</div><div class="line">        <span class="keyword">return</span> x * p.x + y * p.y;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> <span class="keyword">operator</span>^(<span class="keyword">const</span> Point&amp; p) <span class="keyword">const</span> &#123;</div><div class="line">        <span class="keyword">return</span> x * p.y - y * p.x;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Point&amp; p) <span class="keyword">const</span> &#123;</div><div class="line">        <span class="keyword">return</span> x == p.x &amp;&amp; y &lt; p.y || x &lt; p.x;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">length</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> *<span class="keyword">this</span> * *<span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line">&#125; ps[N];</div><div class="line"></div><div class="line"><span class="comment">//输入不能有重点，函数执行完后输入顺序被破坏</span></div><div class="line">Point ch[N];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">convexHull</span><span class="params">(Point* p, <span class="keyword">int</span> n, Point* ch)</span> </span>&#123;</div><div class="line">    sort(p, p + n);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> m = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</div><div class="line">        <span class="keyword">while</span>(m &gt; <span class="number">1</span> &amp;&amp; ((ch[m - <span class="number">1</span>] - ch[m - <span class="number">2</span>]) ^ (p[i] - ch[m - <span class="number">2</span>])) &lt;= <span class="number">0</span>) --m;</div><div class="line">        ch[m++] = p[i];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = n - <span class="number">2</span>, t = m; ~i; --i) &#123;</div><div class="line">        <span class="keyword">while</span>(m &gt; t &amp;&amp; ((ch[m - <span class="number">1</span>] - ch[m - <span class="number">2</span>]) ^ (p[i] - ch[m - <span class="number">2</span>])) &lt;= <span class="number">0</span>) --m;</div><div class="line">        ch[m++] = p[i];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(n &gt; <span class="number">1</span>) --m;</div><div class="line">    <span class="keyword">return</span> m;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">rotatingCalipers</span><span class="params">(Point* ch, <span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(n == <span class="number">2</span>) <span class="keyword">return</span> (ch[<span class="number">1</span>] - ch[<span class="number">0</span>]).length();</div><div class="line"></div><div class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line">    ch[n] = ch[<span class="number">0</span>];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">2</span>; i &lt; n; ++i) &#123;</div><div class="line">        <span class="keyword">while</span>(((ch[i + <span class="number">1</span>] - ch[i]) ^ (ch[j + <span class="number">1</span>] - ch[i]))</div><div class="line">                &gt; ((ch[i + <span class="number">1</span>] - ch[i]) ^ (ch[j] - ch[i])))</div><div class="line">            j = (j + <span class="number">1</span>) % n;</div><div class="line">        ret = max(ret, max((ch[j] - ch[i + <span class="number">1</span>]).length(), (ch[j] - ch[i]).length()));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) == <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) ps[i].read();</div><div class="line">        <span class="keyword">int</span> chSz = convexHull(ps, n, ch);</div><div class="line">        <span class="keyword">int</span> ans = rotatingCalipers(ch, chSz);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 计算几何 </category>
            
            <category> 旋转卡壳 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 旋转卡壳 </tag>
            
            <tag> 最远点对 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[POJ 2932 Coneology（扫描线）]]></title>
      <url>/2016/08/28/POJ%202932%20Coneology%EF%BC%88%E6%89%AB%E6%8F%8F%E7%BA%BF%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意： </p>
<blockquote>
<p>$N\le 4\times 10^4个圆，所有圆不相交和相切，输出所有最外层的圆$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$显然n^2枚举标记内层圆是不可以的，虽然有很多剪枝$<br>$这种题就考虑扫描线了，把每个圆拆成进入事件和出去的事件$<br>$考虑用set维护一下外层圆的y坐标$<br>$显然最有可能包含是离它最近的，判一判就好了，而且有且只有他一个$<br>$反证一下就好了，如果远的包含，那么上面这个之前就没有被丢进来$<br>$时间复杂度O(nlogn)$</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-08-22</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="keyword">double</span> x[N], y[N], r[N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isInside</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</div><div class="line">    <span class="keyword">double</span> dx = x[i] - x[j], dy = y[i] - y[j];</div><div class="line">    <span class="keyword">return</span> dx * dx + dy * dy &lt;= r[j] * r[j];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) == <span class="number">1</span>) &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">double</span>, <span class="keyword">int</span>&gt; &gt; events;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%lf%lf%lf"</span>, r + i, x + i, y + i);</div><div class="line">            events.push_back(make_pair(x[i] - r[i], i));</div><div class="line">            events.push_back(make_pair(x[i] + r[i], -i));</div><div class="line">        &#125;</div><div class="line">        sort(events.begin(), events.end());</div><div class="line"></div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</div><div class="line">        <span class="built_in">set</span>&lt;pair&lt;<span class="keyword">double</span>, <span class="keyword">int</span>&gt; &gt; outers;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; events.size(); ++i) &#123;</div><div class="line">            <span class="keyword">int</span> id = events[i].second;</div><div class="line">            <span class="keyword">if</span>(id &gt; <span class="number">0</span>) &#123;</div><div class="line">                <span class="built_in">set</span>&lt;pair&lt;<span class="keyword">double</span>, <span class="keyword">int</span>&gt; &gt;::iterator iter =</div><div class="line">                    outers.lower_bound(make_pair(y[id], <span class="number">-1</span>));</div><div class="line">                <span class="keyword">if</span>(iter != outers.end() &amp;&amp; isInside(id, iter-&gt;second)) <span class="keyword">continue</span>;</div><div class="line">                <span class="keyword">if</span>(iter != outers.begin() &amp;&amp; isInside(id, (--iter)-&gt;second)) <span class="keyword">continue</span>;</div><div class="line">                ans.push_back(id);</div><div class="line">                outers.insert(make_pair(y[id], id));</div><div class="line">            &#125; <span class="keyword">else</span> outers.erase(make_pair(y[-id], -id));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        sort(ans.begin(), ans.end());</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans.size());</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ans.size(); ++i) &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d%c"</span>, ans[i], <span class="string">" \n"</span>[i == ans.size() - <span class="number">1</span>]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 计算几何 </category>
            
            <category> 扫描线 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 扫描线 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[AOJ 2308 White Bird（计算几何、物理）]]></title>
      <url>/2016/08/28/AOJ%202308%20White%20Bird%EF%BC%88%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95%E3%80%81%E7%89%A9%E7%90%86%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意： </p>
<blockquote>
<p>$愤怒的小鸟，给定白鸟(0, 0)，就是可以从抛物线轨迹上任意一点下蛋的鸟$<br>$给定N\le 50个矩形障碍物，和目标位置$<br>$问能不能用蛋干掉目标$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$考虑极限情况就是贴着过去的，但是窝萌可以通过微小的偏移来不撞上$<br>$所以就暴力枚举所有矩形的左上和右上的抛物线，当然直接到达目标也要枚举$<br>$之后就是恶心的分类讨论了$<br>$击打左边界、右边界、下边界、内部(包括了上边界)$<br>$反正不管三七二十一、多判肯定没问题$<br>$至于判断方法的话，可以考虑解点在特定位置的坐标，或者根据抛物线形态来判断$<br>$2点坐标就可以确定形态$<br>$注意细节、多画图就可以AC了$<br>$时间复杂度O(n^2)$</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-08-22</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">50</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> EPS = <span class="number">1e-8</span>, g = <span class="number">9.8</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">sgn</span><span class="params">(<span class="keyword">double</span> x)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> x &lt; -EPS ? <span class="number">-1</span> : x &gt; EPS;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="keyword">double</span> V, X, Y;</div><div class="line"><span class="keyword">double</span> L[N], B[N], R[N], T[N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">double</span> <span class="title">getY</span><span class="params">(<span class="keyword">double</span> vy, <span class="keyword">double</span> t)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> vy * t - <span class="number">0.5</span> * g * t * t;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">double</span> qx, <span class="keyword">double</span> qy)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(sgn(qx) == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line"></div><div class="line">    <span class="comment">//vx^2 + vy^2 = v^2, vx * t = qx,  vy*t -0.5*g*t^2=qy</span></div><div class="line">    <span class="comment">//qx^2+qy^2+qy*g*t^2+(0.5*g*t^2)^2-v^2*t=0</span></div><div class="line">    <span class="keyword">double</span> a = g * g / <span class="number">4</span>, b = qy * g - V * V, c = qx * qx + qy * qy;</div><div class="line"></div><div class="line">    <span class="keyword">double</span> delta = b * b - <span class="number">4</span> * a * c;</div><div class="line">    <span class="keyword">if</span>(sgn(delta) &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    delta = <span class="built_in">sqrt</span>(<span class="built_in">abs</span>(delta));</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> d = <span class="number">-1</span>; d &lt;= <span class="number">1</span>; d += <span class="number">2</span>) &#123;</div><div class="line">        <span class="keyword">double</span> t = (-b + d * delta) / (<span class="number">2</span> * a);</div><div class="line">        <span class="keyword">if</span>(sgn(t) &lt; <span class="number">0</span>) <span class="keyword">continue</span>;</div><div class="line">        t = <span class="built_in">sqrt</span>(<span class="built_in">abs</span>(t));</div><div class="line"></div><div class="line">        <span class="keyword">double</span> vx = qx / t, vy = (qy + <span class="number">0.5</span> * g * t * t) / t;</div><div class="line"></div><div class="line">        <span class="keyword">double</span> yt = getY(vy, X / vx);</div><div class="line">        <span class="keyword">if</span>(sgn(yt - Y) &lt; <span class="number">0</span>) <span class="keyword">continue</span>;</div><div class="line"></div><div class="line">        <span class="keyword">bool</span> ok = <span class="literal">true</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n &amp;&amp; ok; ++i) &#123;</div><div class="line">            <span class="keyword">if</span>(sgn(L[i] - X) &gt; <span class="number">0</span>) <span class="keyword">continue</span>;</div><div class="line"></div><div class="line">            <span class="comment">//target is in or below the obstacle</span></div><div class="line">            <span class="keyword">if</span>(sgn(X - L[i]) &gt; <span class="number">0</span> &amp;&amp; sgn(X - R[i]) &lt; <span class="number">0</span> &amp;&amp;</div><div class="line">                    sgn(yt - B[i]) &gt; <span class="number">0</span> &amp;&amp; sgn(Y - T[i]) &lt; <span class="number">0</span>) ok = <span class="literal">false</span>;</div><div class="line"></div><div class="line">            <span class="keyword">double</span> yL = getY(vy, L[i] / vx), yR = getY(vy, R[i] / vx);</div><div class="line">            <span class="comment">//hit left</span></div><div class="line">            <span class="keyword">if</span>(sgn(yL - B[i]) &gt; <span class="number">0</span> &amp;&amp; sgn(yL - T[i]) &lt; <span class="number">0</span>) ok = <span class="literal">false</span>;</div><div class="line">            <span class="comment">//hit right</span></div><div class="line">            <span class="keyword">if</span>(sgn(yR - B[i]) &gt; <span class="number">0</span> &amp;&amp; sgn(yR - T[i]) &lt; <span class="number">0</span>) ok = <span class="literal">false</span>;</div><div class="line">            <span class="comment">//hit down</span></div><div class="line">            <span class="keyword">if</span>(sgn(yL - B[i]) &lt; <span class="number">0</span> &amp;&amp; sgn(yR - B[i]) &gt; <span class="number">0</span>) ok = <span class="literal">false</span>;</div><div class="line"></div><div class="line">            <span class="comment">//highest point</span></div><div class="line">            <span class="keyword">double</span> xH = vx * vy / g, yH = getY(vy, vy / g);</div><div class="line">            <span class="comment">//hit inside, this time highest point is in or above the obstacle</span></div><div class="line">            <span class="keyword">if</span>(sgn(xH - L[i]) &gt; <span class="number">0</span> &amp;&amp; sgn(xH - R[i]) &lt; <span class="number">0</span> &amp;&amp;</div><div class="line">                    sgn(yL - B[i]) &lt; <span class="number">0</span> &amp;&amp; sgn(yH - B[i]) &gt; <span class="number">0</span>) ok = <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(ok) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%lf%lf%lf"</span>, &amp;n, &amp;V, &amp;X, &amp;Y) == <span class="number">4</span>) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%lf%lf%lf%lf"</span>, L + i, B + i, R + i, T + i);</div><div class="line">            R[i] = min(R[i], X);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">bool</span> ok = check(X, Y);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n &amp;&amp; !ok; ++i) &#123;</div><div class="line">            ok |= check(L[i], T[i]);</div><div class="line">            ok |= check(R[i], T[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">puts</span>(ok ? <span class="string">"Yes"</span> : <span class="string">"No"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 计算几何 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 物理 </tag>
            
            <tag> 极限情况 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[POJ 1127 Jack Straws（计算几何）]]></title>
      <url>/2016/08/28/POJ%201127%20Jack%20Straws%EF%BC%88%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意： </p>
<blockquote>
<p>$N&lt;13条线段，不规范相交认为是相连，求2条线段是不是直接或者间接相连$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$不规范相交直接在规范相交的基础上再判断是不是端点在另一条线段上即可$<br>$间接相连求个传递闭包就好了$<br>$时间复杂度O(n^3)$</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-08-22</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">12</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> x, y;</div><div class="line">    Point() &#123;&#125;</div><div class="line">    Point(<span class="keyword">int</span> x, <span class="keyword">int</span> y): x(x), y(y) &#123;&#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</div><div class="line">    &#125;</div><div class="line">    Point <span class="keyword">operator</span>-(<span class="keyword">const</span> Point&amp; p) <span class="keyword">const</span> &#123;</div><div class="line">        <span class="keyword">return</span> Point(x - p.x, y - p.y);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> <span class="keyword">operator</span>*(<span class="keyword">const</span> Point&amp; p) <span class="keyword">const</span> &#123;</div><div class="line">        <span class="keyword">return</span> x * p.x + y * p.y;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> <span class="keyword">operator</span>^(<span class="keyword">const</span> Point&amp; p) <span class="keyword">const</span> &#123;</div><div class="line">        <span class="keyword">return</span> x * p.y - y * p.x;</div><div class="line">    &#125;</div><div class="line">&#125; ps[N][<span class="number">2</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">segmentProperIntersection</span><span class="params">(Point a1, Point a2, Point b1, Point b2)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> c1 = (a2 - a1) ^ (b1 - a1), c2 = (a2 - a1) ^ (b2 - a1);</div><div class="line">    <span class="keyword">int</span> c3 = (b2 - b1) ^ (a1 - b1), c4 = (b2 - b1) ^ (a2 - b1);</div><div class="line">    <span class="keyword">return</span> c1 * c2 &lt; <span class="number">0</span> &amp;&amp; c3 * c4 &lt; <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">onSegment</span><span class="params">(Point p, Point a1, Point a2)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> ((a1 - p) ^ (a2 - p)) == <span class="number">0</span> &amp;&amp; (a1 - p) * (a2 - p) &lt;= <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="keyword">bool</span> f[N][N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) == <span class="number">1</span> &amp;&amp; n) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; ++j)</div><div class="line">                ps[i][j].read();</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">            f[i][i] = <span class="literal">true</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n; ++j) &#123;</div><div class="line">                <span class="keyword">int</span> ok = segmentProperIntersection(ps[i][<span class="number">0</span>], ps[i][<span class="number">1</span>], ps[j][<span class="number">0</span>], ps[j][<span class="number">1</span>]);</div><div class="line">                ok |= onSegment(ps[i][<span class="number">0</span>], ps[j][<span class="number">0</span>], ps[j][<span class="number">1</span>])</div><div class="line">                      || onSegment(ps[i][<span class="number">1</span>], ps[j][<span class="number">0</span>], ps[j][<span class="number">1</span>])</div><div class="line">                      || onSegment(ps[j][<span class="number">0</span>], ps[i][<span class="number">0</span>], ps[i][<span class="number">1</span>])</div><div class="line">                      || onSegment(ps[j][<span class="number">1</span>], ps[i][<span class="number">0</span>], ps[i][<span class="number">1</span>]);</div><div class="line">                f[i][j] = f[j][i] = ok;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; ++k)</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</div><div class="line">                    f[i][j] |= f[i][k] &amp;&amp; f[k][j];</div><div class="line"></div><div class="line">        <span class="keyword">int</span> a, b;</div><div class="line">        <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a, &amp;b) == <span class="number">2</span> &amp;&amp; (a || b)) &#123;</div><div class="line">            <span class="built_in">puts</span>(f[a][b] ? <span class="string">"CONNECTED"</span> : <span class="string">"NOT CONNECTED"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 计算几何 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[AIM Tech Round 3 (Div. 1) D. Incorrect Flow（有源汇可行费用流）]]></title>
      <url>/2016/08/26/AIM%20Tech%20Round%203%20(Div.%201)%20D.%20Incorrect%20Flow%EF%BC%88%E6%9C%89%E6%BA%90%E6%B1%87%E5%8F%AF%E8%A1%8C%E8%B4%B9%E7%94%A8%E6%B5%81%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意： </p>
<blockquote>
<p>$N\le 100，M\le 100的流网络，0\le c_i, f_i\le 10^6$<br>$现在这个网络错了，可能c_i&gt;f_i，也可能流量不平衡$<br>$现在要求你修改f_i和c_i使得流网络成为可行流，并且change=\sum |f_i’-f_i|+|c_i’-c_i|最小$<br>$求这个change$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$对于无源汇的上下界可行流，新建源s，汇t，然后对于u\to v边，下界d，上界c$<br>$变成s\to t, 容量d；u\to v，容量c-d；v\to t，容量d$<br>$合并一下边就好了最后，如果有可行流，那么一定满流(下界一定满足)$<br>$对于有源汇的，添加t\to s，容量为INF的边，之后新建超源s’，超汇t’，再做上面的就可以了$<br>$显然添加那条边之后就抵消了原来的源汇的影响(即给他们加上了流量平衡)$</p>
</blockquote>
<hr>
<blockquote>
<p>$对于本题来说，有源汇的可行流，加t\to s，容量INF的边$<br>$先钦定下界为原始图的，统计一下流入流出的balance$<br>$接下来讨论f\le c的情况：$<br>$c-f次机会用1的费用使得流量+1$<br>$之后，INF次机会使用2的费用使得流量和容量一起+1$<br>$当然，也有f次机会使用费用1使得流量-1$<br>$对于f&gt;c的情况：$<br>$因为只能运送流量，先直接把情况搞成合法，即预先用f-c的费用使得c=f(但事实上图没有变)$<br>$当然，可以INF次机会使用2的费用使得流量和容量一起+1$<br>$接下来，当然可以退回去，即f-c次机会0费用使得流量-1(相当于用预先加的代价)$<br>$之后，c次机会1费用使得流量-1$<br>$然后跑最小费用最大流就好了$</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-08-26</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e5</span> + <span class="number">10</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> v, nxt, cost, cap;</div><div class="line">&#125; edge[M];</div><div class="line"><span class="keyword">int</span> head[N], cnt;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> c, <span class="keyword">int</span> w1, <span class="keyword">int</span> w2 = <span class="number">0</span>)</span> </span>&#123;</div><div class="line">    edge[cnt] = &#123;v, head[u], c, w1&#125;;</div><div class="line">    head[u] = cnt++;</div><div class="line">    edge[cnt] = &#123;u, head[v], -c, w2&#125;;</div><div class="line">    head[v] = cnt++;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> in[N], d[N], delta[N], pre[N];</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">spfa</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span> </span>&#123;</div><div class="line">    <span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; q; q.push_back(s);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = s; i &lt;= t; ++i) d[i] = INF, in[i] = <span class="literal">false</span>;</div><div class="line">    delta[s] = INF; d[s] = <span class="number">0</span>; in[s] = <span class="literal">true</span>;</div><div class="line">    <span class="keyword">while</span>(q.size()) &#123;</div><div class="line">        <span class="keyword">int</span> u = q.front(); q.pop_front();</div><div class="line">        in[u] = <span class="literal">false</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; ~i; i = edge[i].nxt) &#123;</div><div class="line">            <span class="keyword">int</span> v = edge[i].v, cap = edge[i].cap, cost = edge[i].cost;</div><div class="line">            <span class="keyword">if</span>(cap &gt; <span class="number">0</span> &amp;&amp; d[v] &gt; d[u] + cost) &#123;</div><div class="line">                delta[v] = min(delta[u], cap);</div><div class="line">                d[v] = d[u] + cost;</div><div class="line">                pre[v] = i;</div><div class="line">                <span class="keyword">if</span>(!in[v]) &#123;</div><div class="line">                    in[v] = <span class="literal">true</span>;</div><div class="line">                    <span class="keyword">if</span>(q.size() &amp;&amp; d[v] &lt;= d[q.front()]) q.push_front(v);</div><div class="line">                    <span class="keyword">else</span> q.push_back(v);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> d[t] != INF;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">minCostMaxFlow</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t, <span class="keyword">int</span>&amp; flow, <span class="keyword">int</span>&amp; cost)</span> </span>&#123;</div><div class="line">    <span class="keyword">while</span>(spfa(s, t)) &#123;</div><div class="line">        flow += delta[t];</div><div class="line">        cost += d[t] * delta[t];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i, u = t; u != s; u = edge[i ^ <span class="number">1</span>].v) &#123;</div><div class="line">            i = pre[u];</div><div class="line">            edge[i].cap -= delta[t];</div><div class="line">            edge[i ^ <span class="number">1</span>].cap += delta[t];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m) == <span class="number">2</span>) &#123;</div><div class="line">        cnt = <span class="number">0</span>; <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</div><div class="line"></div><div class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> s = <span class="number">0</span>, t = n + <span class="number">1</span>;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; balance(n + <span class="number">1</span>, <span class="number">0</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</div><div class="line">            <span class="keyword">int</span> u, v, c, f; <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;u, &amp;v, &amp;c, &amp;f);</div><div class="line">            balance[u] -= f;</div><div class="line">            balance[v] += f;</div><div class="line"></div><div class="line">            <span class="keyword">if</span>(f &lt;= c) &#123;</div><div class="line">                addEdge(u, v, <span class="number">1</span>, c - f); <span class="comment">//f +1</span></div><div class="line">                addEdge(u, v, <span class="number">2</span>, INF); <span class="comment">//f +1, c +1</span></div><div class="line">                addEdge(v, u, <span class="number">1</span>, f); <span class="comment">//f -1;</span></div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                ans += f - c; <span class="comment">//c-&gt;f first</span></div><div class="line">                addEdge(u, v, <span class="number">2</span>, INF); <span class="comment">//f +1, c +1</span></div><div class="line">                addEdge(v, u, <span class="number">0</span>, f - c); <span class="comment">//back</span></div><div class="line">                addEdge(v, u, <span class="number">1</span>, c); <span class="comment">//f -1</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        addEdge(n, <span class="number">1</span>, <span class="number">0</span>, INF);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">            <span class="keyword">if</span>(balance[i] &gt; <span class="number">0</span>) addEdge(s, i, <span class="number">0</span>, balance[i]);</div><div class="line">            <span class="keyword">else</span> addEdge(i, t, <span class="number">0</span>, -balance[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> flow = <span class="number">0</span>;</div><div class="line">        minCostMaxFlow(s, t, flow, ans);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 图论 </category>
            
            <category> 网络流 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 可行流 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[AIM Tech Round 3 (Div. 1) C. Centroids（树形dp）]]></title>
      <url>/2016/08/26/AIM%20Tech%20Round%203%20(Div.%201)%20C.%20Centroids%EF%BC%88%E6%A0%91%E5%BD%A2dp%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意： </p>
<blockquote>
<p>$给定N\le 4\times 10^5的一棵树，询问每个点是否能通过删掉1条边再添加1条边成为重心$<br>$重心：删除这个点，所有连通分量的最大大小\le n/2$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$首先考虑重心是怎么求的，显然树dp算所有的与之相连的子树的大小$<br>$对于1个点u，如果要让它成为重心，显然要让跟它所有相连的子树的大小都变成\le n/2的$<br>$而题目中说的删边其实就是等价于把一个子树连到u上的操作$<br>$由于只能干一次，所以实际上我们肯定找\le n/2最大的那颗子树分裂出来$<br>$所以dp的方式就显而易见了，当然儿子父亲都要搞$<br>$maxSub[u]:=u的子树中\le n/2的最大子树的大小$<br>$f[u]:=u的父亲f的子树中，除了u这颗子树外，\le n/2的最大子树的大小$<br>$前者直接暴力转移就好，后者维护一下\le n/2的最大和次大就好$<br>$因为对于f来说如果u是最大不能选那么选次大，反之就选最大$<br>$当然对于父亲那边，我们需要dfs再搞一次，先继承一下父亲的答案$<br>$然后再减去u这颗子树，看看整个父亲的部分能不能更新$<br>$判断可行的时候，直接查看每个儿子就好了，判一判就做完了$<br>$时间复杂度O(n)$</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-08-25</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">4e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[N];</div><div class="line"><span class="keyword">int</span> sz[N], maxSub[N], fa[N];</div><div class="line"><span class="comment">//u子树中不超过n/2的最大子树</span></div><div class="line"><span class="comment">//不经过u这颗子树fa子树中能取到的不超过n/2的最大子树</span></div><div class="line"><span class="comment">//再dfs一次变成不经过u这颗子树整棵树中能取到的不超过n/2的最大子树</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> f)</span> </span>&#123;</div><div class="line">    sz[u] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> maxv = <span class="number">0</span>, nxtv = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v : G[u]) &#123;</div><div class="line">        <span class="keyword">if</span>(v == f) <span class="keyword">continue</span>;</div><div class="line">        dfs1(v, u);</div><div class="line">        sz[u] += sz[v];</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(maxSub[v] &gt;= maxv) &#123;</div><div class="line">            nxtv = maxv;</div><div class="line">            maxv = maxSub[v];</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(maxSub[v] &gt; nxtv) nxtv = maxSub[v];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v : G[u]) &#123;</div><div class="line">        <span class="keyword">if</span>(v == f) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">if</span>(maxSub[v] == maxv) fa[v] = nxtv;</div><div class="line">        <span class="keyword">else</span> fa[v] = maxv;</div><div class="line">    &#125;</div><div class="line">    maxSub[u] = maxv;</div><div class="line">    <span class="keyword">if</span>(sz[u] &lt;= n / <span class="number">2</span>) maxSub[u] = max(maxSub[u], sz[u]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> ans[N];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> f)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>, ok = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v : G[u]) &#123;</div><div class="line">        <span class="keyword">if</span>(v == f) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">if</span>(sz[v] &gt; n / <span class="number">2</span>) &#123;</div><div class="line">            <span class="keyword">if</span>(sz[v] - maxSub[v] &gt; n / <span class="number">2</span>) ok = <span class="number">0</span>;</div><div class="line">            <span class="keyword">else</span> ++cnt;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(n - sz[u] &gt; n / <span class="number">2</span>) &#123;</div><div class="line">        <span class="keyword">if</span>(n - sz[u] - fa[u] &gt; n / <span class="number">2</span>) ok = <span class="number">0</span>;</div><div class="line">        <span class="keyword">else</span> ++cnt;</div><div class="line">    &#125;</div><div class="line">    ans[u] = ok &amp;&amp; cnt &lt;= <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v : G[u]) &#123;</div><div class="line">        <span class="keyword">if</span>(v == f) <span class="keyword">continue</span>;</div><div class="line">        fa[v] = max(fa[v], fa[u]);</div><div class="line">        <span class="keyword">if</span>(n - sz[v] &lt;= n / <span class="number">2</span>) fa[v] = max(fa[v], n - sz[v]);</div><div class="line">        dfs2(v, u);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) == <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) G[i].clear();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</div><div class="line">            <span class="keyword">int</span> u, v; <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</div><div class="line">            G[u].push_back(v);</div><div class="line">            G[v].push_back(u);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        dfs1(<span class="number">1</span>, <span class="number">0</span>);</div><div class="line">        dfs2(<span class="number">1</span>, <span class="number">0</span>);</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d%c"</span>, ans[i], <span class="string">" \n"</span>[i == n]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 动态规划 </category>
            
            <category> 树形dp </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 树形dp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDU 5801 Up Sky,Mr.Zhu（可持久化Trie）]]></title>
      <url>/2016/08/13/HDU%205801%20Up%20Sky,Mr.Zhu%EF%BC%88%E5%8F%AF%E6%8C%81%E4%B9%85%E5%8C%96Trie%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意： </p>
<blockquote>
<p>$给定N\le 10^5的字符串S，字符集大小为5，其中的回文子串长度&lt;20$<br>$定义回文子串str[0\ldots n-1]的特征串为str[\lfloor n/ 2\rfloor\ldots n-1]$<br>$给定询问区间s[L\ldots R]里，特征串前缀为T的回文串有多少个，|T|\le 10$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$区间询问就是裸的可持久化Trie$<br>$以每个字符s[i]为结尾建立每棵Trie，暴力把以s[i]结尾的全部特征串插进去$<br>$由于区间询问的时候要保证回文串也在这个范围内，这么做是有问题的$<br>$但是特征串长度在[1, 10]，所以可以暴力对每个长度建立可持久Trie$<br>$这样空间是10\times N\times 10\times 5，就炸了$<br>$所以折衷一下，离线询问，枚举每个特征串长度，每次重建可持久化Trie就行$<br>$为了方便处理奇偶回文，可以枚举回文长度，注意各种合法边界，然后就没啥了$<br>$时间复杂度O(n\times 10^2+q\times 10)$</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-08-13</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"></div><div class="line"><span class="keyword">int</span> root[N];</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PersistentTrie</span> &#123;</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> M = N * <span class="number">10</span>, S = <span class="number">5</span>;</div><div class="line">    <span class="keyword">int</span> sz;</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></div><div class="line">        LL val;</div><div class="line">        <span class="keyword">int</span> nxt[S];</div><div class="line">    &#125; dat[M];</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">        sz = <span class="number">0</span>;</div><div class="line">        <span class="built_in">memset</span>(&amp;dat[<span class="number">0</span>], <span class="number">0</span>, <span class="keyword">sizeof</span> dat[<span class="number">0</span>]);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">newNode</span><span class="params">(<span class="keyword">int</span> rt)</span> </span>&#123;</div><div class="line">        dat[++sz] = dat[rt];</div><div class="line">        <span class="keyword">return</span> sz;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">char</span>* s, <span class="keyword">int</span> n, <span class="keyword">int</span>&amp; rt)</span> </span>&#123;</div><div class="line">        rt = newNode(rt);</div><div class="line">        <span class="keyword">int</span> u = rt;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</div><div class="line">            <span class="keyword">int</span> c = s[i] - <span class="string">'a'</span>;</div><div class="line">            <span class="keyword">int</span>&amp; v = dat[u].nxt[c];</div><div class="line">            v = newNode(v);</div><div class="line">            ++dat[v].val;</div><div class="line">            u = v;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function">LL <span class="title">query</span><span class="params">(<span class="keyword">char</span>* s, <span class="keyword">int</span> rt)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> u = rt;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; s[i]; ++i) &#123;</div><div class="line">            <span class="keyword">int</span> c = s[i] - <span class="string">'a'</span>;</div><div class="line">            u = dat[u].nxt[c];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> dat[u].val;</div><div class="line">    &#125;</div><div class="line">&#125; trie;</div><div class="line"></div><div class="line"><span class="keyword">int</span> q;</div><div class="line"><span class="keyword">char</span> s[N], t[N][<span class="number">15</span>];</div><div class="line"><span class="keyword">int</span> l[N], r[N];</div><div class="line">LL ans[N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">char</span>* s, <span class="keyword">int</span> len)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len / <span class="number">2</span>; ++i)</div><div class="line">        <span class="keyword">if</span>(s[-i] != s[-(len - i - <span class="number">1</span>)]) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%s%d"</span>, s + <span class="number">1</span>, &amp;q) == <span class="number">2</span>) &#123;</div><div class="line">        <span class="keyword">int</span> n = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; ++i) <span class="built_in">scanf</span>(<span class="string">"%d%d%s"</span>, l + i, r + i, t[i]);</div><div class="line"></div><div class="line">        <span class="built_in">memset</span>(ans, <span class="number">0</span>, <span class="keyword">sizeof</span> ans);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> len = <span class="number">1</span>; len &lt; <span class="number">20</span>; ++len) &#123;</div><div class="line">            trie.init();</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">                root[i] = root[i - <span class="number">1</span>];</div><div class="line">                <span class="keyword">if</span>(i &lt; len) <span class="keyword">continue</span>;</div><div class="line">                <span class="keyword">bool</span> ok = check(s + i, len);</div><div class="line">                <span class="keyword">if</span>(!ok) <span class="keyword">continue</span>;</div><div class="line">                <span class="keyword">int</span> l = i - (len - <span class="number">1</span>) / <span class="number">2</span>;</div><div class="line">                trie.update(s + l, (len + <span class="number">1</span>) / <span class="number">2</span>, root[i]);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; ++i) &#123;</div><div class="line">                <span class="keyword">if</span>(r[i] - l[i] + <span class="number">1</span> &lt; len) <span class="keyword">continue</span>;</div><div class="line">                ans[i] += trie.query(t[i], root[r[i]]) - trie.query(t[i], root[l[i] + len - <span class="number">2</span>]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; ++i)</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, ans[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 数据结构 </category>
            
            <category> 可持久化Trie </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 可持久化Trie </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDU 5829 Rikka with Subset （NTT）]]></title>
      <url>/2016/08/12/HDU%205829%20Rikka%20with%20Subset%20%EF%BC%88NTT%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意： </p>
<blockquote>
<p>$给定N\le 10^5个数，对于一个给定的1\le K\le N，设数集全集为U$<br>$\forall S\in U，val(S):=S中前min(K, |S|)大数的和$<br>$val(U)_{k}=\sum_{S\in U} val(S)$<br>$输出每个val(U)_{k}$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$首先将数列从大到小排序，考虑每个数a_i作为第k大数的贡献f(k)$<br>$f(k)=\sum_{i=k}^n C_{i-1}^{k-1} \times 2^{n-i} \times a_i$<br>$窝萌来化简一下这个式子：$<br>$f(k)=\sum_{i=k}^n \frac{(i-1)!}{(k-1)! \times (i-k)!} \times 2^{n-i} \times a_i$<br>$令i’=i-k，f(k)=\sum_{i’=0}^{n-k} \frac{(i’+k-1)!}{(k-1)! \times i’!} \times 2^{n-i’-k} \times a_{i’+k}$<br>$=\frac{1}{2^{k}(k-1)!} \sum_{i’=0}^{n-k} \frac{(i’+k-1)!}{i’!} \times 2^{n-i’} \times a_{i’+k}$<br>$=\frac{1}{2^{k}(k-1)!} \sum_{i’=0}^{n-k} \frac{2^{n-i’}}{i’!} \times (i’+k-1)! \times a_{i’+k}$<br>$令b_{i’}=\frac{2^{n-i’}}{i’!}, c_{i’}=(i’-1)! \times a_{i’}$<br>$则f(k)=\frac{1}{2^{k}(k-1)!} \sum_{i’=0}^{n-k} b_{i’} \times c_{i’+k}$<br>$设f(k)=f’(n-k)=\frac{1}{2^{k}(k-1)!} \sum_{i’=0}^{n-k} g(i’) \times h(n-k-i’)，这是个卷积形式$<br>$与上式对比，发现只需要把c_i reverse一下就好了$<br>$此时c_i=c_{n-k+1-i}，多偏移了1，所以最后f(k)=f’(n-k+1)$<br>$给的是费马素数，然后只需要NTT卷积一下b_i和reversed c_i就好了$<br>$最后的答案只要前缀和一下f(k)$<br>$时间复杂度O(nlogn)$</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-08-12</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> G = <span class="number">3</span>, P = <span class="number">998244353</span>;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">quick</span><span class="params">(LL x, LL n)</span> </span>&#123;</div><div class="line">    LL ret = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(; n; n &gt;&gt;= <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">if</span>(n &amp; <span class="number">1</span>) ret = ret * x % P;</div><div class="line">        x = x * x % P;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line">LL A[N &lt;&lt; <span class="number">2</span>], B[N &lt;&lt; <span class="number">2</span>];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">rader</span><span class="params">(LL* y, <span class="keyword">int</span> len)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>, j = len / <span class="number">2</span>; i &lt; len - <span class="number">1</span>; i++) &#123;</div><div class="line">        <span class="keyword">if</span>(i &lt; j) swap(y[i], y[j]);</div><div class="line">        <span class="keyword">int</span> k = len / <span class="number">2</span>;</div><div class="line">        <span class="keyword">while</span>(j &gt;= k) &#123;j -= k; k /= <span class="number">2</span>;&#125;</div><div class="line">        <span class="keyword">if</span>(j &lt; k) j += k;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">ntt</span><span class="params">(LL* y, <span class="keyword">int</span> len, <span class="keyword">int</span> op)</span> </span>&#123;</div><div class="line">    rader(y, len);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> h = <span class="number">2</span>; h &lt;= len; h &lt;&lt;= <span class="number">1</span>) &#123;</div><div class="line">        LL wn = quick(G, (P - <span class="number">1</span>) / h);</div><div class="line">        <span class="keyword">if</span>(op == <span class="number">-1</span>) wn = quick(wn, P - <span class="number">2</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len; j += h) &#123;</div><div class="line">            LL w = <span class="number">1</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = j; k &lt; j + h / <span class="number">2</span>; k++) &#123;</div><div class="line">                LL u = y[k];</div><div class="line">                LL t = w * y[k + h / <span class="number">2</span>] % P;</div><div class="line">                y[k] = (u + t) % P;</div><div class="line">                y[k + h / <span class="number">2</span>] = (u - t + P) % P;</div><div class="line">                w = w * wn % P;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(op == <span class="number">-1</span>) &#123;</div><div class="line">        LL inv = quick(len, P - <span class="number">2</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) y[i] = y[i] * inv % P;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, a[N], f[N];</div><div class="line">LL fact[N], invf[N], two[N], invt[N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    fact[<span class="number">0</span>] = two[<span class="number">0</span>] = invf[<span class="number">0</span>] = invt[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; ++i) &#123;</div><div class="line">        fact[i] = fact[i - <span class="number">1</span>] * i % P;</div><div class="line">        two[i] = two[i - <span class="number">1</span>] * <span class="number">2</span> % P;</div><div class="line">        invf[i] = quick(fact[i], P - <span class="number">2</span>);</div><div class="line">        invt[i] = quick(two[i], P - <span class="number">2</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">while</span>(t--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a + i);</div><div class="line">        sort(a + <span class="number">1</span>, a + n + <span class="number">1</span>, greater&lt;<span class="keyword">int</span>&gt;());</div><div class="line"></div><div class="line">        <span class="keyword">int</span> len = <span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span>(len &lt;= n &lt;&lt; <span class="number">1</span>) len &lt;&lt;= <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</div><div class="line">            A[i] = i &lt;= n ? two[n - i] * invf[i] % P : <span class="number">0</span>;</div><div class="line">            B[i] = i &gt;= <span class="number">1</span> &amp;&amp; i &lt;= n ? a[i] * fact[i - <span class="number">1</span>] % P : <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        reverse(B + <span class="number">1</span>, B + n + <span class="number">1</span>);</div><div class="line"></div><div class="line">        ntt(A, len, <span class="number">1</span>);</div><div class="line">        ntt(B, len, <span class="number">1</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) A[i] = A[i] * B[i] % P;</div><div class="line">        ntt(A, len, <span class="number">-1</span>);</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) f[i] = invt[i] * invf[i - <span class="number">1</span>] % P * A[n - i + <span class="number">1</span>] % P;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="keyword">if</span>((f[i] += f[i - <span class="number">1</span>]) &gt;= P) f[i] -= P;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">printf</span>(<span class="string">"%d "</span>, f[i]);</div><div class="line">        <span class="built_in">puts</span>(<span class="string">""</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 数学 </category>
            
            <category> FFT/NTT/FWT </category>
            
        </categories>
        
        
        <tags>
            
            <tag> NTT </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDU 5756 Boss Bo（主席树、标记永久化）]]></title>
      <url>/2016/08/11/HDU%205756%20Boss%20Bo%EF%BC%88%E4%B8%BB%E5%B8%AD%E6%A0%91%E3%80%81%E6%A0%87%E8%AE%B0%E6%B0%B8%E4%B9%85%E5%8C%96%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意： </p>
<blockquote>
<p>$给定N\le 5\times 10^4个点的一棵树，Q\le 10^5$<br>$定义一个点是好点，当且仅当他所有祖先都不是坏点$<br>$每次询问指定K个点为坏点，查询1个点P到所有好点的$<br>$op=1:距离和$<br>$op=2:最小距离$<br>$op=3:最大距离$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$定义换句话说，如果一个点是坏点，那么子树都是坏点$<br>$剩下的就是官方题解的做法了$<br><img src="http://7xru22.com1.z0.glb.clouddn.com/16-8-13/60225630.jpg" alt=""></p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-08-13</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5e4</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">const</span> LL LLINF = <span class="number">0x3f3f3f3f3f3f3f3f</span>LL;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, q;</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[N];</div><div class="line"></div><div class="line"><span class="keyword">int</span> dep[N], L[N], R[N], vs[N], dfsNum;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa)</span> </span>&#123;</div><div class="line">    L[u] = ++dfsNum;</div><div class="line">    vs[dfsNum] = u;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v : G[u]) &#123;</div><div class="line">        <span class="keyword">if</span>(v == fa) <span class="keyword">continue</span>;</div><div class="line">        dep[v] = dep[u] + <span class="number">1</span>;</div><div class="line">        dfs(v, u);</div><div class="line">    &#125;</div><div class="line">    R[u] = dfsNum;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> root[N];</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PersistentSegTree</span> &#123;</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> M = N * <span class="number">2</span> * <span class="number">20</span>;</div><div class="line">    <span class="keyword">int</span> sz;</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></div><div class="line">        <span class="keyword">int</span> ls, rs;</div><div class="line">        LL addv, maxv, minv, sum;</div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(LL v, <span class="keyword">int</span> len)</span> </span>&#123;</div><div class="line">            addv += v;</div><div class="line">            sum += v * len;</div><div class="line">            maxv += v;</div><div class="line">            minv += v;</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">see</span><span class="params">()</span> </span>&#123;</div><div class="line">            pr(addv); pr(maxv); pr(minv); prln(sum);</div><div class="line">        &#125;</div><div class="line">    &#125; dat[M];</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">newNode</span><span class="params">(<span class="keyword">int</span> rt)</span> </span>&#123;</div><div class="line">        dat[++sz] = dat[rt];</div><div class="line">        <span class="keyword">return</span> sz;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">        sz = <span class="number">0</span>;</div><div class="line">        <span class="built_in">memset</span>(&amp;dat[<span class="number">0</span>], <span class="number">0</span>, <span class="keyword">sizeof</span> dat[<span class="number">0</span>]);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">up</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> len)</span> </span>&#123;</div><div class="line">        dat[rt].sum = dat[dat[rt].ls].sum + dat[dat[rt].rs].sum + dat[rt].addv * len;</div><div class="line">        dat[rt].minv = min(dat[dat[rt].ls].minv, dat[dat[rt].rs].minv) + dat[rt].addv;</div><div class="line">        dat[rt].maxv = max(dat[dat[rt].ls].maxv, dat[dat[rt].rs].maxv) + dat[rt].addv;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span>&amp; rt)</span> </span>&#123;</div><div class="line">        rt = newNode(<span class="number">0</span>);</div><div class="line">        <span class="keyword">if</span>(l == r) &#123;</div><div class="line">            dat[rt].add(dep[vs[l]], <span class="number">1</span>);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> m = l + r &gt;&gt; <span class="number">1</span>;</div><div class="line">        build(l, m, dat[rt].ls);</div><div class="line">        build(m + <span class="number">1</span>, r, dat[rt].rs);</div><div class="line">        up(rt, r - l + <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> v, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span>&amp; rt)</span> </span>&#123;</div><div class="line">        rt = newNode(rt);</div><div class="line">        <span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R) &#123;</div><div class="line">            dat[rt].add(v, r - l + <span class="number">1</span>);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> m = l + r &gt;&gt; <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span>(L &lt;= m) update(L, R, v, l, m, dat[rt].ls);</div><div class="line">        <span class="keyword">if</span>(R &gt; m) update(L, R, v, m + <span class="number">1</span>, r, dat[rt].rs);</div><div class="line">        up(rt, r - l + <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="function">LL <span class="title">query1</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R, LL z, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> rt)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R) <span class="keyword">return</span> dat[rt].sum + z * (r - l + <span class="number">1</span>);</div><div class="line">        <span class="keyword">int</span> m = l + r &gt;&gt; <span class="number">1</span>;</div><div class="line">        LL ret = <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span>(L &lt;= m) ret += query1(L, R, z + dat[rt].addv, l, m, dat[rt].ls);</div><div class="line">        <span class="keyword">if</span>(R &gt; m) ret += query1(L, R, z + dat[rt].addv, m + <span class="number">1</span>, r, dat[rt].rs);</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line">    <span class="function">LL <span class="title">query2</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R, LL z, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> rt)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R) <span class="keyword">return</span> dat[rt].minv + z;</div><div class="line">        <span class="keyword">int</span> m = l + r &gt;&gt; <span class="number">1</span>;</div><div class="line">        LL ret = LLINF;</div><div class="line">        <span class="keyword">if</span>(L &lt;= m) ret = min(ret, query2(L, R, z + dat[rt].addv, l, m, dat[rt].ls));</div><div class="line">        <span class="keyword">if</span>(R &gt; m) ret = min(ret, query2(L, R, z + dat[rt].addv, m + <span class="number">1</span>, r, dat[rt].rs));</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line">    <span class="function">LL <span class="title">query3</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R, LL z, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> rt)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R) <span class="keyword">return</span> dat[rt].maxv + z;</div><div class="line">        <span class="keyword">int</span> m = l + r &gt;&gt; <span class="number">1</span>;</div><div class="line">        LL ret = -LLINF;</div><div class="line">        <span class="keyword">if</span>(L &lt;= m) ret = max(ret, query3(L, R, z + dat[rt].addv, l, m, dat[rt].ls));</div><div class="line">        <span class="keyword">if</span>(R &gt; m) ret = max(ret, query3(L, R, z + dat[rt].addv, m + <span class="number">1</span>, r, dat[rt].rs));</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line">&#125; T;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(u == <span class="number">1</span>) &#123;</div><div class="line">        T.init();</div><div class="line">        T.build(<span class="number">1</span>, n, root[<span class="number">1</span>]);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        root[u] = root[fa];</div><div class="line">        T.update(<span class="number">1</span>, n, <span class="number">1</span>, <span class="number">1</span>, n, root[u]);</div><div class="line">        T.update(L[u], R[u], <span class="number">-2</span>, <span class="number">1</span>, n, root[u]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v : G[u]) &#123;</div><div class="line">        <span class="keyword">if</span>(v == fa) <span class="keyword">continue</span>;</div><div class="line">        dfs2(v, u);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;q) == <span class="number">2</span>) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) G[i].clear();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</div><div class="line">            <span class="keyword">int</span> u, v; <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</div><div class="line">            G[u].push_back(v);</div><div class="line">            G[v].push_back(u);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        dfsNum = <span class="number">0</span>;</div><div class="line">        dfs(<span class="number">1</span>, <span class="number">0</span>);</div><div class="line">        dfs2(<span class="number">1</span>, <span class="number">0</span>);</div><div class="line"></div><div class="line">        LL last = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> z = <span class="number">1</span>; z &lt;= q; ++z) &#123;</div><div class="line">            <span class="keyword">int</span> k, p, op; <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;k, &amp;p, &amp;op);</div><div class="line">            p = (p + last) % n + <span class="number">1</span>;</div><div class="line"></div><div class="line">            <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; seg(k);</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; ++i) &#123;</div><div class="line">                <span class="keyword">int</span> x; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line">                seg[i] = &#123;L[x], R[x]&#125;;</div><div class="line">            &#125;</div><div class="line">            sort(seg.begin(), seg.end());</div><div class="line"></div><div class="line">            k = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>, j; i &lt; seg.size(); i = j) &#123;</div><div class="line">                <span class="keyword">int</span> r = seg[i].second;</div><div class="line">                <span class="keyword">for</span>(j = i + <span class="number">1</span>; j &lt; seg.size() &amp;&amp; seg[j].first &lt;= seg[i].second; ++j)</div><div class="line">                    r = max(r, seg[j].second);</div><div class="line">                seg[k++] = &#123;seg[i].first, r&#125;;</div><div class="line">            &#125;</div><div class="line">            seg.resize(k);</div><div class="line">            seg.push_back(&#123;n + <span class="number">1</span>, n + <span class="number">1</span>&#125;);</div><div class="line">            <span class="keyword">if</span>(seg[<span class="number">0</span>] == make_pair(<span class="number">1</span>, n)) &#123;</div><div class="line">                <span class="built_in">puts</span>(<span class="string">"-1"</span>);</div><div class="line">                last = <span class="number">0</span>;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span>(op == <span class="number">1</span>) &#123;</div><div class="line">                last = <span class="number">0</span>;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>, l = <span class="number">1</span>; i &lt; seg.size(); ++i) &#123;</div><div class="line">                    <span class="keyword">int</span> r = seg[i].first - <span class="number">1</span>;</div><div class="line">                    <span class="keyword">if</span>(l &lt;= r) &#123;</div><div class="line">                        last += T.query1(l, r, <span class="number">0</span>, <span class="number">1</span>, n, root[p]);</div><div class="line">                    &#125;</div><div class="line">                    l = seg[i].second + <span class="number">1</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, last);</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="number">2</span>) &#123;</div><div class="line">                last = LLINF;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>, l = <span class="number">1</span>; i &lt; seg.size(); ++i) &#123;</div><div class="line">                    <span class="keyword">int</span> r = seg[i].first - <span class="number">1</span>;</div><div class="line">                    <span class="keyword">if</span>(l &lt;= r) &#123;</div><div class="line">                        last = min(last, T.query2(l, r, <span class="number">0</span>, <span class="number">1</span>, n, root[p]));</div><div class="line">                    &#125;</div><div class="line">                    l = seg[i].second + <span class="number">1</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, last);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                last = -LLINF;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>, l = <span class="number">1</span>; i &lt; seg.size(); ++i) &#123;</div><div class="line">                    <span class="keyword">int</span> r = seg[i].first - <span class="number">1</span>;</div><div class="line">                    <span class="keyword">if</span>(l &lt;= r) &#123;</div><div class="line">                        last = max(last, T.query3(l, r, <span class="number">0</span>, <span class="number">1</span>, n, root[p]));</div><div class="line">                    &#125;</div><div class="line">                    l = seg[i].second + <span class="number">1</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, last);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 数据结构 </category>
            
            <category> 主席树 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 主席树 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDU 5820 Lights（主席树）]]></title>
      <url>/2016/08/10/HDU%205820%20Lights%EF%BC%88%E4%B8%BB%E5%B8%AD%E6%A0%91%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意： </p>
<blockquote>
<p>$给定N\times N的网格图，N= 5\times 10^5，选中其中K\le 5\times 10^5个交叉点$<br>$现判断对于任意2个交叉点之间，是否至少存在一条路径，使得这个路径的每个转弯都是交叉点$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p><img src="http://7xru22.com1.z0.glb.clouddn.com/16-8-12/91443041.jpg" alt=""><br>$官方题解说的劲啊，实现一下就好了$<br>$对于每个点(x, y)找它上面第一个点，下面第一个，以及左边第一个$<br>$没有就给到边界上，求这个2个矩形的内部点数就好$</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-08-10</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> C = <span class="number">5e4</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ps[C + <span class="number">5</span>];</div><div class="line"></div><div class="line"><span class="keyword">int</span> root[N];</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PersistentSegTree</span> &#123;</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> M = N * <span class="number">20</span>;</div><div class="line">    <span class="keyword">int</span> sz;</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></div><div class="line">        <span class="keyword">int</span> ls, rs, sum;</div><div class="line">    &#125; tree[M];</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">        sz = <span class="number">0</span>;</div><div class="line">        <span class="built_in">memset</span>(&amp;tree[<span class="number">0</span>], <span class="number">0</span>, <span class="keyword">sizeof</span> tree[<span class="number">0</span>]);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">newNode</span><span class="params">(<span class="keyword">int</span> rt)</span> </span>&#123;</div><div class="line">        tree[++sz] = tree[rt];</div><div class="line">        <span class="keyword">return</span> sz;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> v, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span>&amp; rt)</span> </span>&#123;</div><div class="line">        rt = newNode(rt);</div><div class="line">        tree[rt].sum += v;</div><div class="line">        <span class="keyword">if</span>(l == r) <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">int</span> m = l + r &gt;&gt; <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span>(o &lt;= m) update(o, v, l, m, tree[rt].ls);</div><div class="line">        <span class="keyword">else</span> update(o, v, m + <span class="number">1</span>, r, tree[rt].rs);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> rt)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R) <span class="keyword">return</span> tree[rt].sum;</div><div class="line">        <span class="keyword">int</span> m = l + r &gt;&gt; <span class="number">1</span>, ret = <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span>(L &lt;= m) ret += query(L, R, l, m, tree[rt].ls);</div><div class="line">        <span class="keyword">if</span>(R &gt; m) ret += query(L, R, m + <span class="number">1</span>, r, tree[rt].rs);</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line">&#125; T;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line"><span class="comment">//    freopen("C:\\Users\\TaoSama\\Desktop\\in.txt", "r", stdin);</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\1012.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\out.txt"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) == <span class="number">1</span> &amp;&amp; n) &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; xs;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= C; ++i) ps[i].clear();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">            <span class="keyword">int</span> x, y; <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</div><div class="line">            ps[x].push_back(y);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= C; ++i) &#123;</div><div class="line">            <span class="keyword">auto</span>&amp; v = ps[i];</div><div class="line">            <span class="keyword">if</span>(!v.size()) <span class="keyword">continue</span>;</div><div class="line">            sort(v.begin(), v.end());</div><div class="line">            v.resize(unique(v.begin(), v.end()) - v.begin());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        T.init();</div><div class="line">        <span class="keyword">bool</span> ok = <span class="literal">true</span>;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; lastX(C + <span class="number">1</span>, <span class="number">0</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">1</span>; x &lt;= C &amp;&amp; ok; ++x) &#123;</div><div class="line">            root[x] = root[x - <span class="number">1</span>];</div><div class="line">            <span class="keyword">auto</span>&amp; v = ps[x];</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v.size(); ++i) &#123;</div><div class="line">                <span class="keyword">int</span> y = v[i];</div><div class="line">                <span class="keyword">int</span> preX = lastX[y];</div><div class="line">                <span class="keyword">int</span> preY = i - <span class="number">1</span> &gt;= <span class="number">0</span> ? v[i - <span class="number">1</span>] : <span class="number">0</span>;</div><div class="line">                <span class="keyword">int</span> nxtY = i + <span class="number">1</span> &lt; v.size() ? v[i + <span class="number">1</span>] : C + <span class="number">1</span>;</div><div class="line">                <span class="keyword">int</span> num1 = T.query(preY + <span class="number">1</span>, nxtY - <span class="number">1</span>, <span class="number">1</span>, C, root[preX]);</div><div class="line">                <span class="keyword">int</span> num2 = T.query(preY + <span class="number">1</span>, nxtY - <span class="number">1</span>, <span class="number">1</span>, C, root[x - <span class="number">1</span>]);</div><div class="line">                <span class="keyword">if</span>(num1 != num2) &#123;ok = <span class="literal">false</span>; <span class="keyword">break</span>;&#125;</div><div class="line">                lastX[y] = x;</div><div class="line">                T.update(y, <span class="number">1</span>, <span class="number">1</span>, C, root[x]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="built_in">puts</span>(ok ? <span class="string">"YES"</span> : <span class="string">"NO"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 数据结构 </category>
            
            <category> 主席树 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 主席树 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDU 5812 Distance（数学、约数枚举）]]></title>
      <url>/2016/08/10/HDU%205812%20Distance%EF%BC%88%E6%95%B0%E5%AD%A6%E3%80%81%E7%BA%A6%E6%95%B0%E6%9E%9A%E4%B8%BE%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意： </p>
<blockquote>
<p>$维护1个集合S，d(x, y):=x经过多少次 乘/除素数 变成y$<br>$给定Q\le 10^5个操作，有三种类型$<br>$1 x:插入x，若x存在则无视$<br>$2 x:删除x，若x不存在则无视$<br>$3 x:求min_{y\in S} \{ d(x, y) \}$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$令f(x)=x中质因子的个数，首先发现d(x, y)=f(x/gcd(a, b))+f(y/gcd(a, b))$<br>$所以我们可以枚举x的约数d，对于所有是d的倍数的y，求min\{ f(y/d) \}$<br>$我们可以用multiset来维护(约数, 他的倍数的质因子个数)对$<br>$对于每次插入x，枚举x的约数d，插入(d, f(x/d))即可，删除同理$<br>$查询只需要枚举x的约数d，lower bound d对于的最小f(x/d)就好$<br>$时间复杂度O(q\times max\{d(A_i)\})$</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-08-09</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> q;</div><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; primes;</div><div class="line"><span class="keyword">int</span> g[N];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">gao</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; ++i) g[i] = i;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; N; ++i) &#123;</div><div class="line">        <span class="keyword">if</span>(g[i] == i) primes.push_back(i);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; primes.size() &amp;&amp; i * primes[j] &lt; N; ++j) &#123;</div><div class="line">            g[i * primes[j]] = primes[j];</div><div class="line">            <span class="keyword">if</span>(i % primes[j] == <span class="number">0</span>) <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; divisors[N];</div><div class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; factors[N];</div><div class="line"><span class="keyword">int</span> cnt[N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">factorize</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(cnt[x]) <span class="keyword">return</span> cnt[x];</div><div class="line">    <span class="keyword">int</span> y = x;</div><div class="line">    <span class="keyword">auto</span>&amp; v = factors[y];</div><div class="line">    <span class="keyword">while</span>(x &gt; <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">int</span> t = g[x];</div><div class="line">        <span class="keyword">int</span> e = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(g[x] == t) ++e, x /= t;</div><div class="line">        v.push_back(&#123;t, e&#125;);</div><div class="line">        cnt[y] += e;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> cnt[y];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> k, <span class="keyword">int</span> d)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(k == factors[x].size()) &#123;</div><div class="line">        divisors[x].push_back(d);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    dfs(x, k + <span class="number">1</span>, d);</div><div class="line">    <span class="keyword">auto</span>&amp; p = factors[x][k];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; p.second; ++i) &#123;</div><div class="line">        d *= p.first;</div><div class="line">        dfs(x, k + <span class="number">1</span>, d);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">decomp</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(divisors[x].size()) <span class="keyword">return</span>;</div><div class="line">    factorize(x);</div><div class="line">    dfs(x, <span class="number">0</span>, <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">bool</span> vis[N];</div><div class="line"><span class="built_in">multiset</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; mf; <span class="comment">//number of factors of the number's multiple</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//    freopen("C:\\Users\\TaoSama\\Desktop\\1004.in", "r", stdin);</span></div><div class="line"><span class="comment">//    freopen("C:\\Users\\TaoSama\\Desktop\\out.txt", "w", stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    gao();</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;q) == <span class="number">1</span> &amp;&amp; q) &#123;</div><div class="line">        <span class="keyword">static</span> <span class="keyword">int</span> kase = <span class="number">0</span>;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d:\n"</span>, ++kase);</div><div class="line"></div><div class="line">        mf.clear();</div><div class="line">        <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span> vis);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; ++i) &#123;</div><div class="line">            <span class="keyword">char</span> op[<span class="number">2</span>]; <span class="keyword">int</span> x; <span class="built_in">scanf</span>(<span class="string">"%s%d"</span>, op, &amp;x);</div><div class="line">            <span class="keyword">if</span>(*op == <span class="string">'I'</span>) &#123;</div><div class="line">                <span class="keyword">if</span>(vis[x]) <span class="keyword">continue</span>;</div><div class="line">                vis[x] = <span class="literal">true</span>;</div><div class="line"></div><div class="line">                decomp(x);</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; div : divisors[x]) &#123;</div><div class="line">                    <span class="keyword">int</span> num = factorize(x / div);</div><div class="line">                    mf.insert(&#123;div, num&#125;);</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(*op == <span class="string">'D'</span>) &#123;</div><div class="line">                <span class="keyword">if</span>(!vis[x]) <span class="keyword">continue</span>;</div><div class="line">                vis[x] = <span class="literal">false</span>;</div><div class="line"></div><div class="line">                decomp(x);</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; div : divisors[x]) &#123;</div><div class="line">                    <span class="keyword">int</span> num = factorize(x / div);</div><div class="line">                    mf.erase(mf.find(&#123;div, num&#125;));</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">if</span>(!mf.size()) &#123;</div><div class="line">                    <span class="built_in">puts</span>(<span class="string">"-1"</span>);</div><div class="line">                    <span class="keyword">continue</span>;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                decomp(x);</div><div class="line">                <span class="keyword">int</span> ans = INF;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; div : divisors[x]) &#123;</div><div class="line">                    <span class="keyword">auto</span> iter = mf.lower_bound(&#123;div, -INF&#125;);</div><div class="line">                    <span class="keyword">if</span>(iter != mf.end() &amp;&amp; iter-&gt;first == div) &#123;</div><div class="line">                        <span class="keyword">int</span> num = factorize(x / div);</div><div class="line">                        ans = min(ans, num + iter-&gt;second);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 数学 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 约数枚举 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDU 5811 Colosseo（拓扑排序、LIS）]]></title>
      <url>/2016/08/10/HDU%205811%20Colosseo%EF%BC%88%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F%E3%80%81LIS%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意： </p>
<blockquote>
<p>$给定N\le 10^3个人，给定拓扑关系，现将他们分为两个集合T1和T2$<br>$问各自是否存在合法拓扑序，且在保证拓扑序的情况下，T2最多能添加多少人到T1中$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$先暴力对T1和T2求个拓扑序，之后倒着把T2往T1里尝试插入，记录下位置$<br>$最后对这个位置求个LIS就是最多能添加的人数$<br>$时间复杂度O(n^2)$</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-08-10</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e3</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">bool</span> g[N][N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ok</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; G, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; seq)</span> </span>&#123;</div><div class="line">    seq = <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(G.size(), <span class="number">0</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> x : G) &#123;</div><div class="line">        <span class="keyword">int</span> s = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> y : G) s += g[x][y];</div><div class="line">        <span class="keyword">if</span>(seq[s]) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        seq[s] = x;</div><div class="line">    &#125;</div><div class="line">    reverse(seq.begin(), seq.end());</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt", "w", stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d\n"</span>, &amp;n, &amp;m) == <span class="number">2</span> &amp;&amp; (n || m)) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">            <span class="keyword">char</span> buf[N &lt;&lt; <span class="number">1</span>]; gets(buf + <span class="number">1</span>);</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; buf[j]; j += <span class="number">2</span>) g[i][j / <span class="number">2</span> + <span class="number">1</span>] = buf[j] - <span class="string">'0'</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[<span class="number">2</span>];</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vis(n + <span class="number">1</span>, <span class="number">0</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</div><div class="line">            <span class="keyword">int</span> x; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line">            G[<span class="number">0</span>].push_back(x);</div><div class="line">            vis[x] = <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="keyword">if</span>(!vis[i]) G[<span class="number">1</span>].push_back(i);</div><div class="line"></div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; seq[<span class="number">2</span>];</div><div class="line">        <span class="keyword">if</span>(ok(G[<span class="number">0</span>], seq[<span class="number">0</span>]) &amp;&amp; ok(G[<span class="number">1</span>], seq[<span class="number">1</span>])) &#123;</div><div class="line"></div><div class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; pos(seq[<span class="number">1</span>].size());</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; seq[<span class="number">1</span>].size(); ++i) &#123;</div><div class="line">                <span class="keyword">int</span> x = seq[<span class="number">1</span>][i];</div><div class="line">                <span class="keyword">int</span> p = seq[<span class="number">0</span>].size();</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = seq[<span class="number">0</span>].size() - <span class="number">1</span>; ~j; --j) &#123;</div><div class="line">                    <span class="keyword">int</span> y = seq[<span class="number">0</span>][j];</div><div class="line">                    <span class="keyword">if</span>(g[x][y]) p = j;</div><div class="line">                    <span class="keyword">else</span> <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="keyword">bool</span> ok = <span class="literal">true</span>;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; p &amp;&amp; ok; ++j) &#123;</div><div class="line">                    <span class="keyword">int</span> y = seq[<span class="number">0</span>][j];</div><div class="line">                    <span class="keyword">if</span>(!g[y][x]) ok = <span class="literal">false</span>;</div><div class="line">                &#125;</div><div class="line">                pos[i] = ok ? p : <span class="number">-1</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dp(pos.size(), <span class="number">0</span>);</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pos.size(); ++i) &#123;</div><div class="line">                <span class="keyword">if</span>(pos[i] == <span class="number">-1</span>) <span class="keyword">continue</span>;</div><div class="line">                dp[i] = <span class="number">1</span>;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; ++j)</div><div class="line">                    <span class="keyword">if</span>(pos[j] != <span class="number">-1</span> &amp;&amp; pos[i] &gt;= pos[j])</div><div class="line">                        dp[i] = max(dp[i], dp[j] + <span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="built_in">printf</span>(<span class="string">"YES %d\n"</span>, *max_element(dp.begin(), dp.end()));</div><div class="line"></div><div class="line">        &#125; <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"NO"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 图论 </category>
            
            <category> 拓扑排序 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 拓扑排序 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDU 4348 To the moon （主席树、标记永久化）]]></title>
      <url>/2016/08/09/HDU%204348%20To%20the%20moon%20%EF%BC%88%E4%B8%BB%E5%B8%AD%E6%A0%91%E3%80%81%E6%A0%87%E8%AE%B0%E6%B0%B8%E4%B9%85%E5%8C%96%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意： </p>
<blockquote>
<p>$给定N\le 10^5个数，Q\le 10^5询问，初始时间戳Timestamp=0$<br>$C l r v:Timestamp+1，将[l, r]区间的数都+v$<br>$Q l r:查询当前Timestamp的[l, r]区间和$<br>$H l r t:查询历史Timestamp=t的[l, r]区间和，保证合法$<br>$B t:回到历史Timestamp=t的时刻，保证合法，保证不会回到将来$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$卡空间所以打永久化lazy标记$<br>$对于主席树继承更新的时候还是不要pushUp了，不然还要算lazy的$<br>$对于查询的话，一路上把标记都加上，（一句话理解标记永久化系列$<br>$话说好久没有画主席树来debug了，(大雾$</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-08-08</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, q;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"></div><div class="line"><span class="keyword">int</span> root[N];</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PersistentSegTree</span> &#123;</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e5</span> * <span class="number">30</span>;</div><div class="line">    <span class="keyword">int</span> sz;</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></div><div class="line">        <span class="keyword">int</span> ls, rs, add;</div><div class="line">        LL sum;</div><div class="line">    &#125; tree[M];</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">        sz = <span class="number">0</span>;</div><div class="line">        <span class="built_in">memset</span>(&amp;tree[<span class="number">0</span>], <span class="number">0</span>, <span class="keyword">sizeof</span> tree[<span class="number">0</span>]);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">newNode</span><span class="params">(<span class="keyword">int</span> rt)</span> </span>&#123;</div><div class="line">        tree[++sz] = tree[rt];</div><div class="line">        <span class="keyword">return</span> sz;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">up</span><span class="params">(<span class="keyword">int</span> rt)</span> </span>&#123;</div><div class="line">        tree[rt].sum = tree[tree[rt].ls].sum + tree[tree[rt].rs].sum;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span>&amp; rt)</span> </span>&#123;</div><div class="line">        rt = newNode(<span class="number">0</span>);</div><div class="line">        <span class="keyword">if</span>(l == r) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%I64d"</span>, &amp;tree[rt].sum);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> m = l + r &gt;&gt; <span class="number">1</span>;</div><div class="line">        build(l, m, tree[rt].ls);</div><div class="line">        build(m + <span class="number">1</span>, r, tree[rt].rs);</div><div class="line">        up(rt);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> rt)</span> </span>&#123;</div><div class="line">        pr(<span class="string">"show"</span>); pr(rt); pr(l); pr(r); pr(tree[rt].add); prln(tree[rt].sum);</div><div class="line">        <span class="keyword">if</span>(l == r) <span class="keyword">return</span> ;</div><div class="line">        <span class="keyword">int</span> m = l + r &gt;&gt; <span class="number">1</span>;</div><div class="line">        show(l, m, tree[rt].ls);</div><div class="line">        show(m + <span class="number">1</span>, r, tree[rt].rs);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> v, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span>&amp; rt)</span> </span>&#123;</div><div class="line">        rt = newNode(rt);</div><div class="line">        tree[rt].sum += v * (min(r, R) - max(l, L) + <span class="number">1</span>);</div><div class="line">        <span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R) &#123;</div><div class="line">            tree[rt].add += v;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> m = l + r &gt;&gt; <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span>(L &lt;= m) update(L, R, v, l, m, tree[rt].ls);</div><div class="line">        <span class="keyword">if</span>(R &gt; m) update(L, R, v, m + <span class="number">1</span>, r, tree[rt].rs);</div><div class="line">    &#125;</div><div class="line">    <span class="function">LL <span class="title">query</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> rt)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R) <span class="keyword">return</span> tree[rt].sum;</div><div class="line">        LL ret = <span class="number">1L</span>L * tree[rt].add * (min(r, R) - max(l, L) + <span class="number">1</span>);</div><div class="line">        <span class="keyword">int</span> m = l + r &gt;&gt; <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span>(L &lt;= m) ret += query(L, R, l, m, tree[rt].ls);</div><div class="line">        <span class="keyword">if</span>(R &gt; m) ret += query(L, R, m + <span class="number">1</span>, r, tree[rt].rs);</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line">&#125; T;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;q) == <span class="number">2</span>) &#123;</div><div class="line">        T.init();</div><div class="line">        T.build(<span class="number">1</span>, n, root[<span class="number">0</span>]);</div><div class="line"></div><div class="line">        <span class="keyword">int</span> timStp = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(q--) &#123;</div><div class="line">            <span class="keyword">char</span> op[<span class="number">2</span>]; <span class="built_in">scanf</span>(<span class="string">"%s"</span>, op);</div><div class="line">            <span class="keyword">if</span>(*op == <span class="string">'C'</span>) &#123;</div><div class="line">                <span class="keyword">int</span> l, r, d; <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;l, &amp;r, &amp;d);</div><div class="line">                ++timStp;</div><div class="line">                root[timStp] = root[timStp - <span class="number">1</span>];</div><div class="line"><span class="comment">//                T.show(1, n, root[timStp]);</span></div><div class="line">                T.update(l, r, d, <span class="number">1</span>, n, root[timStp]);</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(*op == <span class="string">'Q'</span>) &#123;</div><div class="line">                <span class="keyword">int</span> l, r; <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;l, &amp;r);</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, T.query(l, r, <span class="number">1</span>, n, root[timStp]));</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(*op == <span class="string">'H'</span>) &#123;</div><div class="line">                <span class="keyword">int</span> l, r, t; <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;l, &amp;r, &amp;t);</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, T.query(l, r, <span class="number">1</span>, n, root[t]));</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;timStp);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 数据结构 </category>
            
            <category> 主席树 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 主席树 </tag>
            
            <tag> 标记永久化 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CodeForces 231E Cactus（边双缩点、LCA）]]></title>
      <url>/2016/08/09/CodeForces%20231E%20Cactus%EF%BC%88%E8%BE%B9%E5%8F%8C%E7%BC%A9%E7%82%B9%E3%80%81LCA%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意： </p>
<blockquote>
<p>$给定一颗N\le 10^5个点的仙人掌，M\le 10^5条边$<br>$仙人掌定义为：任意一个点至多属于一个简单环$<br>$Q\le 10^5询问，(u, v)有多少条简单路径可达$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$考虑仙人掌的形态，任意2点之间的路径必然是由许多链和环构成$<br>$一个环有2种走法，每经过一个环方法数\times 2$<br>$那么问题转化为任意两点之间有多少简单环$<br>$那么显然边双缩点，点权为0/1（如果bcc大小&gt;1）$<br>$之后LCA求2点之间的路径长度就好，记得特判LCA$<br>$答案ans=2^{环的个数}$</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-08-07</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[N], T[N];</div><div class="line"></div><div class="line"><span class="keyword">int</span> dfn[N], low[N], sz[N], id[N], bcc, dfsNum;</div><div class="line"><span class="keyword">int</span> stk[N], top;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> f)</span> </span>&#123;</div><div class="line">    dfn[u] = low[u] = ++dfsNum;</div><div class="line">    stk[++top] = u;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v : G[u]) &#123;</div><div class="line">        <span class="keyword">if</span>(v == f) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">if</span>(!dfn[v]) &#123;</div><div class="line">            tarjan(v, u);</div><div class="line">            low[u] = min(low[u], low[v]);</div><div class="line">        &#125; <span class="keyword">else</span> low[u] = min(low[u], dfn[v]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(low[u] == dfn[u]) &#123;</div><div class="line">        ++bcc;</div><div class="line">        <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</div><div class="line">            <span class="keyword">int</span> v = stk[top--];</div><div class="line">            ++sz[bcc];</div><div class="line">            id[v] = bcc;</div><div class="line">            <span class="keyword">if</span>(v == u) <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> LOG = <span class="number">17</span>;</div><div class="line"><span class="keyword">int</span> dep[N], dis[N], p[LOG][N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> f)</span> </span>&#123;</div><div class="line">    p[<span class="number">0</span>][u] = f;</div><div class="line">    dis[u] = dis[f] + (sz[u] &gt; <span class="number">1</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; LOG; ++i) p[i][u] = p[i - <span class="number">1</span>][p[i - <span class="number">1</span>][u]];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v : T[u]) &#123;</div><div class="line">        <span class="keyword">if</span>(v == f) <span class="keyword">continue</span>;</div><div class="line">        dep[v] = dep[u] + <span class="number">1</span>;</div><div class="line">        dfs(v, u);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(dep[u] &gt; dep[v]) swap(u, v);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; LOG; ++i)</div><div class="line">        <span class="keyword">if</span>(dep[v] - dep[u] &gt;&gt; i &amp; <span class="number">1</span>) v = p[i][v];</div><div class="line">    <span class="keyword">if</span>(u == v) <span class="keyword">return</span> u;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = LOG - <span class="number">1</span>; ~i; --i)</div><div class="line">        <span class="keyword">if</span>(p[i][u] != p[i][v])</div><div class="line">            u = p[i][u], v = p[i][v];</div><div class="line">    <span class="keyword">return</span> p[<span class="number">0</span>][u];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> g = lca(u, v);</div><div class="line">    <span class="keyword">return</span> dis[u] + dis[v] - <span class="number">2</span> * dis[g] + (sz[g] &gt; <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">    bcc = dfsNum = <span class="number">0</span>;</div><div class="line">    <span class="built_in">memset</span>(dfn, <span class="number">0</span>, <span class="keyword">sizeof</span> dfn);</div><div class="line">    tarjan(<span class="number">1</span>, <span class="number">-1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">ksm</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> ret = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(; n; n &gt;&gt;= <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">if</span>(n &amp; <span class="number">1</span>) ret = <span class="number">1L</span>L * ret * x % MOD;</div><div class="line">        x = <span class="number">1L</span>L * x * x % MOD;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</div><div class="line">        <span class="keyword">int</span> u, v; <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</div><div class="line">        G[u].push_back(v);</div><div class="line">        G[v].push_back(u);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    init();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">        <span class="keyword">int</span> u = id[i];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j : G[i]) &#123;</div><div class="line">            <span class="keyword">int</span> v = id[j];</div><div class="line">            <span class="keyword">if</span>(u == v) <span class="keyword">continue</span>;</div><div class="line">            T[u].push_back(v);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    dfs(<span class="number">1</span>, <span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> q; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;q);</div><div class="line">    <span class="keyword">while</span>(q--) &#123;</div><div class="line">        <span class="keyword">int</span> x, y; <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</div><div class="line">        <span class="keyword">int</span> d = get(id[x], id[y]);</div><div class="line">        <span class="keyword">int</span> ans = ksm(<span class="number">2</span>, d);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 图论 </category>
            
            <category> 连通图 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 边双缩点 </tag>
            
            <tag> LCA </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDU 5803 Zhu’s Math Problem（数位dp）]]></title>
      <url>/2016/08/08/HDU%205803%20Zhu%E2%80%99s%20Math%20Problem%EF%BC%88%E6%95%B0%E4%BD%8Ddp%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意： </p>
<blockquote>
<p>$给定A，B，C，D\in[1, 10^{18} ]$<br>$求满足a+c&gt;b+d \cup a+d\ge b+c且a\in[0, A], b\in [0, B], c\in[0, C], d\in[0, D]$<br>$的不同的四元组(a, b, c, d)个数$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$数位dp，每次转移4个数，开1个msk表示每个数被限制的情况$<br>$加状态表示a+c&gt;b+d和a+d\ge b+c$<br>$f[i][msk][f1][f2]:=从高到低第i位，状态如上的满足四元组个数$<br>$分解成二进制来转移，仔细想想可以发现f1，f2\in[-2, 2]$<br>$如果越界一定满足/不满足，所以就可以做了$<br>$时间复杂度O(60\times 2^4\times 5\times 5\times 2^4)$</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-08-08</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line">LL a[<span class="number">4</span>];</div><div class="line"><span class="keyword">int</span> f[<span class="number">61</span>][<span class="number">1</span> &lt;&lt; <span class="number">4</span>][<span class="number">5</span>][<span class="number">5</span>]; <span class="comment">//[-2, 2]</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span>&amp; x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>((x += y) &gt;= MOD) x -= MOD;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//a+c-b-d&gt;0 a+d-b-c&gt;=0</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> O = <span class="number">2</span>; <span class="comment">//offset</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> msk, <span class="keyword">int</span> f1, <span class="keyword">int</span> f2)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(x == <span class="number">-1</span>) <span class="keyword">return</span> f1 &gt; <span class="number">0</span> &amp;&amp; f2 &gt;= <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span>&amp; ret = f[x][msk][f1 + O][f2 + O];</div><div class="line">    <span class="keyword">if</span>(~ret) <span class="keyword">return</span> ret;</div><div class="line"></div><div class="line">    ret = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> to[<span class="number">4</span>];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) to[i] = (msk &gt;&gt; i &amp; <span class="number">1</span>) ? <span class="number">1</span> : a[i] &gt;&gt; x &amp; <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> a = <span class="number">0</span>; a &lt;= to[<span class="number">0</span>]; ++a) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> b = <span class="number">0</span>; b &lt;= to[<span class="number">1</span>]; ++b) &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> c = <span class="number">0</span>; c &lt;= to[<span class="number">2</span>]; ++c) &#123;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> d = <span class="number">0</span>; d &lt;= to[<span class="number">3</span>]; ++d) &#123;</div><div class="line">                    <span class="keyword">int</span> newF1 = f1 * <span class="number">2</span> + a + c - b - d;</div><div class="line">                    <span class="keyword">int</span> newF2 = f2 * <span class="number">2</span> + a + d - b - c;</div><div class="line">                    <span class="keyword">if</span>(newF1 &lt; <span class="number">-2</span> || newF2 &lt; <span class="number">-2</span>) <span class="keyword">continue</span>;</div><div class="line">                    newF1 = min(newF1, <span class="number">2</span>);</div><div class="line">                    newF2 = min(newF2, <span class="number">2</span>);</div><div class="line"></div><div class="line">                    <span class="keyword">int</span> newMsk = msk;</div><div class="line">                    <span class="keyword">if</span>(a != to[<span class="number">0</span>]) newMsk |= <span class="number">1</span> &lt;&lt; <span class="number">0</span>;</div><div class="line">                    <span class="keyword">if</span>(b != to[<span class="number">1</span>]) newMsk |= <span class="number">1</span> &lt;&lt; <span class="number">1</span>;</div><div class="line">                    <span class="keyword">if</span>(c != to[<span class="number">2</span>]) newMsk |= <span class="number">1</span> &lt;&lt; <span class="number">2</span>;</div><div class="line">                    <span class="keyword">if</span>(d != to[<span class="number">3</span>]) newMsk |= <span class="number">1</span> &lt;&lt; <span class="number">3</span>;</div><div class="line"></div><div class="line">                    add(ret, dfs(x - <span class="number">1</span>, newMsk, newF1, newF2));</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">while</span>(t--) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) <span class="built_in">scanf</span>(<span class="string">"%I64d"</span>, a + i);</div><div class="line">        <span class="built_in">memset</span>(f, <span class="number">-1</span>, <span class="keyword">sizeof</span> f);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, dfs(<span class="number">60</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 动态规划 </category>
            
            <category> 数位dp </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数位dp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDU 5799 This world need more Zhu（树上莫队）]]></title>
      <url>/2016/08/08/HDU%205799%20This%20world%20need%20more%20Zhu%EF%BC%88%E6%A0%91%E4%B8%8A%E8%8E%AB%E9%98%9F%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$给定一颗N\le 10^5个点的树，点权A_i\le 10^9，Q\le 10^5，询问形如op u v a b$<br>$op=1时，u=v，查询子树u中，gcd(\sum_{cnt[x]=a} x, \sum_{cnt[y]=b} y)$<br>$op=2时，查询路径(u, v)中，gcd(\sum_{cnt[x]=a} x, \sum_{cnt[y]=b} y)$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$op=1，dfs序搞成序列上的莫队，op=2树上莫队$<br>$板题\times 2$</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-08-08</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> B = <span class="number">250</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">int</span> n, m, a[N], b[N];</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> v, nxt;</div><div class="line">&#125; edge[N &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> head[N], eCnt;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</div><div class="line">    edge[eCnt] = &#123;v, head[u]&#125;;</div><div class="line">    head[u] = eCnt++;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> L[N], R[N], dep[N], fa[N], vs[N], dfsNum;</div><div class="line"><span class="keyword">int</span> id[N], blocks;</div><div class="line"><span class="keyword">int</span> stk[N], top;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> f)</span> </span>&#123;</div><div class="line">    L[u] = ++dfsNum;</div><div class="line">    vs[dfsNum] = u;</div><div class="line">    fa[u] = f;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> btm = top;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; ~i; i = edge[i].nxt) &#123;</div><div class="line">        <span class="keyword">int</span> v = edge[i].v;</div><div class="line">        <span class="keyword">if</span>(v == f) <span class="keyword">continue</span>;</div><div class="line"></div><div class="line">        dep[v] = dep[u] + <span class="number">1</span>;</div><div class="line">        dfs(v, u);</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(top - btm &gt;= B) &#123;</div><div class="line">            ++blocks;</div><div class="line">            <span class="keyword">while</span>(top != btm) &#123;</div><div class="line">                <span class="keyword">int</span> v = stk[top--];</div><div class="line">                id[v] = blocks;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    R[u] = dfsNum;</div><div class="line">    stk[++top] = u;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Query</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> l, r, block, a, b, id;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmpSeq</span><span class="params">(<span class="keyword">const</span> Query&amp; a, <span class="keyword">const</span> Query&amp; b)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> a.block &lt; b.block ||</div><div class="line">           a.block == b.block &amp;&amp; a.r &lt; b.r;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmpTree</span><span class="params">(<span class="keyword">const</span> Query&amp; a, <span class="keyword">const</span> Query&amp; b)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> id[a.l] &lt; id[b.l] ||</div><div class="line">           id[a.l] == id[b.l] &amp;&amp; L[a.r] &lt; L[b.r];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> cnt[N];</div><div class="line">LL sum[N], ans[N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">    sum[cnt[b[x]]] -= a[x];</div><div class="line">    ++cnt[b[x]];</div><div class="line">    sum[cnt[b[x]]] += a[x];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">    sum[cnt[b[x]]] -= a[x];</div><div class="line">    --cnt[b[x]];</div><div class="line">    sum[cnt[b[x]]] += a[x];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">bool</span> in[N];</div><div class="line"><span class="keyword">int</span> cross;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(in[x]) &#123;</div><div class="line">        in[x] = <span class="literal">false</span>;</div><div class="line">        del(x);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        in[x] = <span class="literal">true</span>;</div><div class="line">        add(x);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">moveUp</span><span class="params">(<span class="keyword">int</span>&amp; x)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(!cross) &#123;</div><div class="line">        <span class="keyword">if</span>(in[x] &amp;&amp; !in[fa[x]]) cross = x;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(in[fa[x]] &amp;&amp; !in[x]) cross = fa[x];</div><div class="line">    &#125;</div><div class="line">    reverse(x); x = fa[x];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(a == b) <span class="keyword">return</span>;</div><div class="line">    cross = <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span>(in[b]) cross = b;</div><div class="line">    <span class="keyword">while</span>(dep[a] &gt; dep[b]) moveUp(a);</div><div class="line">    <span class="keyword">while</span>(dep[b] &gt; dep[a]) moveUp(b);</div><div class="line">    <span class="keyword">while</span>(a != b) moveUp(a), moveUp(b);</div><div class="line">    reverse(a); reverse(cross);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">gao</span><span class="params">()</span> </span>&#123;</div><div class="line">    dfsNum = blocks = <span class="number">0</span>;</div><div class="line">    dfs(<span class="number">1</span>, <span class="number">0</span>);</div><div class="line">    <span class="keyword">while</span>(top) id[stk[top--]] = blocks;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">while</span>(t--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line"></div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; xs(n);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a + i);</div><div class="line">            xs[i - <span class="number">1</span>] = a[i];</div><div class="line">        &#125;</div><div class="line">        sort(xs.begin(), xs.end());</div><div class="line">        xs.resize(unique(xs.begin(), xs.end()) - xs.begin());</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</div><div class="line">            b[i] = lower_bound(xs.begin(), xs.end(), a[i]) - xs.begin() + <span class="number">1</span>;</div><div class="line"></div><div class="line">        eCnt = <span class="number">0</span>; <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</div><div class="line">            <span class="keyword">int</span> u, v; <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</div><div class="line">            addEdge(u, v);</div><div class="line">            addEdge(v, u);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        gao();</div><div class="line"></div><div class="line">        <span class="built_in">vector</span>&lt;Query&gt; qs, qt;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</div><div class="line">            <span class="keyword">int</span> op, u, v, a, b;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d%d"</span>, &amp;op, &amp;u, &amp;v, &amp;a, &amp;b);</div><div class="line">            <span class="keyword">if</span>(op == <span class="number">1</span>) &#123;</div><div class="line">                <span class="keyword">int</span> p = L[u] / B;</div><div class="line">                qs.push_back(&#123;L[u], R[u], p, a, b, i&#125;);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">if</span>(id[u] &gt; id[v]) swap(u, v);</div><div class="line">                qt.push_back(&#123;u, v, <span class="number">-1</span>, a, b, i&#125;);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        &#123;</div><div class="line">            <span class="comment">//subtree</span></div><div class="line">            sort(qs.begin(), qs.end(), cmpSeq);</div><div class="line">            <span class="built_in">memset</span>(cnt, <span class="number">0</span>, <span class="keyword">sizeof</span> cnt);</div><div class="line">            <span class="built_in">memset</span>(sum, <span class="number">0</span>, <span class="keyword">sizeof</span> sum);</div><div class="line"></div><div class="line">            <span class="keyword">int</span> l = <span class="number">1</span>, r = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; q : qs) &#123;</div><div class="line">                <span class="keyword">while</span>(r &lt; q.r) add(vs[++r]);</div><div class="line">                <span class="keyword">while</span>(l &lt; q.l) del(vs[l++]);</div><div class="line">                <span class="keyword">while</span>(r &gt; q.r) del(vs[r--]);</div><div class="line">                <span class="keyword">while</span>(l &gt; q.l) add(vs[--l]);</div><div class="line"></div><div class="line">                ans[q.id] = __gcd(sum[q.a], sum[q.b]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        &#123;</div><div class="line">            <span class="comment">//path</span></div><div class="line">            sort(qt.begin(), qt.end(), cmpTree);</div><div class="line">            <span class="built_in">memset</span>(cnt, <span class="number">0</span>, <span class="keyword">sizeof</span> cnt);</div><div class="line">            <span class="built_in">memset</span>(sum, <span class="number">0</span>, <span class="keyword">sizeof</span> sum);</div><div class="line">            <span class="built_in">memset</span>(in, <span class="number">0</span>, <span class="keyword">sizeof</span> in);</div><div class="line"></div><div class="line">            add(<span class="number">1</span>); in[<span class="number">1</span>] = <span class="literal">true</span>;</div><div class="line">            <span class="keyword">int</span> l = <span class="number">1</span>, r = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; q : qt) &#123;</div><div class="line">                move(l, q.l);</div><div class="line">                move(r, q.r);</div><div class="line">                l = q.l; r = q.r;</div><div class="line"></div><div class="line">                ans[q.id] = __gcd(sum[q.a], sum[q.b]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">static</span> <span class="keyword">int</span> kase = <span class="number">0</span>;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d:\n"</span>, ++kase);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, ans[i]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 数据结构 </category>
            
            <category> 树上莫队 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 树上莫队 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SPOJ Count on a tree II（树上莫队）]]></title>
      <url>/2016/08/08/SPOJ%20Count%20on%20a%20tree%20II%EF%BC%88%E6%A0%91%E4%B8%8A%E8%8E%AB%E9%98%9F%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$给定一颗N\le 40000个点的树，点权A_i\le 10^9$<br>$Q\le 10^5，询问(u, v)路径上有多少不同的点权$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$树上莫队板子题$<br>$具体看集训队2013论文，《浅谈分块思想在一类数据处理问题中的应用》$<br>$板子来自多校6的卿学姐博客题解代码$</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-08-08</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> B = <span class="number">200</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m, a[N], b[N];</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> v, nxt;</div><div class="line">&#125; edge[N &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> head[N], eCnt;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</div><div class="line">    edge[eCnt] = &#123;v, head[u]&#125;;</div><div class="line">    head[u] = eCnt++;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> L[N], R[N], dep[N], fa[N], vs[N], dfsNum;</div><div class="line"><span class="keyword">int</span> id[N], blocks;</div><div class="line"><span class="keyword">int</span> stk[N], top;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> f)</span> </span>&#123;</div><div class="line">    L[u] = ++dfsNum;</div><div class="line">    vs[dfsNum] = u;</div><div class="line">    fa[u] = f;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> btm = top;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; ~i; i = edge[i].nxt) &#123;</div><div class="line">        <span class="keyword">int</span> v = edge[i].v;</div><div class="line">        <span class="keyword">if</span>(v == f) <span class="keyword">continue</span>;</div><div class="line"></div><div class="line">        dep[v] = dep[u] + <span class="number">1</span>;</div><div class="line">        dfs(v, u);</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(top - btm &gt;= B) &#123;</div><div class="line">            ++blocks;</div><div class="line">            <span class="keyword">while</span>(top != btm) &#123;</div><div class="line">                <span class="keyword">int</span> v = stk[top--];</div><div class="line">                id[v] = blocks;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    R[u] = dfsNum;</div><div class="line">    stk[++top] = u;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Query</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> l, r, id;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmpTree</span><span class="params">(<span class="keyword">const</span> Query&amp; a, <span class="keyword">const</span> Query&amp; b)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> id[a.l] &lt; id[b.l] ||</div><div class="line">           id[a.l] == id[b.l] &amp;&amp; L[a.r] &lt; L[b.r];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> cnt[N];</div><div class="line"><span class="keyword">int</span> sum, ans[N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(cnt[b[x]]++ == <span class="number">0</span>) ++sum;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(--cnt[b[x]] == <span class="number">0</span>) --sum;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">bool</span> in[N];</div><div class="line"><span class="keyword">int</span> cross;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(in[x]) &#123;</div><div class="line">        in[x] = <span class="literal">false</span>;</div><div class="line">        del(x);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        in[x] = <span class="literal">true</span>;</div><div class="line">        add(x);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">moveUp</span><span class="params">(<span class="keyword">int</span>&amp; x)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(!cross) &#123;</div><div class="line">        <span class="keyword">if</span>(in[x] &amp;&amp; !in[fa[x]]) cross = x;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(in[fa[x]] &amp;&amp; !in[x]) cross = fa[x];</div><div class="line">    &#125;</div><div class="line">    reverse(x); x = fa[x];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(a == b) <span class="keyword">return</span>;</div><div class="line">    cross = <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span>(in[b]) cross = b;</div><div class="line">    <span class="keyword">while</span>(dep[a] &gt; dep[b]) moveUp(a);</div><div class="line">    <span class="keyword">while</span>(dep[b] &gt; dep[a]) moveUp(b);</div><div class="line">    <span class="keyword">while</span>(a != b) moveUp(a), moveUp(b);</div><div class="line">    reverse(a); reverse(cross);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">gao</span><span class="params">()</span> </span>&#123;</div><div class="line">    dfsNum = blocks = <span class="number">0</span>;</div><div class="line">    dfs(<span class="number">1</span>, <span class="number">0</span>);</div><div class="line">    <span class="keyword">while</span>(top) id[stk[top--]] = blocks;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line"></div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; xs(n);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a + i);</div><div class="line">        xs[i - <span class="number">1</span>] = a[i];</div><div class="line">    &#125;</div><div class="line">    sort(xs.begin(), xs.end());</div><div class="line">    xs.resize(unique(xs.begin(), xs.end()) - xs.begin());</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</div><div class="line">        b[i] = lower_bound(xs.begin(), xs.end(), a[i]) - xs.begin() + <span class="number">1</span>;</div><div class="line"></div><div class="line">    eCnt = <span class="number">0</span>; <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</div><div class="line">        <span class="keyword">int</span> u, v; <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</div><div class="line">        addEdge(u, v);</div><div class="line">        addEdge(v, u);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    gao();</div><div class="line"></div><div class="line">    <span class="built_in">vector</span>&lt;Query&gt; qt(m);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</div><div class="line">        <span class="keyword">int</span> u, v; <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</div><div class="line">        <span class="keyword">if</span>(id[u] &gt; id[v]) swap(u, v);</div><div class="line">        qt[i - <span class="number">1</span>] = &#123;u, v, i&#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    sort(qt.begin(), qt.end(), cmpTree);</div><div class="line"></div><div class="line">    sum = <span class="number">0</span>;</div><div class="line">    <span class="built_in">memset</span>(cnt, <span class="number">0</span>, <span class="keyword">sizeof</span> cnt);</div><div class="line">    <span class="built_in">memset</span>(in, <span class="number">0</span>, <span class="keyword">sizeof</span> in);</div><div class="line"></div><div class="line">    add(<span class="number">1</span>); in[<span class="number">1</span>] = <span class="literal">true</span>;</div><div class="line">    <span class="keyword">int</span> l = <span class="number">1</span>, r = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; q : qt) &#123;</div><div class="line">        move(l, q.l);</div><div class="line">        move(r, q.r);</div><div class="line">        l = q.l; r = q.r;</div><div class="line"></div><div class="line">        ans[q.id] = sum;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans[i]);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 数据结构 </category>
            
            <category> 树上莫队 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 树上莫队 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[BZOJ 1086 王室联邦（块状树）]]></title>
      <url>/2016/08/08/BZOJ%201086%20%E7%8E%8B%E5%AE%A4%E8%81%94%E9%82%A6%EF%BC%88%E5%9D%97%E7%8A%B6%E6%A0%91%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$给定一颗N\le 1000个点的树$<br>$要求将这棵树分成一些块，使每块大小在[B, 3B]之间，1\le B\le N$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$PO娘的博客讲的很清楚辣，手把手教你块状树$<br><a href="http://blog.csdn.net/popoqqq/article/details/42772237" target="_blank" rel="external">传送门</a></p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-08-08</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e3</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, B;</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[N];</div><div class="line"></div><div class="line"><span class="keyword">int</span> stk[N], top;</div><div class="line"><span class="keyword">int</span> blocks, id[N], rt[N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> f)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> btm = top;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G[u].size(); ++i) &#123;</div><div class="line">        <span class="keyword">int</span> v = G[u][i];</div><div class="line">        <span class="keyword">if</span>(v == f) <span class="keyword">continue</span>;</div><div class="line">        dfs(v, u);</div><div class="line">        <span class="keyword">if</span>(top - btm &gt;= B) &#123;</div><div class="line">            rt[++blocks] = u;</div><div class="line">            <span class="keyword">while</span>(top != btm) &#123;</div><div class="line">                <span class="keyword">int</span> v = stk[top--];</div><div class="line">                id[v] = blocks;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    stk[++top] = u;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;B);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</div><div class="line">        <span class="keyword">int</span> u, v; <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</div><div class="line">        G[u].push_back(v);</div><div class="line">        G[v].push_back(u);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    dfs(<span class="number">1</span>, <span class="number">0</span>);</div><div class="line">    <span class="keyword">while</span>(top) id[stk[top--]] = blocks;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, blocks);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">printf</span>(<span class="string">"%d%c"</span>, id[i], <span class="string">" \n"</span>[i == n]);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= blocks; ++i) <span class="built_in">printf</span>(<span class="string">"%d%c"</span>, rt[i], <span class="string">" \n"</span>[i == blocks]);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 数据结构 </category>
            
            <category> 树上莫队 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 树上莫队 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDU 3364 Lanterns（线性基）]]></title>
      <url>/2016/08/06/HDU%203364%20Lanterns%EF%BC%88%E7%BA%BF%E6%80%A7%E5%9F%BA%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$N\le 50个灯，M\le 50个开关，每个开关控制一些灯$<br>$Q\le 1000次询问，给定N个灯的状态，查询方法数$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$开关问题，直接暴力复杂度O(qn^2m)就算不压位都跑得飞快$<br>$当然反过来，对每个开关构建矩阵，高斯消元求出线性基$<br>$之后对于每个状态只要判断能否组合成就可以了$<br>$压位之后，时间复杂度O({ n^2m \over 64 }+qn)$</p>
</blockquote>
<p>代码一（线性基）:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-07-28</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">50</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line">LL a[N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">xorGauss</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> r = <span class="number">0</span>, c = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(; r &lt; n &amp;&amp; c &lt; m; ++r, ++c) &#123;</div><div class="line">        <span class="keyword">int</span> p = r;</div><div class="line">        <span class="keyword">for</span>(; p &lt; n; ++p) <span class="keyword">if</span>(a[p] &gt;&gt; c &amp; <span class="number">1</span>) <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">if</span>(p == n) &#123;--r; <span class="keyword">continue</span>;&#125;</div><div class="line">        swap(a[p], a[r]);</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</div><div class="line">            <span class="keyword">if</span>(i != r) &#123;</div><div class="line">                <span class="keyword">if</span>(a[i] &gt;&gt; c &amp; <span class="number">1</span>) a[i] ^= a[r];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> r;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(LL x, LL rnk)</span> </span>&#123;</div><div class="line">    LL mix = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> r = <span class="number">0</span>, c = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(; r &lt; rnk &amp;&amp; c &lt; m; ++c) &#123;</div><div class="line">        <span class="keyword">bool</span> have = mix &gt;&gt; c &amp; <span class="number">1</span>;</div><div class="line">        <span class="keyword">bool</span> need = x &gt;&gt; c &amp; <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span>(have == need) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">bool</span> ok = <span class="literal">false</span>;</div><div class="line">        <span class="keyword">if</span>(need) &#123;</div><div class="line">            <span class="keyword">while</span>(r &lt; rnk &amp;&amp; !ok) &#123;</div><div class="line">                <span class="keyword">if</span>(a[r] &gt;&gt; c &amp; <span class="number">1</span>) &#123;</div><div class="line">                    mix ^= a[r];</div><div class="line">                    ok = <span class="literal">true</span>;</div><div class="line">                &#125;</div><div class="line">                ++r;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(!ok) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> mix == x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line">    <span class="keyword">clock_t</span> _ = clock();</div><div class="line"></div><div class="line">    <span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">while</span>(t--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;m, &amp;n);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</div><div class="line">            a[i] = <span class="number">0</span>;</div><div class="line">            <span class="keyword">int</span> cnt = <span class="number">0</span>; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;cnt);</div><div class="line">            <span class="keyword">while</span>(cnt--) &#123;</div><div class="line">                <span class="keyword">int</span> x; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line">                a[i] |= <span class="number">1L</span>L &lt;&lt; x - <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> r = xorGauss(n, m);</div><div class="line"></div><div class="line">        <span class="keyword">static</span> <span class="keyword">int</span> kase = <span class="number">0</span>;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Case %d:\n"</span>, ++kase);</div><div class="line">        <span class="keyword">int</span> q; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;q);</div><div class="line">        <span class="keyword">while</span>(q--) &#123;</div><div class="line">            LL target = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</div><div class="line">                <span class="keyword">int</span> x; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line">                <span class="keyword">if</span>(x) target |= <span class="number">1L</span>L &lt;&lt; i;</div><div class="line">            &#125;</div><div class="line">            LL ans = check(target, r) ? <span class="number">1L</span>L &lt;&lt; n - r : <span class="number">0</span>;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, ans);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\nTime cost: %.2fs\n"</span>, <span class="number">1.0</span> * (clock() - _) / CLOCKS_PER_SEC);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>代码二（暴力）：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-07-28</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">50</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">int</span> a[N][N], b[N][N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">xorGauss</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> r = <span class="number">0</span>, c = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(; r &lt; n &amp;&amp; c &lt; m; ++r, ++c) &#123;</div><div class="line">        <span class="keyword">int</span> p = r;</div><div class="line">        <span class="keyword">for</span>(; p &lt; n; ++p) <span class="keyword">if</span>(a[p][c]) <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">if</span>(p == n) &#123;--r; <span class="keyword">continue</span>;&#125;</div><div class="line">        swap(a[p], a[r]);</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</div><div class="line">            <span class="keyword">if</span>(i != r &amp;&amp; a[i][c]) &#123;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = c; j &lt;= m; ++j)</div><div class="line">                    a[i][j] ^= a[r][j];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = r; i &lt; n; ++i) <span class="keyword">if</span>(a[i][m]) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> m - r;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line">    <span class="keyword">clock_t</span> _ = clock();</div><div class="line"></div><div class="line">    <span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">while</span>(t--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">        <span class="built_in">memset</span>(b, <span class="number">0</span>, <span class="keyword">sizeof</span> b);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j) &#123;</div><div class="line">            <span class="keyword">int</span> k; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;k);</div><div class="line">            <span class="keyword">while</span>(k--) &#123;</div><div class="line">                <span class="keyword">int</span> x; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line">                --x;</div><div class="line">                b[x][j] = <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">static</span> <span class="keyword">int</span> kase = <span class="number">0</span>;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Case %d:\n"</span>, ++kase);</div><div class="line">        <span class="keyword">int</span> q; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;q);</div><div class="line">        <span class="keyword">while</span>(q--) &#123;</div><div class="line">            <span class="built_in">memcpy</span>(a, b, <span class="keyword">sizeof</span> b);</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a[i] + m);</div><div class="line">            <span class="keyword">int</span> freeX = xorGauss(n, m);</div><div class="line">            <span class="keyword">long</span> <span class="keyword">long</span> tot = ~freeX ? <span class="number">1L</span>L &lt;&lt; freeX : <span class="number">0</span>;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, tot);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\nTime cost: %.2fs\n"</span>, <span class="number">1.0</span> * (clock() - _) / CLOCKS_PER_SEC);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 数学 </category>
            
            <category> 高斯消元 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 高斯消元 </tag>
            
            <tag> 线性基 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDU 4418 Time travel（高斯消元解期望dp）]]></title>
      <url>/2016/08/06/HDU%204418%20Time%20travel%EF%BC%88%E9%AB%98%E6%96%AF%E6%B6%88%E5%85%83%E8%A7%A3%E6%9C%9F%E6%9C%9Bdp%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$给定N\le 100长度的路，这个路是来回走的$<br>$比如4个点，0, 1, 2, 3, 2, 1, 0, 1, …$<br>$给定每次最大步数M，以及每个步数x\in[1, M]行走的概率p_x，保证\sum p_x=1$<br>$给定起点x，终点y，以及方向d，0正着1反着$<br>$求到达终点的期望步数$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$测了下数据里并没有d=-1，这傻叉题d=-1根本不知道是干嘛的，无视就行了$<br>$来回走的周期cycle=2n-2，所以d=1把起点x映射一下x=(cycle-x)\%cycle$<br>$dp状态是f[i]:=i点到达终点的期望步数$<br>$f[i]=\sum p_j\times (f[(i+j)\%cycle]+j)$<br>$之后bfs一下，求出每个点的可达性，然后对于每个点建立方程$<br>$注意终点有2个就行，高斯消元一波就做完了$<br>$时间复杂度O(n^3)$</p>
</blockquote>
<p>代码:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-07-29</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">200</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> EPS = <span class="number">1e-8</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">sgn</span><span class="params">(<span class="keyword">double</span> x)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> x &lt; -EPS ? <span class="number">-1</span> : x &gt; EPS;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m, y, x, d;</div><div class="line"><span class="keyword">double</span> p[N];</div><div class="line"></div><div class="line"><span class="keyword">double</span> a[N][N], ans[N];</div><div class="line"><span class="keyword">bool</span> isFreeX[N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">getAns</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m, <span class="keyword">int</span> r)</span> </span>&#123;</div><div class="line"><span class="comment">//    memset(ans, 0, sizeof ans);  //not necessary</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = r - <span class="number">1</span>; ~i; --i) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j) &#123;</div><div class="line">            <span class="keyword">if</span>(!sgn(a[i][j])) <span class="keyword">continue</span>;</div><div class="line">            ans[j] = a[i][m];</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = j + <span class="number">1</span>; k &lt; m; ++k)</div><div class="line">                ans[j] -= a[i][k] * ans[k];</div><div class="line">            ans[j] = ans[j] / a[i][j];</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">gauss</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) isFreeX[i] = <span class="literal">false</span>;</div><div class="line">    <span class="keyword">int</span> r = <span class="number">0</span>, c = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(; r &lt; n &amp;&amp; c &lt; m; ++r, ++c) &#123;</div><div class="line">        <span class="keyword">int</span> maxR = r;       <span class="comment">//row transform</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = r + <span class="number">1</span>; i &lt; n; ++i)</div><div class="line">            <span class="keyword">if</span>(<span class="built_in">abs</span>(a[i][c]) &gt; <span class="built_in">abs</span>(a[maxR][c])) maxR = i;</div><div class="line">        <span class="keyword">if</span>(maxR != r) swap(a[maxR], a[r]);</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(!sgn(a[r][c])) &#123; --r; isFreeX[c] = <span class="literal">true</span>; <span class="keyword">continue</span>;&#125;</div><div class="line"></div><div class="line">        <span class="comment">//eliminate coefficient</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = r + <span class="number">1</span>; i &lt; n; ++i) &#123;</div><div class="line">            <span class="keyword">if</span>(sgn(a[i][c])) &#123;</div><div class="line">                <span class="keyword">double</span> delta = a[i][c] / a[r][c];</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = c; j &lt;= m; ++j)</div><div class="line">                    a[i][j] -= delta * a[r][j];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = r; i &lt; n; i++) <span class="keyword">if</span>(sgn(a[i][m])) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line"></div><div class="line">    getAns(n, m, r);</div><div class="line"></div><div class="line">    <span class="comment">//at last, r is rank, m - r is the number of freeX</span></div><div class="line">    <span class="keyword">return</span> r;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">bool</span> can[N];</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> sx)</span> </span>&#123;</div><div class="line">    <span class="built_in">memset</span>(can, <span class="number">0</span>, <span class="keyword">sizeof</span> can);</div><div class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q; q.push(sx);</div><div class="line">    can[sx] = <span class="literal">true</span>;</div><div class="line">    <span class="keyword">bool</span> ok = <span class="literal">false</span>;</div><div class="line">    <span class="keyword">while</span>(q.size()) &#123;</div><div class="line">        <span class="keyword">int</span> u = q.front(); q.pop();</div><div class="line">        <span class="keyword">if</span>(u == y || u == (n - y) % n) ok = <span class="literal">true</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</div><div class="line">            <span class="keyword">if</span>(!sgn(p[i])) <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">int</span> v = (u + i) % n;</div><div class="line">            <span class="keyword">if</span>(can[v]) <span class="keyword">continue</span>;</div><div class="line">            can[v] = <span class="literal">true</span>;</div><div class="line">            q.push(v);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ok;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line">    <span class="keyword">clock_t</span> _ = clock();</div><div class="line"></div><div class="line">    <span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">while</span>(t--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d%d"</span>, &amp;n, &amp;m, &amp;y, &amp;x, &amp;d);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</div><div class="line">            <span class="keyword">int</span> x; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line">            p[i] = x / <span class="number">100.0</span>;</div><div class="line">        &#125;</div><div class="line">        n = <span class="number">2</span> * n - <span class="number">2</span>; <span class="comment">// 0,1,2,3,2,1 =&gt; 0,1,2,3,4,5</span></div><div class="line"></div><div class="line">        <span class="comment">//start coincides with destination</span></div><div class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>) &#123;<span class="built_in">puts</span>(<span class="string">"0.00"</span>); <span class="keyword">continue</span>;&#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(d &gt; <span class="number">0</span>) x = (n - x) % n;</div><div class="line">        <span class="keyword">if</span>(!bfs(x)) &#123;<span class="built_in">puts</span>(<span class="string">"Impossible !"</span>); <span class="keyword">continue</span>;&#125;</div><div class="line"></div><div class="line">        <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span> a);</div><div class="line">        <span class="comment">//E_i = sum((E_j + j)*P_j) =&gt; E_i - sum(E_j*P_j) = sum(j*P_j)</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</div><div class="line">            <span class="keyword">if</span>(i == y || i == (n - y) % n) &#123;</div><div class="line">                a[i][i] = <span class="number">1</span>;</div><div class="line">                a[i][n] = <span class="number">0</span>; <span class="comment">//E_destination = 0;</span></div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line">            a[i][i] = <span class="number">1</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) &#123;</div><div class="line">                <span class="keyword">if</span>(!sgn(p[j])) <span class="keyword">continue</span>;</div><div class="line">                <span class="keyword">int</span> x = (i + j) % n;</div><div class="line">                <span class="keyword">if</span>(!can[x]) <span class="keyword">continue</span>;</div><div class="line">                a[i][x] -= p[j];</div><div class="line">                a[i][n] += j * p[j];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        gauss(n, n);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%.2f\n"</span>, ans[x]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\nTime cost: %.2fs\n"</span>, <span class="number">1.0</span> * (clock() - _) / CLOCKS_PER_SEC);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 数学 </category>
            
            <category> 高斯消元 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 期望dp </tag>
            
            <tag> 高斯消元 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDU 3949 XOR（线性基、kth异或和）]]></title>
      <url>/2016/08/06/HDU%203949%20XOR%EF%BC%88%E7%BA%BF%E6%80%A7%E5%9F%BA%E3%80%81kth%E5%BC%82%E6%88%96%E5%92%8C%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$给定N\le 10^5个数，1\le A_i\le 10^{18}，Q\le 10^5询问$<br>$选择一个非空子集可以得到一个异或和，对于所有的不同的异或和$<br>$每次询问第1\le K\le 10^{18}小的是多少$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$先求出线性基，并且同时也得到了矩阵的秩r，即r个线性基$<br>$那么r个线性基，能表示的数的个数有2^r-1个（非空）$<br>$如果r\neq n，说明异或出0了，那么最小值必然为0，特判这种情况$<br>$对于其他情况直接将k二进制分解，求出这个数即可$</p>
</blockquote>
<p>代码:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-07-27</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, q;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line">LL a[N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">xorGauss</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> r = <span class="number">0</span>, c = <span class="number">63</span>;</div><div class="line">    <span class="keyword">for</span>(; r &lt; n &amp;&amp; ~c; ++r, --c) &#123;</div><div class="line">        <span class="keyword">int</span> p = r;</div><div class="line">        <span class="keyword">for</span>(; p &lt; n; ++p) <span class="keyword">if</span>(a[p] &gt;&gt; c &amp; <span class="number">1</span>) <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">if</span>(p == n) &#123;--r; <span class="keyword">continue</span>;&#125;</div><div class="line"></div><div class="line">        swap(a[p], a[r]);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</div><div class="line">            <span class="keyword">if</span>(i != r) &#123;</div><div class="line">                <span class="keyword">if</span>(a[i] &gt;&gt; c &amp; <span class="number">1</span>) a[i] ^= a[r];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> r; <span class="comment">//rank</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">kth</span><span class="params">(LL k, <span class="keyword">int</span> r)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(r != n) --k;  <span class="comment">//</span></div><div class="line">    <span class="keyword">if</span>(k &gt;= <span class="number">1L</span>L &lt;&lt; r) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line"></div><div class="line">    LL ret = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">64</span>; ++i)</div><div class="line">        <span class="keyword">if</span>(k &gt;&gt; i &amp; <span class="number">1</span>) ret ^= a[r - i - <span class="number">1</span>];</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line">    <span class="keyword">clock_t</span> _ = clock();</div><div class="line"></div><div class="line">    <span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">while</span>(t--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) <span class="built_in">scanf</span>(<span class="string">"%I64d"</span>, a + i);</div><div class="line"></div><div class="line">        <span class="keyword">int</span> r = xorGauss();</div><div class="line"></div><div class="line">        <span class="keyword">static</span> <span class="keyword">int</span> kase = <span class="number">0</span>;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d:\n"</span>, ++kase);</div><div class="line"></div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;q);</div><div class="line">        <span class="keyword">while</span>(q--) &#123;</div><div class="line">            LL k; <span class="built_in">scanf</span>(<span class="string">"%I64d"</span>, &amp;k);</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, kth(k, r));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\nTime cost: %.2fs\n"</span>, <span class="number">1.0</span> * (clock() - _) / CLOCKS_PER_SEC);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 数学 </category>
            
            <category> 高斯消元 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 线性基 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[高斯消元小结]]></title>
      <url>/2016/08/05/%E9%AB%98%E6%96%AF%E6%B6%88%E5%85%83%E5%B0%8F%E7%BB%93/</url>
      <content type="html"><![CDATA[<h2 id="Ⅰ-高斯消元认知"><a href="#Ⅰ-高斯消元认知" class="headerlink" title="Ⅰ. 高斯消元认知"></a>Ⅰ. 高斯消元认知</h2><ul>
<li>$这东西英文名叫Gaussian Elimination$</li>
<li>$高斯消元对矩阵进行操作，对满足一定运算规律的方程利用矩阵初等变换进行消元$</li>
<li>$主要用来求解线性方程组、矩阵的秩、以及可逆方阵的逆矩阵$</li>
<li>$还可以用来线性空间的基向量，比如线性基（线性无关的极大子集）$</li>
<li>$PS:关于线性相关，具体可以读2014集训队论文《浅谈线性相关》$</li>
</ul>
<a id="more"></a>
<h2 id="Ⅱ-高斯消元模版"><a href="#Ⅱ-高斯消元模版" class="headerlink" title="Ⅱ. 高斯消元模版"></a>Ⅱ. 高斯消元模版</h2><h3 id="浮点数高斯消元"><a href="#浮点数高斯消元" class="headerlink" title="浮点数高斯消元"></a>浮点数高斯消元</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">double</span> a[N][N], ans[N];</div><div class="line"><span class="keyword">bool</span> isFreeX[N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">getAns</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m, <span class="keyword">int</span> r)</span> </span>&#123;</div><div class="line"><span class="comment">//    memset(ans, 0, sizeof ans);  //not necessary</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = r - <span class="number">1</span>; ~i; --i) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j) &#123;</div><div class="line">            <span class="keyword">if</span>(!sgn(a[i][j])) <span class="keyword">continue</span>;</div><div class="line">            ans[j] = a[i][m];</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = j + <span class="number">1</span>; k &lt; m; ++k)</div><div class="line">                ans[j] -= a[i][k] * ans[k];</div><div class="line">            ans[j] = ans[j] / a[i][j];</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">gauss</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) isFreeX[i] = <span class="literal">false</span>;</div><div class="line">    <span class="keyword">int</span> r = <span class="number">0</span>, c = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(; r &lt; n &amp;&amp; c &lt; m; ++r, ++c) &#123;</div><div class="line">        <span class="keyword">int</span> maxR = r;       <span class="comment">//row transform</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = r + <span class="number">1</span>; i &lt; n; ++i)</div><div class="line">            <span class="keyword">if</span>(<span class="built_in">abs</span>(a[i][c]) &gt; <span class="built_in">abs</span>(a[maxR][c])) maxR = i;</div><div class="line">        <span class="keyword">if</span>(maxR != r) swap(a[maxR], a[r]);</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(!sgn(a[r][c])) &#123; --r; isFreeX[c] = <span class="literal">true</span>; <span class="keyword">continue</span>;&#125;</div><div class="line"></div><div class="line">        <span class="comment">//eliminate coefficient</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = r + <span class="number">1</span>; i &lt; n; ++i) &#123;</div><div class="line">            <span class="keyword">if</span>(sgn(a[i][c])) &#123;</div><div class="line">                <span class="keyword">double</span> delta = a[i][c] / a[r][c];</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = c; j &lt;= m; ++j)</div><div class="line">                    a[i][j] -= delta * a[r][j];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = r; i &lt; n; i++) <span class="keyword">if</span>(sgn(a[i][m])) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line"></div><div class="line">    getAns(n, m, r);</div><div class="line"></div><div class="line">    <span class="comment">//at last, r is rank, m - r is the number of freeX</span></div><div class="line">    <span class="keyword">return</span> r;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="模意义下高斯消元"><a href="#模意义下高斯消元" class="headerlink" title="模意义下高斯消元"></a>模意义下高斯消元</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> a[N][N], ans[N];</div><div class="line"><span class="keyword">bool</span> isFreeX[N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">inv</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;<span class="keyword">return</span> <span class="number">1</span>;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">getAns</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m, <span class="keyword">int</span> r)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = r - <span class="number">1</span>; ~i; --i) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j) &#123;</div><div class="line">            <span class="keyword">if</span>(!a[i][j]) <span class="keyword">continue</span>;</div><div class="line">            ans[j] = a[i][m];</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = j + <span class="number">1</span>; k &lt; m; ++k) &#123;</div><div class="line">                ans[j] -= a[i][k] * ans[k];</div><div class="line">                ans[j] %= MOD;</div><div class="line">                <span class="keyword">if</span>(ans[j] &lt; <span class="number">0</span>) ans[j] += MOD;</div><div class="line">            &#125;</div><div class="line">            ans[j] = ans[j] * inv(a[i][j]) % MOD;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) ret += ans[i];</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">gauss</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) isFreeX[i] = <span class="literal">false</span>;</div><div class="line">    <span class="keyword">int</span> r = <span class="number">0</span>, c = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(; r &lt; n &amp;&amp; c &lt; m; ++r, ++c) &#123;</div><div class="line">        <span class="keyword">int</span> maxR = r;       <span class="comment">//row transform</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = r + <span class="number">1</span>; i &lt; n; ++i)</div><div class="line">            <span class="keyword">if</span>(<span class="built_in">abs</span>(a[i][c]) &gt; <span class="built_in">abs</span>(a[maxR][c])) maxR = i;</div><div class="line">        <span class="keyword">if</span>(maxR != r) swap(a[maxR], a[r]);</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(!a[r][c]) &#123; --r; isFreeX[c] = <span class="literal">true</span>; <span class="keyword">continue</span>;&#125;</div><div class="line"></div><div class="line">        <span class="comment">//eliminate coefficient</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = r + <span class="number">1</span>; i &lt; n; ++i) &#123;</div><div class="line">            <span class="keyword">if</span>(a[i][c]) &#123;</div><div class="line">                <span class="keyword">int</span> delta = a[i][c] * inv(a[r][c]);</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = c; j &lt;= m; ++j) &#123;</div><div class="line">                    a[i][j] -= delta * a[r][j];</div><div class="line">                    a[i][j] %= MOD;</div><div class="line">                    <span class="keyword">if</span>(a[i][j] &lt; <span class="number">0</span>) a[i][j] += MOD;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = r; i &lt; n; i++) <span class="keyword">if</span>(a[i][m]) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line"></div><div class="line">    <span class="comment">//at last, r is rank, m - r is the number of freeX</span></div><div class="line">    <span class="keyword">return</span> r;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">getMinAns</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m, <span class="keyword">int</span> r)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> ret = INF, freeX = m - r;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> s = <span class="number">0</span>; s &lt; <span class="number">1</span> &lt;&lt; freeX; ++s) &#123;</div><div class="line">        <span class="keyword">if</span>(__builtin_popcount(s) &gt;= ret) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j) &#123;</div><div class="line">            <span class="keyword">if</span>(isFreeX[j]) &#123;</div><div class="line">                ans[j] = s &gt;&gt; cnt &amp; <span class="number">1</span>;</div><div class="line">                ++cnt;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        ret = min(ret, getAns(n, m, r));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="XOR高斯消元"><a href="#XOR高斯消元" class="headerlink" title="XOR高斯消元"></a>XOR高斯消元</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> a[N][N], ans[N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">xorGauss</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> r = <span class="number">0</span>, c = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(; r &lt; n &amp;&amp; c &lt; n; ++r, ++c) &#123;</div><div class="line">        <span class="keyword">int</span> p = r;</div><div class="line">        <span class="keyword">for</span>(; p &lt; n; ++p) <span class="keyword">if</span>(a[p][c]) <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">if</span>(p == n) &#123;--r; <span class="keyword">continue</span>;&#125;</div><div class="line">        swap(a[p], a[r]);</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</div><div class="line">            <span class="keyword">if</span>(i != r &amp;&amp; a[i][c]) &#123;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = c; j &lt;= n; ++j)</div><div class="line">                    a[i][j] ^= a[r][j];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = r; i &lt; n; ++i) <span class="keyword">if</span>(a[i][n]) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line"></div><div class="line">    <span class="comment">//memset(ans, 0, sizeof ans);  //not necessary</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = r - <span class="number">1</span>; ~i; --i)</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j)</div><div class="line">            <span class="keyword">if</span>(a[i][j]) &#123;ans[j] = a[i][n]; <span class="keyword">break</span>;&#125;</div><div class="line">    <span class="keyword">return</span> r;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Ⅲ-题目讲解"><a href="#Ⅲ-题目讲解" class="headerlink" title="Ⅲ. 题目讲解"></a>Ⅲ. 题目讲解</h2><h3 id="HDU-4200-Bad-Wiring"><a href="#HDU-4200-Bad-Wiring" class="headerlink" title="HDU 4200 Bad Wiring"></a>HDU 4200 Bad Wiring</h3><p>分析:<br>$开关问题，POJ的几个数据都比较弱，所以就选了这个$<br>$建立模2意义下的方程组，然后高斯消元，要求最小解，二进制枚举自由变元回代即可$<br>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-07-28</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">2</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, d;</div><div class="line"><span class="keyword">int</span> a[N][N], ans[N];</div><div class="line"><span class="keyword">bool</span> isFreeX[N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">inv</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;<span class="keyword">return</span> <span class="number">1</span>;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">getAns</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m, <span class="keyword">int</span> r)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = r - <span class="number">1</span>; ~i; --i) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j) &#123;</div><div class="line">            <span class="keyword">if</span>(!a[i][j]) <span class="keyword">continue</span>;</div><div class="line">            ans[j] = a[i][m];</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = j + <span class="number">1</span>; k &lt; m; ++k) &#123;</div><div class="line">                ans[j] -= a[i][k] * ans[k];</div><div class="line">                ans[j] %= MOD;</div><div class="line">                <span class="keyword">if</span>(ans[j] &lt; <span class="number">0</span>) ans[j] += MOD;</div><div class="line">            &#125;</div><div class="line">            ans[j] = ans[j] * inv(a[i][j]) % MOD;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) ret += ans[i];</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">gauss</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) isFreeX[i] = <span class="literal">false</span>;</div><div class="line">    <span class="keyword">int</span> r = <span class="number">0</span>, c = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(; r &lt; n &amp;&amp; c &lt; m; ++r, ++c) &#123;</div><div class="line">        <span class="keyword">int</span> maxR = r;       <span class="comment">//row transform</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = r + <span class="number">1</span>; i &lt; n; ++i)</div><div class="line">            <span class="keyword">if</span>(<span class="built_in">abs</span>(a[i][c]) &gt; <span class="built_in">abs</span>(a[maxR][c])) maxR = i;</div><div class="line">        <span class="keyword">if</span>(maxR != r) swap(a[maxR], a[r]);</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(!a[r][c]) &#123; --r; isFreeX[c] = <span class="literal">true</span>; <span class="keyword">continue</span>;&#125;</div><div class="line"></div><div class="line">        <span class="comment">//eliminate coefficient</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = r + <span class="number">1</span>; i &lt; n; ++i) &#123;</div><div class="line">            <span class="keyword">if</span>(a[i][c]) &#123;</div><div class="line">                <span class="keyword">int</span> delta = a[i][c] * inv(a[r][c]);</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = c; j &lt;= m; ++j) &#123;</div><div class="line">                    a[i][j] -= delta * a[r][j];</div><div class="line">                    a[i][j] %= MOD;</div><div class="line">                    <span class="keyword">if</span>(a[i][j] &lt; <span class="number">0</span>) a[i][j] += MOD;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = r; i &lt; n; i++) <span class="keyword">if</span>(a[i][m]) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line"></div><div class="line">    <span class="comment">//at last, r is rank, m - r is the number of freeX</span></div><div class="line">    <span class="keyword">return</span> r;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">getMinAns</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m, <span class="keyword">int</span> r)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> ret = INF, freeX = m - r;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> s = <span class="number">0</span>; s &lt; <span class="number">1</span> &lt;&lt; freeX; ++s) &#123;</div><div class="line">        <span class="keyword">if</span>(__builtin_popcount(s) &gt;= ret) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j) &#123;</div><div class="line">            <span class="keyword">if</span>(isFreeX[j]) &#123;</div><div class="line">                ans[j] = s &gt;&gt; cnt &amp; <span class="number">1</span>;</div><div class="line">                ++cnt;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        ret = min(ret, getAns(n, m, r));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line">    <span class="keyword">clock_t</span> _ = clock();</div><div class="line"></div><div class="line">    <span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">while</span>(t--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;d);</div><div class="line">        <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span> a);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</div><div class="line">            <span class="keyword">int</span> v; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;v);</div><div class="line">            a[i][n] = -v + MOD;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = max(<span class="number">0</span>, i - d); j &lt;= min(n - <span class="number">1</span>, i + d); ++j)</div><div class="line">                a[i][j] = <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> r = gauss(n, n);</div><div class="line">        <span class="keyword">if</span>(~r) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, getMinAns(n, n, r));</div><div class="line">        <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"impossible"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\nTime cost: %.2fs\n"</span>, <span class="number">1.0</span> * (clock() - _) / CLOCKS_PER_SEC);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="SGU-275-To-xor-or-not-to-xor"><a href="#SGU-275-To-xor-or-not-to-xor" class="headerlink" title="SGU 275 To xor or not to xor"></a>SGU 275 To xor or not to xor</h3><p>分析：<br>$求N个数的子集的最大异或和，高斯消元后求出的是极大线性无关组即线性基$<br>$线性基异或起来显然就是最大异或和了$<br>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-07-28</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">int</span> n;</div><div class="line">LL a[N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">xorGauss</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> r = <span class="number">0</span>, c = <span class="number">63</span>;</div><div class="line">    <span class="keyword">for</span>(; r &lt; n &amp;&amp; ~c; ++r, --c) &#123;</div><div class="line">        <span class="keyword">int</span> p = r;</div><div class="line">        <span class="keyword">for</span>(; p &lt; n; ++p) <span class="keyword">if</span>(a[p] &gt;&gt; c &amp; <span class="number">1</span>) <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">if</span>(p == n) &#123;--r; <span class="keyword">continue</span>;&#125;</div><div class="line">        swap(a[p], a[r]);</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</div><div class="line">            <span class="keyword">if</span>(i != r &amp;&amp; a[i] &gt;&gt; c &amp; <span class="number">1</span>) a[i] ^= a[r];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> r;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line">    <span class="keyword">clock_t</span> _ = clock();</div><div class="line"></div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, a + i);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> r = xorGauss();</div><div class="line">    LL ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; r; ++i) ans ^= a[i];</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\nTime cost: %.2fs\n"</span>, <span class="number">1.0</span> * (clock() - _) / CLOCKS_PER_SEC);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="HDU-2262-Where-is-the-canteen"><a href="#HDU-2262-Where-is-the-canteen" class="headerlink" title="HDU 2262 Where is the canteen"></a>HDU 2262 Where is the canteen</h3><p>分析：<br>$高斯消元求解期望dp$<br>$f[x][y]:=(x, y)到终点的期望次数，显然终点的期望是0，即f[ex][ey]=0$<br>$期望倒推，f[x][y]=(\sum p_i\times f[nx][ny]) + 1$<br>$bfs求出每个点的可达性，之后对于每个点建立期望方程，然后高斯消元求解即可$<br>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-07-28</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">15</span> * <span class="number">15</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> EPS = <span class="number">1e-8</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">sgn</span><span class="params">(<span class="keyword">double</span> x)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> x &lt; -EPS ? <span class="number">-1</span> : x &gt; EPS;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">char</span> s[N][N];</div><div class="line"><span class="keyword">double</span> a[N][N], ans[N];</div><div class="line"><span class="keyword">bool</span> isFreeX[N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">getAns</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m, <span class="keyword">int</span> r)</span> </span>&#123;</div><div class="line"><span class="comment">//    memset(ans, 0, sizeof ans);  //not necessary</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = r - <span class="number">1</span>; ~i; --i) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j) &#123;</div><div class="line">            <span class="keyword">if</span>(!sgn(a[i][j])) <span class="keyword">continue</span>;</div><div class="line">            ans[j] = a[i][m];</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = j + <span class="number">1</span>; k &lt; m; ++k)</div><div class="line">                ans[j] -= a[i][k] * ans[k];</div><div class="line">            ans[j] = ans[j] / a[i][j];</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">gauss</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) isFreeX[i] = <span class="literal">false</span>;</div><div class="line">    <span class="keyword">int</span> r = <span class="number">0</span>, c = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(; r &lt; n &amp;&amp; c &lt; m; ++r, ++c) &#123;</div><div class="line">        <span class="keyword">int</span> maxR = r;       <span class="comment">//row transform</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = r + <span class="number">1</span>; i &lt; n; ++i)</div><div class="line">            <span class="keyword">if</span>(<span class="built_in">abs</span>(a[i][c]) &gt; <span class="built_in">abs</span>(a[maxR][c])) maxR = i;</div><div class="line">        <span class="keyword">if</span>(maxR != r) swap(a[maxR], a[r]);</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(!sgn(a[r][c])) &#123; --r; isFreeX[c] = <span class="literal">true</span>; <span class="keyword">continue</span>;&#125;</div><div class="line"></div><div class="line">        <span class="comment">//eliminate coefficient</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = r + <span class="number">1</span>; i &lt; n; ++i) &#123;</div><div class="line">            <span class="keyword">if</span>(sgn(a[i][c])) &#123;</div><div class="line">                <span class="keyword">double</span> delta = a[i][c] / a[r][c];</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = c; j &lt;= m; ++j)</div><div class="line">                    a[i][j] -= delta * a[r][j];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = r; i &lt; n; i++) <span class="keyword">if</span>(sgn(a[i][m])) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line"></div><div class="line">    getAns(n, m, r);</div><div class="line"></div><div class="line">    <span class="comment">//at last, r is rank, m - r is the number of freeX</span></div><div class="line">    <span class="keyword">return</span> r;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">ID</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> x * m + y;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">bool</span> can[N][N];</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> d[][<span class="number">2</span>] = &#123; <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>&#125;;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> sx, <span class="keyword">int</span> sy)</span> </span>&#123;</div><div class="line">    <span class="built_in">memset</span>(can, <span class="number">0</span>, <span class="keyword">sizeof</span> can);</div><div class="line">    <span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; q;</div><div class="line">    q.push(&#123;sx, sy&#125;);</div><div class="line">    can[sx][sy] = <span class="literal">true</span>;</div><div class="line"></div><div class="line">    <span class="keyword">bool</span> ok = <span class="literal">false</span>;</div><div class="line">    <span class="keyword">while</span>(q.size()) &#123;</div><div class="line">        <span class="keyword">auto</span> u = q.front(); q.pop();</div><div class="line">        <span class="keyword">int</span> x, y; tie(x, y) = u;</div><div class="line">        <span class="keyword">if</span>(s[x][y] == <span class="string">'$'</span>) ok = <span class="literal">true</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</div><div class="line">            <span class="keyword">int</span> nx = x + d[i][<span class="number">0</span>], ny = y + d[i][<span class="number">1</span>];</div><div class="line">            <span class="keyword">if</span>(nx &lt; <span class="number">0</span> || nx &gt;= n || ny &lt; <span class="number">0</span> || ny &gt;= m) <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">if</span>(s[nx][ny] == <span class="string">'#'</span> || can[nx][ny]) <span class="keyword">continue</span>;</div><div class="line">            can[nx][ny] = <span class="literal">true</span>;</div><div class="line">            q.push(&#123;nx, ny&#125;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ok;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line">    <span class="keyword">clock_t</span> _ = clock();</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m) == <span class="number">2</span>) &#123;</div><div class="line">        <span class="keyword">int</span> sx, sy; sx = sy = <span class="number">-1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s[i]);</div><div class="line">            <span class="keyword">if</span>(~sx) <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j)</div><div class="line">                <span class="keyword">if</span>(s[i][j] == <span class="string">'@'</span>) sx = i, sy = j;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(!bfs(sx, sy)) &#123;<span class="built_in">puts</span>(<span class="string">"-1"</span>); <span class="keyword">continue</span>;&#125;</div><div class="line"></div><div class="line">        <span class="comment">//E_i = sum(E_j)/cnt + 1 =&gt; sum(E_j) - cnt*E_i = -cnt</span></div><div class="line">        <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span> a);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j) &#123;</div><div class="line">                <span class="keyword">if</span>(s[i][j] == <span class="string">'#'</span>) <span class="keyword">continue</span>; <span class="comment">//obstacle</span></div><div class="line">                <span class="keyword">if</span>(s[i][j] == <span class="string">'$'</span>) &#123; <span class="comment">//destination</span></div><div class="line">                    a[ID(i, j)][ID(i, j)] = <span class="number">1</span>;</div><div class="line">                    a[ID(i, j)][n * m] = <span class="number">0</span>; <span class="comment">//E_exit = 0;</span></div><div class="line">                    <span class="keyword">continue</span>;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="keyword">int</span> cnt = <span class="number">0</span>;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; ++k) &#123;</div><div class="line">                    <span class="keyword">int</span> x = i + d[k][<span class="number">0</span>], y = j + d[k][<span class="number">1</span>];</div><div class="line">                    <span class="keyword">if</span>(x &lt; <span class="number">0</span> || x &gt;= n || y &lt; <span class="number">0</span> || y &gt;= m || !can[x][y]) <span class="keyword">continue</span>;</div><div class="line">                    ++cnt;</div><div class="line">                    a[ID(i, j)][ID(x, y)] = <span class="number">1</span>;</div><div class="line">                &#125;</div><div class="line">                a[ID(i, j)][ID(i, j)] = -cnt;</div><div class="line">                a[ID(i, j)][n * m] = -cnt;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line"><span class="comment">//        for(int i = 0; i &lt; n * m; ++i)</span></div><div class="line"><span class="comment">//          for(int j = 0; j &lt;= n * m; ++j)</span></div><div class="line"><span class="comment">//              printf("%.3f%c", a[i][j], " \n"[j == n * m]);</span></div><div class="line"></div><div class="line">        gauss(n * m, n * m);</div><div class="line">        <span class="keyword">double</span> result = ans[ID(sx, sy)];</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%.6f\n"</span>, result);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\nTime cost: %.2fs\n"</span>, <span class="number">1.0</span> * (clock() - _) / CLOCKS_PER_SEC);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 小结 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[HDU 5755 Gambler Bo（高斯消元）]]></title>
      <url>/2016/08/05/HDU%205755%20Gambler%20Bo%EF%BC%88%E9%AB%98%E6%96%AF%E6%B6%88%E5%85%83%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$给定N\times M的矩阵，N，M\le 30，每个格子里的数A_{ij}\in [0, 3)$<br>$每次可以按一个格子，使得这个格子+2，上下左右4个格子+1，数加完后会模3$<br>$输出1个可以使得所有格子都变成0的操作，保证数据有解$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$对N\times M个格子建立方程，每个格子含有5个变元$<br>$高斯消元解方程，打印解即可$<br>$时间复杂度O((NM)^3)$</p>
</blockquote>
<p>代码:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-07-26</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">30</span> * <span class="number">30</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">3</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m, val[N];</div><div class="line"><span class="keyword">int</span> a[N][N], ans[N];</div><div class="line"><span class="keyword">bool</span> isFreeX[N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">inv</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;<span class="keyword">return</span> x;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">getAns</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m, <span class="keyword">int</span> r)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = r - <span class="number">1</span>; ~i; --i) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j) &#123;</div><div class="line">            <span class="keyword">if</span>(!a[i][j]) <span class="keyword">continue</span>;</div><div class="line">            ans[j] = a[i][m];</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = j + <span class="number">1</span>; k &lt; m; ++k) &#123;</div><div class="line">                ans[j] -= a[i][k] * ans[k];</div><div class="line">                ans[j] %= MOD;</div><div class="line">                <span class="keyword">if</span>(ans[j] &lt; <span class="number">0</span>) ans[j] += MOD;</div><div class="line">            &#125;</div><div class="line">            ans[j] = ans[j] * inv(a[i][j]) % MOD;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">gauss</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) isFreeX[i] = <span class="literal">false</span>;</div><div class="line">    <span class="keyword">int</span> r = <span class="number">0</span>, c = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(; r &lt; n &amp;&amp; c &lt; m; ++r, ++c) &#123;</div><div class="line">        <span class="keyword">int</span> maxR = r;       <span class="comment">//row transform</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = r + <span class="number">1</span>; i &lt; n; ++i)</div><div class="line">            <span class="keyword">if</span>(<span class="built_in">abs</span>(a[i][c]) &gt; <span class="built_in">abs</span>(a[maxR][c])) maxR = i;</div><div class="line">        <span class="keyword">if</span>(maxR != r) swap(a[maxR], a[r]);</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(!a[r][c]) &#123; --r; isFreeX[c] = <span class="literal">true</span>; <span class="keyword">continue</span>;&#125;</div><div class="line"></div><div class="line">        <span class="comment">//eliminate coefficient</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = r + <span class="number">1</span>; i &lt; n; ++i) &#123;</div><div class="line">            <span class="keyword">if</span>(a[i][c]) &#123;</div><div class="line">                <span class="keyword">int</span> delta = a[i][c] * inv(a[r][c]);</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = c; j &lt;= m; ++j) &#123;</div><div class="line">                    a[i][j] -= delta * a[r][j];</div><div class="line">                    a[i][j] %= MOD;</div><div class="line">                    <span class="keyword">if</span>(a[i][j] &lt; <span class="number">0</span>) a[i][j] += MOD;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = r; i &lt; n; i++) <span class="keyword">if</span>(a[i][m]) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line"></div><div class="line">    getAns(n, m, r);</div><div class="line"></div><div class="line">    <span class="comment">//at last, r is rank, m - r is the number of freeX</span></div><div class="line">    <span class="keyword">return</span> r;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line">    <span class="keyword">clock_t</span> _ = clock();</div><div class="line"></div><div class="line">    <span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">while</span>(t--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">        <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span> a);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n * m; ++i) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, val + i);</div><div class="line">            <span class="keyword">int</span> x = i / m, y = i % m;</div><div class="line">            a[i][i] = <span class="number">2</span>;</div><div class="line">            <span class="keyword">static</span> <span class="keyword">int</span> d[][<span class="number">2</span>] = &#123; <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>&#125;;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;</div><div class="line">                <span class="keyword">int</span> nx = x + d[j][<span class="number">0</span>], ny = y + d[j][<span class="number">1</span>];</div><div class="line">                <span class="keyword">if</span>(nx &lt; <span class="number">0</span> || nx &gt;= n || ny &lt; <span class="number">0</span> || ny &gt;= m) <span class="keyword">continue</span>;</div><div class="line">                a[i][nx * m + ny] = <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">            a[i][n * m] = -val[i] + MOD;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        gauss(n * m, n * m);</div><div class="line"></div><div class="line">        <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; v;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n * m; ++i) &#123;</div><div class="line">            <span class="keyword">int</span> x = i / m, y = i % m;</div><div class="line"><span class="comment">//            printf("%d, %d : %d\n", x, y, ans[i]);</span></div><div class="line">            <span class="keyword">while</span>(ans[i]--) &#123;</div><div class="line">                v.push_back(&#123;x + <span class="number">1</span>, y + <span class="number">1</span>&#125;);</div><div class="line"><span class="comment">//                static int d[][2] = &#123; -1, 0, 0, -1, 1, 0, 0, 1&#125;;</span></div><div class="line"><span class="comment">//                val[i] = (val[i] + 2) % MOD;</span></div><div class="line"><span class="comment">//                for(int j = 0; j &lt; 4; ++j) &#123;</span></div><div class="line"><span class="comment">//                    int nx = x + d[j][0], ny = y + d[j][1];</span></div><div class="line"><span class="comment">//                    if(nx &lt; 0 || nx &gt;= n || ny &lt; 0 || ny &gt;= m) continue;</span></div><div class="line"><span class="comment">//                    val[nx * m + ny] ++;</span></div><div class="line"><span class="comment">//                    val[nx * m + ny] %= MOD;</span></div><div class="line"><span class="comment">//                &#125;</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"><span class="comment">//        if(count(val, val + n * m, 0) != n * m) puts("WA");</span></div><div class="line"><span class="comment">//        else puts("AC");</span></div><div class="line"></div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, v.size());</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; p : v) <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, p.first, p.second);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\nTime cost: %.2fs\n"</span>, <span class="number">1.0</span> * (clock() - _) / CLOCKS_PER_SEC);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 数学 </category>
            
            <category> 高斯消元 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 高斯消元 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDU 5769 Substring（后缀数组）]]></title>
      <url>/2016/08/05/HDU%205769%20Substring%EF%BC%88%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$给定N\le 10^5的字符串，求包含一个特定字母X的不同子串的个数$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$考虑不带特定字母的版本，对于每个后缀sa[i]的贡献是n-sa[i]-height[i]$<br>$由于必须包含X，所以对于每个sa[i]，记录一下之后最近的X的位置nxt[sa[i]]$<br>$那么贡献应该是n-nxt[sa[i]]，两者取min就好了$<br>$即n-max(nxt[sa[i]], sa[i]+height[i])为每个sa[i]的贡献$</p>
</blockquote>
<p>代码:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-08-01</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="keyword">char</span> str[N], x[<span class="number">2</span>];</div><div class="line"></div><div class="line"><span class="keyword">int</span> s[N], c[N], t[<span class="number">2</span>][N];</div><div class="line"><span class="keyword">int</span> sa[N], rk[N], height[N];</div><div class="line"><span class="comment">// sa[0] is empty suffix, 1 ~ n</span></div><div class="line"><span class="comment">// height[i]:= lcp of sa[i-1] and sa[i]</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> i, k, p, *x = t[<span class="number">0</span>], *y = t[<span class="number">1</span>];</div><div class="line">    <span class="built_in">memset</span>(c, <span class="number">0</span>, m &lt;&lt; <span class="number">2</span>);</div><div class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; ++i) ++c[x[i] = s[i]];</div><div class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; m; ++i) c[i] += c[i - <span class="number">1</span>];</div><div class="line">    <span class="keyword">for</span>(i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) sa[--c[x[i]]] = i;</div><div class="line">    <span class="keyword">for</span>(k = <span class="number">1</span>; k &lt;= n; k &lt;&lt;= <span class="number">1</span>) &#123;</div><div class="line">        p = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(i = n - k; i &lt; n; ++i) y[p++] = i;</div><div class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; ++i) <span class="keyword">if</span>(sa[i] &gt;= k) y[p++] = sa[i] - k;</div><div class="line">        <span class="built_in">memset</span>(c, <span class="number">0</span>, m &lt;&lt; <span class="number">2</span>);</div><div class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; ++i) ++c[x[y[i]]];</div><div class="line">        <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; m; ++i) c[i] += c[i - <span class="number">1</span>];</div><div class="line">        <span class="keyword">for</span>(i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) sa[--c[x[y[i]]]] = y[i];</div><div class="line">        swap(x, y); p = <span class="number">1</span>; x[sa[<span class="number">0</span>]] = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; n; ++i)</div><div class="line">            x[sa[i]] = (y[sa[i - <span class="number">1</span>]] == y[sa[i]] &amp;&amp;</div><div class="line">                        y[sa[i - <span class="number">1</span>] + k] == y[sa[i] + k]) ? p - <span class="number">1</span> : p++;</div><div class="line">        <span class="keyword">if</span>(p &gt;= n) <span class="keyword">break</span>; m = p;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; ++i) rk[sa[i]] = i;</div><div class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>, k = <span class="number">0</span>; i &lt; n; ++i) &#123;</div><div class="line">        <span class="keyword">if</span>(k) k--;</div><div class="line">        <span class="keyword">if</span>(!rk[i]) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">int</span> j = sa[rk[i] - <span class="number">1</span>];</div><div class="line">        <span class="keyword">while</span>(s[i + k] == s[j + k]) k++;</div><div class="line">        height[rk[i]] = k;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">see</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) <span class="built_in">printf</span>(<span class="string">"%d: %s\n"</span>, i, str + sa[i]);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"sa: "</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) <span class="built_in">printf</span>(<span class="string">"%d "</span>, sa[i]); <span class="built_in">puts</span>(<span class="string">""</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"rk: "</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) <span class="built_in">printf</span>(<span class="string">"%d "</span>, rk[i]); <span class="built_in">puts</span>(<span class="string">""</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"ht: "</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) <span class="built_in">printf</span>(<span class="string">"%d "</span>, height[i]); <span class="built_in">puts</span>(<span class="string">""</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> nxt[N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">while</span>(t--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%s%s"</span>, x, str);</div><div class="line">        n = <span class="built_in">strlen</span>(str);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) s[i] = str[i] - <span class="string">'a'</span> + <span class="number">1</span>;</div><div class="line">        s[n] = <span class="number">0</span>;</div><div class="line">        build(n + <span class="number">1</span>, <span class="number">30</span>);</div><div class="line"></div><div class="line"><span class="comment">//      see(n + 1);</span></div><div class="line"></div><div class="line">        nxt[n] = n;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = n - <span class="number">1</span>; ~i; --i) &#123;</div><div class="line">            nxt[i] = nxt[i + <span class="number">1</span>];</div><div class="line">            <span class="keyword">if</span>(str[i] == *x) nxt[i] = i;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">            ans += n - max(nxt[sa[i]], sa[i] + height[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">static</span> <span class="keyword">int</span> kase = <span class="number">0</span>;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d: %I64d\n"</span>, ++kase, ans);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 字符串 </category>
            
            <category> SA/SAM </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 后缀数组 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDU 5772 String problem（最大权闭合子图）]]></title>
      <url>/2016/08/05/HDU%205772%20String%20problem%EF%BC%88%E6%9C%80%E5%A4%A7%E6%9D%83%E9%97%AD%E5%90%88%E5%AD%90%E5%9B%BE%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$懒得翻译题目了 - -$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$最大权闭合子图详细见胡波涛的论文$<br>$建图就源向正权点连边，容量是正权，负权就负权点向汇连边，容量是负权的绝对值$<br>$对于原图中依赖关系，保留在网络流图中，容量是INF$<br>$答案是\sum 正权-最小割$</p>
</blockquote>
<hr>
<blockquote>
<p>本题，官方题解写的很清楚了<br><img src="http://7xru22.com1.z0.glb.clouddn.com/16-8-5/48099702.jpg" alt=""></p>
</blockquote>
<p>代码:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-08-02</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e6</span> + <span class="number">10</span>;</div><div class="line"></div><div class="line"><span class="comment">//必须添加超源超汇 0-&gt;s n+1-&gt;t</span></div><div class="line"><span class="comment">//特判起终点相同的情况 -&gt; WA</span></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> v, nxt, cap, flow;</div><div class="line">&#125; edge[M];</div><div class="line"><span class="keyword">int</span> head[N], cnt;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> c1)</span> </span>&#123;</div><div class="line">    edge[cnt] = &#123;v, head[u], c1, <span class="number">0</span>&#125;;</div><div class="line">    head[u] = cnt++;</div><div class="line">    edge[cnt] = &#123;u, head[v], <span class="number">0</span>, <span class="number">0</span>&#125;;</div><div class="line">    head[v] = cnt++;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> lev[N], cur[N];</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span> </span>&#123;</div><div class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</div><div class="line">    <span class="built_in">memset</span>(lev, <span class="number">0</span>, <span class="keyword">sizeof</span> lev);</div><div class="line">    q.push(s);  lev[s] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span>(q.size() &amp;&amp; !lev[t]) &#123;</div><div class="line">        <span class="keyword">int</span> u = q.front(); q.pop();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; ~i; i = edge[i].nxt) &#123;</div><div class="line">            <span class="keyword">int</span> v = edge[i].v;</div><div class="line">            <span class="keyword">if</span>(edge[i].cap &gt; edge[i].flow &amp;&amp; !lev[v]) &#123;</div><div class="line">                lev[v] = lev[u] + <span class="number">1</span>;</div><div class="line">                q.push(v);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> lev[t];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> t, <span class="keyword">int</span> delta)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(u == t || !delta) <span class="keyword">return</span> delta;</div><div class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = cur[u]; ~i; i = edge[i].nxt) &#123;</div><div class="line">        <span class="keyword">int</span> v = edge[i].v;</div><div class="line">        <span class="keyword">if</span>(edge[i].cap &gt; edge[i].flow &amp;&amp; lev[v] == lev[u] + <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">int</span> d = dfs(v, t, min(delta, edge[i].cap - edge[i].flow));</div><div class="line">            cur[u] = i;</div><div class="line">            ret += d; delta -= d;</div><div class="line">            edge[i].flow += d;</div><div class="line">            edge[i ^ <span class="number">1</span>].flow -= d;</div><div class="line"></div><div class="line">            <span class="keyword">if</span>(delta == <span class="number">0</span>) <span class="keyword">return</span> ret;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    lev[u] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dinic</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(bfs(s, t)) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = s; i &lt;= t; ++i) cur[i] = head[i];</div><div class="line">        ret += dfs(s, t, INF);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> C = <span class="number">100</span>;</div><div class="line"><span class="keyword">int</span> n, a[C], b[C];</div><div class="line"><span class="keyword">char</span> str[C];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> T; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</div><div class="line">    <span class="keyword">while</span>(T--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%s"</span>, &amp;n, str + <span class="number">1</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; ++i) <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, a + i, b + i);</div><div class="line"></div><div class="line">        cnt = <span class="number">0</span>; <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</div><div class="line">        <span class="keyword">int</span> s = <span class="number">0</span>, t = n * n + n + <span class="number">10</span> + <span class="number">1</span>;</div><div class="line"></div><div class="line">        <span class="comment">//w_ij: 1~n^2    s_i: n^2+1 ~ n^2+n</span></div><div class="line">        <span class="comment">//10: n^2+n+1 ~ n^2+n+10</span></div><div class="line"></div><div class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> delta[] = &#123;<span class="number">0</span>, n * n, n* n + n&#125;;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i)</div><div class="line">            addEdge(delta[<span class="number">2</span>] + i + <span class="number">1</span>, t, -(a[i] - b[i])); <span class="comment">//10 -&gt; t</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">            addEdge(delta[<span class="number">1</span>] + i, t, a[str[i] - <span class="string">'0'</span>]); <span class="comment">//s_i -&gt; t</span></div><div class="line">            addEdge(delta[<span class="number">1</span>] + i, delta[<span class="number">2</span>] + str[i] - <span class="string">'0'</span> + <span class="number">1</span>, INF); <span class="comment">//s_i -&gt; 10</span></div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</div><div class="line">                <span class="keyword">int</span> w; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;w);</div><div class="line">                sum += w;</div><div class="line">                addEdge(s, (i - <span class="number">1</span>) * n + j, w); <span class="comment">//s -&gt; w_ij</span></div><div class="line">                <span class="keyword">if</span>(i == j) <span class="keyword">continue</span>;</div><div class="line">                addEdge((i - <span class="number">1</span>) * n + j, delta[<span class="number">1</span>] + i, INF); <span class="comment">//w_ij -&gt; s_i</span></div><div class="line">                addEdge((i - <span class="number">1</span>) * n + j, delta[<span class="number">1</span>] + j, INF); <span class="comment">//w_ij -&gt; s_j</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">static</span> <span class="keyword">int</span> kase = <span class="number">0</span>;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d: %d\n"</span>, ++kase, sum - dinic(s, t));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 图论 </category>
            
            <category> 网络流 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 最大权闭合子图 </tag>
            
            <tag> 最小割 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDU 5768 Lucky7（容斥、CRT）]]></title>
      <url>/2016/08/05/HDU%205768%20Lucky7%EF%BC%88%E5%AE%B9%E6%96%A5%E3%80%81CRT%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$给定0&lt;L &lt; R &lt; 10^{18}，给定N\le 15个非法条件$<br>$即x\%p_i=a_i，a_i&lt;p_i\le 10^5，\prod p_i\le 10^{18}$<br>$求[L, R]区间内能被7整除，且合法的数字的个数$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$非法条件有15个，显然的容斥一下，对于每个条件窝萌可以用CRT算出个数$<br>$但是这里有被7整除的条件，不如把这个条件当作强制条件$<br>$之后把全集变成模7域下的全集，即[L, R]整除7的数的个数tot$<br>$最后ans=tot-容斥的结果$<br>$时间复杂度O(n\times 2^n\times nlogC)$</p>
</blockquote>
<p>代码:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-07-28</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="function">LL <span class="title">exgcd</span><span class="params">(LL a, LL b, LL&amp; x, LL&amp; y)</span> </span>&#123;</div><div class="line">    LL g = a;</div><div class="line">    <span class="keyword">if</span>(!b) x = <span class="number">1</span>, y = <span class="number">0</span>;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        g = exgcd(b, a % b, y, x);</div><div class="line">        y -= a / b * x;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> g;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n;</div><div class="line">LL x, y;</div><div class="line">LL a[N], b[N], m[N];</div><div class="line"><span class="keyword">int</span> r[N], p[N];</div><div class="line"></div><div class="line">pair&lt;LL, LL&gt; excrt(<span class="keyword">int</span> n, LL* a, LL* b, LL* m) &#123;</div><div class="line">    LL B = <span class="number">0</span>, M = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">        LL A = (M * a[i]) % m[i], c = (b[i] - B * a[i]) % m[i];</div><div class="line">        LL x, y, g = exgcd(A, m[i], x, y);</div><div class="line">        <span class="keyword">if</span>(c % g) <span class="keyword">return</span> &#123; <span class="number">-1</span>, <span class="number">-1</span>&#125;;</div><div class="line">        x = c / g * x % (m[i] / g);</div><div class="line">        B += x * M;</div><div class="line">        M *= m[i] / g;</div><div class="line">        B %= M;</div><div class="line">    &#125;</div><div class="line">    B = (B + M) % M;</div><div class="line">    <span class="keyword">if</span>(!B) B = M;</div><div class="line">    <span class="keyword">return</span> &#123;B, M&#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">calc</span><span class="params">(LL x, LL B, LL M)</span> </span>&#123;</div><div class="line">    LL ret = x &gt;= B;</div><div class="line">    ret += (x - B) / M;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line">    <span class="keyword">clock_t</span> _ = clock();</div><div class="line"></div><div class="line">    <span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">while</span>(t--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%I64d%I64d"</span>, &amp;n, &amp;x, &amp;y);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, p + i, r + i);</div><div class="line"></div><div class="line">        LL no = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> s = <span class="number">1</span>; s &lt; <span class="number">1</span> &lt;&lt; n; ++s) &#123;</div><div class="line">            <span class="keyword">int</span> idx = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</div><div class="line">                <span class="keyword">if</span>(s &gt;&gt; i &amp; <span class="number">1</span>) &#123;</div><div class="line">                    ++idx;</div><div class="line">                    a[idx] = <span class="number">1</span>;</div><div class="line">                    b[idx] = r[i];</div><div class="line">                    m[idx] = p[i];</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            ++idx;</div><div class="line">            a[idx] = <span class="number">1</span>, b[idx] = <span class="number">0</span>, m[idx] = <span class="number">7</span>;</div><div class="line"></div><div class="line">            <span class="keyword">auto</span> ret = excrt(idx, a, b, m);</div><div class="line">            LL B, M; tie(B, M) = ret;</div><div class="line"><span class="comment">//            pr(s); pr(B); prln(M);</span></div><div class="line">            LL tmp = calc(y, B, M) - calc(x - <span class="number">1</span>, B, M);</div><div class="line">            <span class="keyword">if</span>(idx - <span class="number">1</span> &amp; <span class="number">1</span>) no += tmp;</div><div class="line">            <span class="keyword">else</span> no -= tmp;</div><div class="line">        &#125;</div><div class="line"><span class="comment">//        prln(no);</span></div><div class="line">        LL ans = (y / <span class="number">7</span>) - (x - <span class="number">1</span>) / <span class="number">7</span> - no;</div><div class="line"></div><div class="line">        <span class="keyword">static</span> <span class="keyword">int</span> kase = <span class="number">0</span>;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d: %I64d\n"</span>, ++kase, ans);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\nTime cost: %.2fs\n"</span>, <span class="number">1.0</span> * (clock() - _) / CLOCKS_PER_SEC);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 数学 </category>
            
            <category> CRT </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 容斥 </tag>
            
            <tag> CRT </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDU 5741 Helter Skelter（数形结合、二分）]]></title>
      <url>/2016/08/05/HDU%205741%20Helter%20Skelter%EF%BC%88%E6%95%B0%E5%BD%A2%E7%BB%93%E5%90%88%E3%80%81%E4%BA%8C%E5%88%86%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$给定一个压缩过的0开头的01交替字符串，比如00110表示为\{ 2, 2, 1 \}$<br>$表示数字个数N\le 1000，x_i \le 10^6，Q\le 5\times 10^5次查询$<br>$每次给定a, b，问是否存在原串的子串0有a个，1有b个$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$我们把所有的a和b n^2枚举一下，如果把这些(a, b)表示在二维平面上$<br>$手玩一下可以发现[0\ldots 0]这种子串表示出来的(a, b)必然在图形的下部$<br>$也可以发现[1\ldots 1]这种子串表示出来的(a, b)必然在图形的下部$<br>$还可以发现图形是连通且封闭的，现在窝萌可以把这个图形抠出来一个凸包$<br>$假设这些下部点是红点，上部点是绿点，其它点是蓝点$<br>$画出一个图，然后根据性质抠一下就好了$<br>$红点在竖线的底端，绿点在竖线的顶端$<br><img src="http://7xru22.com1.z0.glb.clouddn.com/16-8-5/91108107.jpg" alt=""><br>$之后对于每个询问，只要二分一下a，得到b的下界和上界，即可知道是否合法$<br>$时间复杂度O(n^2+qlogn^2)$</p>
</blockquote>
<p>代码:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-07-25</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e3</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m, a[N];</div><div class="line"><span class="keyword">char</span> ans[N * N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line">    <span class="keyword">clock_t</span> _ = clock();</div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line"><span class="comment">       |            ___B</span></div><div class="line"><span class="comment">       |      G ___|   |</span></div><div class="line"><span class="comment">       |    ___|  _____|</span></div><div class="line"><span class="comment">       |___|     |</span></div><div class="line"><span class="comment">       |    _____| R</span></div><div class="line"><span class="comment">       |   |</span></div><div class="line"><span class="comment">    ___|___|_____________</span></div><div class="line"><span class="comment">      0|</span></div><div class="line"><span class="comment">    */</span></div><div class="line"></div><div class="line">    <span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">while</span>(t--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a + i);</div><div class="line"></div><div class="line">        <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; up, dw;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</div><div class="line">            <span class="keyword">int</span> zero = <span class="number">0</span>, one = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt; n; ++j) &#123;</div><div class="line">                <span class="keyword">if</span>(j % <span class="number">2</span> == <span class="number">0</span>) zero += a[j];</div><div class="line">                <span class="keyword">else</span> one += a[j];</div><div class="line"></div><div class="line">                <span class="comment">//red points</span></div><div class="line">                <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span> &amp;&amp; j % <span class="number">2</span> == <span class="number">0</span>) dw.push_back(&#123;zero, one&#125;);</div><div class="line">                <span class="comment">//green points</span></div><div class="line">                <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">1</span> &amp;&amp; j % <span class="number">2</span> == <span class="number">1</span>) up.push_back(&#123;zero, one&#125;);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        sort(dw.begin(), dw.end());</div><div class="line">        sort(up.begin(), up.end());</div><div class="line"></div><div class="line">        n = <span class="number">0</span>; <span class="comment">//erase blues points, save lower red points</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>, j; i &lt; dw.size(); i = j) &#123;</div><div class="line">            <span class="comment">//jump vertical line</span></div><div class="line">            <span class="keyword">for</span>(j = i; j &lt; dw.size() &amp;&amp; dw[j].first == dw[i].first; ++j);</div><div class="line">            <span class="comment">//pop upper ones, save this lowest one</span></div><div class="line">            <span class="keyword">while</span>(n &gt; <span class="number">0</span> &amp;&amp; dw[n - <span class="number">1</span>].second &gt;= dw[i].second) --n;</div><div class="line">            dw[n++] = dw[i];</div><div class="line">        &#125;</div><div class="line">        dw.resize(n);</div><div class="line"></div><div class="line">        n = <span class="number">0</span>; <span class="comment">//erase blues points, save upper green points</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>, j; i &lt; up.size(); i = j) &#123;</div><div class="line">            <span class="comment">//go vertical line's top</span></div><div class="line">            <span class="keyword">for</span>(j = i; j &lt; up.size() &amp;&amp; up[j].first == up[i].first; ++j);</div><div class="line">            <span class="comment">//if upper</span></div><div class="line">            <span class="keyword">if</span>(!n || up[j - <span class="number">1</span>].second &gt;= up[n - <span class="number">1</span>].second)</div><div class="line">                up[n++] = up[j - <span class="number">1</span>];</div><div class="line">        &#125;</div><div class="line">        up.resize(n);</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</div><div class="line">            <span class="keyword">int</span> a, b; <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a, &amp;b);</div><div class="line">            <span class="keyword">auto</span> st = lower_bound(dw.begin(), dw.end(), make_pair(a, -INF));</div><div class="line">            <span class="keyword">auto</span> ed = upper_bound(up.begin(), up.end(), make_pair(a, +INF));</div><div class="line">            ans[i] = <span class="string">'0'</span>;</div><div class="line">            <span class="keyword">if</span>(st != dw.end()) &#123;</div><div class="line">                --ed;</div><div class="line">                <span class="keyword">if</span>(b &gt;= st-&gt;second &amp;&amp; b &lt;= ed-&gt;second) ans[i] = <span class="string">'1'</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        ans[m] = <span class="number">0</span>;</div><div class="line">        <span class="built_in">puts</span>(ans);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\nTime cost: %.2fs\n"</span>, <span class="number">1.0</span> * (clock() - _) / CLOCKS_PER_SEC);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">dw:</span></div><div class="line"><span class="comment">3 0</span></div><div class="line"><span class="comment">up:</span></div><div class="line"><span class="comment">0 4</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">dw:</span></div><div class="line"><span class="comment">3 0</span></div><div class="line"><span class="comment">4 2</span></div><div class="line"><span class="comment">up:</span></div><div class="line"><span class="comment">0 2</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">dw:</span></div><div class="line"><span class="comment">3 0</span></div><div class="line"><span class="comment">4 2</span></div><div class="line"><span class="comment">6 3</span></div><div class="line"><span class="comment">7 7</span></div><div class="line"><span class="comment">8 11</span></div><div class="line"><span class="comment">10 12</span></div><div class="line"><span class="comment">up:</span></div><div class="line"><span class="comment">0 7</span></div><div class="line"><span class="comment">1 8</span></div><div class="line"><span class="comment">2 9</span></div><div class="line"><span class="comment">3 12</span></div><div class="line"><span class="comment">4 16</span></div><div class="line"><span class="comment">7 18</span></div><div class="line"><span class="comment">8 19</span></div><div class="line"><span class="comment">*/</span></div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 思维 </category>
            
            <category> 数形结合 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数形结合 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDU 5790 Prefix（字典树、主席树）]]></title>
      <url>/2016/08/05/HDU%205790%20Prefix%EF%BC%88%E5%AD%97%E5%85%B8%E6%A0%91%E3%80%81%E4%B8%BB%E5%B8%AD%E6%A0%91%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$N\le 10^5个字符串，保证\sum |L_i|\le 10^5，Q\le 10^5次询问$<br>$在线查询[L, R]区间有多少个不同的前缀$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$- - 求区间有多少个不同的数的套路$<br>$考虑离线的做法，询问右端点排序$<br>$字典树插入每个字符串i，记录每个前缀上次哪里出现$<br>$然后上次-1，这次+1，对于每个以i为右端点的询问答案就是sum(L, i)$<br>$这题强制在线，只要可持久化一下就好了$<br>$时间复杂度O(\sum |L|+qlogn)$</p>
</blockquote>
<p>代码:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-08-03</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, q;</div><div class="line"><span class="keyword">char</span> s[N];</div><div class="line"></div><div class="line"><span class="keyword">int</span> root[N];</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PersistentSegTree</span> &#123;</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e5</span> * <span class="number">40</span>;</div><div class="line">    <span class="keyword">int</span> sz;</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></div><div class="line">        <span class="keyword">int</span> ls, rs, sum;</div><div class="line">    &#125; tree[M];</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">        sz = <span class="number">0</span>;</div><div class="line">        root[<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">newNode</span><span class="params">(<span class="keyword">int</span> rt)</span> </span>&#123;</div><div class="line">        tree[++sz] = tree[rt];</div><div class="line">        <span class="keyword">return</span> sz;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> v, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span>&amp; rt)</span> </span>&#123;</div><div class="line">        rt = newNode(rt);</div><div class="line">        tree[rt].sum += v;</div><div class="line">        <span class="keyword">if</span>(l == r) <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">int</span> m = l + r &gt;&gt; <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span>(o &lt;= m) update(o, v, l, m, tree[rt].ls);</div><div class="line">        <span class="keyword">else</span> update(o, v, m + <span class="number">1</span>, r, tree[rt].rs);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> rt)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R) <span class="keyword">return</span> tree[rt].sum;</div><div class="line">        <span class="keyword">int</span> m = l + r &gt;&gt; <span class="number">1</span>, ret = <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span>(L &lt;= m) ret += query(L, R, l, m, tree[rt].ls);</div><div class="line">        <span class="keyword">if</span>(R &gt; m) ret += query(L, R, m + <span class="number">1</span>, r, tree[rt].rs);</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line">&#125; T;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Trie</span> &#123;</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e5</span> + <span class="number">10</span>, S = <span class="number">26</span>;</div><div class="line">    <span class="keyword">int</span> sz, rt, nxt[M][S];</div><div class="line">    <span class="keyword">int</span> val[M];</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">newNode</span><span class="params">()</span> </span>&#123;</div><div class="line">        val[sz] = <span class="number">0</span>;</div><div class="line">        <span class="built_in">memset</span>(nxt[sz], <span class="number">0</span>, <span class="keyword">sizeof</span> nxt[sz]);</div><div class="line">        <span class="keyword">return</span> sz++;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">        sz = <span class="number">0</span>;</div><div class="line">        rt = newNode();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">char</span>* s, <span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> u = rt;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; s[i]; ++i) &#123;</div><div class="line">            <span class="keyword">int</span>&amp; v = nxt[u][s[i] - <span class="string">'a'</span>];</div><div class="line">            <span class="keyword">if</span>(!v) v = newNode();</div><div class="line">            <span class="keyword">if</span>(val[v]) T.update(val[v], <span class="number">-1</span>, <span class="number">1</span>, n, root[id]);</div><div class="line">            val[v] = id;</div><div class="line">            T.update(val[v], <span class="number">1</span>, <span class="number">1</span>, n, root[id]);</div><div class="line">            u = v;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125; trie;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) == <span class="number">1</span>) &#123;</div><div class="line">        T.init();</div><div class="line">        trie.init();</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</div><div class="line">            root[i] = root[i - <span class="number">1</span>];</div><div class="line">            trie.insert(s, i);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> z = <span class="number">0</span>;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;q);</div><div class="line">        <span class="keyword">while</span>(q--) &#123;</div><div class="line">            <span class="keyword">int</span> l, r; <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;l, &amp;r);</div><div class="line">            l = (z + l) % n + <span class="number">1</span>;</div><div class="line">            r = (z + r) % n + <span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span>(l &gt; r) swap(l, r);</div><div class="line">            z = T.query(l, n, <span class="number">1</span>, n, root[r]);</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, z);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 数据结构 </category>
            
            <category> 主席树 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 主席树 </tag>
            
            <tag> 字典树 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDU 5787 K-wolf Number（数位dp）]]></title>
      <url>/2016/08/05/HDU%205787%20K-wolf%20Number%EF%BC%88%E6%95%B0%E4%BD%8Ddp%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$求1\le L\le R\le 10^{18}范围内，每2\le K\le 5个数字都不同的数字有多少$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$显然数位dp一下就做完了$<br>$f[i][pre][5]:=从高到低，填到第i位，且之前的数字是pre，pre已经有1\sim 4位数合法数字数$<br>$由于不能有前导0，所以开个first判一判，其他套个板子就好了$</p>
</blockquote>
<p>代码:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-08-02</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e4</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line">LL l, r, f[<span class="number">20</span>][N][<span class="number">5</span>];</div><div class="line"><span class="keyword">int</span> k;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> ten[] = &#123;<span class="number">1</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">1000</span>, <span class="number">10000</span>, <span class="number">100000</span>&#125;;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> x / ten[i] % <span class="number">10</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> (x * <span class="number">10</span> + y) % ten[k - <span class="number">1</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> digit[<span class="number">20</span>];</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> pre, <span class="keyword">int</span> num, <span class="keyword">bool</span> first, <span class="keyword">bool</span> e)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(!i) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span>(!e &amp;&amp; ~f[i][pre][num]) <span class="keyword">return</span> f[i][pre][num];</div><div class="line">    LL ret = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> to = e ? digit[i] : <span class="number">9</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> d = <span class="number">0</span>; d &lt;= to; ++d) &#123;</div><div class="line">        <span class="keyword">bool</span> ok = <span class="literal">true</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; min(k - <span class="number">1</span>, num) &amp;&amp; ok; ++j)</div><div class="line">            <span class="keyword">if</span>(get(pre, j) == d) ok = <span class="literal">false</span>;</div><div class="line">        <span class="keyword">if</span>(!ok) <span class="keyword">continue</span>;</div><div class="line">        ret += dfs(i - <span class="number">1</span>, first &amp;&amp; !d ? <span class="number">0</span> : add(pre, d),</div><div class="line">                   first &amp;&amp; !d ? <span class="number">0</span> : min(k - <span class="number">1</span>, num + <span class="number">1</span>),</div><div class="line">                   first &amp;&amp; !d, e &amp;&amp; d == to);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> e ? ret : f[i][pre][num] = ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">calc</span><span class="params">(LL x)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(; x; x /= <span class="number">10</span>) digit[++cnt] = x % <span class="number">10</span>;</div><div class="line">    <span class="keyword">return</span> dfs(cnt, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(; x; x /= <span class="number">10</span>) digit[++cnt] = x % <span class="number">10</span>;</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt; ++i) &#123;</div><div class="line">        <span class="keyword">bool</span> ok = <span class="literal">true</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; k; ++j) &#123;</div><div class="line">            <span class="keyword">if</span>(i - j &gt;= <span class="number">1</span> &amp;&amp; digit[i] == digit[i - j]) &#123;</div><div class="line">                ok = <span class="literal">false</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(!ok) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> sum[<span class="number">1000005</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line"><span class="comment">//    for(k = 2; k &lt;= 5; ++k) &#123;</span></div><div class="line"><span class="comment">//        memset(f, -1, sizeof f);</span></div><div class="line"><span class="comment">//        for(int i = 1; i &lt;= 10000; ++i) &#123;</span></div><div class="line"><span class="comment">//            sum[i] = sum[i - 1] + judge(i, k);</span></div><div class="line"><span class="comment">//            if(sum[i]  +  1 != calc(i)) &#123;</span></div><div class="line"><span class="comment">//                printf("%d: %d %I64d %d\n", i, sum[i] + 1, calc(i), k);</span></div><div class="line"><span class="comment">//                printf("WA\n");</span></div><div class="line"><span class="comment">//                break;</span></div><div class="line"><span class="comment">//            &#125;</span></div><div class="line"><span class="comment">//        &#125;</span></div><div class="line"><span class="comment">//    &#125;</span></div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%I64d%I64d%d"</span>, &amp;l, &amp;r, &amp;k) == <span class="number">3</span>) &#123;</div><div class="line">        <span class="built_in">memset</span>(f, <span class="number">-1</span>, <span class="keyword">sizeof</span> f);</div><div class="line">        LL ans = calc(r) - calc(l - <span class="number">1</span>);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 动态规划 </category>
            
            <category> 数位dp </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数位dp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDU 5794 A Simple Chess（dp、容斥、Lucas）]]></title>
      <url>/2016/08/05/HDU%205794%20A%20Simple%20Chess%EF%BC%88dp%E3%80%81%E5%AE%B9%E6%96%A5%E3%80%81Lucas%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$给定N\times M的棋盘，N，M\le 10^{18}，棋盘上有R\le 100个障碍物$<br>$现有一个马从(1, 1)到(N, M)，只能向右和下走，问方法数$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$考虑到达(x, y)没有障碍物的方法数，其实假设右跳a次，下跳b次$<br>$即2a+b=x, a+2b=y, \Rightarrow a + b = { x + y \over 3 }$<br>$即a=x - { x + y \over 3 }, b = y - { x + y \over 3 }$<br>$显然方法数是C_{a+b}^a$<br>$不过泥打表找规律发现杨辉三角，找到有解的直线方程转化也是兹磁的，(窝萌是这么干的)$<br>$之后就是容斥了，把经过障碍物的减掉$<br>$首先对障碍物排序，然后dp一波根据偏序关系来$<br>$令全集ans=calc(n, m)$<br>$f[i]:=到达i，且以i为第一个障碍物的方法数$<br>$最终答案必然是ans=ans-\sum f[i]\times calc(n-obstacle[i].x+1, m-obstacle[i].y+1)$<br>$显然每个f[i]是互斥事件，因为这些路径是不重复的，注意那个第一个(这个是统计套路。。$<br>$并且所有经过障碍物的路径必然被其中一个f[i]包含$<br>$所以所有的f[i]构成经过障碍物的全集$<br>$f[i]=calc(obstacle[i].x, obstacle[i].y)$<br>$-\sum f[j]\times calc(obstacle[i].x-obstacle[j].x+1, obstacle[i].y-obstacle[j].y+1)$<br>$obstacle[j]偏序小于obstacle[i]$<br>$注意判断不可达别用0，因为会模出来0，$→_→<br>$时间复杂度O(P+r^2 log P)$</p>
</blockquote>
<p>代码:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-08-04</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">110119</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line">LL n, m, ox[N], oy[N];</div><div class="line"><span class="keyword">int</span> r;</div><div class="line"></div><div class="line">LL g[<span class="number">1005</span>][<span class="number">1005</span>];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DP</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="built_in">memset</span>(g, <span class="number">0</span>, <span class="keyword">sizeof</span>(g));</div><div class="line">    g[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= m; k++) &#123;</div><div class="line">            <span class="keyword">int</span> ok = <span class="number">1</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= r; i++) &#123;</div><div class="line">                <span class="keyword">if</span>(j == ox[i] &amp;&amp; k == oy[i]) &#123;</div><div class="line">                    ok = <span class="number">0</span>;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//if(!ok) printf("NO\n");</span></div><div class="line">            <span class="keyword">if</span>(!ok) &#123;</div><div class="line">                g[j][k] = <span class="number">0</span>;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line">            g[j + <span class="number">1</span>][k + <span class="number">2</span>] += g[j][k];</div><div class="line">            g[j + <span class="number">2</span>][k + <span class="number">1</span>] += g[j][k];</div><div class="line">            g[j + <span class="number">1</span>][k + <span class="number">2</span>] %= MOD;</div><div class="line">            g[j + <span class="number">2</span>][k + <span class="number">1</span>] %= MOD;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">quick</span><span class="params">(LL x, LL n)</span> </span>&#123;</div><div class="line">    LL ret = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(; n; n &gt;&gt;= <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">if</span>(n &amp; <span class="number">1</span>) ret = ret * x % MOD;</div><div class="line">        x = x * x % MOD;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line">LL fact[N], invf[N];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">gao</span><span class="params">()</span> </span>&#123;</div><div class="line">    fact[<span class="number">0</span>] = invf[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= MOD; ++i) &#123;</div><div class="line">        fact[i] = fact[i - <span class="number">1</span>] * i % MOD;</div><div class="line">        invf[i] = quick(fact[i], MOD - <span class="number">2</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">C</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(n &lt; m) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">return</span> fact[n] * invf[m] % MOD * invf[n - m] % MOD;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">lucas</span><span class="params">(LL n, LL m)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(m == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">return</span> C(n % MOD, m % MOD) * lucas(n / MOD, m / MOD) % MOD;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">calc</span><span class="params">(LL x, LL y)</span> </span>&#123;</div><div class="line">    LL n = x + y + <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span>(n % <span class="number">3</span>) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    n /= <span class="number">3</span>;</div><div class="line">    <span class="keyword">if</span>(x &lt; n || y &lt; n) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    LL m = x - n;</div><div class="line">    n--;</div><div class="line">    <span class="keyword">return</span> lucas(n, m);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> id[N];</div><div class="line">LL f[N]; <span class="comment">//to i, and let i be the first obstacle</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt", "w", stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    gao();</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%I64d%I64d%d"</span>, &amp;n, &amp;m, &amp;r) == <span class="number">3</span>) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= r; ++i) <span class="built_in">scanf</span>(<span class="string">"%I64d%I64d"</span>, ox + i, oy + i);</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= r; ++i) id[i] = i;</div><div class="line">        sort(id + <span class="number">1</span>, id + <span class="number">1</span> + r, [&amp;](<span class="keyword">int</span> x, <span class="keyword">int</span> y) &#123;</div><div class="line">            <span class="keyword">return</span> make_pair(ox[x], oy[x]) &lt; make_pair(ox[y], oy[y]);</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        LL ans = calc(n, m);</div><div class="line">        <span class="keyword">if</span>(~ans) &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= r; ++i) &#123;</div><div class="line">                <span class="keyword">int</span> u = id[i];</div><div class="line">                LL&amp; cur = f[i];</div><div class="line">                cur = calc(ox[u], oy[u]);</div><div class="line">                <span class="keyword">if</span>(cur == <span class="number">-1</span>) <span class="keyword">continue</span>;</div><div class="line">                LL to = calc(n - ox[u] + <span class="number">1</span>, m - oy[u] + <span class="number">1</span>);</div><div class="line">                <span class="keyword">if</span>(to == <span class="number">-1</span>) <span class="keyword">continue</span>;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i; ++j) &#123;</div><div class="line">                    <span class="keyword">if</span>(f[j] == <span class="number">-1</span>) <span class="keyword">continue</span>;</div><div class="line">                    <span class="keyword">int</span> v = id[j];</div><div class="line">                    <span class="keyword">if</span>(ox[u] &gt; ox[v] &amp;&amp; oy[u] &gt; oy[v]) &#123;</div><div class="line">                        LL tmp = calc(ox[u] - ox[v] + <span class="number">1</span>, oy[u] - oy[v] + <span class="number">1</span>);</div><div class="line">                        <span class="keyword">if</span>(tmp == <span class="number">-1</span>) <span class="keyword">continue</span>;</div><div class="line">                        cur -= f[j] * tmp % MOD;</div><div class="line">                        cur %= MOD;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                ans = (ans - cur * to % MOD) % MOD;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> ans = <span class="number">0</span>;</div><div class="line">        ans = (ans + MOD) % MOD;</div><div class="line"><span class="comment">//        DP();</span></div><div class="line"><span class="comment">//        if(g[n][m] != ans) &#123;</span></div><div class="line"><span class="comment">//            puts("WA");</span></div><div class="line"><span class="comment">//            pr(g[n][m]); prln(ans);</span></div><div class="line"><span class="comment">//        &#125;</span></div><div class="line">        <span class="keyword">static</span> <span class="keyword">int</span> kase = <span class="number">0</span>;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d: %I64d\n"</span>, ++kase, ans);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">  0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18</span></div><div class="line"><span class="comment">  1   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0</span></div><div class="line"><span class="comment">  2   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0</span></div><div class="line"><span class="comment">  3   0   1   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0</span></div><div class="line"><span class="comment">  4   0   0   0   2   0   0   1   0   0   0   0   0   0   0   0   0   0   0</span></div><div class="line"><span class="comment">  5   0   0   1   0   0   3   0   0   1   0   0   0   0   0   0   0   0   0</span></div><div class="line"><span class="comment">  6   0   0   0   0   3   0   0   4   0   0   1   0   0   0   0   0   0   0</span></div><div class="line"><span class="comment">  7   0   0   0   1   0   0   6   0   0   5   0   0   1   0   0   0   0   0</span></div><div class="line"><span class="comment">  8   0   0   0   0   0   4   0   0  10   0   0   6   0   0   1   0   0   0</span></div><div class="line"><span class="comment">  9   0   0   0   0   1   0   0  10   0   0  15   0   0   7   0   0   1   0</span></div><div class="line"><span class="comment"> 10   0   0   0   0   0   0   5   0   0  20   0   0  21   0   0   8   0   0</span></div><div class="line"><span class="comment"> 11   0   0   0   0   0   1   0   0  15   0   0  35   0   0  28   0   0   9</span></div><div class="line"><span class="comment"> 12   0   0   0   0   0   0   0   6   0   0  35   0   0  56   0   0  36   0</span></div><div class="line"><span class="comment"> 13   0   0   0   0   0   0   1   0   0  21   0   0  70   0   0  84   0   0</span></div><div class="line"><span class="comment"> 14   0   0   0   0   0   0   0   0   7   0   0  56   0   0 126   0   0 120</span></div><div class="line"><span class="comment"> 15   0   0   0   0   0   0   0   1   0   0  28   0   0 126   0   0 210   0</span></div><div class="line"><span class="comment"> 16   0   0   0   0   0   0   0   0   0   8   0   0  84   0   0 252   0   0</span></div><div class="line"><span class="comment"> 17   0   0   0   0   0   0   0   0   1   0   0  36   0   0 210   0   0 462</span></div><div class="line"><span class="comment"> 18   0   0   0   0   0   0   0   0   0   0   9   0   0 120   0   0 462   0</span></div><div class="line"><span class="comment">*/</span></div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 数学 </category>
            
            <category> 容斥 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 容斥 </tag>
            
            <tag> Lucas </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDU 5785 Interesting（Manacher | 回文树）]]></title>
      <url>/2016/08/04/HDU%205785%20Interesting%EF%BC%88Manacher%20%20%E5%9B%9E%E6%96%87%E6%A0%91%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$给定N\le 10^6的字符串，现在寻找所有三元组(i, j, k)，1\le i\le j&lt;k\le N$<br>$使得s[i\ldots j]和s[j+1\ldots k]都是回文串，求\sum\sum i\times k mod 10^9+7$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$赛上做法比较那啥，回文树硬肝的，a、b为某2个回文串长度$<br>$[i\ldots j-1]、[j\ldots k]$<br>$\sum\sum i\times k=\sum\sum (j-1-a+1)(j+b-1)$<br>$=\sum\sum (j-a)(j+b-1)$<br>$=preCnt\times sufCnt\times j^2$<br>$+(preCnt\times (sufSum-sufCnt)-preSum\times sufCnt)j$<br>$-preSum\times(sufSum-sufCnt)$<br>$preCnt[i]:=以i结尾的回文串个数，preSum[i]:=以i结尾的回文串的长度和$<br>$suf同理$<br>$然后回文树预处理一下就做完了，时间复杂度O(n)$</p>
</blockquote>
<hr>
<blockquote>
<p>$\sum\sum i\times k=\sum i\times \sum k$<br>$Manacher的话直接预处理sum[2][i]:=0开头，1结尾的右/左端点的和$<br>$对于一个以i为中心的延伸距离为p[i]的最长回文串$<br>$显然l=i-(p[i]-1)，r=i+p[i]-1$<br>$对于sum[0][i]，i\in[l, i]右端点的贡献是r\sim i$<br>$这是一个首项为r，公差为-1的等差数列$<br>$由于所有更新都是静态的，窝萌可以partial sum搞一波$<br>$对于一个更新[L, R]，首项为a，公差为d的等差数列$<br>$delta数组记录公差，sum数组记录结果$<br><code>delta[L+1] += d // [L+1, R]的区间有公差</code><br><code>delta[R+1] -= d</code><br><code>sum[L] += a</code><br><code>sum[R+1] -= a + (R-L)*d //这里要去掉公差累计的影响</code><br>$累计的时候累计上公差就可以了$<br>$直接在Manacher数组上搞就行，最后除2就好$<br>$然后就做完了$</p>
</blockquote>
<p>代码一:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-08-02</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PalindromicTree</span> &#123;</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e6</span> + <span class="number">10</span>, S = <span class="number">26</span>;</div><div class="line">    <span class="keyword">int</span> n, sz, last;</div><div class="line">    <span class="keyword">int</span> nxt[M][S], fail[M], len[M];</div><div class="line">    <span class="keyword">char</span> s[M];</div><div class="line">    <span class="keyword">int</span> cnt[M], sum[M];</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">newnode</span><span class="params">(<span class="keyword">int</span> l)</span> </span>&#123;</div><div class="line">        len[sz] = l;</div><div class="line">        sum[sz] = cnt[sz] = <span class="number">0</span>;</div><div class="line">        <span class="built_in">memset</span>(nxt[sz], <span class="number">0</span>, <span class="keyword">sizeof</span>(nxt[sz]));</div><div class="line">        <span class="keyword">return</span> sz++;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">        sz = last = <span class="number">0</span>;</div><div class="line">        newnode(<span class="number">0</span>); newnode(<span class="number">-1</span>);</div><div class="line">        s[n = <span class="number">0</span>] = <span class="number">-1</span>;</div><div class="line">        fail[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getfail</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</div><div class="line">        <span class="keyword">while</span>(s[n - len[u] - <span class="number">1</span>] != s[n]) u = fail[u];</div><div class="line">        <span class="keyword">return</span> u;</div><div class="line">    &#125;</div><div class="line">    pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; add(<span class="keyword">int</span> c) &#123;</div><div class="line">        s[++n] = c;</div><div class="line">        <span class="keyword">int</span> u = getfail(last);</div><div class="line">        <span class="keyword">int</span>&amp; v = nxt[u][c];</div><div class="line">        <span class="keyword">if</span>(!v) &#123;</div><div class="line">            <span class="keyword">int</span> cur = newnode(len[u] + <span class="number">2</span>);</div><div class="line">            fail[cur] = nxt[getfail(fail[u])][c];</div><div class="line">            v = cur;</div><div class="line"><span class="comment">//            pr(len[fail[v]]); prln(len[v]);</span></div><div class="line">            cnt[v] = cnt[fail[v]] + <span class="number">1</span>;</div><div class="line">            sum[v] = sum[fail[v]] + len[v];</div><div class="line">            <span class="keyword">if</span>(sum[v] &gt;= MOD) sum[v] -= MOD;</div><div class="line"><span class="comment">//            prln(sum[v]);</span></div><div class="line">        &#125;</div><div class="line">        last = v;</div><div class="line">        <span class="keyword">return</span> &#123;cnt[v], sum[v]&#125;;</div><div class="line">    &#125;</div><div class="line">&#125; pt;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="keyword">char</span> s[N];</div><div class="line"><span class="keyword">int</span> preCnt[N], preSum[N];</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="function">LL <span class="title">mul</span><span class="params">(LL x, LL y)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> x * y % MOD;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%s"</span>, s + <span class="number">1</span>) == <span class="number">1</span>) &#123;</div><div class="line">        n = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</div><div class="line">        pt.init();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">            <span class="keyword">auto</span> ret = pt.add(s[i] - <span class="string">'a'</span>);</div><div class="line">            tie(preCnt[i], preSum[i]) = ret;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        pt.init();</div><div class="line">        LL ans = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = n; i &gt; <span class="number">1</span>; --i) &#123;</div><div class="line">            <span class="keyword">auto</span> ret = pt.add(s[i] - <span class="string">'a'</span>);</div><div class="line">            <span class="keyword">int</span> sufCnt, sufSum;</div><div class="line">            tie(sufCnt, sufSum) = ret;</div><div class="line"><span class="comment">//            prln(i);</span></div><div class="line"><span class="comment">//            printf("%d %d %d %d\n", preCnt[i - 1], preSum[i - 1], sufCnt, sufSum);</span></div><div class="line"></div><div class="line">            LL sqI = mul(mul(mul(i, i), preCnt[i - <span class="number">1</span>]), sufCnt);</div><div class="line">            LL mid = mul(preCnt[i - <span class="number">1</span>], sufSum - sufCnt) -</div><div class="line">                     mul(sufCnt, preSum[i - <span class="number">1</span>]);</div><div class="line">            mid %= MOD;</div><div class="line">            mid = mul(mid, i);</div><div class="line">            LL rht = mul(sufSum - sufCnt, preSum[i - <span class="number">1</span>]);</div><div class="line">            ans += sqI + mid - rht;</div><div class="line">            ans %= MOD;</div><div class="line"><span class="comment">//            prln(ans);</span></div><div class="line">        &#125;</div><div class="line">        ans = (ans + MOD) % MOD;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>代码二：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-08-03</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="comment">// 原串 a[i]:         w   a   a   b   w   s   w   f   d</span></div><div class="line"><span class="comment">// 新串 s[i]:       # w # a # a # b # w # s # w # f # d #</span></div><div class="line"><span class="comment">// 辅助数组 p[i]:   1 2 1 2 3 2 1 2 1 2 1 4 1 2 1 2 1 2 1</span></div><div class="line"><span class="comment">// p[i]   := 新串以 s[i] 为中心向右延伸的回文距离 + 1 （自己）</span></div><div class="line"><span class="comment">// p[i]-1 := 原串以 s[i] 为中心的回文长度</span></div><div class="line"></div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="keyword">char</span> s[N];</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Manacher</span> &#123;</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> M = N &lt;&lt; <span class="number">1</span>;</div><div class="line">    <span class="keyword">char</span> s[M];</div><div class="line">    <span class="keyword">int</span> n, p[M];</div><div class="line">    <span class="keyword">int</span> delta[<span class="number">2</span>][M], sum[<span class="number">2</span>][M];</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">char</span>* a)</span> </span>&#123;</div><div class="line">        s[<span class="number">0</span>] = <span class="string">'@'</span>; s[<span class="number">1</span>] = <span class="string">'#'</span>; n = <span class="number">2</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; a[i]; ++i)</div><div class="line">            s[n++] = a[i], s[n++] = <span class="string">'#'</span>;</div><div class="line">        s[n] = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">gao</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> mx = <span class="number">0</span>, id, ret = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</div><div class="line">            p[i] = mx &gt; i ? min(mx - i, p[<span class="number">2</span> * id - i]) : <span class="number">1</span>;</div><div class="line">            <span class="keyword">while</span>(s[i - p[i]] == s[i + p[i]]) ++p[i];</div><div class="line">            <span class="keyword">if</span>(mx &lt; i + p[i]) mx = i + p[i], id = i;</div><div class="line">            ret = max(ret, p[i] - <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span>&amp; x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(y &lt; <span class="number">0</span>) y += MOD;</div><div class="line">        <span class="keyword">if</span>((x += y) &gt;= MOD) x -= MOD;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//0-&gt;start 1-&gt;end</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">process</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="built_in">memset</span>(delta, <span class="number">0</span>, <span class="keyword">sizeof</span> delta);</div><div class="line">        <span class="built_in">memset</span>(sum, <span class="number">0</span>, <span class="keyword">sizeof</span> sum);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</div><div class="line">            <span class="keyword">int</span> r = i + p[i] - <span class="number">1</span>, l = i - (p[i] - <span class="number">1</span>);</div><div class="line">            add(sum[<span class="number">0</span>][l], r);</div><div class="line">            add(sum[<span class="number">0</span>][i + <span class="number">1</span>], -r - (i - l) * (<span class="number">-1</span>)); <span class="comment">//+ r ~ i</span></div><div class="line">            add(delta[<span class="number">0</span>][l + <span class="number">1</span>], <span class="number">-1</span>);</div><div class="line">            add(delta[<span class="number">0</span>][i + <span class="number">1</span>], <span class="number">1</span>); <span class="comment">//d + -1</span></div><div class="line"></div><div class="line">            add(sum[<span class="number">1</span>][i], i);</div><div class="line">            add(sum[<span class="number">1</span>][r + <span class="number">1</span>], -i - (r - i) * (<span class="number">-1</span>)); <span class="comment">//+ i ~ l</span></div><div class="line">            add(delta[<span class="number">1</span>][i + <span class="number">1</span>], <span class="number">-1</span>);</div><div class="line">            add(delta[<span class="number">1</span>][r + <span class="number">1</span>], <span class="number">1</span>); <span class="comment">//d + -1</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; ++j) &#123;</div><div class="line">                add(delta[j][i], delta[j][i - <span class="number">1</span>]);</div><div class="line">                add(sum[j][i], sum[j][i - <span class="number">1</span>]);</div><div class="line">                add(sum[j][i], delta[j][i]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">ok</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</div><div class="line">        l &lt;&lt;= <span class="number">1</span>; r &lt;&lt;= <span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> k = l + r &gt;&gt; <span class="number">1</span>;</div><div class="line">        <span class="keyword">return</span> k + p[k] - <span class="number">1</span> &gt;= r;</div><div class="line">    &#125;</div><div class="line">&#125; ma;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">quick</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> ret = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(; n ; n &gt;&gt;= <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">if</span>(n &amp; <span class="number">1</span>) ret = <span class="number">1L</span>L * ret * x % MOD;</div><div class="line">        x = <span class="number">1L</span>L * x * x % MOD;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> invTwo = <span class="number">500000004</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%s"</span>, s + <span class="number">1</span>) == <span class="number">1</span>) &#123;</div><div class="line">        ma.init(s);</div><div class="line">        ma.gao();</div><div class="line">        ma.process();</div><div class="line">        n = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</div><div class="line"></div><div class="line">        <span class="keyword">int</span>* preSum = ma.sum[<span class="number">0</span>], *sufSum = ma.sum[<span class="number">1</span>];</div><div class="line"></div><div class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</div><div class="line">            sufSum[i &lt;&lt; <span class="number">1</span>] = <span class="number">1L</span>L * sufSum[i &lt;&lt; <span class="number">1</span>] * invTwo % MOD;</div><div class="line">            preSum[i + <span class="number">1</span> &lt;&lt; <span class="number">1</span>] = <span class="number">1L</span>L * preSum[i + <span class="number">1</span> &lt;&lt; <span class="number">1</span>] * invTwo % MOD;</div><div class="line">            ans += <span class="number">1L</span>L * sufSum[i &lt;&lt; <span class="number">1</span>] * preSum[i + <span class="number">1</span> &lt;&lt; <span class="number">1</span>] % MOD;</div><div class="line">            <span class="keyword">if</span>(ans &gt;= MOD) ans -= MOD;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 字符串 </category>
            
            <category> Manacher/回文树 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 回文树 </tag>
            
            <tag> Manacher </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDU 5784 How Many Triangles（极角排序）]]></title>
      <url>/2016/08/04/HDU%205784%20How%20Many%20Triangles%EF%BC%88%E6%9E%81%E8%A7%92%E6%8E%92%E5%BA%8F%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$给定N\le 2000个二维平面不重点，求形成的锐角三角形的个数$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$总而言之，这种就是极角排序之后然后two pointers$<br>$由于是个环倍增一下，无论你atan2搞还是点积叉积搞，思路都是一样的$<br>$来看看这题的两种计算姿势，一种是题解的比较tricky一点：$<br>$锐角三角形={cnt_{锐角}-2\times(cnt_{直角、钝角})\over 3}，注意这里是角$<br>$至于怎么算的，看贡献，锐角三角形贡献3个锐角，直角、钝角三角形贡献2个锐角$<br>$这个统计方法也比较simple，two pointers先统计锐角、然后再统计锐、直、钝一起$<br>$一减就得到了想要的2个东西$<br>$对于第二种做法，比较general一点：$<br>$锐角三角形=总三角形数-直角、钝角、平角三角形数，注意这里是三角形$<br>$two pointers统计的时候直接把锐角和0°一起统计了$<br>$直角、钝角、平角三角形数=C(n-1, 2)-统计出来的$<br>$最后再用C(n, 3)减一下就好了$<br>$两者时间复杂度都是O(n^2logn)$<br>$注意atan2的精度，毕竟atan2(2e9, 1)在$ <code>1e-10</code> $的量级，多取2个量级取$ <code>1e-12</code> 就好</p>
</blockquote>
<p>代码一:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-08-02</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> EPS = <span class="number">1e-12</span>, PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">sgn</span><span class="params">(<span class="keyword">double</span> x)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> x &lt; -EPS ? <span class="number">-1</span> : x &gt; EPS;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> x, y;</div><div class="line">    <span class="keyword">double</span> ang;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">()</span> </span>&#123;<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);&#125;</div><div class="line">&#125; p[N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="built_in">vector</span>&lt;Point&gt;&amp; v, <span class="keyword">double</span> delta)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> angle = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, k = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i = k + <span class="number">1</span>) &#123;</div><div class="line">        <span class="comment">//collinear</span></div><div class="line">        <span class="keyword">while</span>(k + <span class="number">1</span> &lt; n - <span class="number">1</span> &amp;&amp; sgn(v[k + <span class="number">1</span>].ang - v[i].ang) == <span class="number">0</span>) ++k;</div><div class="line">        j = max(j, k);</div><div class="line">        <span class="keyword">while</span>(j &lt; v.size() &amp;&amp; sgn(v[j].ang - v[i].ang - delta) &lt; <span class="number">0</span>) ++j;</div><div class="line">        angle += (k - i + <span class="number">1</span>) * (j - k - <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> angle;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) == <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) p[i].read();</div><div class="line"></div><div class="line">        <span class="keyword">int</span> acute = <span class="number">0</span>, obtuse = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">            <span class="built_in">vector</span>&lt;Point&gt; v;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) <span class="keyword">if</span>(j != i) v.push_back(p[j]);</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n - <span class="number">1</span>; ++j)</div><div class="line">                v[j].ang = <span class="built_in">atan2</span>(v[j].y - p[i].y, v[j].x - p[i].x);</div><div class="line">            sort(v.begin(), v.end(), [&amp;](Point x, Point y) &#123;</div><div class="line">                <span class="keyword">return</span> x.ang &lt; y.ang;</div><div class="line">            &#125;);</div><div class="line"></div><div class="line">            <span class="comment">//double it</span></div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n - <span class="number">1</span>; ++j)&#123;</div><div class="line">                Point tmp = v[j];</div><div class="line">                tmp.ang += <span class="number">2</span> * PI;</div><div class="line">                v.push_back(tmp);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">int</span> curAcute = calc(v, PI / <span class="number">2</span>);</div><div class="line">            <span class="keyword">int</span> tot = calc(v, PI);</div><div class="line"></div><div class="line">            acute += curAcute;</div><div class="line">            obtuse += tot - curAcute;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> ans = (acute - <span class="number">2</span> * obtuse) / <span class="number">3</span>;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>代码二：<br>(来自mathon)<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/************************************************</span></div><div class="line"><span class="comment"> *Author        :mathon</span></div><div class="line"><span class="comment"> *Email         :luoxinchen96@gmail.com</span></div><div class="line"><span class="comment">*************************************************/</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> xx first</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> yy second</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">" "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">lowbit</span>(<span class="title">T</span> <span class="title">x</span>) &#123;</span> <span class="keyword">return</span> x &amp; (-x); &#125;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">2000</span> + <span class="number">5</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> &#123;</span></div><div class="line">    ll x, y;</div><div class="line">    Point() &#123;&#125;</div><div class="line">    Point(ll x, ll y): x(x), y(y) &#123;&#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>, &amp;x, &amp;y);</div><div class="line">    &#125;</div><div class="line">    Point <span class="keyword">operator</span> - (<span class="keyword">const</span> Point&amp; b) <span class="keyword">const</span> &#123;</div><div class="line">        <span class="keyword">return</span> Point(x - b.x, y - b.y);</div><div class="line">    &#125;</div><div class="line">    <span class="function">ll <span class="title">cross</span><span class="params">(<span class="keyword">const</span> Point&amp; b)</span> <span class="keyword">const</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> x * b.y - y * b.x;</div><div class="line">    &#125;</div><div class="line">    <span class="function">ll <span class="title">dot</span><span class="params">(<span class="keyword">const</span> Point&amp; b)</span> <span class="keyword">const</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> x * b.x + y * b.y;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"x = %lld, y = %lld\n"</span>, x, y);</div><div class="line">    &#125;</div><div class="line">&#125; ps[MAXN];</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> Point&amp; a, <span class="keyword">const</span> Point&amp; b)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(a.y * b.y &lt;= <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">if</span>(a.y &gt; <span class="number">0</span> || b.y &gt; <span class="number">0</span>) <span class="keyword">return</span> a.y &lt; b.y;</div><div class="line">        <span class="keyword">if</span>(a.y == <span class="number">0</span> &amp;&amp; b.y == <span class="number">0</span>) <span class="keyword">return</span> a.x &lt; b.x;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> a.cross(b) &gt; <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Point buf[MAXN * <span class="number">2</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> MATHON</span></div><div class="line">    freopen(<span class="string">"1004.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">    freopen(<span class="string">"out.txt"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) == <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">            ps[i].read();</div><div class="line">        &#125;</div><div class="line">        ll ans = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; k++) &#123;</div><div class="line">            <span class="keyword">int</span> cnt = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</div><div class="line">                <span class="keyword">if</span>(k == j) <span class="keyword">continue</span>;</div><div class="line">                buf[cnt++] = ps[j] - ps[k];</div><div class="line">            &#125;</div><div class="line">            sort(buf, buf + cnt, cmp);</div><div class="line">            <span class="built_in">memcpy</span>(buf + cnt, buf, <span class="keyword">sizeof</span>(Point) * cnt);</div><div class="line">            ll tmp = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; cnt; i++) &#123;</div><div class="line">                <span class="keyword">if</span>(i == j) <span class="keyword">while</span>(j &lt; i + cnt &amp;&amp; buf[i].cross(buf[j]) == <span class="number">0</span></div><div class="line">                                     &amp;&amp; buf[i].dot(buf[j]) &gt; <span class="number">0</span>) j++;</div><div class="line">                <span class="keyword">while</span>(j &lt; i + cnt &amp;&amp; buf[i].cross(buf[j]) &gt; <span class="number">0</span> &amp;&amp; buf[i].dot(buf[j]) &gt; <span class="number">0</span>) j++;</div><div class="line">                tmp += j - i - <span class="number">1</span>;</div><div class="line">                <span class="comment">// pr(i); prln(j);</span></div><div class="line">            &#125;</div><div class="line">            <span class="comment">// prln(tmp);</span></div><div class="line">            tmp = (cnt) * (cnt - <span class="number">1</span>) / <span class="number">2</span>  - tmp;</div><div class="line">            ans += tmp;</div><div class="line">        &#125;</div><div class="line">        ans = ll(n) * (n - <span class="number">1</span>) * (n - <span class="number">2</span>) / <span class="number">6</span> - ans;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 计算几何 </category>
            
            <category> 极角排序 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 极角排序 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDU 5781 ATM Mechine（期望dp）]]></title>
      <url>/2016/08/03/HDU%205781%20ATM%20Mechine%EF%BC%88%E6%9C%9F%E6%9C%9Bdp%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$给定1\le K\le 2000的钱的上界，即钱x\in[0, K]，1\le W\le 2000次警告次数$<br>$&gt;会被警告，\le 可以直接取走钱，警告次数超过W会被警察带走$<br>$人采取最优策略的情况下，问取完所有钱的期望次数$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$期望dp，f[k][w]:=上界为k，警告次数为w的取完钱的期望次数$<br>$因为要考虑x\in [0, k]的所有情况：$<br>$显然有k=1时，f[1][w]=1$<br>$0要取一次，warn一下就知道没钱，1取1，因为是上界知道取完了，(1+1)/2=1$<br>$w=1时，只能每次取1，\forall x\in [0, k)都是x+1次，k因为是上界不用多一次知道没钱，所以是k$<br>$f[k][1] = \frac{ { (1+k)\times k\over 2 }+k } { k+1 }$<br>$其他情况暴力枚举所有能取的钱即i\in[1, k]$<br>$显然被警告的概率是p(i&gt;x)={ i\over k+1 }，即x\in[0, i)$<br>$不被警告的概率p(i\le x)={ k-i+1\over k+1 }，即x\in[i, k]$<br>$转移即为f[k][w] =\displaystyle \min_{ i\in[1, k] } \{ { i\over k+1 }\times f[i-1][w-1]+{ k-i+1\over k+1 } \times f[k-i][w]+1 \}$<br>$当前这个是O(n^3)的，过不了$<br>$人最优策略的话，显然他可以算出来这些期望，然后采取最优策略$<br>$我们来估测一下，二分仅仅是不太好的策略，但显然可以知道W的上界是O(log_2n)的$<br>$然后复杂度就变成了O(n^2logn)了，就可以过了$</p>
</blockquote>
<p>代码:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-08-03</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e3</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> k, w;</div><div class="line"><span class="keyword">double</span> f[N][<span class="number">20</span>];</div><div class="line"><span class="keyword">bool</span> vis[N][<span class="number">20</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">double</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> w)</span> </span>&#123;</div><div class="line">    <span class="keyword">double</span>&amp; ret = f[k][w];</div><div class="line">    <span class="keyword">if</span>(vis[k][w]) <span class="keyword">return</span> ret;</div><div class="line">    <span class="keyword">if</span>(k == <span class="number">0</span>) ret = <span class="number">0</span>;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(w == <span class="number">1</span>) ret = (<span class="number">1.0</span> * (<span class="number">1</span> + k) * k / <span class="number">2</span> + k) / (k + <span class="number">1</span>); <span class="comment">//1+..+k + k</span></div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        ret = INF;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; ++i) &#123;</div><div class="line">            ret = min(ret, <span class="number">1.</span> * (k - i + <span class="number">1</span>) / (k + <span class="number">1</span>) * dfs(k - i, w)</div><div class="line">                      + <span class="number">1.</span> * i / (k + <span class="number">1</span>) * dfs(i - <span class="number">1</span>, w - <span class="number">1</span>) + <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    vis[k][w] = <span class="literal">true</span>;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span> vis);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">2000</span>; ++i)</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">15</span>; ++j)</div><div class="line">            dfs(i, j);</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;k, &amp;w) == <span class="number">2</span>) &#123;</div><div class="line">        w = min(w, <span class="number">15</span>);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%.6f\n"</span>, f[k][w]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 动态规划 </category>
            
            <category> 概率/期望dp </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 期望dp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[POJ 3977 Subset（折半搜索）]]></title>
      <url>/2016/08/01/POJ%203977%20Subset%EF%BC%88%E6%8A%98%E5%8D%8A%E6%90%9C%E7%B4%A2%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$N\le 35个数的集合S，|A_i|\le 10^{15}$<br>$求1个非空子集S’，使得|\sum_{S’\in S}A_i|最小，同时使得元素个数最少$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$数据范围都告诉你是折半搜索辣$<br>$显然预处理2^{N/2}个非空子集的答案先存起来排序(特么窝忘记排序了调一年)$<br>$之后枚举后2^{N-N/2}个非空子集，假设当前子集是sum, cnt$<br>$那么显然应该去枚举-sum，但是由于可能不存在$<br>$所以应该lower_bound这个(-sum, -INF)一波$<br>$显然找到的就是大于等于的那个最小的，并且cnt也是最小的$<br>$之后这个lower_bound-1就是小于的那个$<br>$但是这个时候由于重复的，找到cnt是最大的，不是可选解$<br>$显然取出这个值sum’，再去lower_bound查找一下(sum’, -INF)$<br>$就是要求的最小的cnt的那个辣$<br>$时间复杂度O(n2^nlog2^n)$</p>
</blockquote>
<p>代码:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-07-29</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line">LL a[<span class="number">40</span>];</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">ABS</span><span class="params">(<span class="keyword">const</span> LL&amp; x)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(x &lt; <span class="number">0</span>) <span class="keyword">return</span> -x;</div><div class="line">    <span class="keyword">return</span> x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">checkAns</span><span class="params">(pair&lt;LL, LL&gt;&amp; ans, pair&lt;LL, LL&gt; rhs, LL sum, LL cnt)</span> </span>&#123;</div><div class="line">    LL lftSum = rhs.first, lftCnt = rhs.second;</div><div class="line">    ans = min(ans, make_pair(ABS(sum + lftSum), cnt + lftCnt));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line">    <span class="keyword">clock_t</span> _ = clock();</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) == <span class="number">1</span> &amp;&amp; n) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, a + i);</div><div class="line"></div><div class="line">        pair&lt;LL, LL&gt; ans((LL)<span class="number">1e18</span>, (LL)<span class="number">1e18</span>);</div><div class="line"></div><div class="line">        <span class="keyword">int</span> half = n &gt;&gt; <span class="number">1</span>, lft = n - half;</div><div class="line">        <span class="built_in">vector</span>&lt;pair&lt;LL, LL&gt; &gt; v;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">1</span> &lt;&lt; half; ++i) &#123;</div><div class="line">            LL sum = <span class="number">0</span>, cnt = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; half; ++j) &#123;</div><div class="line">                <span class="keyword">if</span>(i &gt;&gt; j &amp; <span class="number">1</span>) &#123;</div><div class="line">                    ++cnt;</div><div class="line">                    sum += a[j];</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            v.push_back(make_pair(sum, cnt));</div><div class="line">            checkAns(ans, make_pair(<span class="number">0</span>, <span class="number">0</span>), sum, cnt);</div><div class="line">        &#125;</div><div class="line">        sort(v.begin(), v.end());</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">1</span> &lt;&lt; lft; ++i) &#123;</div><div class="line">            LL sum = <span class="number">0</span>, cnt = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; lft; ++j) &#123;</div><div class="line">                <span class="keyword">if</span>(i &gt;&gt; j &amp; <span class="number">1</span>) &#123;</div><div class="line">                    ++cnt;</div><div class="line">                    sum += a[half + j];</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            checkAns(ans, make_pair(<span class="number">0</span>, <span class="number">0</span>), sum, cnt);</div><div class="line"></div><div class="line">            <span class="keyword">int</span> x = lower_bound(v.begin(), v.end(), make_pair(-sum,</div><div class="line">                                (LL) - INF)) - v.begin();</div><div class="line">            <span class="keyword">if</span>(x != v.size()) checkAns(ans, v[x], sum, cnt);</div><div class="line"></div><div class="line">            <span class="keyword">if</span>(x) &#123;</div><div class="line">                --x;</div><div class="line">                x = lower_bound(v.begin(), v.end(), make_pair(v[x].first,</div><div class="line">                                (LL) - INF)) - v.begin();</div><div class="line">                checkAns(ans, v[x], sum, cnt);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%lld %lld\n"</span>, ans.first, ans.second);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\nTime cost: %.2fs\n"</span>, <span class="number">1.0</span> * (clock() - _) / CLOCKS_PER_SEC);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 技巧 </category>
            
            <category> 折半搜索 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 折半搜索 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[POJ 3276 Face The Right Way（反转问题）]]></title>
      <url>/2016/08/01/POJ%203276%20Face%20The%20Right%20Way%EF%BC%88%E5%8F%8D%E8%BD%AC%E9%97%AE%E9%A2%98%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$N\le 5000个奶牛，有初始朝向B/F$<br>$现要通过每次反转K个奶牛操作，即B/F状态互换，使得所有奶牛最终都是F状态$<br>$求出最小反转次数M，以及这个最小M的下的最小K$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$这类问题都一个苛刻的性质，即当前状态必然确定这个位置是否反转$<br>$本题考虑枚举K，对于每个K来求M$<br>$考虑使用f[i]:=记录f[i\sim i-k+1]这个区间是否被反转$<br>$那么所有能影响i这个位置的f[i]为f[i-k+1\sim i-1]$<br>$看这个和以及当前B/F状态即可知道i需不需要被反转$<br>$最后根据n-k+2\sim n以及对应影响的f[i]和即可知道是否合法$<br>$对于f[i]和，直接用一个变量维护即可$<br>$时间复杂度为O(n^2)$</p>
</blockquote>
<p>代码:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-07-29</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, a[N];</div><div class="line"><span class="keyword">int</span> f[N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">    <span class="built_in">memset</span>(f, <span class="number">0</span>, <span class="keyword">sizeof</span> f);</div><div class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>, ret = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i + k - <span class="number">1</span> &lt;= n; ++i) &#123;</div><div class="line">        <span class="keyword">if</span>(a[i] + sum &amp; <span class="number">1</span>) &#123;</div><div class="line">            ++ret;</div><div class="line">            f[i] = <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        sum += f[i];</div><div class="line">        <span class="keyword">if</span>(i - k + <span class="number">1</span> &gt;= <span class="number">1</span>) sum -= f[i - k + <span class="number">1</span>];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = n - k + <span class="number">2</span>; i &lt;= n; ++i) &#123;</div><div class="line">        <span class="keyword">if</span>(a[i] + sum &amp; <span class="number">1</span>) <span class="keyword">return</span> INF;</div><div class="line">        <span class="keyword">if</span>(i - k + <span class="number">1</span> &gt;= <span class="number">1</span>) sum -= f[i - k + <span class="number">1</span>];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line">    <span class="keyword">clock_t</span> _ = clock();</div><div class="line"></div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a + i);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">        <span class="keyword">char</span> buf[<span class="number">2</span>]; <span class="built_in">scanf</span>(<span class="string">"%s"</span>, buf);</div><div class="line">        a[i] = *buf == <span class="string">'B'</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; ans = make_pair(INF, INF); <span class="comment">// m k</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">        <span class="keyword">int</span> o = calc(i);</div><div class="line">        ans = min(ans, make_pair(o, i));</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, ans.second, ans.first);</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\nTime cost: %.2fs\n"</span>, <span class="number">1.0</span> * (clock() - _) / CLOCKS_PER_SEC);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 技巧 </category>
            
            <category> 反转问题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 反转问题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[POJ 2566 Bound Found（two pointers）]]></title>
      <url>/2016/08/01/POJ%202566%20Bound%20Found%EF%BC%88two%20pointers%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$N\le 10^5个数，|A_i|\le 10^4，现有K\le 100次询问$<br>$每次给定1个值x，求1个非空区间，使得|sum|=|\sum_{i=l}^r A_i|与x的差值尽量小$<br>$即使得||sum|-x|尽量小，输出这个|sum|，以及区间端点$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$首先求个prefixSum_i，显然sum(l, r)=prefix_r-prefix_{l-1}$<br>$由于外面套了一个绝对值，|sum(l, r)|=|prefix_r-prefix_{l-1}|=|prefix_{l-1}-prefix_r|$<br>$那么prefixSum_i的顺序就无所谓了，窝萌可以排个序$<br>$排序后就有单调性了，就可以做很多事情了$<br>$比如窝萌就可以用two pointers来枚举所有区间来更新答案了$<br>$由于整个序列都可以作为答案，two pointers枚举的话为了方便可以丢个prefixSum_0进去$<br>$其他注意细节就好了$</p>
</blockquote>
<p>代码:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-07-29</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, q;</div><div class="line">pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; s[N];</div><div class="line"><span class="keyword">int</span> ans, diff, L, R;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(s[l].second == s[r].second) <span class="keyword">return</span>; <span class="comment">//empty range</span></div><div class="line">    <span class="keyword">int</span> sum = <span class="built_in">abs</span>(s[r].first - s[l].first);</div><div class="line">    <span class="keyword">int</span> newDiff = <span class="built_in">abs</span>(sum - x);</div><div class="line">    <span class="keyword">if</span>(newDiff &lt; diff) &#123;</div><div class="line">        diff = newDiff;</div><div class="line">        ans = sum;</div><div class="line">        L = s[l].second;</div><div class="line">        R = s[r].second;</div><div class="line">        <span class="keyword">if</span>(L &gt; R) swap(L, R);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;q) &amp;&amp; (n || q)) &#123;</div><div class="line">        s[<span class="number">0</span>] = make_pair(<span class="number">0</span>, <span class="number">0</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">            <span class="keyword">int</span> x; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line">            s[i].first = s[i - <span class="number">1</span>].first + x;</div><div class="line">            s[i].second = i;</div><div class="line">        &#125;</div><div class="line">        sort(s, s + n + <span class="number">1</span>);</div><div class="line"></div><div class="line">        <span class="keyword">while</span>(q--) &#123;</div><div class="line">            <span class="keyword">int</span> x; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line">            diff = INF;</div><div class="line"></div><div class="line">            <span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> l = <span class="number">0</span>, r = <span class="number">0</span>; l &lt;= n; ++l) &#123;</div><div class="line">                sum = s[r].first - s[l].first;</div><div class="line">                update(l, r, x);</div><div class="line">                <span class="keyword">while</span>(r &lt; n &amp;&amp; sum &lt; x) &#123;</div><div class="line">                    ++r;</div><div class="line">                    update(l, r, x);</div><div class="line">                    sum = s[r].first - s[l].first;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d %d %d\n"</span>, ans, L + <span class="number">1</span>, R);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 技巧 </category>
            
            <category> two pointers </category>
            
        </categories>
        
        
        <tags>
            
            <tag> two pointers </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Codeforces 85C Petya and Tree（树形dp）]]></title>
      <url>/2016/08/01/Codeforces%2085C%20Petya%20and%20Tree%EF%BC%88%E6%A0%91%E5%BD%A2dp%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$N\le 10^5的一棵满二叉搜索树，点权1\le A_i\le 10^9$<br>$满二叉搜索树：每个节点的儿子个数为0或者2$<br>$给定Q\le 10^5询问，每次查询一个值1\le q\le 10^9，保证值没有在BST中出现过$<br>$并且查询过程中一定会出错有且仅有一次，即本该去左子树去了右子树，反之亦然$<br>$求在BST中查询这个值的期望$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$这是一道分析想法题，首先有个很显然的结论：$<br>$所有正确查询情况下出现在同一个叶子的期望值必然相等，$<br>$并且对于最后一层的2个叶子，只会出现在其中1个$<br>$玩玩样例(看看别人代码)可以发现：$<br>$如果某个值在查询过程中，这次出错了，假设本应该去左子树$<br>$但去了右子树，那么显然在右子树中只能不断往左走，即贡献应该是那个最小值$<br>$反之同理，贡献是个最大值$<br>$问题解决了一半，树形dp维护子树的最大值和最小值$<br>$并通过这个再次树形dp计算出每个叶子的贡献累和$<br>$接下来考虑一下如何找到这个叶子$<br>$再玩玩样例(看看别人代码)可以发现：$<br>$找到这个数有3种可能，直接在所有点权upper_bound$<br>$1个是直接找到，不然找不到一定是最后那个$<br>$还有1种情况必然是某个叶子的父亲，只要取它的左儿子就好了$<br>$因为比这个值大，要往左走$<br>$至此做完了，时间复杂度为O(n+nlogn)$</p>
</blockquote>
<p>代码:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-08-01</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, val[N];</div><div class="line"><span class="keyword">int</span> rt, ls[N], rs[N];</div><div class="line"><span class="keyword">int</span> minv[N], maxv[N], dep[N];</div><div class="line"><span class="keyword">double</span> f[N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(!ls[u]) &#123;</div><div class="line">        minv[u] = maxv[u] = val[u];</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> v1 = ls[u], v2 = rs[u];</div><div class="line">    dfs1(v1);</div><div class="line">    dfs1(v2);</div><div class="line"></div><div class="line">    minv[u] = minv[v1];</div><div class="line">    maxv[u] = maxv[v2];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(!ls[u]) <span class="keyword">return</span>;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> v1 = ls[u], v2 = rs[u];</div><div class="line">    dep[v1] = dep[v2] = dep[u] + <span class="number">1</span>;</div><div class="line">    f[v1] = f[u] + minv[v2];</div><div class="line">    f[v2] = f[u] + maxv[v1];</div><div class="line"></div><div class="line">    dfs2(v1);</div><div class="line">    dfs2(v2);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line"></div><div class="line">    <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; keys;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">        <span class="keyword">int</span> fa; <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;fa, val + i);</div><div class="line">        <span class="keyword">if</span>(fa == <span class="number">-1</span>) rt = i;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(!ls[fa]) ls[fa] = i;</div><div class="line">        <span class="keyword">else</span> rs[fa] = i;</div><div class="line">        <span class="keyword">if</span>(val[ls[fa]] &gt; val[rs[fa]]) swap(ls[fa], rs[fa]);</div><div class="line">        keys.push_back(&#123;val[i], i&#125;);</div><div class="line">    &#125;</div><div class="line">    sort(keys.begin(), keys.end());</div><div class="line"></div><div class="line">    dfs1(rt);</div><div class="line">    dfs2(rt);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> q; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;q);</div><div class="line">    <span class="keyword">while</span>(q--) &#123;</div><div class="line">        <span class="keyword">int</span> x; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line">        <span class="keyword">auto</span> iter = upper_bound(keys.begin(), keys.end(), make_pair(x, -INF));</div><div class="line">        <span class="keyword">if</span>(iter == keys.end()) --iter;</div><div class="line">        <span class="keyword">if</span>(ls[iter-&gt;second]) --iter; <span class="comment">//must be leaves</span></div><div class="line">        <span class="keyword">int</span> y = iter-&gt;second;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%.10f\n"</span>, f[y] / dep[y]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 动态规划 </category>
            
            <category> 树形dp </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 树形dp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDU 5737 Differencia（归并树）]]></title>
      <url>/2016/07/25/HDU%205737%20Differencia%EF%BC%88%E5%BD%92%E5%B9%B6%E6%A0%91%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$N\le 10^5长度的A，B两个数组，A_i，B_i\le 10^9$<br>$Q\le 3\times 10^6次查询，2种查询$<br>$+ l r x:把A数组的[l, r]区间数变为x$<br>$? l r:查询[l, r]区间A_i\ge B_i的下标个数$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$首先O(qlog^2)的归并树做法很显然，每个节点维护B数组的有序表$<br>$之后对于每次查询只需要在每个节点二分一下即可$<br>$由于Q巨大，所以这么做要T，事实上由于不会操作B数组，对于查询可以提前维护一点东西$<br>$维护有序表第i个数进入左右子树时的位置（即有多少数\le 第i个数）$ $那么查询在线段树上就可以O(1)得到这个数在左右子树的rank变化$ $这个对线段树往下push lazy标记也是适用的，就去掉了1个log$<br>$时间复杂度O(qlogn)就可以草过去了$</p>
</blockquote>
<p>代码:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-07-25</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, q, A, B;</div><div class="line"><span class="keyword">int</span> a[N], b[N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">rnd</span><span class="params">(<span class="keyword">int</span>&amp; last, <span class="keyword">int</span>&amp; a, <span class="keyword">int</span>&amp; b)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> C = ~(<span class="number">1</span> &lt;&lt; <span class="number">31</span>), M = (<span class="number">1</span> &lt;&lt; <span class="number">16</span>) - <span class="number">1</span>;</div><div class="line">    a = (<span class="number">36969</span> + (last &gt;&gt; <span class="number">3</span>)) * (a &amp; M) + (a &gt;&gt; <span class="number">16</span>);</div><div class="line">    b = (<span class="number">18000</span> + (last &gt;&gt; <span class="number">3</span>)) * (b &amp; M) + (b &gt;&gt; <span class="number">16</span>);</div><div class="line">    <span class="keyword">return</span> (C &amp; ((a &lt;&lt; <span class="number">16</span>) + b)) % <span class="number">1000000000</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> Discretization &#123;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; xs;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">        xs = <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(b + <span class="number">1</span>, b + <span class="number">1</span> + n);</div><div class="line">        sort(xs.begin(), xs.end());</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">            b[i] = lower_bound(xs.begin(), xs.end(), b[i]) - xs.begin() + <span class="number">1</span>;</div><div class="line">            a[i] = upper_bound(xs.begin(), xs.end(), a[i]) - xs.begin();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> upper_bound(xs.begin(), xs.end(), x) - xs.begin();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> Allocator &#123;</div><div class="line">    <span class="keyword">int</span> data[N &lt;&lt; <span class="number">6</span>], *p;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">        p = data;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span>* <span class="title">allocate</span><span class="params">(<span class="keyword">int</span> len)</span> </span>&#123;</div><div class="line">        p += len;</div><div class="line">        <span class="keyword">return</span> p - len;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></div><div class="line">    <span class="keyword">int</span>* indexLeft, *indexRight;</div><div class="line">    <span class="keyword">int</span> tag, sum;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setTag</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</div><div class="line">        tag = sum = v;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">goLeft</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(v) <span class="keyword">return</span> indexLeft[v];</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">goRight</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(v) <span class="keyword">return</span> indexRight[v];</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125; tree[N &lt;&lt; <span class="number">2</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushUp</span><span class="params">(<span class="keyword">int</span> rt)</span> </span>&#123;</div><div class="line">    tree[rt].sum = tree[rt &lt;&lt; <span class="number">1</span>].sum + tree[rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].sum;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushDown</span><span class="params">(<span class="keyword">int</span> rt)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(~tree[rt].tag) &#123;</div><div class="line">        <span class="keyword">int</span> v = tree[rt].tag;</div><div class="line">        <span class="keyword">int</span> ls = rt &lt;&lt; <span class="number">1</span>, rs = ls | <span class="number">1</span>;</div><div class="line">        tree[ls].setTag(tree[rt].goLeft(v));</div><div class="line">        tree[rs].setTag(tree[rt].goRight(v));</div><div class="line">        tree[rt].tag = <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">int</span> tmp[N];</div><div class="line">    <span class="keyword">int</span> m = l + r &gt;&gt; <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span>* vl = b + l - <span class="number">1</span>, *vr = b + m;</div><div class="line">    <span class="keyword">int</span> sl = m - l + <span class="number">1</span>, sr = r - m;</div><div class="line">    <span class="keyword">int</span> i = <span class="number">1</span>, j = <span class="number">1</span>, k = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span>(i &lt;= sl &amp;&amp; j &lt;= sr) &#123;</div><div class="line">        <span class="keyword">if</span>(vl[i] &lt; vr[j]) &#123;</div><div class="line">            tree[rt].indexLeft[k] = i;</div><div class="line">            tree[rt].indexRight[k] = j - <span class="number">1</span>;</div><div class="line">            tmp[k++] = vl[i++];</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            tree[rt].indexLeft[k] = i - <span class="number">1</span>;</div><div class="line">            tree[rt].indexRight[k] = j;</div><div class="line">            tmp[k++] = vr[j++];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span>(i &lt;= sl) &#123;</div><div class="line">        tree[rt].indexLeft[k] = i;</div><div class="line">        tree[rt].indexRight[k] = j - <span class="number">1</span>;</div><div class="line">        tmp[k++] = vl[i++];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span>(j &lt;= sr) &#123;</div><div class="line">        tree[rt].indexLeft[k] = i - <span class="number">1</span>;</div><div class="line">        tree[rt].indexRight[k] = j;</div><div class="line">        tmp[k++] = vr[j++];</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">memcpy</span>(b + l, tmp + <span class="number">1</span>, r - l + <span class="number">1</span> &lt;&lt; <span class="number">2</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> rt)</span> </span>&#123;</div><div class="line">    tree[rt].tag = <span class="number">-1</span>;</div><div class="line">    tree[rt].indexLeft = Allocator::allocate(r - l + <span class="number">1</span>);</div><div class="line">    tree[rt].indexRight = Allocator::allocate(r - l + <span class="number">1</span>);</div><div class="line">    <span class="keyword">if</span>(l == r) &#123;</div><div class="line">        tree[rt].sum = a[l] &gt;= b[l];</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> m = l + r &gt;&gt; <span class="number">1</span>;</div><div class="line">    build(l, m, rt &lt;&lt; <span class="number">1</span>);</div><div class="line">    build(m + <span class="number">1</span>, r, rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">    pushUp(rt);</div><div class="line">    merge(rt, l, r);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> v, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> rt)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R) &#123;</div><div class="line">        tree[rt].setTag(v);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> m = l + r &gt;&gt; <span class="number">1</span>;</div><div class="line">    pushDown(rt);</div><div class="line">    <span class="keyword">if</span>(L &lt;= m) update(L, R, tree[rt].goLeft(v), l, m, rt &lt;&lt; <span class="number">1</span>);</div><div class="line">    <span class="keyword">if</span>(R &gt; m) update(L, R, tree[rt].goRight(v), m + <span class="number">1</span>, r, rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">    pushUp(rt);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> rt)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R) <span class="keyword">return</span> tree[rt].sum;</div><div class="line">    <span class="keyword">int</span> m = l + r &gt;&gt; <span class="number">1</span>, ret = <span class="number">0</span>;</div><div class="line">    pushDown(rt);</div><div class="line">    <span class="keyword">if</span>(L &lt;= m) ret += query(L, R, l, m, rt &lt;&lt; <span class="number">1</span>);</div><div class="line">    <span class="keyword">if</span>(R &gt; m) ret += query(L, R, m + <span class="number">1</span>, r, rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line">    <span class="keyword">clock_t</span> _ = clock();</div><div class="line"></div><div class="line">    <span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">while</span>(t--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;n, &amp;q, &amp;A, &amp;B);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a + i);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, b + i);</div><div class="line"></div><div class="line">        Allocator::init();</div><div class="line">        Discretization::init();</div><div class="line">        build(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line"></div><div class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>, last = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; ++i) &#123;</div><div class="line">            <span class="keyword">int</span> l = rnd(last, A, B) % n + <span class="number">1</span>;</div><div class="line">            <span class="keyword">int</span> r = rnd(last, A, B) % n + <span class="number">1</span>;</div><div class="line">            <span class="keyword">int</span> x = rnd(last, A, B) + <span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span>(l &gt; r) swap(l, r);</div><div class="line">            <span class="keyword">if</span>(l + r + x &amp; <span class="number">1</span>) &#123;</div><div class="line">                x = Discretization::get(x);</div><div class="line"><span class="comment">//                printf("+ %d %d %d\n", l, r, x);</span></div><div class="line">                update(l, r, x, <span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                last = query(l, r, <span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line"><span class="comment">//                printf("? %d %d ans = %d\n", l, r, last);</span></div><div class="line">                ans += <span class="number">1L</span>L * i * last % MOD;</div><div class="line">                <span class="keyword">if</span>(ans &gt;= MOD) ans -= MOD;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\nTime cost: %.2fs\n"</span>, <span class="number">1.0</span> * (clock() - _) / CLOCKS_PER_SEC);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">+ 2 3 5</span></div><div class="line"><span class="comment">? 2 2 ans = 1</span></div><div class="line"><span class="comment">? 1 4 ans = 3</span></div><div class="line"><span class="comment">? 2 4 ans = 2</span></div><div class="line"><span class="comment">? 3 4 ans = 1</span></div><div class="line"><span class="comment">+ 1 1 5</span></div><div class="line"><span class="comment">+ 1 5 5</span></div><div class="line"><span class="comment">? 5 5 ans = 1</span></div><div class="line"><span class="comment">? 5 5 ans = 1</span></div><div class="line"><span class="comment">? 1 4 ans = 4</span></div><div class="line"><span class="comment">81</span></div><div class="line"><span class="comment">+ 1 4 5</span></div><div class="line"><span class="comment">? 4 5 ans = 1</span></div><div class="line"><span class="comment">? 2 4 ans = 3</span></div><div class="line"><span class="comment">? 3 4 ans = 2</span></div><div class="line"><span class="comment">+ 1 5 5</span></div><div class="line"><span class="comment">? 2 5 ans = 4</span></div><div class="line"><span class="comment">+ 1 4 5</span></div><div class="line"><span class="comment">? 4 4 ans = 1</span></div><div class="line"><span class="comment">? 1 3 ans = 3</span></div><div class="line"><span class="comment">? 2 2 ans = 1</span></div><div class="line"><span class="comment">88</span></div><div class="line"><span class="comment">? 1 5 ans = 3</span></div><div class="line"><span class="comment">+ 4 4 5</span></div><div class="line"><span class="comment">+ 2 4 5</span></div><div class="line"><span class="comment">+ 3 4 5</span></div><div class="line"><span class="comment">? 3 4 ans = 2</span></div><div class="line"><span class="comment">? 1 4 ans = 4</span></div><div class="line"><span class="comment">+ 1 1 5</span></div><div class="line"><span class="comment">+ 3 5 5</span></div><div class="line"><span class="comment">+ 1 3 5</span></div><div class="line"><span class="comment">? 1 5 ans = 5</span></div><div class="line"><span class="comment">87</span></div><div class="line"><span class="comment">*/</span></div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 数据结构 </category>
            
            <category> 线段树 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 归并树 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDU 5735 Born Slippy（dp、分块、可持久化）]]></title>
      <url>/2016/07/25/HDU%205735%20Born%20Slippy%EF%BC%88dp%E3%80%81%E5%88%86%E5%9D%97%E3%80%81%E5%8F%AF%E6%8C%81%E4%B9%85%E5%8C%96%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$N\le 2^{16}个节点的一棵树，点权w_i &lt; 2^{16}，现从树上抓出来一条链序列$<br>$对于起点s\in [1, N]，找出1个序列，v_1=s, v_2, \cdots, v_m$<br>$使得f(s)=w_{v_1}+\sum\limits_{i=2}^{m}w_{v_i} \text{ opt } w_{v_{i-1}}最大，opt可以是AND，OR，XOR$<br>$求每个f(i)$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$考虑序列上的情况，以and为例，显然有dp，f[i]=ans[i]-w_s=\max\limits_{j &lt; i} \{ f[j]+w_j\text{ and }w_i \}$<br>$蓝儿转移O(n)，总复杂度O(n^2)是不行的，考虑维护东西降低转移复杂度$<br>$观察w_i&lt;2^{16}，我们把转移拆一下$<br>$f[i]=\max\limits_{j &lt; i} \{ f[j]+w_j[后8位]\text{ and }w_i[后8位]+w_j[前8位]\text{ and }w_i[前8位] \text{&lt;&lt;} 8 \}$<br>$之后我们维护1个，ds[x][y]:=表示w_j前8位为x，w_i后8位为y时， f[j]+w_j[后8位]\text{ and }w_i[后8位]的最值$<br>$令w_i=a\text{ &lt;&lt; }8\text{ | }b，更新f[i]只要枚举x，f[i]=\max\{ ds[x][b]+x\text{ and }a\text{ &lt;&lt; }8 \}$<br>$转移复杂度就变成了O(\sqrt{n})，同理，用f[i]更新ds[x][y]$<br>$推广到树上，从根往下转移的时候，备份被修改的，之后再拷贝回去（即可持久化一下）$<br>$总时间复杂度为O(n\sqrt{n})$</p>
</blockquote>
<p>代码:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-07-25</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = (<span class="number">1</span> &lt;&lt; <span class="number">16</span>) + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> S = <span class="number">1</span> &lt;&lt; <span class="number">8</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> UINT;</div><div class="line"><span class="keyword">int</span> n, w[N];</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[N];</div><div class="line">UINT f[N], backup[N][S], ds[S][S]; <span class="comment">//w_fa prefix8, w_u suffix8 -&gt; max suffix</span></div><div class="line"></div><div class="line"><span class="keyword">char</span> op[<span class="number">10</span>];</div><div class="line"><span class="function">UINT <span class="title">opt</span><span class="params">(UINT a, UINT b)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(*op == <span class="string">'A'</span>) <span class="keyword">return</span> a &amp; b;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(*op == <span class="string">'O'</span>) <span class="keyword">return</span> a | b;</div><div class="line">    <span class="keyword">return</span> a ^ b;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">getMax</span><span class="params">(UINT&amp; x, UINT y)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(x == <span class="number">-1</span> || x &lt; y) x = y;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</div><div class="line">    UINT a = w[u] &gt;&gt; <span class="number">8</span>, b = w[u] &amp; <span class="number">255</span>;</div><div class="line"></div><div class="line">    UINT tmp = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; S; ++i)</div><div class="line">        <span class="keyword">if</span>(ds[i][b] != <span class="number">-1</span>)</div><div class="line">            getMax(tmp, ds[i][b] + (opt(i, a) &lt;&lt; <span class="number">8</span>));</div><div class="line"></div><div class="line">    f[u] = w[u] + tmp;</div><div class="line">    <span class="built_in">memcpy</span>(backup[u], ds[a], S &lt;&lt; <span class="number">2</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; S; ++i)</div><div class="line">        getMax(ds[a][i], tmp + opt(i, b));</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v : G[u]) dfs(v);</div><div class="line">    <span class="built_in">memcpy</span>(ds[a], backup[u], S &lt;&lt; <span class="number">2</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line">    <span class="keyword">clock_t</span> _ = clock();</div><div class="line"></div><div class="line">    <span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">while</span>(t--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%s"</span>, &amp;n, op);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, w + i);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) G[i].clear();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</div><div class="line">            <span class="keyword">int</span> fa; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;fa);</div><div class="line">            G[fa].push_back(i);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="built_in">memset</span>(ds, <span class="number">-1</span>, <span class="keyword">sizeof</span> ds);</div><div class="line">        dfs(<span class="number">1</span>);</div><div class="line"></div><div class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">            ans += <span class="number">1L</span>L * i * f[i] % MOD;</div><div class="line">            <span class="keyword">if</span>(ans &gt;= MOD) ans -= MOD;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\nTime cost: %.2fs\n"</span>, <span class="number">1.0</span> * (clock() - _) / CLOCKS_PER_SEC);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 动态规划 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 分块优化 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[51nod 1532 带可选字符的多字符串匹配（dp、bitset优化）]]></title>
      <url>/2016/07/24/51nod%201532%20%E5%B8%A6%E5%8F%AF%E9%80%89%E5%AD%97%E7%AC%A6%E7%9A%84%E5%A4%9A%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D%EF%BC%88dp%E3%80%81bitset%E4%BC%98%E5%8C%96%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$N\le 2\times 10^6的母串，M\le 500的模式串$<br>$模式串的每个字符c_i有cnt_i\le 62个可选字符$<br>$求母串哪些位置可以匹配模式串$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$f[i][j]:=母串匹配到i，模式串匹配到j，能否匹配$<br>$把所有可选字符压起来成LL，复杂度是O(nm)的，并不行$<br>$f[i][j]=f[i-1][j-1]，t[j]&gt;&gt;s[i] and 1为真$<br>$由于dp状态是bool，并且状态只与i-1有关，考虑bitset压位$<br>$预处理出模式串字符集在模式串的位置到bitset中$<br>$每次转移只要左移一次然后与母串字符的状态即可$<br>$这样就能一次直接转移整个模式串的状态$<br>$时间复杂度为O(nm/64)$<br>$表示百毒之星的那个数据其实是有毒的，贴个两边都能过的$<br>$(参考了百毒之星ranklist的那个人的如何在坑爹数据下的过题办法。。$</p>
</blockquote>
<p>代码:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-07-23</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e6</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">500</span> + <span class="number">10</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="keyword">char</span> s[N], t[M];</div><div class="line"><span class="keyword">typedef</span> <span class="built_in">bitset</span>&lt;M&gt; Sta;</div><div class="line">Sta f[<span class="number">2</span>], g[<span class="number">256</span>]; <span class="comment">//f[M][N]</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line">    <span class="keyword">clock_t</span> _ = clock();</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(gets(s + <span class="number">1</span>)) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">" %d"</span>, &amp;n);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; ++i) g[i].reset();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">            <span class="keyword">int</span> cnt; <span class="built_in">scanf</span>(<span class="string">"%d%s"</span>, &amp;cnt, t + <span class="number">1</span>);</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= cnt; ++j) g[t[j]][i] = <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">bool</span> ok = <span class="literal">false</span>;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> p = <span class="number">0</span>;</div><div class="line">        f[p].reset();</div><div class="line">        f[p][<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; s[i]; ++i) &#123;</div><div class="line">            f[!p] = (f[p] &lt;&lt; <span class="number">1</span>) &amp; g[s[i]];</div><div class="line">            f[!p][<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span>(f[!p][n]) &#123;</div><div class="line">                ok = <span class="literal">true</span>;</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, i - n + <span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">            p = !p;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(!ok) <span class="built_in">puts</span>(<span class="string">"NULL"</span>);</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%*c"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\nTime cost: %.2fs\n"</span>, <span class="number">1.0</span> * (clock() - _) / CLOCKS_PER_SEC);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 动态规划 </category>
            
            <category> bitset优化 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> bitset </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDU 5745 La Vie en rose（dp、bitset优化）]]></title>
      <url>/2016/07/24/HDU%205745%20La%20Vie%20en%20rose%EF%BC%88dp%E3%80%81bitset%E4%BC%98%E5%8C%96%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$N\le 10^5的母串，M\le 5000的模式串$<br>$对于模式串，不相邻的2个字符可以和相邻的交换$<br>$即abcd，ab换和cd也可以换，但bc换了cd就不能换了$<br>$求每个位置是否能匹配模式串$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$f[i][j][3]:=母串匹配到i，模式串匹配到j，0和前面换，1正好匹配，2和后面换$<br>$转移：f[i][j][0]=f[i-1][j-1][2]，s_i=t_{j-1}$<br>$f[i][j][1]=f[i-1][j-1][0] | f[i-1][j-1][1]，s_i=t_j$<br>$f[i][j][2]=f[i-1][j-1][0] | f[i-1][j-1][1]，s_i=t_{j+1}$<br>$由于dp维护的都是bool，且只从i-1转移过来$<br>$所以我们可以预处理母串字符集在母串中的位置到bitset中$<br>$对于每次转移只要左移一次并且与上匹配的模式串的字符的状态就好$<br>$即整体转移母串所有字符，左移一次相当于对上了当前状态的位置$<br>$时间复杂度为O(nm/64)，bitset标准库里压ULL$<br>$事实上搞模式串的状态也是可以的$</p>
</blockquote>
<p>代码:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-07-22</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="built_in">bitset</span>&lt;N&gt; Sta;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">char</span> s[N], t[N];</div><div class="line"></div><div class="line">Sta f[<span class="number">2</span>][<span class="number">3</span>]; <span class="comment">//f[N][2][3] 0-&gt;pre 1-&gt;cur 2-&gt;nxt</span></div><div class="line">Sta g[<span class="number">26</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line">    <span class="keyword">clock_t</span> _ = clock();</div><div class="line"></div><div class="line">    <span class="keyword">int</span> T; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</div><div class="line">    <span class="keyword">while</span>(T--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%s%s"</span>, s + <span class="number">1</span>, t + <span class="number">1</span>);</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i) g[i].reset();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) g[s[i] - <span class="string">'a'</span>][i] = <span class="number">1</span>;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> p = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) f[p][i].reset();</div><div class="line">        f[p][<span class="number">1</span>].<span class="built_in">set</span>();  <span class="comment">//f[x][0][1] = 1</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</div><div class="line">            <span class="keyword">int</span> pre = t[i - <span class="number">1</span>] - <span class="string">'a'</span>, cur = t[i] - <span class="string">'a'</span>, nxt = t[i + <span class="number">1</span>] - <span class="string">'a'</span>;</div><div class="line">            <span class="keyword">if</span>(i &gt; <span class="number">1</span>) f[!p][<span class="number">0</span>] = (f[p][<span class="number">2</span>] &lt;&lt; <span class="number">1</span>) &amp; g[pre];</div><div class="line">            <span class="keyword">else</span> f[!p][<span class="number">0</span>].reset();</div><div class="line"></div><div class="line">            f[!p][<span class="number">1</span>] = (f[p][<span class="number">1</span>] | f[p][<span class="number">0</span>]) &lt;&lt; <span class="number">1</span> &amp; g[cur];</div><div class="line"></div><div class="line">            <span class="keyword">if</span>(i &lt; m) f[!p][<span class="number">2</span>] = (f[p][<span class="number">1</span>] | f[p][<span class="number">0</span>]) &lt;&lt; <span class="number">1</span> &amp; g[nxt];</div><div class="line">            <span class="keyword">else</span> f[!p][<span class="number">2</span>].reset();</div><div class="line"></div><div class="line">            p = !p;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n - m + <span class="number">1</span>; ++i) &#123;</div><div class="line">            <span class="keyword">bool</span> ans = f[p][<span class="number">0</span>][i + m - <span class="number">1</span>] | f[p][<span class="number">1</span>][i + m - <span class="number">1</span>];</div><div class="line">            <span class="built_in">putchar</span>(<span class="string">"01"</span>[ans]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = n - m + <span class="number">2</span>; i &lt;= n; ++i) <span class="built_in">putchar</span>(<span class="string">'0'</span>);</div><div class="line">        <span class="built_in">puts</span>(<span class="string">""</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\nTime cost: %.2fs\n"</span>, <span class="number">1.0</span> * (clock() - _) / CLOCKS_PER_SEC);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 动态规划 </category>
            
            <category> bitset优化 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> bitset </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDU 5739 Fantasia（点双连通、树形dp）]]></title>
      <url>/2016/07/24/HDU%205739%20Fantasia%EF%BC%88%E7%82%B9%E5%8F%8C%E8%BF%9E%E9%80%9A%E3%80%81%E6%A0%91%E5%BD%A2dp%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$N\le 10^5个点，M\le 2\times 10^5的无向图$<br>$定义一个图的权值：图连通就是点权积，不连通就是连通分量的权值和$<br>$问删去i点后的图G_i的权值$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p><img src="http://7xru22.com1.z0.glb.clouddn.com/16-7-24/80434423.jpg" alt=""><br>$时间复杂度O(n+m)$</p>
</blockquote>
<p>代码:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-07-22</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m, val[N];</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[N], T[N];</div><div class="line"></div><div class="line"><span class="keyword">int</span> dfn[N], low[N], cut[N], bcc, dfsNum;</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; block[N];</div><div class="line"><span class="keyword">int</span> stk[N], top;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> f)</span> </span>&#123;</div><div class="line">    dfn[u] = low[u] = ++dfsNum;</div><div class="line">    stk[++top] = u;</div><div class="line">    <span class="keyword">int</span> son = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v : G[u]) &#123;</div><div class="line">        <span class="keyword">if</span>(v == f) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">if</span>(!dfn[v]) &#123;</div><div class="line">            ++son;</div><div class="line">            tarjan(v, u);</div><div class="line">            low[u] = min(low[u], low[v]);</div><div class="line">            <span class="keyword">if</span>(low[v] &gt;= dfn[u]) &#123;</div><div class="line">                cut[u] = <span class="literal">true</span>;</div><div class="line">                block[++bcc].push_back(u);</div><div class="line">                <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</div><div class="line">                    <span class="keyword">int</span> x = stk[top--];</div><div class="line">                    block[bcc].push_back(x);</div><div class="line">                    <span class="keyword">if</span>(x == v) <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> low[u] = min(low[u], dfn[v]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(f &lt; <span class="number">0</span> &amp;&amp; son == <span class="number">1</span>) cut[u] = <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">    bcc = n;</div><div class="line">    dfsNum = <span class="number">0</span>;</div><div class="line">    <span class="built_in">memset</span>(dfn, <span class="number">0</span>, <span class="keyword">sizeof</span> dfn);</div><div class="line">    <span class="built_in">memset</span>(cut, <span class="number">0</span>, <span class="keyword">sizeof</span> cut);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">quick</span><span class="params">(LL x, LL n)</span> </span>&#123;</div><div class="line">    LL ret = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(; n; n &gt;&gt;= <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">if</span>(n &amp; <span class="number">1</span>) ret = ret * x % MOD;</div><div class="line">        x = x * x % MOD;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(LL&amp; x, LL y)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(y &lt; <span class="number">0</span>) y += MOD;</div><div class="line">    <span class="keyword">if</span>((x += y) &gt;= MOD) x -= MOD;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">bool</span> vis[N];</div><div class="line">LL f[N], g[N], sum;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</div><div class="line">    vis[u] = <span class="literal">true</span>;</div><div class="line">    f[u] = val[u];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v : T[u]) &#123;</div><div class="line">        <span class="keyword">if</span>(vis[v]) <span class="keyword">continue</span>;</div><div class="line">        dfs1(v);</div><div class="line">        f[u] = f[u] * f[v] % MOD;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa, <span class="keyword">int</span> rt)</span> </span>&#123;</div><div class="line">    vis[u] = <span class="literal">true</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v : T[u]) &#123;</div><div class="line">        <span class="keyword">if</span>(v == fa) <span class="keyword">continue</span>;</div><div class="line">        dfs2(v, u, rt);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(u &lt;= n) &#123;</div><div class="line">        LL up = f[rt] * quick(f[u], MOD - <span class="number">2</span>) % MOD, dw = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> v : T[u]) &#123;</div><div class="line">            <span class="keyword">if</span>(v == fa) <span class="keyword">continue</span>;</div><div class="line">            add(dw, f[v]);</div><div class="line">        &#125;</div><div class="line"><span class="comment">//        pr(rt); pr(u); pr(up); prln(dw);</span></div><div class="line">        <span class="keyword">if</span>(!T[u].size() || u == rt) up = <span class="number">0</span>;</div><div class="line">        g[u] = (sum - f[rt] + up + dw) % MOD;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> C = <span class="number">2000</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt", "w", stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line">    <span class="keyword">clock_t</span> _ = clock();</div><div class="line"></div><div class="line">    <span class="keyword">int</span> kase = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">while</span>(t--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">        <span class="keyword">if</span>(++kase == C) <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, n, m);</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2</span> * n; ++i) &#123;</div><div class="line">            val[i] = <span class="number">1</span>;</div><div class="line">            G[i].clear();</div><div class="line">            T[i].clear();</div><div class="line">            block[i].clear();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, val + i);</div><div class="line">            <span class="keyword">if</span>(kase == C) <span class="built_in">printf</span>(<span class="string">"%d "</span>, val[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(kase == C) <span class="built_in">puts</span>(<span class="string">""</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</div><div class="line">            <span class="keyword">int</span> u, v; <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</div><div class="line">            <span class="keyword">if</span>(kase == C) <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, u, v);</div><div class="line">            G[u].push_back(v);</div><div class="line">            G[v].push_back(u);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        init();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="keyword">if</span>(!dfn[i]) tarjan(i, <span class="number">-1</span>);</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> u = n + <span class="number">1</span>; u &lt;= bcc; ++u) &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> v : block[u]) &#123;</div><div class="line">                T[u].push_back(v);</div><div class="line">                T[v].push_back(u);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        sum = <span class="number">0</span>;</div><div class="line">        <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span> vis);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="keyword">if</span>(!vis[i]) &#123;dfs1(i); add(sum, f[i]);&#125;</div><div class="line"></div><div class="line">        <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span> vis);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="keyword">if</span>(!vis[i]) dfs2(i, <span class="number">-1</span>, i);</div><div class="line"></div><div class="line">        LL ans = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) add(ans, i * g[i] % MOD);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\nTime cost: %.2fs\n"</span>, <span class="number">1.0</span> * (clock() - _) / CLOCKS_PER_SEC);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 图论 </category>
            
            <category> 连通图 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 树形dp </tag>
            
            <tag> 点双连通 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDU 5738 Eureka（贡献、极角排序）]]></title>
      <url>/2016/07/24/HDU%205738%20Eureka%EF%BC%88%E8%B4%A1%E7%8C%AE%E3%80%81%E6%9E%81%E8%A7%92%E6%8E%92%E5%BA%8F%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$N\le 10^3个点，求有多少子集共线$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$首先合并重点，然后把点字典序排序，直线向量x就恒正了$<br>$枚举1个端点，对于所有字典序比它大的点极角排序一波$<br>$对于所有共线的点，就是左端点选一个非空子集，右端点选一个非空子集$<br>$所以贡献E_1=(2^{cnt_1}-1)\times (2^{cnt_2}-1)$<br>$当然重点自己也要算下贡献，E_2=2^{cnt}-1-cnt$<br>$这个就是选取2个端点（外面空0个点），然后外面空1个，2个点…里面随便选$<br>$E_2=2^{cnt-2}+2\times 2^{cnt-3}+3\times 2^{cnt-4}+\cdots+(cnt-2)\times 2^1+(cnt-1)$<br>$乘2错位一下，2E_2=2^{cnt-1}+2\times 2^{cnt-2}+3\times 2^{cnt-3}+(cnt-1)\times 2^1$<br>$一减，E_2=2^{cnt-1}+2^{cnt-2}+2^{cnt-3}+\cdots+2^1-(cnt-1)$<br>$等比数列求和一下，E_2=\frac{2\times (1-2^{cnt-1})}{1-2}-(cnt-1)=2^{cnt}-2-cnt+1=2^{cnt}-1-cnt$<br>$然后就做完了，时间复杂度，常数很小的O(n^2logn)$</p>
</blockquote>
<p>代码:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-07-22</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e3</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> x, y;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">()</span> </span>&#123;<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);&#125;</div><div class="line">    Point() &#123;&#125;</div><div class="line">    Point(<span class="keyword">int</span> x, <span class="keyword">int</span> y): x(x), y(y) &#123;&#125;</div><div class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Point&amp; rhs) <span class="keyword">const</span> &#123;</div><div class="line">        <span class="keyword">return</span> make_pair(x, y) &lt; make_pair(rhs.x, rhs.y);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> Point&amp; rhs) <span class="keyword">const</span> &#123;</div><div class="line">        <span class="keyword">return</span> make_pair(x, y) == make_pair(rhs.x, rhs.y);</div><div class="line">    &#125;</div><div class="line">    Point <span class="keyword">operator</span>-(<span class="keyword">const</span> Point&amp; rhs) <span class="keyword">const</span> &#123;</div><div class="line">        <span class="keyword">return</span> Point(x - rhs.x, y - rhs.y);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">reduce</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> g = __gcd(<span class="built_in">abs</span>(x), <span class="built_in">abs</span>(y));</div><div class="line">        <span class="keyword">if</span>(g) x /= g, y /= g;</div><div class="line">    &#125;</div><div class="line">&#125; p[N];</div><div class="line"></div><div class="line"><span class="keyword">int</span> two[N] = &#123;<span class="number">1</span>&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span>&amp; x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>((x += y) &gt;= MOD) x -= MOD;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line">    <span class="keyword">clock_t</span> _ = clock();</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; ++i) two[i] = <span class="number">2</span> * two[i - <span class="number">1</span>] % MOD;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">while</span>(t--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">        <span class="built_in">map</span>&lt;Point, <span class="keyword">int</span>&gt; mp;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">            p[i].read();</div><div class="line">            ++mp[p[i]];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="built_in">vector</span>&lt;pair&lt;Point, <span class="keyword">int</span>&gt; &gt; cnt(mp.begin(), mp.end());</div><div class="line"></div><div class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cnt.size(); ++i) &#123;</div><div class="line">            Point p; <span class="keyword">int</span> c1;</div><div class="line">            tie(p, c1) = cnt[i];</div><div class="line">            <span class="built_in">vector</span>&lt;pair&lt;Point, <span class="keyword">int</span>&gt; &gt; v;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; cnt.size(); ++j) &#123;</div><div class="line">                Point np; <span class="keyword">int</span> c2;</div><div class="line">                tie(np, c2) = cnt[j];</div><div class="line">                Point o = np - p; o.reduce();</div><div class="line">                v.push_back(&#123;o, c2&#125;);</div><div class="line">            &#125;</div><div class="line">            sort(v.begin(), v.end());</div><div class="line"></div><div class="line">            add(ans, two[c1] - <span class="number">1</span> - c1); <span class="comment">//x points is collinear</span></div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>, y; x &lt; v.size(); x = y) &#123;</div><div class="line">                <span class="keyword">int</span> c2 = <span class="number">0</span>;</div><div class="line">                <span class="keyword">for</span>(y = x; y &lt; v.size(); ++y) &#123;</div><div class="line">                    <span class="keyword">if</span>(v[x].first == v[y].first) c2 += v[y].second;</div><div class="line">                    <span class="keyword">else</span> <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">int</span> e = <span class="number">1L</span>L * (two[c1] - <span class="number">1</span>) * (two[c2] - <span class="number">1</span>) % MOD;</div><div class="line">                add(ans, e);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\nTime cost: %.2fs\n"</span>, <span class="number">1.0</span> * (clock() - _) / CLOCKS_PER_SEC);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 数学 </category>
            
            <category> 贡献 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 贡献 </tag>
            
            <tag> 极角排序 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDU 5733 tetrahedron（三维几何？公式题。。）]]></title>
      <url>/2016/07/24/HDU%205733%20tetrahedron%EF%BC%88%E4%B8%89%E7%BB%B4%E5%87%A0%E4%BD%95%EF%BC%9F%E5%85%AC%E5%BC%8F%E9%A2%98%E3%80%82%E3%80%82%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$给定4个点，判断能否构成四面体，能输出内心坐标和内切球半径$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$混合积判断四面体存在，delta = A det B dot C$<br>$delta不为0四面体就存在，然后内切球半径R=\frac{V}{\sum S_{面}}$<br>$然后内心坐标：$<br><img src="http://7xru22.com1.z0.glb.clouddn.com/16-7-24/95457175.jpg" alt=""></p>
</blockquote>
<p>代码:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-07-19</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> EPS = <span class="number">1e-8</span>, PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">sgn</span><span class="params">(<span class="keyword">double</span> x)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> x &lt; -EPS ? <span class="number">-1</span> : x &gt; EPS;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point3</span> &#123;</span></div><div class="line">    <span class="keyword">double</span> x, y, z;</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="built_in">scanf</span>(<span class="string">"%lf%lf%lf"</span>, &amp;x, &amp;y, &amp;z) == <span class="number">3</span>) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    Point3 <span class="keyword">operator</span>+(<span class="keyword">const</span> Point3&amp; p) &#123;</div><div class="line">        <span class="keyword">return</span> &#123;x + p.x, y + p.y, z + p.z&#125;;</div><div class="line">    &#125;</div><div class="line">    Point3 <span class="keyword">operator</span>-(<span class="keyword">const</span> Point3&amp; p) &#123;</div><div class="line">        <span class="keyword">return</span> &#123;x - p.x, y - p.y, z - p.z&#125;;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">double</span> <span class="keyword">operator</span>*(<span class="keyword">const</span> Point3&amp; p) &#123;</div><div class="line">        <span class="keyword">return</span> x * p.x + y * p.y + z * p.z;</div><div class="line">    &#125;</div><div class="line">    Point3 <span class="keyword">operator</span>^(<span class="keyword">const</span> Point3&amp; p) &#123;</div><div class="line">        <span class="keyword">return</span> &#123;y* p.z - z * p.y, z* p.x - x * p.z, x* p.y - y * p.x&#125;;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">double</span> <span class="title">length</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">sqrt</span>(*<span class="keyword">this</span> * *<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">norm</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">double</span> l = length();</div><div class="line">        x /= l; y /= l; z /= l;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%.4f %.4f %.4f"</span>, x, y, z);</div><div class="line">    &#125;</div><div class="line">&#125; ps[<span class="number">4</span>];</div><div class="line"></div><div class="line"><span class="keyword">using</span> Vector3 = Point3;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isParallel</span><span class="params">(Vector3 A, Vector3 B)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> sgn((A ^ B).length()) &lt;= <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">double</span> <span class="title">point3ToLine</span><span class="params">(Point3 P, Point3 A, Vector3 v)</span> </span>&#123;</div><div class="line">    Vector3 w = P - A;</div><div class="line">    <span class="keyword">return</span> (v ^ w).length() / v.length();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">double</span> <span class="title">point3ToPlane</span><span class="params">(Point3 p, Point3 A, Point3 B, Point3 C)</span> </span>&#123;</div><div class="line">    Vector3 v = B - A, w = C - A;</div><div class="line">    Vector3 o = v ^ w;</div><div class="line">    <span class="keyword">double</span> pToO = point3ToLine(p, A, o);</div><div class="line">    <span class="keyword">double</span> pToA = (p - A).length();</div><div class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>(pToA * pToA - pToO * pToO);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i)</div><div class="line">        <span class="keyword">if</span>(!ps[i].read()) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">()</span> </span>&#123;</div><div class="line">    Vector3 A = ps[<span class="number">1</span>] - ps[<span class="number">0</span>], B = ps[<span class="number">2</span>] - ps[<span class="number">0</span>], C = ps[<span class="number">3</span>] - ps[<span class="number">0</span>];</div><div class="line">    Vector3 o = A ^ B;</div><div class="line">    <span class="keyword">if</span>(isParallel(A, B)) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    <span class="keyword">if</span>(sgn(o * C) == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">double</span> <span class="title">getS</span><span class="params">(Point3 A, Point3 B, Point3 C)</span> </span>&#123;</div><div class="line">    <span class="keyword">double</span> ab = (A - B).length();</div><div class="line">    <span class="keyword">double</span> bc = (B - C).length();</div><div class="line">    <span class="keyword">double</span> ac = (A - C).length();</div><div class="line">    <span class="keyword">double</span> p = (ab + bc + ac) / <span class="number">2</span>;</div><div class="line">    <span class="keyword">double</span> S = <span class="built_in">sqrt</span>(p * (p - ab) * (p - bc) * (p - ac));</div><div class="line">    <span class="keyword">return</span> S;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">double</span> S1 = getS(ps[<span class="number">0</span>], ps[<span class="number">1</span>], ps[<span class="number">2</span>]); <span class="comment">//3</span></div><div class="line">    <span class="keyword">double</span> S2 = getS(ps[<span class="number">0</span>], ps[<span class="number">1</span>], ps[<span class="number">3</span>]); <span class="comment">//2</span></div><div class="line">    <span class="keyword">double</span> S3 = getS(ps[<span class="number">0</span>], ps[<span class="number">2</span>], ps[<span class="number">3</span>]); <span class="comment">//1</span></div><div class="line">    <span class="keyword">double</span> S4 = getS(ps[<span class="number">3</span>], ps[<span class="number">1</span>], ps[<span class="number">2</span>]); <span class="comment">//0</span></div><div class="line">    <span class="keyword">double</span> h = calc(ps[<span class="number">3</span>], ps[<span class="number">0</span>], ps[<span class="number">1</span>], ps[<span class="number">2</span>]);</div><div class="line"></div><div class="line">    <span class="keyword">double</span> V = S1 * h;</div><div class="line">    <span class="keyword">double</span> sum = S1 + S2 + S3 + S4;</div><div class="line">    <span class="keyword">double</span> R = V / (sum);</div><div class="line"></div><div class="line">    <span class="keyword">double</span> x = (ps[<span class="number">0</span>].x * S4 + ps[<span class="number">1</span>].x * S3 + ps[<span class="number">2</span>].x * S2 + ps[<span class="number">3</span>].x * S1);</div><div class="line">    x /= sum;</div><div class="line">    <span class="keyword">double</span> y = (ps[<span class="number">0</span>].y * S4 + ps[<span class="number">1</span>].y * S3 + ps[<span class="number">2</span>].y * S2 + ps[<span class="number">3</span>].y * S1);</div><div class="line">    y /= sum;</div><div class="line">    <span class="keyword">double</span> z = (ps[<span class="number">0</span>].z * S4 + ps[<span class="number">1</span>].z * S3 + ps[<span class="number">2</span>].z * S2 + ps[<span class="number">3</span>].z * S1);</div><div class="line">    z /= sum;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%.4f %.4f %.4f %.4f\n"</span>, x, y, z, R);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line">    <span class="keyword">clock_t</span> _ = clock();</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(read()) &#123;</div><div class="line">        <span class="keyword">if</span>(!judge()) &#123;</div><div class="line">            <span class="built_in">puts</span>(<span class="string">"O O O O"</span>);</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        solve();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\nTime cost: %.2fs\n"</span>, <span class="number">1.0</span> * (clock() - _) / CLOCKS_PER_SEC);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 计算几何 </category>
            
            <category> 三维几何 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 三维几何 </tag>
            
            <tag> 四面体内心 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDU 5732 Subway（树哈希）]]></title>
      <url>/2016/07/24/HDU%205732%20Subway%EF%BC%88%E6%A0%91%E5%93%88%E5%B8%8C%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$给定N\le 10^5个节点的2棵树，保证2棵树同构$<br>$输出一种2棵树的节点映射方式$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$树同构，想一个和节点顺序无关的哈希函数将树表示$<br>$一种方法：首先找树的中点，然后将中点作为根$<br>$叶子节点哈希值为1，对于每一颗树，把它的所有子树的哈希 值排序，然后算出新的哈希值作为总体的哈希值$<br>$有2个中点的树2个中点都试一下。为了保险可以检查下哈希值有没有重的$<br>$双hash速度跟标程一样。。所以还不如。$<br>$直接$<code>map&lt;vector&lt;int&gt;, int&gt;</code>$搞都行。。10^5的数据只有2个$<br>$时间复杂度O(nlogn)$</p>
</blockquote>
<p>代码:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-07-21</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">const</span> LL seed[<span class="number">2</span>] = &#123;<span class="number">999999937</span>, <span class="number">999999929</span>&#125;;</div><div class="line"><span class="keyword">const</span> LL mod[<span class="number">2</span>] = &#123;<span class="number">1000000007</span>, <span class="number">1000000009</span>&#125;; <span class="comment">//1e9+7/+9</span></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Hash</span> &#123;</span></div><div class="line">    LL h[<span class="number">2</span>];</div><div class="line">    Hash() &#123;&#125;</div><div class="line">    Hash(<span class="keyword">const</span> LL&amp; first) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i) h[i] = first;</div><div class="line">    &#125;</div><div class="line">    Hash <span class="keyword">operator</span>+(<span class="keyword">const</span> Hash&amp; rhs) <span class="keyword">const</span> &#123;</div><div class="line">        Hash ret = *<span class="keyword">this</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i) &#123;</div><div class="line">            ret.h[i] = ret.h[i] * seed[i] % mod[i];</div><div class="line">            <span class="keyword">if</span>((ret.h[i] += rhs.h[i]) &gt;= mod[i]) ret.h[i] -= mod[i];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Hash&amp; rhs) <span class="keyword">const</span> &#123;</div><div class="line">        <span class="keyword">return</span> make_pair(h[<span class="number">0</span>], h[<span class="number">1</span>]) &lt; make_pair(rhs.h[<span class="number">0</span>], rhs.h[<span class="number">1</span>]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> Hash&amp; rhs) <span class="keyword">const</span> &#123;</div><div class="line">        <span class="keyword">return</span> make_pair(h[<span class="number">0</span>], h[<span class="number">1</span>]) == make_pair(rhs.h[<span class="number">0</span>], rhs.h[<span class="number">1</span>]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">see</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"(%llu %llu)\n"</span>, h[<span class="number">0</span>], h[<span class="number">1</span>]);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[<span class="number">2</span>][N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">getDiameter</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> f, <span class="keyword">int</span> d, <span class="keyword">int</span> idx, pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&amp; diameter)</span> </span>&#123;</div><div class="line">    diameter = max(diameter, make_pair(d, u));</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; cur = G[idx][u];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; v : cur) &#123;</div><div class="line">        <span class="keyword">if</span>(v == f) <span class="keyword">continue</span>;</div><div class="line">        getDiameter(v, u, d + <span class="number">1</span>, idx, diameter);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">getPath</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> f, <span class="keyword">int</span> t, <span class="keyword">int</span> idx, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; path)</span> </span>&#123;</div><div class="line">    path.push_back(u);</div><div class="line">    <span class="keyword">if</span>(u == t) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; cur = G[idx][u];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; v : cur) &#123;</div><div class="line">        <span class="keyword">if</span>(v == f) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">if</span>(getPath(v, u, t, idx, path)) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">    path.pop_back();</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;pair&lt;Hash, <span class="keyword">int</span>&gt; &gt; treeHash[<span class="number">2</span>][N];</div><div class="line"></div><div class="line"><span class="function">Hash <span class="title">getHash</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> f, <span class="keyword">int</span> idx)</span> </span>&#123;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; cur = G[idx][u];</div><div class="line">    <span class="built_in">vector</span>&lt;pair&lt;Hash, <span class="keyword">int</span>&gt; &gt; sons;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; v : cur) &#123;</div><div class="line">        <span class="keyword">if</span>(v == f) <span class="keyword">continue</span>;</div><div class="line">        sons.push_back(&#123;getHash(v, u, idx), v&#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function">Hash <span class="title">h</span><span class="params">(<span class="number">1</span>)</span></span>;</div><div class="line">    sort(sons.begin(), sons.end());</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; v : sons) h = h + v.first;</div><div class="line">    treeHash[idx][u].swap(sons);</div><div class="line">    <span class="keyword">return</span> h;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; mp[<span class="number">2</span>];</div><div class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; names[<span class="number">2</span>];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">ID</span><span class="params">(<span class="built_in">string</span> s, <span class="keyword">int</span> idx)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(mp[idx].count(s)) <span class="keyword">return</span> mp[idx][s];</div><div class="line">    names[idx].push_back(s);</div><div class="line">    mp[idx][s] = names[idx].size();</div><div class="line">    <span class="keyword">return</span> mp[idx][s];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> idx)</span> </span>&#123;</div><div class="line">    mp[idx].clear(); names[idx].clear();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) G[idx][i].clear();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">OLE</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</div><div class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</div><div class="line">        <span class="built_in">puts</span>(s.c_str());</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">RE</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, *((<span class="keyword">int</span>*)<span class="number">0</span>));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">match</span><span class="params">(<span class="built_in">vector</span>&lt;pair&lt;Hash, <span class="keyword">int</span>&gt; &gt;&amp; cur, <span class="built_in">vector</span>&lt;pair&lt;Hash, <span class="keyword">int</span>&gt; &gt;&amp; nxt,</span></span></div><div class="line"><span class="function"><span class="params">           <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt;&amp; ans)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(cur.size() != nxt.size()) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cur.size(); ++i) &#123;</div><div class="line">        <span class="keyword">bool</span> ok = <span class="literal">false</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt; nxt.size() &amp;&amp; cur[i].first == nxt[j].first; ++j) &#123;</div><div class="line">            swap(nxt[i], nxt[j]);</div><div class="line">            <span class="keyword">if</span>(match(treeHash[<span class="number">0</span>][cur[i].second], treeHash[<span class="number">1</span>][nxt[i].second], ans)) &#123;</div><div class="line">                ++cnt;</div><div class="line">                ok = <span class="literal">true</span>;</div><div class="line">                ans.push_back(&#123;cur[i].second, nxt[i].second&#125;);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(!ok) &#123;</div><div class="line">            <span class="keyword">while</span>(cnt--) ans.pop_back();</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\1010.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//    freopen("C:\\Users\\TaoSama\\Desktop\\out.txt", "w", stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line">    <span class="keyword">clock_t</span> _ = clock();</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) == <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i) &#123;</div><div class="line">            init(i);</div><div class="line"></div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n; ++j) &#123;</div><div class="line">                <span class="keyword">char</span> a[<span class="number">20</span>], b[<span class="number">20</span>]; <span class="built_in">scanf</span>(<span class="string">"%s%s"</span>, a, b);</div><div class="line">                <span class="keyword">int</span> u = ID(a, i), v = ID(b, i);</div><div class="line"><span class="comment">//                printf("%d-&gt;%d\n", u, v);</span></div><div class="line">                G[i][u].push_back(v);</div><div class="line">                G[i][v].push_back(u);</div><div class="line">            &#125;</div><div class="line"><span class="comment">//            puts("");</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="built_in">vector</span>&lt;pair&lt;Hash, <span class="keyword">int</span>&gt; &gt; hashes[<span class="number">2</span>];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i) &#123;</div><div class="line">            pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; diameter = &#123; -INF, -INF&#125;;</div><div class="line">            getDiameter(<span class="number">1</span>, <span class="number">-1</span>, <span class="number">0</span>, i, diameter);</div><div class="line">            <span class="keyword">int</span> u = diameter.second;</div><div class="line">            diameter = &#123; -INF, -INF&#125;;</div><div class="line">            getDiameter(u, <span class="number">-1</span>, <span class="number">0</span>, i, diameter);</div><div class="line">            <span class="keyword">int</span> v = diameter.second;</div><div class="line"></div><div class="line"><span class="comment">//            printf("diameter %d -&gt; %d\n", u, v);</span></div><div class="line"></div><div class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; path;</div><div class="line">            getPath(u, <span class="number">-1</span>, v, i, path);</div><div class="line">            <span class="keyword">int</span> sz = path.size();</div><div class="line">            <span class="keyword">int</span> x = path[sz &gt;&gt; <span class="number">1</span>], y = <span class="number">-1</span>;</div><div class="line">            <span class="keyword">if</span>(~path.size() &amp; <span class="number">1</span>) y = path[sz / <span class="number">2</span> - <span class="number">1</span>];</div><div class="line">            hashes[i].push_back(&#123;getHash(x, y, i), x&#125;);</div><div class="line">            <span class="keyword">if</span>(~y) hashes[i].push_back(&#123;getHash(y, x, i), y&#125;);</div><div class="line"></div><div class="line"><span class="comment">//            printf("start %d %d\n", x, y);</span></div><div class="line"></div><div class="line">            sort(hashes[i].begin(), hashes[i].end());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; ans;</div><div class="line">        <span class="keyword">if</span>(!match(hashes[<span class="number">0</span>], hashes[<span class="number">1</span>], ans)) RE();</div><div class="line"></div><div class="line"><span class="comment">//        prln(ans.size());</span></div><div class="line">        <span class="keyword">if</span>(ans.size() != n) OLE(<span class="string">"WA"</span>);</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ans.size(); ++i) &#123;</div><div class="line">            <span class="keyword">int</span> u, v; tie(u, v) = ans[i];</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%s %s\n"</span>, names[<span class="number">0</span>][u - <span class="number">1</span>].c_str(), names[<span class="number">1</span>][v - <span class="number">1</span>].c_str());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\nTime cost: %.2fs\n"</span>, <span class="number">1.0</span> * (clock() - _) / CLOCKS_PER_SEC);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 技巧 </category>
            
            <category> 哈希 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 树哈希 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDU 5730 Shell Necklace（dp、cdq分治+FFT）]]></title>
      <url>/2016/07/24/HDU%205730%20Shell%20Necklace%EF%BC%88dp%E3%80%81cdq%E5%88%86%E6%B2%BB+FFT%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$给定N\le 10^5个贝壳的项链，每连续i\le N个贝壳模式的贡献是a_i$<br>$对于某种串项链的方式，假设含有模式b_1, b_2, \cdots, b_m，总贡献为\prod_{i=1}^m a_{b_i} $<br>$求所有串项链方式的贡献和$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$首先有显然的dp，f[i]:=以i结尾的贝壳的贡献和$<br>$f[i]=\sum_{j=1}^i f[i-j]\times a_j$<br>$但是转移是O(n)的，总复杂度是O(n^2)，考虑优化$<br>$发现转移是个卷积形式，由于模数不是费马素数，所以cdq分治+FFT一波就好了$<br>$时间复杂度是O(nlog^2n)$</p>
</blockquote>
<p>代码:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-07-20</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;complex&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">313</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, a[N];</div><div class="line"><span class="keyword">int</span> f[N];</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">complex</span>&lt;<span class="keyword">double</span>&gt; Complex;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">rader</span><span class="params">(Complex* y, <span class="keyword">int</span> len)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>, j = len / <span class="number">2</span>; i &lt; len - <span class="number">1</span>; i++) &#123;</div><div class="line">        <span class="keyword">if</span>(i &lt; j) swap(y[i], y[j]);</div><div class="line">        <span class="keyword">int</span> k = len / <span class="number">2</span>;</div><div class="line">        <span class="keyword">while</span>(j &gt;= k) &#123;j -= k; k /= <span class="number">2</span>;&#125;</div><div class="line">        <span class="keyword">if</span>(j &lt; k) j += k;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">fft</span><span class="params">(Complex* y, <span class="keyword">int</span> len, <span class="keyword">int</span> op)</span> </span>&#123;</div><div class="line">    rader(y, len);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> h = <span class="number">2</span>; h &lt;= len; h &lt;&lt;= <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">double</span> ang = op * <span class="number">2</span> * PI / h;</div><div class="line">        Complex wn(cos(ang), sin(ang));</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len; j += h) &#123;</div><div class="line">            <span class="function">Complex <span class="title">w</span><span class="params">(<span class="number">1</span>, <span class="number">0</span>)</span></span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = j; k &lt; j + h / <span class="number">2</span>; k++) &#123;</div><div class="line">                Complex u = y[k];</div><div class="line">                Complex t = w * y[k + h / <span class="number">2</span>];</div><div class="line">                y[k] = u + t;</div><div class="line">                y[k + h / <span class="number">2</span>] = u - t;</div><div class="line">                w = w * wn;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(op == <span class="number">-1</span>) <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) y[i] /= len;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Complex A[N &lt;&lt; <span class="number">1</span>], B[N &lt;&lt; <span class="number">1</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">cdq</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(l == r) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</div><div class="line">    cdq(l, mid);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> len = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span>(len &lt;= r - l + <span class="number">1</span>) len &lt;&lt;= <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</div><div class="line">        A[i] = Complex(l + i &lt;= mid ? f[l + i] : <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">        B[i] = Complex(l + i + <span class="number">1</span> &lt;= r ? a[i + <span class="number">1</span>] : <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line">    fft(A, len, <span class="number">1</span>);</div><div class="line">    fft(B, len, <span class="number">1</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) A[i] *= B[i];</div><div class="line">    fft(A, len, <span class="number">-1</span>);</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = mid + <span class="number">1</span>; i &lt;= r; i++) &#123;</div><div class="line">        f[i] += <span class="built_in">fmod</span>(A[i - l - <span class="number">1</span>].real(), MOD) + <span class="number">0.5</span>;</div><div class="line">        <span class="keyword">if</span>(f[i] &gt;= MOD) f[i] -= MOD;</div><div class="line">    &#125;</div><div class="line">    cdq(mid + <span class="number">1</span>, r);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line">    <span class="keyword">clock_t</span> _ = clock();</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) == <span class="number">1</span> &amp;&amp; n) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a + i);</div><div class="line">            a[i] %= MOD;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="built_in">memset</span>(f, <span class="number">0</span>, <span class="keyword">sizeof</span> f);</div><div class="line">        f[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">        cdq(<span class="number">0</span>, n);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, f[n]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\nTime cost: %.2fs\n"</span>, <span class="number">1.0</span> * (clock() - _) / CLOCKS_PER_SEC);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 数学 </category>
            
            <category> FFT/NTT/FWT </category>
            
        </categories>
        
        
        <tags>
            
            <tag> FFT </tag>
            
            <tag> cdq分治 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDU 5727 Necklace（二分图最大匹配）]]></title>
      <url>/2016/07/24/HDU%205727%20Necklace%EF%BC%88%E4%BA%8C%E5%88%86%E5%9B%BE%E6%9C%80%E5%A4%A7%E5%8C%B9%E9%85%8D%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$给定2\times N个珠子的环，其中N个为yang，N个为yin，N\le 9$<br>$给定M\le N\times N个限制关系$<br>$对于每个限制关系a_i, b_i，表示yang a_i会变暗如果与yin b_i相邻$<br>$求最少的暗淡yang珠子数$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$由于是环，所以固定第1个珠子为1，然后8！枚举yin珠子的排列$<br>$之后对于每2个yin珠子的间隔，与yang珠子建图，表示这个yang珠子不会暗淡$<br>$跑二分图匹配，最大匹配数就是最大的不会暗淡的$<br>$ans=n-maxMatch$<br>$实际上匈牙利很快，然后如果都不暗淡提前退出就可以过去了$<br>$集训队的不带剪枝都过去了，不知道为啥窝自带百倍常数$<br>$时间复杂度O(8!\times nm)$</p>
</blockquote>
<p>代码:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-07-20</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">10</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">int</span> conflict[N][N];</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> v, nxt;</div><div class="line">&#125; edge[N * N];</div><div class="line"><span class="keyword">int</span> head[N], cnt;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</div><div class="line">    edge[cnt] = &#123;v, head[u]&#125;;</div><div class="line">    head[u] = cnt++;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> match[N], vis[N];</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; ~i; i = edge[i].nxt) &#123;</div><div class="line">        <span class="keyword">int</span> v = edge[i].v;</div><div class="line">        <span class="keyword">if</span>(vis[v]) <span class="keyword">continue</span>;</div><div class="line">        vis[v] = <span class="literal">true</span>;</div><div class="line">        <span class="keyword">if</span>(match[v] == <span class="number">-1</span> || dfs(match[v])) &#123;</div><div class="line">            match[v] = u;</div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">hungary</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> matches = <span class="number">0</span>;</div><div class="line">    <span class="built_in">memset</span>(match, <span class="number">-1</span>, <span class="keyword">sizeof</span> match);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">        <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span> vis);</div><div class="line">        matches += dfs(i);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> matches;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line">    <span class="keyword">clock_t</span> _ = clock();</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m) == <span class="number">2</span>) &#123;</div><div class="line">        <span class="built_in">memset</span>(conflict, <span class="number">0</span>, <span class="keyword">sizeof</span> conflict);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</div><div class="line">            <span class="keyword">int</span> u, v; <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</div><div class="line">            conflict[u][v] = <span class="number">1</span>; <span class="comment">//yang yin</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> ans = -INF;</div><div class="line"></div><div class="line">        <span class="comment">//yin</span></div><div class="line">        <span class="keyword">int</span> ord[N]; ord[n + <span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) ord[i] = i;</div><div class="line">        <span class="keyword">do</span> &#123;</div><div class="line"><span class="comment">//            for(int i = 1; i &lt;= n + 1; ++i) printf("%d ", ord[i]); puts("");</span></div><div class="line"></div><div class="line">            cnt = <span class="number">0</span>; <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123; <span class="comment">//gap</span></div><div class="line">                <span class="keyword">int</span> l = ord[i], r = ord[i + <span class="number">1</span>];</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123; <span class="comment">//yang</span></div><div class="line">                    <span class="keyword">if</span>(conflict[j][l] || conflict[j][r]) <span class="keyword">continue</span>;</div><div class="line"><span class="comment">//                    printf("%d, %d\n", i, j);</span></div><div class="line">                    addEdge(i, j);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(cnt &lt;= ans) <span class="keyword">continue</span>;</div><div class="line">            ans = max(ans, hungary());</div><div class="line">            <span class="keyword">if</span>(ans == n) <span class="keyword">break</span>;</div><div class="line">        &#125; <span class="keyword">while</span>(next_permutation(ord + <span class="number">2</span>, ord + n + <span class="number">1</span>));</div><div class="line"></div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, n - ans);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\nTime cost: %.2fs\n"</span>, <span class="number">1.0</span> * (clock() - _) / CLOCKS_PER_SEC);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 图论 </category>
            
            <category> 连通图 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 二分图最大匹配 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDU 5726 GCD（dp、倍增）]]></title>
      <url>/2016/07/24/HDU%205726%20GCD%EF%BC%88dp%E3%80%81%E5%80%8D%E5%A2%9E%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$给定一个N\le 10^5个数，|A_i| \le 10^9，Q\le 10^5次询问$<br>$定义gcd(l, r)=gcd(a_l, a_{l+1}, \cdots, a_r)$<br>$每次询问给定一个[l, r]，查询\forall_{1\le l’\le r’\le N}，gcd(l’, r’)=gcd(l, r)的(l’, r’)个数$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p><code>vector&lt;pair&lt;int, int&gt; &gt;</code>$ f[i]:=以i结尾的区间，且gcd为first，个数为second$<br>$由于1个数有log级别的质因子个数，所以不同的gcd的个数也是log级别的$<br>$这样就可以通过dp预处理出全局的mp[g]:=gcd为g的区间个数$<br>$之后再通过倍增预处理出g[i][j]:=以i开始向右长度为2^j的gcd$<br>$对于每次询问就可以类似RMQ的做法O(1)求出gcd(l, r)了$<br>$总时间复杂度为O(nlog^2n)$</p>
</blockquote>
<p>代码:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-07-20</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, a[N];</div><div class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; f[<span class="number">2</span>];</div><div class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, LL&gt; mp;</div><div class="line"><span class="keyword">int</span> g[<span class="number">17</span>][N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line">    <span class="keyword">clock_t</span> _ = clock();</div><div class="line"></div><div class="line">    <span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">while</span>(t--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a + i);</div><div class="line"></div><div class="line">        mp.clear();</div><div class="line"></div><div class="line">        <span class="keyword">int</span> p = <span class="number">0</span>; f[p].clear();</div><div class="line">        f[p].push_back(&#123;<span class="number">0</span>, <span class="number">1</span>&#125;);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">            f[!p].clear(); f[!p].push_back(&#123;<span class="number">0</span>, <span class="number">1</span>&#125;);</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; u : f[p]) &#123;</div><div class="line">                <span class="keyword">int</span> x, cnt; tie(x, cnt) = u;</div><div class="line">                x = __gcd(x, a[i]);</div><div class="line"></div><div class="line">                <span class="keyword">bool</span> ok = <span class="literal">true</span>;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; v : f[!p]) &#123;</div><div class="line">                    <span class="keyword">if</span>(x == v.first) &#123;</div><div class="line">                        ok = <span class="literal">false</span>;</div><div class="line">                        v.second += cnt;</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span>(ok) f[!p].push_back(&#123;x, cnt&#125;);</div><div class="line"><span class="comment">//                printf("%d: %d %d\n", i, x, cnt);</span></div><div class="line">                mp[x] += cnt; <span class="comment">//global</span></div><div class="line">            &#125;</div><div class="line">            p = !p;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) g[<span class="number">0</span>][i] = a[i];</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; <span class="number">1</span> &lt;&lt; i &lt;= n; ++i)</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</div><div class="line">                g[i][j] = __gcd(g[i - <span class="number">1</span>][j], g[i - <span class="number">1</span>][j + (<span class="number">1</span> &lt;&lt; i - <span class="number">1</span>)]);</div><div class="line"></div><div class="line">        <span class="keyword">static</span> <span class="keyword">int</span> kase = <span class="number">0</span>;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d:\n"</span>, ++kase);</div><div class="line"></div><div class="line">        <span class="keyword">int</span> q; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;q);</div><div class="line">        <span class="keyword">while</span>(q--) &#123;</div><div class="line">            <span class="keyword">int</span> l, r; <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;l, &amp;r);</div><div class="line">            <span class="keyword">int</span> k = <span class="number">31</span> - __builtin_clz(r - l + <span class="number">1</span>);</div><div class="line">            <span class="keyword">int</span> gcd = __gcd(g[k][l], g[k][r - (<span class="number">1</span> &lt;&lt; k) + <span class="number">1</span>]);</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d %I64d\n"</span>, gcd, mp[gcd]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\nTime cost: %.2fs\n"</span>, <span class="number">1.0</span> * (clock() - _) / CLOCKS_PER_SEC);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 动态规划 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 倍增 </tag>
            
            <tag> gcd </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDU 5724 Chess（sg打表）]]></title>
      <url>/2016/07/24/HDU%205724%20Chess%EF%BC%88sg%E6%89%93%E8%A1%A8%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$给定一个N\times 20的棋盘，N\le 1000，每行有一些位置有棋子$<br>$定义一个操作：任意选择1个棋子恰好向右移动1个空位，或者越过连续的一些棋子到一个空位$<br>$现在2人轮流操作，且最优操作，问先手输赢情况$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$首先发现每行可以作为1个独立游戏$<br>$之后2^{20}并不是很大，暴力打出sg值的表，然后合并一下就做完了$<br>$时间复杂度O(20\times 2^{20})$</p>
</blockquote>
<p>代码:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-07-20</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="keyword">int</span> sg[<span class="number">1</span> &lt;&lt; <span class="number">20</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">getSg</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(~sg[x]) <span class="keyword">return</span> sg[x];</div><div class="line">    <span class="keyword">bool</span> mark[<span class="number">100</span>]; <span class="built_in">memset</span>(mark, <span class="number">0</span>, <span class="keyword">sizeof</span> mark);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>, j; i &lt; <span class="number">20</span>; ++i) &#123;</div><div class="line">        <span class="keyword">if</span>(x &gt;&gt; i &amp; <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">for</span>(j = i + <span class="number">1</span>; (x &gt;&gt; j &amp; <span class="number">1</span>) &amp;&amp; j &lt; <span class="number">20</span>; ++j);</div><div class="line">            <span class="keyword">if</span>(j == <span class="number">20</span>) <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">int</span> y = x ^ (<span class="number">1</span> &lt;&lt; i) | (<span class="number">1</span> &lt;&lt; j);</div><div class="line">            mark[getSg(y)] = <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; ; ++i) <span class="keyword">if</span>(!mark[i]) <span class="keyword">return</span> sg[x] = i;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line">    <span class="keyword">clock_t</span> _ = clock();</div><div class="line"></div><div class="line">    <span class="built_in">memset</span>(sg, <span class="number">-1</span>, <span class="keyword">sizeof</span> sg);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1</span> &lt;&lt; <span class="number">20</span>; ++i) getSg(i);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">while</span>(t--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">            <span class="keyword">int</span> cur = <span class="number">0</span>;</div><div class="line">            <span class="keyword">int</span> k; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;k);</div><div class="line">            <span class="keyword">while</span>(k--) &#123;</div><div class="line">                <span class="keyword">int</span> x; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line">                cur |= <span class="number">1</span> &lt;&lt; x - <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">            ans ^= sg[cur];</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">puts</span>(ans ? <span class="string">"YES"</span> : <span class="string">"NO"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\nTime cost: %.2fs\n"</span>, <span class="number">1.0</span> * (clock() - _) / CLOCKS_PER_SEC);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 数学 </category>
            
            <category> 博弈 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> sg函数 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDU 5720 Wool（扫描线）]]></title>
      <url>/2016/06/20/HDU%205720%20Wool%EF%BC%88%E6%89%AB%E6%8F%8F%E7%BA%BF%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$给定N\le 10^5个长度为A_i\le 10^{18}的线段，现有[L, R]的区间长度的线段$<br>$问哪些长度不能与已有线段构成三角形$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$考虑三角形的边b，对于任意的a，那么c\in (a-b, a+b)$<br>$现在要贪心使得这个区间长度L=2b最大，令a\ge b，那么就选择最大的那个b$<br>$只要排序一波就可以得到所有的合法区间了$<br>$扫描线合并一波，最后ans=R-L+1-tot$<br>$时间复杂度O(nlogn)$</p>
</blockquote>
<p>代码:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-07-20</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line">LL a[N], l, r;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line">    <span class="keyword">clock_t</span> _ = clock();</div><div class="line"></div><div class="line">    <span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">while</span>(t--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%I64d%I64d"</span>, &amp;n, &amp;l, &amp;r);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">"%I64d"</span>, a + i);</div><div class="line">        sort(a + <span class="number">1</span>, a + <span class="number">1</span> + n);</div><div class="line"></div><div class="line">        <span class="built_in">map</span>&lt;LL, <span class="keyword">int</span>&gt; mp;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</div><div class="line">            LL c = a[i] - a[i - <span class="number">1</span>] + <span class="number">1</span>;</div><div class="line">            LL d = a[i] + a[i - <span class="number">1</span>] - <span class="number">1</span>;</div><div class="line">            c = max(c, l); d = min(d, r);</div><div class="line">            ++mp[c];</div><div class="line">            --mp[d + <span class="number">1</span>];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">        LL last = mp.begin()-&gt;first, ans = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; p : mp) &#123;</div><div class="line">            <span class="keyword">if</span>(sum &gt;= <span class="number">1</span>) &#123;</div><div class="line">                ans += p.first - last;</div><div class="line">            &#125;</div><div class="line">            sum += p.second;</div><div class="line">            last = p.first;</div><div class="line">        &#125;</div><div class="line">        ans = r - l + <span class="number">1</span> - ans;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\nTime cost: %.2fs\n"</span>, <span class="number">1.0</span> * (clock() - _) / CLOCKS_PER_SEC);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 思维 </category>
            
            <category> 扫描线 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Codeforces Round 361 (Div. 2) E. Mike and Geometry Problem（扫描线）]]></title>
      <url>/2016/06/20/Codeforces%20Round%20361%20(Div.%202)%20E.%20Mike%20and%20Geometry%20Problem%EF%BC%88%E6%89%AB%E6%8F%8F%E7%BA%BF%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$给定N\le 2\times 10^5个线段，现任意选出K\le N个线段，求任意K个线段交点个数和$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$考虑每个点的贡献，问题就转换成了扫描线统计覆盖\ge K次的线段$<br>$对于每个这样的线段，对答案的贡献是C_n^k$<br>$时间复杂度O(nlogn)$</p>
</blockquote>
<p>代码:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-07-20</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, k;</div><div class="line"><span class="keyword">int</span> a[N];</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line">LL fact[N], finv[N];</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">quick</span><span class="params">(LL x, LL n)</span> </span>&#123;</div><div class="line">    LL ret = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(; n; n &gt;&gt;= <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">if</span>(n &amp; <span class="number">1</span>) ret = ret * x % MOD;</div><div class="line">        x = x * x % MOD;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">C</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> fact[n] * finv[m] % MOD * finv[n - m] % MOD;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line">    <span class="keyword">clock_t</span> _ = clock();</div><div class="line"></div><div class="line">    fact[<span class="number">0</span>] = finv[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; ++i) &#123;</div><div class="line">        fact[i] = fact[i - <span class="number">1</span>] * i % MOD;</div><div class="line">        finv[i] = quick(fact[i], MOD - <span class="number">2</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;k) == <span class="number">2</span>) &#123;</div><div class="line">        <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; mp;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">            <span class="keyword">int</span> x, y; <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</div><div class="line">            ++mp[x];</div><div class="line">            --mp[y + <span class="number">1</span>];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>, ans = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> last = mp.begin()-&gt;first;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; p : mp) &#123;</div><div class="line">            <span class="keyword">if</span>(sum &gt;= k) &#123;</div><div class="line">                ans += C(sum, k) * (p.first - last) % MOD;</div><div class="line">                <span class="keyword">if</span>(ans &gt;= MOD) ans -= MOD;</div><div class="line">            &#125;</div><div class="line">            sum += p.second;</div><div class="line">            last = p.first;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\nTime cost: %.2fs\n"</span>, <span class="number">1.0</span> * (clock() - _) / CLOCKS_PER_SEC);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 数学 </category>
            
            <category> 贡献 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[2016 计蒜之道  微软的员工福利 （简单、中等）（dp）]]></title>
      <url>/2016/06/12/2016%20%E8%AE%A1%E8%92%9C%E4%B9%8B%E9%81%93%20%20%E5%BE%AE%E8%BD%AF%E7%9A%84%E5%91%98%E5%B7%A5%E7%A6%8F%E5%88%A9%20%EF%BC%88%E7%AE%80%E5%8D%95%E3%80%81%E4%B8%AD%E7%AD%89%EF%BC%89%EF%BC%88dp%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$给定一颗N个节点的树，根为1，每个点可以在2种物品价值中2选1$<br>$每个节点会减少一定的价值f_i，其中x_i为所有直接儿子选择物品的极差(最大值-最小值)$<br>$$f_i=\lceil{x_i\over 1000}\rceil\times 666\times i $$<br>$求所有员工最大满意度的和$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$对于N\le 15的，直接二进制枚举谁拿第一种就好了，然后就做完了$<br>$对于N\le 100的：$<br>$显然的状态f[u][c]:=以u为根的子树，且这个点颜色是c(c=0第一种)的最大满意度和$<br>$转移的时候就枚举最大值和最小值，他们的个数都是O(n)个的，所以转移O(n^2)$<br>$总时间复杂度为O(n^3)$<br>$细节比较多，需要仔细，具体看代码$<br>$对于N\le 10^5的不会做。。其实看出来这个转移冗余很多，需要更多的性质，题解好神。$</p>
</blockquote>
<p>代码一:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-06-11</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[N], T[N];</div><div class="line"><span class="keyword">int</span> r[N], p[N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> f)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v : G[u]) &#123;</div><div class="line">        <span class="keyword">if</span>(v == f) <span class="keyword">continue</span>;</div><div class="line">        T[u].push_back(v);</div><div class="line">        dfs(v, u);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line">    <span class="keyword">clock_t</span> _ = clock();</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) == <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, r + i, p + i);</div><div class="line">            G[i].clear();</div><div class="line">            T[i].clear();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</div><div class="line">            <span class="keyword">int</span> x, y; <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</div><div class="line">            --x; --y;</div><div class="line">            G[x].push_back(y);</div><div class="line">            G[y].push_back(x);</div><div class="line">        &#125;</div><div class="line">        dfs(<span class="number">0</span>, <span class="number">-1</span>);</div><div class="line"></div><div class="line"></div><div class="line">        LL ans = <span class="number">-1e18</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1</span> &lt;&lt; n; ++i) &#123;</div><div class="line">            <span class="keyword">int</span> b[<span class="number">20</span>] = &#123;&#125;;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j)</div><div class="line">                <span class="keyword">if</span>(i &gt;&gt; j &amp; <span class="number">1</span>) b[j] = r[j];</div><div class="line">                <span class="keyword">else</span> b[j] = p[j];</div><div class="line">            LL tmp = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</div><div class="line">                <span class="keyword">int</span> maxv, minv;</div><div class="line">                maxv = minv = b[j];</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> son : T[j]) &#123;</div><div class="line">                    maxv = max(maxv, b[son]);</div><div class="line">                    minv = min(minv, b[son]);</div><div class="line">                &#125;</div><div class="line">                LL diff = maxv - minv;</div><div class="line">                LL delta = <span class="number">1L</span>L * (diff + <span class="number">999</span>) / <span class="number">1000</span> * <span class="number">666</span> * (j + <span class="number">1</span>);</div><div class="line">                tmp += b[j] - delta;</div><div class="line">            &#125;</div><div class="line">            ans = max(ans, tmp);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\nTime cost: %.2fs\n"</span>, <span class="number">1.0</span> * (clock() - _) / CLOCKS_PER_SEC);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>代码二：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-06-12</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, val[N][<span class="number">2</span>];</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[N];</div><div class="line"><span class="keyword">int</span> f[N][<span class="number">2</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa)</span> </span>&#123;</div><div class="line">    f[u][<span class="number">0</span>] = f[u][<span class="number">1</span>] = <span class="number">0</span>;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; sons;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v : G[u]) &#123;</div><div class="line">        <span class="keyword">if</span>(v == fa) <span class="keyword">continue</span>;</div><div class="line">        sons.push_back(v);</div><div class="line">        dfs(v, u);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i) &#123;</div><div class="line">        <span class="keyword">int</span> x = val[u][i], cur = -INF;</div><div class="line"></div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; big, small;</div><div class="line">        big.push_back(u); small.push_back(u);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> v : sons) &#123;</div><div class="line">            <span class="keyword">if</span>(val[v][<span class="number">0</span>] &gt;= x || val[v][<span class="number">1</span>] &gt;= x)</div><div class="line">                big.push_back(v);</div><div class="line">            <span class="keyword">if</span>(val[v][<span class="number">0</span>] &lt;= x || val[v][<span class="number">1</span>] &lt;= x)</div><div class="line">                small.push_back(v);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> a : big) &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; ++j) &#123;</div><div class="line">                <span class="keyword">if</span>(a == u &amp;&amp; i != j) <span class="keyword">continue</span>;</div><div class="line">                <span class="keyword">int</span> maxv = val[a][j];</div><div class="line">                <span class="keyword">if</span>(maxv &lt; x) <span class="keyword">continue</span>;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> b : small) &#123;</div><div class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">2</span>; ++k) &#123;</div><div class="line">                        <span class="keyword">if</span>(b == u &amp;&amp; i != k) <span class="keyword">continue</span>;</div><div class="line">                        <span class="keyword">if</span>(a == b &amp;&amp; j != k) <span class="keyword">continue</span>;</div><div class="line">                        <span class="keyword">int</span> minv = val[b][k];</div><div class="line">                        <span class="keyword">if</span>(minv &gt; x) <span class="keyword">continue</span>;</div><div class="line"></div><div class="line">                        <span class="keyword">int</span> tmp = f[a][j], ok = <span class="number">1</span>;</div><div class="line">                        <span class="keyword">if</span>(a != b) tmp += f[b][k]; <span class="comment">//fuck</span></div><div class="line">                        <span class="keyword">for</span>(<span class="keyword">int</span> v : sons) &#123;</div><div class="line">                            <span class="keyword">if</span>(v == a || v == b) <span class="keyword">continue</span>;</div><div class="line">                            <span class="keyword">int</span> choice = -INF;</div><div class="line">                            <span class="keyword">for</span>(<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; <span class="number">2</span>; ++c) &#123;</div><div class="line">                                <span class="keyword">int</span> y = val[v][c];</div><div class="line">                                <span class="keyword">if</span>(y &lt; minv || y &gt; maxv) <span class="keyword">continue</span>;</div><div class="line">                                choice = max(choice, f[v][c]);</div><div class="line">                            &#125;</div><div class="line">                            <span class="keyword">if</span>(choice == -INF) &#123;ok = <span class="number">0</span>; <span class="keyword">break</span>;&#125;</div><div class="line">                            tmp += choice;</div><div class="line">                        &#125;</div><div class="line">                        <span class="keyword">if</span>(!ok) <span class="keyword">continue</span>;</div><div class="line"></div><div class="line">                        <span class="keyword">int</span> diff = maxv - minv;</div><div class="line">                        <span class="keyword">int</span> delta = (diff + <span class="number">999</span>) / <span class="number">1000</span> * <span class="number">666</span> * u;</div><div class="line">                        cur = max(cur, tmp + x - delta);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        f[u][i] = cur;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line">    <span class="keyword">clock_t</span> _ = clock();</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) == <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; ++j)</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, val[i] + j);</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) G[i].clear();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</div><div class="line">            <span class="keyword">int</span> u, v; <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</div><div class="line">            G[u].push_back(v);</div><div class="line">            G[v].push_back(u);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        dfs(<span class="number">1</span>, <span class="number">-1</span>);</div><div class="line"><span class="comment">//        for(int i = 1; i &lt;= n; ++i) &#123;</span></div><div class="line"><span class="comment">//            for(int j = 0; j &lt; 2; ++j)</span></div><div class="line"><span class="comment">//                printf("f[%d][%d] = %d\n", i, j, f[i][j]);</span></div><div class="line"><span class="comment">//        &#125;</span></div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, max(f[<span class="number">1</span>][<span class="number">0</span>], f[<span class="number">1</span>][<span class="number">1</span>]));</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\nTime cost: %.2fs\n"</span>, <span class="number">1.0</span> * (clock() - _) / CLOCKS_PER_SEC);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 动态规划 </category>
            
            <category> 树形dp </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[2016 计蒜之道 百度帐号的选取方案 （中等）（kmp、dp）]]></title>
      <url>/2016/06/12/2016%20%E8%AE%A1%E8%92%9C%E4%B9%8B%E9%81%93%20%E7%99%BE%E5%BA%A6%E5%B8%90%E5%8F%B7%E7%9A%84%E9%80%89%E5%8F%96%E6%96%B9%E6%A1%88%20%EF%BC%88%E4%B8%AD%E7%AD%89%EF%BC%89%EF%BC%88kmp%E3%80%81dp%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$字符串的循环次数：由某个子串形成字符串的最多重复次数$<br>$给定L\le 10^3的字符串，现从中选取2个不相交的子串，使得2个子串循环次数相同$<br>$问方法数$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$根据kmp的nxt数组，字符串的最小Cycle = l-nxt[l]$<br>$字符串的最大循环次数Times=l \% Cycle ? 1:l/Cycle$<br>$直接做l次求nxt就可以得到p[l][r]:=s[l\cdots r]子串的循环次数$<br>$预处理f[i][p]:=以i开头，且循环次数为p的子串个数$<br>$然后我们枚举左边的这个子串s[l][r]，累加右边suf[r+1][p[l][r]]就可以了$<br>$预处理复杂度O(n^2)，dp也是O(n^2)，总复杂度O(n^2)$</p>
</blockquote>
<p>代码:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-06-05</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e3</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">char</span> s[N];</div><div class="line"><span class="keyword">int</span> n, nxt[N], p[N][N];</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line">LL suf[N][N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">getNxt</span><span class="params">(<span class="keyword">int</span> st)</span> </span>&#123;</div><div class="line">    nxt[st] = st - <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = st, j = st - <span class="number">1</span>; i &lt; n;) &#123;</div><div class="line">        <span class="keyword">if</span>(j == st - <span class="number">1</span> || s[i] == s[j]) nxt[++i] = ++j;</div><div class="line">        <span class="keyword">else</span> j = nxt[j];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">getTimes</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> len = r - l, cycle = len - (nxt[r] - l);</div><div class="line">    <span class="keyword">return</span> len % cycle ? <span class="number">1</span> : len / cycle;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line">    <span class="keyword">clock_t</span> _ = clock();</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%s"</span>, s) == <span class="number">1</span>) &#123;</div><div class="line">        n = <span class="built_in">strlen</span>(s);</div><div class="line">        <span class="built_in">memset</span>(suf, <span class="number">0</span>, <span class="keyword">sizeof</span> suf);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</div><div class="line">            getNxt(i);</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt; n; ++j) &#123;</div><div class="line">                p[i][j] = getTimes(i, j + <span class="number">1</span>);</div><div class="line">                ++suf[i][p[i][j]];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = n - <span class="number">1</span>; ~i; --i)</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</div><div class="line">                suf[i][j] += suf[i + <span class="number">1</span>][j];</div><div class="line"></div><div class="line">        LL ans = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt; n; ++j)</div><div class="line">                ans += suf[j + <span class="number">1</span>][p[i][j]];</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\nTime cost: %.2fs\n"</span>, <span class="number">1.0</span> * (clock() - _) / CLOCKS_PER_SEC);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 动态规划 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> kmp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDU 5212 ZZX and Permutations（置换、线段树）]]></title>
      <url>/2016/06/04/HDU%205212%20ZZX%20and%20Permutations%EF%BC%88%E7%BD%AE%E6%8D%A2%E3%80%81%E7%BA%BF%E6%AE%B5%E6%A0%91%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$给定一个N\le 10^5的置换序列的Cycle Notation，然后现在把括号删掉了$<br>$现在求一个加上括号的Cycle Notation的原始置换序列$<br>$但要求输出最大字典序的$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$稍微懂点置换的思路的都可以看出这个规律：$<br>$从Cycle Notation中找多个环出来，由于最大字典序$<br>$找到1的时候，肯定填合法的最大的那个数$<br>$能填的数就右边第一个，以及左边到自己 没使用过的任意一个$<br>$看看谁大就填谁，如果是一种直接填，第二种就把这堆数直接成环了$<br>$对于怎么模拟呢，赛上想多了，线段树上二分写不出，无奈写了二分+线段树T了$<br>$主要是我自己太纠结于这个已经成环和已经使用的区分了。。导致写法爆炸。。$<br>$然后队友不懂置换不能给我实质性的帮助，我自己也是逗比，深层次的总结写法能力弱$<br>$事实上只要动态维护最大值就可以了，用过的从线段树中删除就行了。。$<br>$至于查询区间，也就是第二种情况，只用维护成环的就好了。。$<br>$这个只要用set来维护那些成环的区间就好了，每次二分查找一下当前可用的区间$<br>$这样这个题的代码就非常简单了。。$<br>$时间复杂度线段树和set都是logn每次，总复杂度O(nlogn)$</p>
</blockquote>
<p>代码:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-05-26</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, a[N], wh[N], ans[N];</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MP make_pair</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SegTree</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> lazy[N &lt;&lt; <span class="number">2</span>], maxv[N &lt;&lt; <span class="number">2</span>];</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">up</span><span class="params">(<span class="keyword">int</span> rt)</span> </span>&#123;</div><div class="line">        maxv[rt] = max(maxv[rt &lt;&lt; <span class="number">1</span>], maxv[rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">down</span><span class="params">(<span class="keyword">int</span> rt)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(lazy[rt]) &#123;</div><div class="line">            <span class="keyword">int</span> ls = rt &lt;&lt; <span class="number">1</span>, rs = ls | <span class="number">1</span>;</div><div class="line">            lazy[ls] = lazy[rs] = lazy[rt];</div><div class="line">            maxv[ls] = maxv[rs] = lazy[rt] = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> rt)</span> </span>&#123;</div><div class="line">        lazy[rt] = <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span>(l == r) &#123;</div><div class="line">            maxv[rt] = a[l];</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> m = l + r &gt;&gt; <span class="number">1</span>;</div><div class="line">        build(l, m, rt &lt;&lt; <span class="number">1</span>);</div><div class="line">        build(m + <span class="number">1</span>, r, rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">        up(rt);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> rt)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R) &#123;</div><div class="line">            lazy[rt] = <span class="number">1</span>;</div><div class="line">            maxv[rt] = <span class="number">0</span>;</div><div class="line">            <span class="keyword">return</span> ;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> m = l + r &gt;&gt; <span class="number">1</span>;</div><div class="line">        down(rt);</div><div class="line">        <span class="keyword">if</span>(L &lt;= m) del(L, R, l, m, rt &lt;&lt; <span class="number">1</span>);</div><div class="line">        <span class="keyword">if</span>(R &gt; m) del(L, R, m + <span class="number">1</span>, r, rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">        up(rt);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> rt)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R) <span class="keyword">return</span> maxv[rt];</div><div class="line">        <span class="keyword">int</span> m = l + r &gt;&gt; <span class="number">1</span>;</div><div class="line">        down(rt);</div><div class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span>(L &lt;= m) ret = max(ret, query(L, R, l, m, rt &lt;&lt; <span class="number">1</span>));</div><div class="line">        <span class="keyword">if</span>(R &gt; m) ret = max(ret, query(L, R, m + <span class="number">1</span>, r, rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>));</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line">&#125; T;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line">    <span class="keyword">clock_t</span> _ = clock();</div><div class="line"></div><div class="line">    <span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">while</span>(t--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a + i), wh[a[i]] = i;</div><div class="line"></div><div class="line">        T.build(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">        <span class="built_in">set</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; done;</div><div class="line">        <span class="built_in">memset</span>(ans, <span class="number">0</span>, <span class="keyword">sizeof</span> ans);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">            <span class="keyword">if</span>(ans[i]) <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">int</span> p = wh[i];</div><div class="line"></div><div class="line">            <span class="keyword">int</span> l = <span class="number">1</span>, r = min(n, p + <span class="number">1</span>);</div><div class="line">            <span class="keyword">auto</span> iter = done.lower_bound(&#123;p, p&#125;);</div><div class="line">            <span class="keyword">if</span>(iter != done.begin()) l = (--iter)-&gt;second + <span class="number">1</span>;</div><div class="line"></div><div class="line">            <span class="keyword">int</span> maxv = T.query(l, r, <span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">            <span class="keyword">int</span> from = wh[maxv];</div><div class="line"></div><div class="line">            <span class="keyword">if</span>(from == p + <span class="number">1</span>) &#123;</div><div class="line">                ans[a[p]] = a[from];</div><div class="line">                T.del(from, from, <span class="number">1</span>, n, <span class="number">1</span>); <span class="comment">//delete</span></div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">//link</span></div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = from; j &lt; p; ++j) ans[a[j]] = a[j + <span class="number">1</span>];</div><div class="line">                ans[a[p]] = a[from];</div><div class="line"></div><div class="line">                T.del(from, p, <span class="number">1</span>, n, <span class="number">1</span>); <span class="comment">//delete</span></div><div class="line">                done.insert(&#123;from, p&#125;); <span class="comment">//maintain the cycled intervals</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">printf</span>(<span class="string">"%d%c"</span>, ans[i], <span class="string">" \n"</span>[i == n]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\nTime cost: %.2fs\n"</span>, <span class="number">1.0</span> * (clock() - _) / CLOCKS_PER_SEC);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 数据结构 </category>
            
            <category> 线段树 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Codeforces Round 355 (Div. 2) D. Vanya and Treasure（dp、二维BIT优化）]]></title>
      <url>/2016/06/03/Codeforces%20Round%20355%20(Div.%202)%20D.%20Vanya%20and%20Treasure%EF%BC%88dp%E3%80%81%E4%BA%8C%E7%BB%B4BIT%E4%BC%98%E5%8C%96%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$N，M\le 300，P\le N\times M，给定一个N\times M图，每个格子A_{ij}是1\sim P的数字$<br>$从(1, 1)出发，两个格子的距离定义为曼哈顿距离，按顺序取1\sim P的数字$<br>$问最短路是多少$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$我们有一个显然的dp状态，f[x][y]:=到达(x, y)这个格子，并且取到数字的最短路$<br>$f[x_2][y_2]=min\{ f[x_1][y_1]+dis((x_1,y_1), (x_2,y_2)) \},A[x_1][y_1]=i-1,A[x_2][y_2]=i$<br>$裸的转移是O(nm)的，总复杂度就是O((nm)^2)了，显然是不行的，考虑优化$<br>$优化一：$<br>$令cnt[i]:=i这个数字的个数，当cnt[i-1]\times cnt[i]\le n\times m的时候直接更新，否则bfs一波$<br>$这个时间复杂度是O(nm\sqrt{nm})，如果有人懂详细证明请教我。。$<br>$优化二：$<br>$我们展开这个dp转移方程：$<br>$f[x_2][y_2]=min\{ f[x_1][y_1]+abs(x_1-x_2)+abs(y_1-y_2) \}$<br>$发现对于曼哈顿距离其实有4种情况，根据x和y的大小关系，方便起见画个图：$<br><img src="http://7xru22.com1.z0.glb.clouddn.com/16-6-3/79239680.jpg" alt=""><br>$A点为我们当前要更新的点，B0\sim B3为代表根据x和y大小划分的4个区域$<br>$我们可以得到新的转移方程：$<br>$UL - f[x_2][y_2] = min \{ f[x_1][y_1] - x_1 - y_1 + x_2 + y_2 \}, B0区域$<br>$UR - f[x_2][y_2] = min \{ f[x_1][y_1] + x_1 - y_1 - x_2 + y_2 \}, B1区域$<br>$BR - f[x_2][y_2] = min \{ f[x_1][y_1] + x_1 + y_1 - x_2 - y_2 \}, B2区域$<br>$BL - f[x_2][y_2] = min \{ f[x_1][y_1] - x_1 + y_1 + x_2 - y_2 \}, B3区域$<br>$对于当前点A(x_2, y_2)来说，转移方程中关于x_2和y_2的部分是常数$<br>$对于f[x_1][y_1]以及x_1和y_1的部分来说，是矩形区域，我们可以用二维线段树来维护$<br>$观察这4个区域，发现不是前缀区域就是后缀区域，所以我们用4个二维BIT就可以了$<br>$维护后缀区域只要转化一下就好了，具体见代码$</p>
</blockquote>
<p>代码一:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-06-02</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">300</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m, p;</div><div class="line"><span class="keyword">int</span> s[N][N];</div><div class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; P;</div><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;P&gt; G[N * N];</div><div class="line"><span class="keyword">int</span> f[N][N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">getMin</span><span class="params">(<span class="keyword">int</span>&amp; x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(x &gt; y) x = y;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line">    <span class="keyword">clock_t</span> _ = clock();</div><div class="line"></div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;m, &amp;p);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, s[i] + j);</div><div class="line">            G[s[i][j]].push_back(&#123;i, j&#125;);</div><div class="line">            f[i][j] = s[i][j] == <span class="number">1</span> ? i + j - <span class="number">2</span> : INF;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; p; ++i) &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;P&gt;&amp; cur = G[i], &amp;nxt = G[i + <span class="number">1</span>];</div><div class="line">        <span class="keyword">int</span> delta = cur.size() * nxt.size();</div><div class="line">        <span class="keyword">if</span>(delta &lt;= n * m) &#123;</div><div class="line">            <span class="keyword">for</span>(P&amp; u : cur) &#123;</div><div class="line">                <span class="keyword">for</span>(P&amp; v : nxt) &#123;</div><div class="line">                    <span class="keyword">int</span> d = <span class="built_in">abs</span>(u.first - v.first) + <span class="built_in">abs</span>(u.second - v.second);</div><div class="line">                    getMin(f[v.first][v.second], f[u.first][u.second] + d);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">static</span> <span class="built_in">vector</span>&lt;P&gt; q; q.clear();</div><div class="line">            <span class="keyword">static</span> <span class="keyword">int</span> d[N][N], in[N][N];</div><div class="line">            <span class="built_in">memset</span>(d, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> d);</div><div class="line">            <span class="built_in">memset</span>(in, <span class="literal">false</span>, <span class="keyword">sizeof</span> in);</div><div class="line"></div><div class="line">            <span class="keyword">for</span>(P&amp; u : cur) &#123;</div><div class="line">                q.push_back(u);</div><div class="line">                in[u.first][u.second] = <span class="literal">true</span>;</div><div class="line">                d[u.first][u.second] = f[u.first][u.second];</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">static</span> <span class="keyword">int</span> dir[][<span class="number">2</span>] = &#123; <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>&#125;;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; q.size(); ++j) &#123;</div><div class="line">                P u = q[j];</div><div class="line">                in[u.first][u.second] = <span class="literal">false</span>;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; ++k) &#123;</div><div class="line">                    P v = u;</div><div class="line">                    v.first += dir[k][<span class="number">0</span>];</div><div class="line">                    v.second += dir[k][<span class="number">1</span>];</div><div class="line">                    <span class="keyword">if</span>(!s[v.first][v.second]) <span class="keyword">continue</span>;</div><div class="line">                    <span class="keyword">if</span>(d[v.first][v.second] &gt; d[u.first][u.second] + <span class="number">1</span>) &#123;</div><div class="line">                        d[v.first][v.second] = d[u.first][u.second] + <span class="number">1</span>;</div><div class="line">                        <span class="keyword">if</span>(!in[v.first][v.second]) &#123;</div><div class="line">                            in[v.first][v.second] = <span class="literal">true</span>;</div><div class="line">                            q.push_back(v);</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span>(P&amp; v : nxt) f[v.first][v.second] = d[v.first][v.second];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> x = G[p][<span class="number">0</span>].first, y = G[p][<span class="number">0</span>].second;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, f[x][y]);</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\nTime cost: %.2fs\n"</span>, <span class="number">1.0</span> * (clock() - _) / CLOCKS_PER_SEC);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<p>代码二：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-06-02</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">300</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m, p;</div><div class="line"><span class="keyword">int</span> s[N][N], f[N][N];</div><div class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; P;</div><div class="line"><span class="built_in">vector</span>&lt;P&gt; G[N * N];</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BIT</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> n, b[N][N];</div><div class="line">    <span class="keyword">int</span> timStp, vis[N][N];</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> _n)</span> </span>&#123;</div><div class="line">        n = _n;</div><div class="line">        timStp = <span class="number">1</span>;</div><div class="line">        <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span> vis);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">newOne</span><span class="params">()</span> </span>&#123;</div><div class="line">        ++timStp;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> v)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = x; i &lt;= n; i += i &amp; -i) &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = y; j &lt;= n; j += j &amp; -j) &#123;</div><div class="line">                <span class="keyword">if</span>(vis[i][j] != timStp) vis[i][j] = timStp, b[i][j] = INF;</div><div class="line">                b[i][j] = min(b[i][j], v);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> ret = INF;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = x; i; i -= i &amp; -i)</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = y; j; j -= j &amp; -j)</div><div class="line">                <span class="keyword">if</span>(vis[i][j] == timStp) ret = min(ret, b[i][j]);</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line">&#125; bit[<span class="number">4</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line">    <span class="keyword">clock_t</span> _ = clock();</div><div class="line"></div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;m, &amp;p);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, s[i] + j);</div><div class="line">            G[s[i][j]].push_back(&#123;i, j&#125;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">memset</span>(f, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> f);</div><div class="line">    <span class="keyword">int</span> nm = max(n, m);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) bit[i].init(nm);</div><div class="line">    <span class="comment">//UL - f[x2][y2] = min &#123; f[x1][y1] - x1 - y1 + x2 + y2 &#125;</span></div><div class="line">    <span class="comment">//UR - f[x2][y2] = min &#123; f[x1][y1] + x1 - y1 - x2 + y2 &#125;</span></div><div class="line">    <span class="comment">//BR - f[x2][y2] = min &#123; f[x1][y1] + x1 + y1 - x2 - y2 &#125;</span></div><div class="line">    <span class="comment">//BL - f[x2][y2] = min &#123; f[x1][y1] - x1 + y1 + x2 - y2 &#125;</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G[<span class="number">1</span>].size(); ++i) &#123;</div><div class="line">        <span class="keyword">int</span> x = G[<span class="number">1</span>][i].first, y = G[<span class="number">1</span>][i].second;</div><div class="line">        f[x][y] = x + y - <span class="number">2</span>;</div><div class="line">        bit[<span class="number">0</span>].update(x, y, f[x][y] - x - y);</div><div class="line">        bit[<span class="number">1</span>].update(nm - x + <span class="number">1</span>, y, f[x][y] + x - y);</div><div class="line">        bit[<span class="number">2</span>].update(nm - x + <span class="number">1</span>, nm - y + <span class="number">1</span>, f[x][y] + x + y);</div><div class="line">        bit[<span class="number">3</span>].update(x, nm - y + <span class="number">1</span>, f[x][y] - x + y);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= p; ++i) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; G[i].size(); ++j) &#123;</div><div class="line">            <span class="keyword">int</span> x = G[i][j].first, y = G[i][j].second, val = INF;</div><div class="line">            val = min(val, bit[<span class="number">0</span>].query(x, y) + x + y);</div><div class="line">            val = min(val, bit[<span class="number">1</span>].query(nm - x + <span class="number">1</span>, y) - x + y);</div><div class="line">            val = min(val, bit[<span class="number">2</span>].query(nm - x + <span class="number">1</span>, nm - y + <span class="number">1</span>) - x - y);</div><div class="line">            val = min(val, bit[<span class="number">3</span>].query(x, nm - y + <span class="number">1</span>) + x - y);</div><div class="line">            f[x][y] = val;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) bit[j].newOne();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; G[i].size(); ++j) &#123;</div><div class="line">            <span class="keyword">int</span> x = G[i][j].first, y = G[i][j].second;</div><div class="line">            bit[<span class="number">0</span>].update(x, y, f[x][y] - x - y);</div><div class="line">            bit[<span class="number">1</span>].update(nm - x + <span class="number">1</span>, y, f[x][y] + x - y);</div><div class="line">            bit[<span class="number">2</span>].update(nm - x + <span class="number">1</span>, nm - y + <span class="number">1</span>, f[x][y] + x + y);</div><div class="line">            bit[<span class="number">3</span>].update(x, nm - y + <span class="number">1</span>, f[x][y] - x + y);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> x = G[p][<span class="number">0</span>].first, y = G[p][<span class="number">0</span>].second;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, f[x][y]);</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\nTime cost: %.2fs\n"</span>, <span class="number">1.0</span> * (clock() - _) / CLOCKS_PER_SEC);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 动态规划 </category>
            
            <category> 数据结构优化 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 二维BIT </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Codeforces Round 354 (Div. 2) E. The Last Fight Between Human and AI]]></title>
      <url>/2016/05/26/Codeforces%20Round%20354%20(Div.%202)%20E.%20The%20Last%20Fight%20Between%20Human%20and%20AI/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$给定一个N\le 10^5次多项式P(x)=a_nx^n+a_{n-1}x^{n-1}+\cdots+a_1x+a_0$<br>$现2个人轮流随意填P(x)的系数，填过的不能再填$<br>$现有一个多项式Q(x)=x-k，如果最终多项式P(x)可以整除Q(x)，那么后手赢$<br>$有一部分系数数已经被2个人填了，?表示还没填$<br>$现2个人最优操作的情况下，问后手是否能赢$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$假如所有系数a_i都是确定的，如果P(x)能被x-k整除$<br>$说明x-k是P(x)的一个因子，显然x=k是P(x)=0的一个根，k\neq 0$<br>$那么讨论一下k=0的情况：$<br>$如果a[0]=0，那么Q(x)已经整除P(x)，反之则不能整除$<br>$如果a[0]不确定，那么第一个填a[0]的人胜$<br>$再仔细看一下k\neq 0的情况：$<br>$如果系数全部确定的情况上面已经说了，代入x=k判断P(x)=0成立性$<br>$对于不完全确定的情况，我们先看一下只有1个不确定的情况：$<br>$令其他的确定系数的项的和为A，不确定的那项为a_ix^i$<br>$由P(x)=A+a_ix^i=0得，a_i=-{A\over x^i}，由于a_i可以是实数$<br>$那么最后一步的操作者有必胜策略$<br>$这样分2种情况讨论，每种情况里又有2种情况讨论这题就做完了$</p>
</blockquote>
<hr>
<blockquote>
<p>$对于如何算出P(k)，实际上只有从高位到低位乘起来$<br>$如果中间大于N\times max\{A_i\}那么就无解了，然后判是不是0就好了$<br>$当然对于zz选手的我，直接取很多素数对结果取模进行哈希判断也是可以哒$</p>
</blockquote>
<p>代码:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-05-26</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, k;</div><div class="line"><span class="keyword">int</span> a[N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> mod)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = n; ~i; --i) ret = (<span class="number">1L</span>L * ret * k + a[i]) % mod;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line">    <span class="keyword">clock_t</span> _ = clock();</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;k) == <span class="number">2</span>) &#123;</div><div class="line">        <span class="keyword">int</span> unknown = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i) &#123;</div><div class="line">            <span class="keyword">char</span> buf[<span class="number">10</span>]; <span class="built_in">scanf</span>(<span class="string">"%s"</span>, buf);</div><div class="line">            a[i] = *buf == <span class="string">'?'</span> ? INF : atoi(buf);</div><div class="line">            unknown += a[i] == INF;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> used = n + <span class="number">1</span> - unknown;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(k == <span class="number">0</span>) &#123;</div><div class="line">            <span class="comment">//a[0] is 0 will win</span></div><div class="line">            <span class="built_in">puts</span>(a[<span class="number">0</span>] == <span class="number">0</span> || a[<span class="number">0</span>] == INF &amp;&amp; (used &amp; <span class="number">1</span>) ? <span class="string">"Yes"</span> : <span class="string">"No"</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">if</span>(!unknown) &#123;</div><div class="line">                <span class="keyword">bool</span> ok = <span class="literal">true</span>;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2e9</span>; ; ++i) &#123;</div><div class="line">                    <span class="keyword">if</span>(calc(i)) &#123;ok = <span class="literal">false</span>; <span class="keyword">break</span>;&#125;</div><div class="line">                    <span class="keyword">if</span>(<span class="number">1.0</span> * (clock() - _) / CLOCKS_PER_SEC &gt; <span class="number">0.95</span>) <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="built_in">puts</span>(ok ? <span class="string">"Yes"</span> : <span class="string">"No"</span>);</div><div class="line">            &#125; <span class="keyword">else</span> <span class="built_in">puts</span>(~(n + <span class="number">1</span>) &amp; <span class="number">1</span> ? <span class="string">"Yes"</span> : <span class="string">"No"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\nTime cost: %.2fs\n"</span>, <span class="number">1.0</span> * (clock() - _) / CLOCKS_PER_SEC);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 技巧 </category>
            
            <category> 哈希 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[背包问题（01背包、完全背包、多重背包）]]></title>
      <url>/2016/05/18/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98%EF%BC%8801%E8%83%8C%E5%8C%85%E3%80%81%E5%AE%8C%E5%85%A8%E8%83%8C%E5%8C%85%E3%80%81%E5%A4%9A%E9%87%8D%E8%83%8C%E5%8C%85%EF%BC%89/</url>
      <content type="html"><![CDATA[<h2 id="Ⅰ-背包问题认知"><a href="#Ⅰ-背包问题认知" class="headerlink" title="Ⅰ. 背包问题认知"></a>Ⅰ. 背包问题认知</h2><ul>
<li>$物品：不可拆分，具有三种属性(体积w_i, 价值v_i, 个数c_i)$</li>
<li>$背包问题：将物品装入V大小的背包获得最优价值的问题$</li>
<li>$c_i=1时，称为01背包$</li>
<li>$c_i=\infty 时，称为完全背包$</li>
<li>$c_i=不定值时，称为多重背包$</li>
</ul>
<a id="more"></a>
<h2 id="Ⅱ-状态与初始化"><a href="#Ⅱ-状态与初始化" class="headerlink" title="Ⅱ. 状态与初始化"></a>Ⅱ. 状态与初始化</h2><h3 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h3><ul>
<li>$f[i][j]:前i件物品装入容量为j的背包所获得的最大价值$</li>
<li>$不放第i件物品: f[i-1][j]:= 前i-1件物品装入容量为j的背包$</li>
<li>$放入1件第i件物品: f[i-1][j-w_i]:= 前i-1件物品装入容量为j-w_i的背包$</li>
</ul>
<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><ol>
<li>$如果不要正好装满: f[0][0\sim V] = 0$</li>
<li>$如果需要正好装满: f[0][0] = 0，f[0][1\sim V] = -INF$</li>
<li>$初始化dp数组就是初始化f[0][x]:= “0件物品的合法状态”$<ul>
<li>$对于1，此时所有容量即f[0][x]都有合法的解0，即“什么都不装”$</li>
<li>$对于2，此时只有f[0][0]有合法解且解为0，其他属于非法状态，应赋值为-INF$</li>
</ul>
</li>
</ol>
<h2 id="Ⅲ-01背包"><a href="#Ⅲ-01背包" class="headerlink" title="Ⅲ. 01背包"></a>Ⅲ. 01背包</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//O(NV)</span></div><div class="line">f[<span class="number">0</span>][<span class="number">0</span> ~ V] = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= V; ++j)</div><div class="line">        <span class="keyword">if</span>(j &lt; w[i]) f[i][j] = f[i - <span class="number">1</span>][j];</div><div class="line">        <span class="keyword">else</span> f[i][j] = max(f[i - <span class="number">1</span>][j], f[i - <span class="number">1</span>][j - w[i]] + v[i]);</div><div class="line"></div><div class="line"><span class="comment">//O(NV) 滚动数组</span></div><div class="line">f[<span class="number">0</span> ~ V] = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = V; j &gt;= w[i]; --j)</div><div class="line">        f[j] = max(f[j], f[j - w[i]] + v[i]);</div></pre></td></tr></table></figure>
<h2 id="Ⅳ-完全背包"><a href="#Ⅳ-完全背包" class="headerlink" title="Ⅳ. 完全背包"></a>Ⅳ. 完全背包</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//O(NVK)</span></div><div class="line">f[<span class="number">0</span>][<span class="number">0</span> ~ V] = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= V; ++j)</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k * w[i] &lt;= j; ++k)</div><div class="line">            f[i][j] = max(f[i][j], f[i - <span class="number">1</span>][j - k * w[i]] + k * v[i]);</div><div class="line"></div><div class="line"><span class="comment">//O(NV)</span></div><div class="line">f[<span class="number">0</span>][<span class="number">0</span> ~ V] = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= V; ++j)</div><div class="line">        <span class="keyword">if</span>(j &lt; w[i]) f[i][j] = f[i - <span class="number">1</span>][j];</div><div class="line">        <span class="keyword">else</span> f[i][j] = max(f[i - <span class="number">1</span>][j], f[i][j - w[i]] + v[i]);</div><div class="line"></div><div class="line"><span class="comment">//O(NV) 滚动数组</span></div><div class="line">f[<span class="number">0</span> ~ V] = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = w[i]; j &lt;= V; ++j)</div><div class="line">        f[j] = max(f[j], f[j - w[i]] + v[i]);</div></pre></td></tr></table></figure>
<h2 id="Ⅴ-多重背包"><a href="#Ⅴ-多重背包" class="headerlink" title="Ⅴ. 多重背包"></a>Ⅴ. 多重背包</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//O(NVK)</span></div><div class="line">f[<span class="number">0</span>][<span class="number">0</span> ~ V] = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= V; ++j)</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= c[i] &amp;&amp; k * w[i] &lt;= j; ++k)</div><div class="line">            f[i][j] = max(f[i][j], f[i - <span class="number">1</span>][j - k * w[i]] + k * v[i]);</div><div class="line"></div><div class="line"><span class="comment">//O(NVK)</span></div><div class="line">f[<span class="number">0</span> ~ V] = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = V; j &gt;= <span class="number">0</span>; --j)</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= c[i] &amp;&amp; k * w[i] &lt;= j; ++k)</div><div class="line">            f[j] = max(f[j], f[j - k * w[i]] + k * v[i]);</div></pre></td></tr></table></figure>
<h2 id="Ⅵ-多重背包の优化"><a href="#Ⅵ-多重背包の优化" class="headerlink" title="Ⅵ. 多重背包の优化"></a>Ⅵ. 多重背包の优化</h2><h3 id="二进制优化"><a href="#二进制优化" class="headerlink" title="二进制优化"></a>二进制优化</h3><ul>
<li>$c_i=1+2+4+\cdots+2^k+a, 0\le a &lt; 2^{k+1}$</li>
<li>$1, 2, 4, \cdots, 2^k可以表示0\sim 2^{k+1}-1的整数，基于二进制表示$</li>
<li>$再由a即可得到0\sim c_i的所有整数了$</li>
<li>$这样物品个数由c_i个变为logc_i个，时间复杂度即为O(NVlogK)$</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//O(NVlogK)</span></div><div class="line">f[<span class="number">0</span> ~ V] = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</div><div class="line">    <span class="keyword">int</span> num = c[i];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; num &gt; <span class="number">0</span>; k &lt;&lt;= <span class="number">1</span>)&#123;</div><div class="line">        <span class="keyword">int</span> mul = min(k, num);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = V; mul * w[i] &lt;= j; --j)&#123;</div><div class="line">            f[i] = max(f[j], f[j - mul * w[i]] + mul * v[i])</div><div class="line">        &#125;</div><div class="line">        num -= mul;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="单调队列优化"><a href="#单调队列优化" class="headerlink" title="单调队列优化"></a>单调队列优化</h3><ul>
<li>$先看O(NVK)的转移方程：f[i][j] = max\{f[i-1][j-k\times w_i]+k\times v_i\}, k\in [0, c_i]$</li>
<li>$首先j\%w_i不同的状态间是独立的，即f[i][p\times w_i+r]肯定是由f[i-1][q\times w_i + r]转移过来的$</li>
<li>$我们来推一推，令j=p\times w_i +r$</li>
<li>$f[i][j] = max\{f[i-1][j-k\times w_i]+k\times v_i\}, k\in [0, c_i]$<br>$f[i][p\times w_i +r] = max\{f[i-1][(p-k)\times w_i + r]+k\times v_i\}, k\in [0, c_i]$<br>$令q=p-k，得:$<br>$f[i][p\times w_i +r] = max\{f[i-1][q\times w_i + r]+(p-q)\times v_i\}, q\in [p-c_i, p]$<br>$按照w_i分类后p是定值，得:$<br>$f[i][p\times w_i +r] = max\{f[i-1][q\times w_i + r]-q\times v_i\}+p\times v_i, q\in [p-c_i, p]$<br>$令f(x)=x\times w_i + r，得:$<br>$f(p)=max\{f(q)-q\times v_i\}+p\times v_i, q\in [p-c_i, p]$</li>
<li>$这个就是我们熟悉的窗口大小为c_i的单调队列优化的式子辣$</li>
<li>$单调队列优化搞一波，时间复杂度即为O(NV)$</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//O(NV)</span></div><div class="line"><span class="keyword">int</span> Q[V], f[<span class="number">2</span>][V]; <span class="comment">//单调队列，滚动数组</span></div><div class="line"></div><div class="line"><span class="keyword">int</span> z = <span class="number">0</span>;</div><div class="line"><span class="built_in">memset</span>(f[z], <span class="number">0</span>, <span class="keyword">sizeof</span> f[z]);</div><div class="line">f[z][<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">    <span class="built_in">memset</span>(f[!z], <span class="number">0</span>, <span class="keyword">sizeof</span> f[!z]);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> r = <span class="number">0</span>; r &lt; w[i]; ++r) &#123;</div><div class="line">        <span class="keyword">int</span> L = <span class="number">0</span>, R = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> p = <span class="number">0</span>; p * w[i] + r &lt;= V; ++p) &#123;</div><div class="line">            <span class="keyword">while</span>(L &lt; R &amp;&amp; f[z][Q[R - <span class="number">1</span>] * w[i] + r] - Q[R - <span class="number">1</span>] * v[i]</div><div class="line">                    &lt;= f[z][p * w[i] + r] - p * v[i]) --R;</div><div class="line">            Q[R++] = p;</div><div class="line">            <span class="keyword">while</span>(L &lt; R &amp;&amp; p - c[i] &gt; Q[L]) ++L;</div><div class="line">            <span class="keyword">int</span> q = Q[L];</div><div class="line">            f[!z][p * w[i] + r] = (f[z][q * w[i] + r] - q * v[i]) + p * v[i];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    z = !z;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 小结 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Codeforces Round 351 E. Levels and Regions（斜率优化dp）]]></title>
      <url>/2016/05/11/Codeforces%20Round%20351%20E.%20Levels%20and%20Regions%EF%BC%88%E6%96%9C%E7%8E%87%E4%BC%98%E5%8C%96dp%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$将N\le 2\times 10^5个关卡划分成M\le min(50, n)个组，组内关卡连续，t_i\le 10^5$<br>$定义游戏规则，每次选择第一个未全部完成的组，假设组处于关卡区间[l, r]$<br>$选择到组内第一个未完成的关卡的概率p_i=\frac{t_i}{\sum_{i=l}^i t_i}$<br>$求怎样划分组使得通过所有组的期望打关卡次数最小，求这个次数，误差小于10^{-4}$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$重复选择某个东西，选到的概率是p_i，那么期望次数就是{1\over p_i}$<br>$f[j][i]:=前i个关卡分成j组的最小期望$<br>$f[j][i]=min\{ f[j-1][k]+cost(k+1, i) \}，然后看到就知道是斜率优化了。。$<br>$然后如何O(1)计算cost(k+1, i)呢$<br>$cost(k+1, i)=\sum_{i=k+1}^i {1\over p_i}=\sum_{i=k+1}^i\frac{\sum_{i=k+1}^i t_i}{t_i}$<br>$=\sum_{i=k+1}^i\frac{\sum_{i=1}^i t_i-\sum_{i=1}^k t_i}{t_i}$<br>$令sum_i=\sum_{i=1}^i t_i$<br>$则上式=\sum_{i=k+1}^i\frac{sum_i-sum_k}{t_i}$<br>$=\sum_{i=k+1}^i(\frac{sum_i}{t_i}-{1\over t_i}\cdot sum_k)$<br>$=\sum_{i=k+1}^i\frac{sum_i}{t_i}-sum_k\cdot \sum_{i=k+1}^i {1\over t_i}$<br>$令pre_i=\sum_{i=1}^i \frac{sum_i}{t_i}，rev_i=\sum_{i=1}^i {1\over t_i}$<br>$则上式=pre_i-pre_k-sum_i\cdot(rev_i-rev_k)$<br>$然后就是sb题了，随便推推套进去就ok了$<br>$时间复杂度O(mn)$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-05-10</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m, q[N];</div><div class="line"><span class="keyword">double</span> sum[N], rev[N], pre[N];</div><div class="line"><span class="keyword">double</span> f[<span class="number">55</span>][N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">double</span> <span class="title">up</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> k, <span class="keyword">int</span> j)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> (f[p][j] - pre[j] + rev[j] * sum[j]) -</div><div class="line">           (f[p][k] - pre[k] + rev[k] * sum[k]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">double</span> <span class="title">dw</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> j)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> sum[j] - sum[k];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> k, <span class="keyword">int</span> j, <span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> up(p, k, j) * dw(j, i) &gt;= up(p, j, i) * dw(k, j);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line">    <span class="keyword">clock_t</span> _ = clock();</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m) == <span class="number">2</span>) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">            <span class="keyword">int</span> x; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line">            sum[i] = sum[i - <span class="number">1</span>] + x;</div><div class="line">            rev[i] = rev[i - <span class="number">1</span>] + <span class="number">1.</span> / x;</div><div class="line">            pre[i] = pre[i - <span class="number">1</span>] + sum[i] / x;</div><div class="line">            f[<span class="number">1</span>][i] = pre[i];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">2</span>; j &lt;= m; ++j) &#123;</div><div class="line">            <span class="keyword">int</span> L = <span class="number">0</span>, R = <span class="number">0</span>;</div><div class="line">            q[R++] = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">                <span class="keyword">while</span>(L + <span class="number">1</span> &lt; R &amp;&amp; up(j - <span class="number">1</span>, q[L], q[L + <span class="number">1</span>]) &lt;=</div><div class="line">                        rev[i] * dw(q[L], q[L + <span class="number">1</span>])) ++L;</div><div class="line">                <span class="keyword">int</span> k = q[L];</div><div class="line">                f[j][i] = f[j - <span class="number">1</span>][k] + pre[i] - pre[k] - sum[k] * (rev[i] - rev[k]);</div><div class="line">                <span class="keyword">while</span>(L + <span class="number">1</span> &lt; R &amp;&amp; check(j - <span class="number">1</span>, q[R - <span class="number">2</span>], q[R - <span class="number">1</span>], i)) --R;</div><div class="line">                q[R++] = i;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%.12f\n"</span>, f[m][n]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\nTime cost: %.2fs\n"</span>, <span class="number">1.0</span> * (clock() - _) / CLOCKS_PER_SEC);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 动态规划 </category>
            
            <category> 斜率优化 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 斜率优化 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDU 2829 Lawrence（斜率优化dp）]]></title>
      <url>/2016/05/11/HDU%202829%20Lawrence%EF%BC%88%E6%96%9C%E7%8E%87%E4%BC%98%E5%8C%96dp%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$N\le 1000个点，点权c_i \le 100，划分成0\le M&lt;N个连续段$<br>$每段的权值w(x, y)=\sum_{i=x}^{y-1}\sum_{j=i+1}^y c_i\cdot c_j$<br>$求一个划分使得段权值和最小，输出这个权值和$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$f[j][i]:=前i个点划分成j段的最小权值和$<br>$f[j][i]=min\{ f[j-1][k]+w(k+1, i) \}，然后斜率优化你懂的$<br>$s_i=\sum_{i=1}^n c_i，s2_i=\sum_{i=1}^n c_i^2$<br>$w(i, j)=\left((s_j-s_{i-1})^2-(s2_j-s2_{i-1}) \right)/2$<br>$slope(k, j)\Rightarrow $<br>$f_j+\left((s_i-s_{j})^2-(s2_i-s2_{j}) \right)/2&lt;f_k+\left((s_i-s_{k})^2-(s2_i-s2_{k}) \right)/2$<br>$slope(k, j)=\frac{(2f_j+s_j^2+s2_j)-(2f_k+s_k^2+s2_k)}{2(s_j-s_k)}&lt;s_i$<br>$然后就做完了，时间复杂度O(n^2)$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-05-10</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e3</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">int</span> n, m, q[N];</div><div class="line">LL f[<span class="number">2</span>][N]; <span class="comment">// f[j][i]:= j段到i的最小值</span></div><div class="line">LL s[N], s2[N]; <span class="comment">//sum, square sum</span></div><div class="line"></div><div class="line"><span class="comment">//f[j][i] = min &#123; 2f[k] + [ (s[i] - s[k])^2 - (s2[i] - s2[k]) ] / 2 &#125;</span></div><div class="line"><span class="comment">//slope(k, j):= &#123; (2f[j]+s[j]*s[j]+s2[j])-(2f[k]+s[k]*s[k]+s2[k]) &#125; /</span></div><div class="line"><span class="comment">// &#123; 2(s[j] - s[k]) &#125; &lt;= s[i]</span></div><div class="line"></div><div class="line"><span class="function">LL <span class="title">up</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> k, <span class="keyword">int</span> j)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> (<span class="number">2</span> * f[p][j] + s[j] * s[j] + s2[j]) -</div><div class="line">           (<span class="number">2</span> * f[p][k] + s[k] * s[k] + s2[k]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">dw</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> j)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">2</span> * (s[j] - s[k]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> k, <span class="keyword">int</span> j, <span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> up(p, k, j) * dw(j, i) &gt;= up(p, j, i) * dw(k, j);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line">    <span class="keyword">clock_t</span> _ = clock();</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m) == <span class="number">2</span> &amp;&amp; (n || m)) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%I64d"</span>, s + i);</div><div class="line">            s2[i] = s2[i - <span class="number">1</span>] + s[i] * s[i];</div><div class="line">            s[i] += s[i - <span class="number">1</span>];</div><div class="line"><span class="comment">//            printf("s[%d] = %I64d, s2[%d] = %I64d\n", i, s[i], i, s2[i]);</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> p = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i) &#123;</div><div class="line">            f[p][i] = (s[i] * s[i] - s2[i]) / <span class="number">2</span>;</div><div class="line"><span class="comment">//            printf("f[0][%d] = %I64d\n", i, f[p][i]);</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) &#123;</div><div class="line">            <span class="keyword">int</span> L = <span class="number">0</span>, R = <span class="number">0</span>;</div><div class="line">            q[R++] = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">                <span class="keyword">while</span>(L + <span class="number">1</span> &lt; R &amp;&amp; up(p, q[L], q[L + <span class="number">1</span>]) &lt;= s[i] * dw(q[L], q[L + <span class="number">1</span>]))</div><div class="line">                    ++L;</div><div class="line">                <span class="keyword">int</span> k = q[L];</div><div class="line">                f[!p][i] = f[p][k] + ((s[i] - s[k]) * (s[i] - s[k]) -</div><div class="line">                                      (s2[i] - s2[k])) / <span class="number">2</span>;</div><div class="line">                <span class="keyword">while</span>(L + <span class="number">1</span> &lt; R &amp;&amp; check(p, q[R - <span class="number">2</span>], q[R - <span class="number">1</span>], i)) --R;</div><div class="line">                q[R++] = i;</div><div class="line">            &#125;</div><div class="line">            p = !p;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, f[p][n]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\nTime cost: %.2fs\n"</span>, <span class="number">1.0</span> * (clock() - _) / CLOCKS_PER_SEC);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 动态规划 </category>
            
            <category> 斜率优化 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 斜率优化 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[斜率优化dp小结]]></title>
      <url>/2016/05/11/%E6%96%9C%E7%8E%87%E4%BC%98%E5%8C%96dp%E5%B0%8F%E7%BB%93/</url>
      <content type="html"><![CDATA[<h2 id="Ⅰ-斜率优化认知"><a href="#Ⅰ-斜率优化认知" class="headerlink" title="Ⅰ. 斜率优化认知"></a>Ⅰ. 斜率优化认知</h2><ul>
<li>这东西英文名叫$Convex Hull Trick (CHT)$</li>
<li>主要优化形如$f_i = min\{ f_j + cost(j+1, i) \}的这种dp$</li>
<li>由于等号右边的式子并不能$O(1)$计算，所以我们需要一些技巧来优化</li>
</ul>
<a id="more"></a>
<h2 id="Ⅱ-斜率优化"><a href="#Ⅱ-斜率优化" class="headerlink" title="Ⅱ. 斜率优化"></a>Ⅱ. 斜率优化</h2><ul>
<li>$懒得写引子了，就直接推推推吧$</li>
<li>$对于当前状态i，有2个决策j和k，不妨假设k &lt; j &lt; i，如果决策j优于k，则有：$<br>$$f_j + cost(j+1, i)&lt;f_k + cost(k+1, i)$$</li>
<li>$如果以上这个式子可以化简到：$<br>$$ \frac{Y(j)-Y(k)}{X(j)-X(k)}&lt;F(i) $$</li>
<li>$记这个式子为slope(k, j)=\frac{Y(j)-Y(k)}{X(j)-X(k)}&lt;F(i)，即j优于k$</li>
<li>$便可以使用优化，这个式子很斜率，故称这个优化方法为斜率优化$</li>
</ul>
<hr>
<ul>
<li>$我们发现以上并没有什么卵用，先说一个结论$</li>
<li>$结论：如果slope(k, j)\ge slope(j, i)，k &lt; j &lt; i，那么j决策是不优的可以删除$</li>
<li>$证明：$</li>
<li>$如果slope(j, i) &lt; F(i)，那么i优于j，j可以删除$</li>
<li>$如果slope(j, i)\ge F(i)，虽然j优于i，但是slope(k, j)\ge F(i)，k比j优，j还是可以删除   \blacksquare$</li>
<li>$然后就可以用这个结论来维护一个单调队列来搞了$</li>
</ul>
<hr>
<h2 id="Ⅲ-题目讲解"><a href="#Ⅲ-题目讲解" class="headerlink" title="Ⅲ. 题目讲解"></a>Ⅲ. 题目讲解</h2><h3 id="HDU-3507-Print-Article"><a href="#HDU-3507-Print-Article" class="headerlink" title="HDU 3507 Print Article"></a>HDU 3507 Print Article</h3><p>分析:<br>$f_i:=打印前i个字符的最小代价$<br>$f_i = min\{ f_j + (sum_i - sum_{j})^2 + M \}，sum_i=\sum_{i=1}^n c_i$<br>$假设k&lt;j&lt;i，假设j优于k，可得：$<br>$$ f_j + (sum_i - sum_{j})^2 + M &lt; f_k + (sum_i - sum_{k})^2 + M $$<br>$$ f_j +sum_i^2-2\cdot sum_i \cdot sum_j + sum_j^2 &lt; f_k +sum_i^2-2\cdot sum_i \cdot sum_k + sum_k^2 $$<br>$$ (f_j + sum_j^2)-(f_k+sum_k^2) &lt; 2\cdot sum_i\cdot (sum_j-sum_k) $$<br>$$ \frac{(f_j + sum_j^2)-(f_k+sum_k^2)}{sum_j-sum_k} &lt; sum_i $$<br>$即j优于k的条件是：slope(k, j)=\frac{(f_j + sum_j^2)-(f_k+sum_k^2)}{sum_j-sum_k} &lt; sum_i $</p>
<ul>
<li>$维护单调队列，开区间[L, R)：$</li>
<li>$先删除队头不优的元素，即slope(q[L], q[L+1])\le sum_i$</li>
<li>$此时q[L+1]不差于q[L]，所以q[L]可以删除$</li>
<li>$用最优的j=q[L]更新f_i$</li>
<li>$再用f_i去删除队尾的不优元素，即slope(q[R-2], q[R-1])\ge slope(q[R-1], i)$</li>
<li>$时间复杂度O(n)$</li>
</ul>
<p>参考代码：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-05-10</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">int</span> s[N], q[N];</div><div class="line"><span class="keyword">int</span> f[N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">up</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> j)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> (f[j] + s[j] * s[j]) - (f[k] + s[k] * s[k]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dw</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> j)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">2</span> * (s[j] - s[k]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> j, <span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> up(k, j) * dw(j, i) &gt;= up(j, i) * dw(k, j);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line">    <span class="keyword">clock_t</span> _ = clock();</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m) == <span class="number">2</span>) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, s + i);</div><div class="line">            s[i] += s[i - <span class="number">1</span>];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> L = <span class="number">0</span>, R = <span class="number">0</span>;</div><div class="line">        q[R++] = f[<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">            <span class="keyword">while</span>(L + <span class="number">1</span> &lt; R &amp;&amp; up(q[L], q[L + <span class="number">1</span>]) &lt;= s[i] * dw(q[L], q[L + <span class="number">1</span>])) ++L;</div><div class="line">            <span class="keyword">int</span> j = q[L];</div><div class="line">            f[i] = f[j] + m + (s[i] - s[j]) * (s[i] - s[j]);</div><div class="line">            <span class="keyword">while</span>(L + <span class="number">1</span> &lt; R &amp;&amp; check(q[R - <span class="number">2</span>], q[R - <span class="number">1</span>], i)) --R;</div><div class="line">            q[R++] = i;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, f[n]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\nTime cost: %.2fs\n"</span>, <span class="number">1.0</span> * (clock() - _) / CLOCKS_PER_SEC);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 小结 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 斜率优化 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDU 5375 Gray code（线性dp）]]></title>
      <url>/2016/05/09/HDU%205375%20Gray%20code%EF%BC%88%E7%BA%BF%E6%80%A7dp%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$N\le 2\times 10^5长度的二进制数，由0、1、?组成，?代表01都可$<br>$每位有个权值，w_i\le 1000$<br>$如果将这个二进制数转化成格雷码，1获得这个权值，0不获得$<br>$求怎样确定这个二进制数才能获得最大权值，输出这个权值$<br><a id="more"></a></p>
</blockquote>
<p>分析：</p>
<blockquote>
<p>$百度得到公式：G_i=B_i\oplus B_{i+1}，i\in [0, n-1]，B_n=0，这个是从低位到高位的$<br>$有了这个公式直接dp就可以了$<br>$f[i][2]:=从高位到低位，前i位二进制位，且第i位为0/1的最大权值$<br>$转移显然就f[i][b]=max(f[i-1][b], f[i-1][b\oplus 1]+w[i])$<br>$ans=max(f[n][0], f[n][1])$<br>$时间复杂度O(n)$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-05-09</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="keyword">char</span> s[N];</div><div class="line"><span class="keyword">int</span> f[N][<span class="number">2</span>]; <span class="comment">//binary from high bit to low bit</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line">    <span class="keyword">clock_t</span> _ = clock();</div><div class="line"></div><div class="line">    <span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">while</span>(t--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s + <span class="number">1</span>);</div><div class="line">        n = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</div><div class="line"></div><div class="line">        <span class="built_in">memset</span>(f, <span class="number">0xc0</span>, <span class="keyword">sizeof</span> f);</div><div class="line">        f[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">            <span class="keyword">int</span> w; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;w);</div><div class="line">            <span class="keyword">if</span>(s[i] == <span class="string">'0'</span>) f[i][<span class="number">0</span>] = max(f[i - <span class="number">1</span>][<span class="number">0</span>], f[i - <span class="number">1</span>][<span class="number">1</span>] + w);</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s[i] == <span class="string">'1'</span>) f[i][<span class="number">1</span>] = max(f[i - <span class="number">1</span>][<span class="number">1</span>], f[i - <span class="number">1</span>][<span class="number">0</span>] + w);</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                f[i][<span class="number">0</span>] = max(f[i - <span class="number">1</span>][<span class="number">0</span>], f[i - <span class="number">1</span>][<span class="number">1</span>] + w);</div><div class="line">                f[i][<span class="number">1</span>] = max(f[i - <span class="number">1</span>][<span class="number">1</span>], f[i - <span class="number">1</span>][<span class="number">0</span>] + w);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> ans = max(f[n][<span class="number">0</span>], f[n][<span class="number">1</span>]);</div><div class="line">        <span class="keyword">static</span> <span class="keyword">int</span> kase = <span class="number">0</span>;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d: %d\n"</span>, ++kase, ans);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\nTime cost: %.2fs\n"</span>, <span class="number">1.0</span> * (clock() - _) / CLOCKS_PER_SEC);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 动态规划 </category>
            
            <category> 线性dp </category>
            
        </categories>
        
        
        <tags>
            
            <tag> dp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDU 5372 Segment Game（BIT）]]></title>
      <url>/2016/05/09/HDU%205372%20Segment%20Game%EF%BC%88BIT%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$N\le 2\times 10^5次操作$<br>$0 l:如果是第i次添加操作，那么加入一条长度为i的线段，即[l, l+i]$<br>$1 i:删除第i次添加操作添加的线段$<br>$输出每个添加操作的线段所完全包含的线段个数$<br><a id="more"></a></p>
</blockquote>
<p>分析：</p>
<blockquote>
<p>$破题卡nlog^2n的cdq分治做法。。$<br>$然后赛上就卡死了，事实上每次添加的线段长度都更长这个条件很苛刻的$<br><img src="http://7xru22.com1.z0.glb.clouddn.com/16-5-9/81258324.jpg" alt=""><br>$画个图发现就五种情况，那么答案就显然易见了$<br>$并且发现①②可以合并成左端点在A外的情况$<br>$③④可以合并成右端点在B外的情况$<br>$ans(⑤) = 总线段数-这两种情况的和$<br>$2个BIT分别维护下左右端点的数量即可$<br>$我自己脑补了题意。。特么的题意是删除第i次添加操作的，，这个添加二字$<br>$好吧，时间复杂度O(nlogn)$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-05-09</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BIT</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> n, b[N];</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> _n)</span> </span>&#123;</div><div class="line">        n = _n;</div><div class="line">        <span class="built_in">memset</span>(b, <span class="number">0</span>, <span class="keyword">sizeof</span> b);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> v)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span>(; i &lt;= n; i += i &amp; -i) b[i] += v;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(; i; i -= i &amp; -i) ret += b[i];</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line">&#125; bit[<span class="number">2</span>];</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, op[N], x[N], y[N];</div><div class="line"><span class="keyword">int</span> wh[N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line">    <span class="keyword">clock_t</span> _ = clock();</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) == <span class="number">1</span>) &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; xs[<span class="number">2</span>];</div><div class="line">        <span class="keyword">int</span> addStp = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, op + i, x + i);</div><div class="line">            <span class="keyword">if</span>(op[i] == <span class="number">1</span>) <span class="keyword">continue</span>;</div><div class="line">            wh[++addStp] = i; y[i] = x[i] + addStp;</div><div class="line">            xs[<span class="number">0</span>].push_back(x[i]);</div><div class="line">            xs[<span class="number">1</span>].push_back(y[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i) &#123;</div><div class="line">            sort(xs[i].begin(), xs[i].end());</div><div class="line">            xs[i].resize(unique(xs[i].begin(), xs[i].end()) - xs[i].begin());</div><div class="line">            bit[i].init(xs[i].size());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">static</span> <span class="keyword">int</span> kase = <span class="number">0</span>;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d:\n"</span>, ++kase);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">            <span class="keyword">if</span>(op[i] == <span class="number">1</span>) &#123;  <span class="comment">//delete</span></div><div class="line">                <span class="keyword">int</span> t = wh[x[i]];</div><div class="line">                <span class="keyword">int</span> l = lower_bound(xs[<span class="number">0</span>].begin(), xs[<span class="number">0</span>].end(), x[t]) - xs[<span class="number">0</span>].begin() + <span class="number">1</span>;</div><div class="line">                <span class="keyword">int</span> r = lower_bound(xs[<span class="number">1</span>].begin(), xs[<span class="number">1</span>].end(), y[t]) - xs[<span class="number">1</span>].begin() + <span class="number">1</span>;</div><div class="line"></div><div class="line">                bit[<span class="number">0</span>].add(l, <span class="number">-1</span>);</div><div class="line">                bit[<span class="number">1</span>].add(r, <span class="number">-1</span>);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">int</span> l = lower_bound(xs[<span class="number">0</span>].begin(), xs[<span class="number">0</span>].end(), x[i]) - xs[<span class="number">0</span>].begin() + <span class="number">1</span>;</div><div class="line">                <span class="keyword">int</span> r = lower_bound(xs[<span class="number">1</span>].begin(), xs[<span class="number">1</span>].end(), y[i]) - xs[<span class="number">1</span>].begin() + <span class="number">1</span>;</div><div class="line"></div><div class="line">                <span class="keyword">int</span> all = i - <span class="number">1</span>;</div><div class="line">                <span class="keyword">int</span> out = bit[<span class="number">0</span>].sum(l - <span class="number">1</span>) + all - bit[<span class="number">1</span>].sum(r);</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, all - out);</div><div class="line"></div><div class="line">                bit[<span class="number">0</span>].add(l, <span class="number">1</span>);</div><div class="line">                bit[<span class="number">1</span>].add(r, <span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\nTime cost: %.2fs\n"</span>, <span class="number">1.0</span> * (clock() - _) / CLOCKS_PER_SEC);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<blockquote>
<p>$当然这题如果没有这个严格的条件限制，cdq分治就可以做更一般的情况了$<br>$就转化成了右端点排序的离线sb题了$<br>$时间复杂度是O(nlog^2n)$</p>
<p>$代码由于和之前那样没注意到那个题意的毒，就不贴了$</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 数据结构 </category>
            
            <category> 树状数组 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> BIT </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CQUOJ 21465 部落Mod（并查集、删点 | 启发式合并）]]></title>
      <url>/2016/05/09/CQUOJ%2021465%20%E9%83%A8%E8%90%BDMod%EF%BC%88%E5%B9%B6%E6%9F%A5%E9%9B%86%E3%80%81%E5%88%A0%E7%82%B9%20%20%E5%90%AF%E5%8F%91%E5%BC%8F%E5%90%88%E5%B9%B6%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$N\le 10^5个点，M\le 10^6个操作$<br>$U a b:合并a，b$<br>$D a:移除a所在的集合关系$<br>$S a:询问a所在的集合大小$<br>$F a b:询问a和b是否在同一集合$<br><a id="more"></a></p>
</blockquote>
<p>分析：</p>
<blockquote>
<p>$暴力的做法就直接不路径压缩，只按秩合并保证树高，同时用set维护每棵子树的元素$<br>$对于D操作，直接暴力遍历根节点的set重建，看起来复杂度很高$<br>$实际均摊分析一下，暴力重建操作与树大小有关，树的大小与操作次数有关$<br>$相当于把重建操作均摊到每一次建立操作上了$<br>$按秩启发式合并加上set的复杂度，使得每次复杂度是log^2 n的$<br>$总时间复杂度为O(mlog^2n)$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-05-07</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DSU</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> n, p[N];</div><div class="line">    <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; s[N];</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> _n)</span> </span>&#123;</div><div class="line">        n = _n;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) resume(i);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">resume</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">        p[i] = i;</div><div class="line">        s[i].clear();</div><div class="line">        s[i].insert(i);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> p[x] == x ? x : find(p[x]);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">        x = find(x);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> u : s[x]) &#123;</div><div class="line">            <span class="keyword">if</span>(u == x) <span class="keyword">continue</span>;</div><div class="line">            resume(u);</div><div class="line">        &#125;</div><div class="line">        resume(x);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">unite</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">        x = find(x), y = find(y);</div><div class="line">        <span class="keyword">if</span>(x == y) <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">if</span>(s[x].size() &gt; s[y].size()) swap(x, y);</div><div class="line">        p[x] = y;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> u : s[x]) s[y].insert(u);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">        x = find(x);</div><div class="line">        <span class="keyword">return</span> s[x].size();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">same</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">        x = find(x), y = find(y);</div><div class="line">        <span class="keyword">return</span> x == y;</div><div class="line">    &#125;</div><div class="line">&#125; dsu;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line">    <span class="keyword">clock_t</span> _ = clock();</div><div class="line"></div><div class="line">    <span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">while</span>(t--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">        dsu.init(n);</div><div class="line">        <span class="keyword">while</span>(m--) &#123;</div><div class="line">            <span class="keyword">char</span> op[<span class="number">2</span>];</div><div class="line">            <span class="keyword">int</span> x, y; <span class="built_in">scanf</span>(<span class="string">"%s%d"</span>, op, &amp;x);</div><div class="line">            <span class="keyword">if</span>(*op == <span class="string">'U'</span>) &#123;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;y);</div><div class="line">                dsu.unite(x, y);</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(*op == <span class="string">'D'</span>) dsu.del(x);</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(*op == <span class="string">'S'</span>) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, dsu.size(x));</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;y);</div><div class="line">                <span class="built_in">puts</span>(dsu.same(x, y) ? <span class="string">"Yes"</span> : <span class="string">"No"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\nTime cost: %.2fs\n"</span>, <span class="number">1.0</span> * (clock() - _) / CLOCKS_PER_SEC);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<blockquote>
<p>$事实上有更加优美的做法，$<a href="http://www.cppblog.com/menjitianya/archive/2015/12/10/212447.html" target="_blank" rel="external">并查集删点</a><br>$事实对于D操作，可以直接把这棵子树连到其它地方去，比如用0当作废弃点$<br>$对于重新合并的时候，直接rehash这个节点的id，这样之前的“废弃树”结构没变，这个点也新建了$<br>$非常完美的姿势做法，就是空间复杂度等于操作复杂度了，由于rehash这个原因$<br>$时间复杂度O(m\alpha(n))，空间复杂度O(m)$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-05-07</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e6</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DSU</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> n, tim, id[N], p[N], sz[N];</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> _n)</span> </span>&#123;</div><div class="line">        n = _n; tim = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i) resume(i);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">resume</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">        id[i] = tim;</div><div class="line">        p[tim] = tim;</div><div class="line">        sz[tim] = <span class="number">1</span>;</div><div class="line">        <span class="keyword">return</span> tim++;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> p[x] = p[x] == x ? x : find(p[x]);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findResume</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> y = id[x];</div><div class="line">        <span class="keyword">int</span> fa = find(y);</div><div class="line">        <span class="keyword">if</span>(fa == <span class="number">0</span>) <span class="keyword">return</span> resume(x);</div><div class="line">        <span class="keyword">return</span> fa;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">unite</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">        x = findResume(x), y = findResume(y);</div><div class="line">        <span class="keyword">if</span>(x == y) <span class="keyword">return</span>;</div><div class="line">        p[x] = y;</div><div class="line">        sz[y] += sz[x];</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">        x = findResume(x);</div><div class="line">        p[x] = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> sz[findResume(x)];</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">same</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> findResume(x) == findResume(y);</div><div class="line">    &#125;</div><div class="line">&#125; dsu;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line">    <span class="keyword">clock_t</span> _ = clock();</div><div class="line"></div><div class="line">    <span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">while</span>(t--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">        dsu.init(n);</div><div class="line">        <span class="keyword">while</span>(m--) &#123;</div><div class="line">            <span class="keyword">char</span> op[<span class="number">2</span>];</div><div class="line">            <span class="keyword">int</span> x, y; <span class="built_in">scanf</span>(<span class="string">"%s%d"</span>, op, &amp;x);</div><div class="line">            <span class="keyword">if</span>(*op == <span class="string">'U'</span>) &#123;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;y);</div><div class="line">                dsu.unite(x, y);</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(*op == <span class="string">'D'</span>) dsu.del(x);</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(*op == <span class="string">'S'</span>) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, dsu.size(x));</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;y);</div><div class="line">                <span class="built_in">puts</span>(dsu.same(x, y) ? <span class="string">"Yes"</span> : <span class="string">"No"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\nTime cost: %.2fs\n"</span>, <span class="number">1.0</span> * (clock() - _) / CLOCKS_PER_SEC);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 数据结构 </category>
            
            <category> 并查集 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 并查集 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CQUOJ 21463 Angela Sequence（dp）]]></title>
      <url>/2016/05/09/CQUOJ%2021463%20Angela%20Sequence%EF%BC%88dp%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$N\le 10^5个序列，A_i\le 10^5，定义任意2个相邻数都不互质的序列为Angela序列$<br>$求最长Angela子序列的长度$<br><a id="more"></a></p>
</blockquote>
<p>分析：</p>
<blockquote>
<p>$10^5就存素因子辣，素因子不会太多，2\times 3\times 5\times 7\times 11\times 13\times 15&gt;10^5，所以也就6个$<br>$状态就f[i][prime]，前i个数，选取第i个数以prime素因子结尾的最大长度$<br>$然后转移就分解这个数，然后f[i][prime]= max\{f[i-1][prime]+1\}$<br>$再把自己max一下，f[i][prime] = max\{f[i][prime]\}$<br>$ans = max\{f[i][prime]\}$<br>$由于转移之和之前的有关系，所以就滚动数组优化下空间$<br>$复杂度就O(n\times 分解复杂度)$<br>$我也搞不清用素数试除的分解复杂度是多少，应该比O(\sqrt{n})好吧$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-05-08</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; prime;</div><div class="line"><span class="keyword">int</span> f[N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">gao</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">bool</span> vis[N] = &#123;&#125;;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; N; ++i) &#123;</div><div class="line">        <span class="keyword">if</span>(vis[i]) <span class="keyword">continue</span>;</div><div class="line">        prime.push_back(i);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i + i; j &lt; N; j += i) vis[j] = <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//2*3*5*7*11*13   6 primes</span></div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; factorize(<span class="keyword">int</span> x) &#123;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; factor;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> p : prime) &#123;</div><div class="line">        <span class="keyword">if</span>(x % p == <span class="number">0</span>) &#123;</div><div class="line">            factor.push_back(p);</div><div class="line">            <span class="keyword">while</span>(x % p == <span class="number">0</span>) x /= p;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(x == <span class="number">1</span>) <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> factor;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line">    <span class="keyword">clock_t</span> _ = clock();</div><div class="line"></div><div class="line">    gao();</div><div class="line">    <span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">while</span>(t--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">        <span class="built_in">memset</span>(f, <span class="number">0</span>, <span class="keyword">sizeof</span> f);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">            <span class="keyword">int</span> x; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; factor = factorize(x);</div><div class="line"></div><div class="line">            <span class="keyword">int</span> cur = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> fac : factor) &#123;</div><div class="line">                f[fac] = max(f[fac], f[fac] + <span class="number">1</span>);</div><div class="line">                cur = max(cur, f[fac]);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> fac : factor) f[fac] = max(f[fac], cur);</div><div class="line">            ans = max(ans, cur);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\nTime cost: %.2fs\n"</span>, <span class="number">1.0</span> * (clock() - _) / CLOCKS_PER_SEC);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 动态规划 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> dp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[BNUOJ 51639 Simple Database（大模拟）]]></title>
      <url>/2016/05/09/BNUOJ%2051639%20Simple%20Database%EF%BC%88%E5%A4%A7%E6%A8%A1%E6%8B%9F%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$模拟sql语句的执行过程，具体见题面$，<a href="https://www.bnuoj.com/v3/problem_show.php?pid=51639" target="_blank" rel="external">点击</a><br><a id="more"></a></p>
</blockquote>
<p>分析：</p>
<blockquote>
<p>$创建表，删除表，插入表都没啥说的$<br>$就是删除的条件可以省略，以及SET WHERE后面是有多个条件的$<br>$然后没啥照着模拟就好了，咋样好写咋来$<br>$弱智的我表示加上调试语句写了9.4k$<br>$时间复杂度自己估算能跑得过就好了，反正vector我当时算了是没问题的$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-04-23</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">RE</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, *((<span class="keyword">int</span>*)<span class="number">0</span>));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Table</span> &#123;</span></div><div class="line">    <span class="built_in">string</span> name;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; key;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &gt; content;</div><div class="line">    Table() &#123;&#125;</div><div class="line">    Table(<span class="built_in">string</span> name, <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; key): name(name), key(key) &#123;&#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; row)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(key.size() != row.size()) &#123;</div><div class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"add illegal row\n"</span>;</div><div class="line">            RE();</div><div class="line">        &#125;</div><div class="line">        content.push_back(row);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="built_in">vector</span>&lt;pair&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; &gt;&amp; conditions)</span> </span>&#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &gt;::iterator iter = content.begin();</div><div class="line">        <span class="keyword">for</span>(; iter != content.end();) &#123; <span class="comment">//row</span></div><div class="line">            <span class="keyword">bool</span> ok = <span class="literal">true</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; iter-&gt;size(); ++j) &#123; <span class="comment">//col</span></div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; conditions.size(); ++k) &#123; <span class="comment">//conditions</span></div><div class="line">                    <span class="keyword">if</span>(key[j] == conditions[k].first) &#123;</div><div class="line">                        <span class="keyword">if</span>((*iter)[j] != conditions[k].second) &#123;</div><div class="line">                            ok = <span class="literal">false</span>;</div><div class="line">                            <span class="keyword">break</span>;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span>(!ok) <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(ok) iter = content.erase(iter);</div><div class="line">            <span class="keyword">else</span> ++iter;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="built_in">vector</span>&lt;pair&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; &gt;&amp; sets,</span></span></div><div class="line"><span class="function"><span class="params">                <span class="built_in">vector</span>&lt;pair&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; &gt;&amp; conditions)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; content.size(); ++i) &#123; <span class="comment">//row</span></div><div class="line">            <span class="keyword">bool</span> ok = <span class="literal">true</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; content[i].size(); ++j) &#123; <span class="comment">//col</span></div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; conditions.size(); ++k) &#123;</div><div class="line">                    <span class="keyword">if</span>(key[j] == conditions[k].first) &#123;</div><div class="line">                        <span class="keyword">if</span>(content[i][j] != conditions[k].second) &#123;</div><div class="line">                            ok = <span class="literal">false</span>;</div><div class="line">                            <span class="keyword">break</span>;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span>(!ok) <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(!ok) <span class="keyword">continue</span>;</div><div class="line">            <span class="comment">//update</span></div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; content[i].size(); ++j) &#123;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; sets.size(); ++k) &#123;</div><div class="line">                    <span class="keyword">if</span>(key[j] == sets[k].first)</div><div class="line">                        content[i][j] = sets[k].second;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; select(<span class="built_in">vector</span>&lt;pair&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; &gt;&amp; conditions) &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; choose;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; content.size(); ++i) &#123; <span class="comment">//row</span></div><div class="line">            <span class="keyword">bool</span> ok = <span class="literal">true</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; content[i].size(); ++j) &#123; <span class="comment">//col</span></div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; conditions.size(); ++k) &#123;</div><div class="line">                    <span class="keyword">if</span>(key[j] == conditions[k].first) &#123;</div><div class="line">                        <span class="keyword">if</span>(content[i][j] != conditions[k].second) &#123;</div><div class="line">                            ok = <span class="literal">false</span>;</div><div class="line">                            <span class="keyword">break</span>;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span>(!ok) <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(ok) choose.push_back(i);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> choose;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"><span class="built_in">vector</span>&lt;Table&gt; db;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">see1</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; v)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> s : v) <span class="built_in">cout</span> &lt;&lt; s &lt;&lt; <span class="string">' '</span>; <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">seedb</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">string</span>(<span class="number">20</span>, <span class="string">'*'</span>) &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> table : db) &#123;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"name: "</span> &lt;&lt; table.name &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> key : table.key) <span class="built_in">cout</span> &lt;&lt; key &lt;&lt; <span class="string">' '</span>; <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> vs : table.content) &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> s : vs) &#123;</div><div class="line">                <span class="built_in">cout</span> &lt;&lt; s &lt;&lt; <span class="string">' '</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">string</span>(<span class="number">20</span>, <span class="string">'*'</span>) &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">seeCondition</span><span class="params">(<span class="built_in">vector</span>&lt;pair&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; &gt;&amp; conditions)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> p : conditions)</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; p.first &lt;&lt; <span class="string">"="</span> &lt;&lt; p.second &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// LOCAL</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">findTable</span><span class="params">(<span class="built_in">string</span>&amp; name)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; db.size(); ++i) &#123;</div><div class="line">        Table&amp; table = db[i];</div><div class="line">        <span class="keyword">if</span>(name == table.name) <span class="keyword">return</span> i;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isSymbol</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="built_in">isalnum</span>(c) || c == <span class="string">'_'</span>) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">strip</span><span class="params">(<span class="built_in">string</span>&amp; s)</span> </span>&#123;</div><div class="line">    <span class="keyword">while</span>(s.size() &amp;&amp; isSymbol(s[<span class="number">0</span>])) s.erase(<span class="number">0</span>, <span class="number">1</span>);</div><div class="line">    <span class="keyword">while</span>(s.size() &amp;&amp; isSymbol(s[s.size() - <span class="number">1</span>])) s.erase(s.size() - <span class="number">1</span>, <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">split</span><span class="params">(<span class="built_in">string</span>&amp; s, <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; vs)</span> </span>&#123;</div><div class="line">    <span class="function"><span class="built_in">stringstream</span> <span class="title">ss</span><span class="params">(s)</span></span>;</div><div class="line">    <span class="built_in">string</span> col;</div><div class="line">    <span class="keyword">while</span>(ss &gt;&gt; col) &#123;</div><div class="line">        strip(col);</div><div class="line">        vs.push_back(col);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">create</span><span class="params">(<span class="built_in">string</span>&amp; s)</span> </span>&#123;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; vs;</div><div class="line">    split(s, vs);</div><div class="line"><span class="comment">//    see1(vs);</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span>(~findTable(vs[<span class="number">0</span>])) &#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">"error\n"</span>; <span class="keyword">return</span>;&#125;</div><div class="line">    db.push_back(Table(vs[<span class="number">0</span>], <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;(vs.begin() + <span class="number">1</span>, vs.end())));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">drop</span><span class="params">(<span class="built_in">string</span>&amp; s)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> wh = findTable(s);</div><div class="line">    <span class="keyword">if</span>(wh == <span class="number">-1</span>) &#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">"error\n"</span>; <span class="keyword">return</span>;&#125;</div><div class="line">    db.erase(db.begin() + wh);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="built_in">string</span>&amp; s)</span> </span>&#123;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; vs;</div><div class="line">    split(s, vs);</div><div class="line"><span class="comment">//    see1(vs);</span></div><div class="line"></div><div class="line">    <span class="keyword">int</span> wh = findTable(vs[<span class="number">0</span>]);</div><div class="line">    <span class="keyword">if</span>(wh == <span class="number">-1</span>) &#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">"error\n"</span>; <span class="keyword">return</span>;&#125;</div><div class="line">    db[wh].add(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;(vs.begin() + <span class="number">1</span>, vs.end()));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">split</span><span class="params">(<span class="built_in">string</span>&amp; s, <span class="built_in">string</span>&amp; name, <span class="built_in">vector</span>&lt;pair&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; &gt;&amp; sets,</span></span></div><div class="line"><span class="function"><span class="params">           <span class="built_in">vector</span>&lt;pair&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; &gt;&amp; conditions)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> white = s.find(<span class="string">' '</span>);</div><div class="line">    name = s.substr(<span class="number">0</span>, white);</div><div class="line">    s = s.substr(white + <span class="number">1</span>);</div><div class="line"></div><div class="line">    <span class="keyword">size_t</span> SET = s.find(<span class="string">"SET"</span>);</div><div class="line">    <span class="keyword">size_t</span> WHERE = s.find(<span class="string">"WHERE"</span>);</div><div class="line">    <span class="keyword">if</span>(SET != <span class="built_in">string</span>::npos) &#123;</div><div class="line">        SET += <span class="number">3</span>;</div><div class="line">        <span class="built_in">string</span> setString = s.substr(SET, WHERE - SET);</div><div class="line">        <span class="function"><span class="built_in">stringstream</span> <span class="title">ss</span><span class="params">(setString)</span></span>;</div><div class="line">        <span class="built_in">string</span> key, value;</div><div class="line">        <span class="keyword">while</span>(ss &gt;&gt; key &gt;&gt; value &gt;&gt; value) &#123;</div><div class="line">            strip(key); strip(value);</div><div class="line">            sets.push_back(make_pair(key, value));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(WHERE != <span class="built_in">string</span>::npos) &#123;</div><div class="line">        WHERE += <span class="number">5</span>;</div><div class="line">        <span class="built_in">string</span> conditionString = s.substr(WHERE);</div><div class="line">        <span class="function"><span class="built_in">stringstream</span> <span class="title">ss</span><span class="params">(conditionString)</span></span>;</div><div class="line">        <span class="built_in">string</span> key, value;</div><div class="line">        <span class="keyword">while</span>(ss &gt;&gt; key &gt;&gt; value &gt;&gt; value) &#123;</div><div class="line">            strip(key); strip(value);</div><div class="line">            conditions.push_back(make_pair(key, value));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">checkKey</span><span class="params">(<span class="keyword">int</span> wh, <span class="built_in">vector</span>&lt;pair&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; &gt;&amp; sets,</span></span></div><div class="line"><span class="function"><span class="params">              <span class="built_in">vector</span>&lt;pair&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; &gt;&amp; conditions)</span> </span>&#123;</div><div class="line">    Table&amp; table = db[wh];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sets.size(); ++i) &#123;</div><div class="line">        <span class="keyword">bool</span> have = <span class="literal">false</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; table.key.size(); ++j) &#123;</div><div class="line">            <span class="keyword">if</span>(sets[i].first == table.key[j]) &#123;</div><div class="line">                have = <span class="literal">true</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(!have) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; conditions.size(); ++i) &#123;</div><div class="line">        <span class="keyword">bool</span> have = <span class="literal">false</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; table.key.size(); ++j) &#123;</div><div class="line">            <span class="keyword">if</span>(conditions[i].first == table.key[j]) &#123;</div><div class="line">                have = <span class="literal">true</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(!have) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="built_in">string</span>&amp; s)</span> </span>&#123;</div><div class="line">    <span class="built_in">string</span> name;</div><div class="line">    <span class="built_in">vector</span>&lt;pair&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; &gt; sets, conditions;</div><div class="line">    split(s, name, sets, conditions);</div><div class="line">    <span class="keyword">int</span> wh = findTable(name);</div><div class="line">    <span class="keyword">if</span>(wh == <span class="number">-1</span>) &#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">"error\n"</span>; <span class="keyword">return</span>;&#125;</div><div class="line"></div><div class="line"><span class="comment">//    seeCondition(sets); seeCondition(conditions);</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span>(!conditions.size()) db[wh].content.clear();</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">if</span>(!checkKey(wh, sets, conditions)) &#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">"error\n"</span>; <span class="keyword">return</span>;&#125;</div><div class="line">        db[wh].del(conditions);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="built_in">string</span>&amp; s)</span> </span>&#123;</div><div class="line">    <span class="built_in">string</span> name;</div><div class="line">    <span class="built_in">vector</span>&lt;pair&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; &gt; sets, conditions;</div><div class="line">    split(s, name, sets, conditions);</div><div class="line">    <span class="keyword">int</span> wh = findTable(name);</div><div class="line">    <span class="keyword">if</span>(wh == <span class="number">-1</span>) &#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">"error\n"</span>; <span class="keyword">return</span>;&#125;</div><div class="line">    <span class="keyword">if</span>(!checkKey(wh, sets, conditions)) &#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">"error\n"</span>; <span class="keyword">return</span>;&#125;</div><div class="line"></div><div class="line"><span class="comment">//  seeCondition(sets); seeCondition(conditions);</span></div><div class="line"></div><div class="line">    db[wh].update(sets, conditions);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">select</span><span class="params">(<span class="built_in">string</span>&amp; s)</span> </span>&#123;</div><div class="line">    <span class="built_in">string</span> name;</div><div class="line">    <span class="built_in">vector</span>&lt;pair&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; &gt; sets, conditions;</div><div class="line">    split(s, name, sets, conditions);</div><div class="line">    <span class="keyword">int</span> wh = findTable(name);</div><div class="line">    <span class="keyword">if</span>(wh == <span class="number">-1</span>) &#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">"error\n"</span>; <span class="keyword">return</span>;&#125;</div><div class="line">    <span class="keyword">if</span>(!checkKey(wh, sets, conditions)) &#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">"error\n"</span>; <span class="keyword">return</span>;&#125;</div><div class="line"></div><div class="line"><span class="comment">//    puts("select");</span></div><div class="line"><span class="comment">//    seeCondition(conditions);</span></div><div class="line"></div><div class="line">    Table&amp; table = db[wh];</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; choose = table.select(conditions);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; table.key.size(); ++i) &#123;</div><div class="line">        <span class="keyword">if</span>(i) <span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span>;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; table.key[i];</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; choose.size(); ++i) &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; v = table.content[choose[i]];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; v.size(); ++j) &#123;</div><div class="line">            <span class="keyword">if</span>(j) <span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span>;</div><div class="line">            <span class="built_in">cout</span> &lt;&lt; v[j];</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line">    <span class="keyword">int</span> t; <span class="built_in">cin</span> &gt;&gt; t;</div><div class="line">    <span class="keyword">while</span>(t--) &#123;</div><div class="line">        <span class="keyword">int</span> q; <span class="built_in">cin</span> &gt;&gt; q; <span class="built_in">cin</span>.get();</div><div class="line">        <span class="keyword">static</span> <span class="keyword">int</span> kase = <span class="number">0</span>;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Case #"</span> &lt;&lt; ++kase &lt;&lt; <span class="string">":\n"</span>;</div><div class="line"></div><div class="line">        db.clear();</div><div class="line">        <span class="keyword">while</span>(q--) &#123;</div><div class="line">            <span class="built_in">string</span> s;  getline(<span class="built_in">cin</span>, s);</div><div class="line">            <span class="keyword">int</span> white = s.find(<span class="string">' '</span>);</div><div class="line">            <span class="built_in">string</span> cmd = s.substr(<span class="number">0</span>, white);</div><div class="line">            <span class="built_in">string</span> lft = s.substr(white + <span class="number">1</span>);</div><div class="line"></div><div class="line">            <span class="keyword">if</span>(cmd == <span class="string">"CREATE"</span>) create(lft);</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(cmd == <span class="string">"DROP"</span>) drop(lft);</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(cmd == <span class="string">"INSERT"</span>) insert(lft);</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(cmd == <span class="string">"DELETE"</span>) del(lft);</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(cmd == <span class="string">"UPDATE"</span>) update(lft);</div><div class="line">            <span class="keyword">else</span> select(lft);</div><div class="line"></div><div class="line"><span class="comment">//            cout &lt;&lt; q &lt;&lt; endl; seedb();</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 暴力 </category>
            
            <category> 大模拟 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 大模拟 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[BNUOJ 51638 Air Hockey（三分搜索、二分搜索）]]></title>
      <url>/2016/05/09/BNUOJ%2051638%20Air%20Hockey%EF%BC%88%E4%B8%89%E5%88%86%E6%90%9C%E7%B4%A2%E3%80%81%E4%BA%8C%E5%88%86%E6%90%9C%E7%B4%A2%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$平面上给定2个球的初始位置，运动向量，以及半径$<br>$求2个球是否相撞，若撞，输出碰撞的时间，否则输出最近距离$<br><a id="more"></a></p>
</blockquote>
<p>分析：</p>
<blockquote>
<p>$先三分求两圆圆心的最近距离，如果两圆圆心最近距离不大于两圆半径之和，则可以碰撞$<br>$再二分求出碰撞时间即可，否则直接输出两圆圆心最近距离减去两圆半径之和$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-04-23</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> EPS = <span class="number">1e-8</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">sgn</span><span class="params">(<span class="keyword">double</span> x)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> x &lt; -EPS ? <span class="number">-1</span> : x &gt; EPS;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> &#123;</span></div><div class="line">    <span class="keyword">double</span> x, y;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%lf%lf"</span>, &amp;x, &amp;y);</div><div class="line">    &#125;</div><div class="line">    Point <span class="keyword">operator</span>+(<span class="keyword">const</span> Point&amp; p) &#123;</div><div class="line">        <span class="keyword">return</span> &#123;x + p.x, y + p.y&#125;;</div><div class="line">    &#125;</div><div class="line">    Point <span class="keyword">operator</span>-(<span class="keyword">const</span> Point&amp; p) &#123;</div><div class="line">        <span class="keyword">return</span> &#123;x - p.x, y - p.y&#125;;</div><div class="line">    &#125;</div><div class="line">    Point <span class="keyword">operator</span>*(<span class="keyword">const</span> <span class="keyword">double</span> k) &#123;</div><div class="line">        <span class="keyword">return</span> &#123;k * x, k * y&#125;;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">double</span> <span class="title">length</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> hypot(x, y);</div><div class="line">    &#125;</div><div class="line">&#125; x, vx, y, vy;</div><div class="line"><span class="keyword">int</span> rx, ry;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">double</span> <span class="title">get</span><span class="params">(<span class="keyword">double</span> m)</span> </span>&#123;</div><div class="line">    Point p = x + vx * m, q = y + vy * m;</div><div class="line">    <span class="keyword">return</span> (p - q).length();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">while</span>(t--) &#123;</div><div class="line">        x.read(); <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;rx); vx.read();</div><div class="line">        y.read(); <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;ry); vy.read();</div><div class="line">        <span class="keyword">double</span> l = <span class="number">0</span>, r = <span class="number">1e9</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; ++i) &#123;</div><div class="line">            <span class="keyword">double</span> ll = (<span class="number">2</span> * l + r) / <span class="number">3</span>;</div><div class="line">            <span class="keyword">double</span> rr = (l + <span class="number">2</span> * r) / <span class="number">3</span>;</div><div class="line">            <span class="keyword">if</span>(get(ll) &lt; get(rr)) r = rr;</div><div class="line">            <span class="keyword">else</span> l = ll;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">double</span> dis = get(l) - rx - ry, t = l;</div><div class="line">        <span class="keyword">if</span>(sgn(dis) &lt;= <span class="number">0</span>) &#123; <span class="comment">//hit</span></div><div class="line">            <span class="keyword">double</span> l = <span class="number">0</span>, r = t;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; ++i) &#123;</div><div class="line">                <span class="keyword">double</span> m = (l + r) / <span class="number">2</span>;</div><div class="line">                <span class="keyword">if</span>(get(m) &lt; rx + ry) r = m;</div><div class="line">                <span class="keyword">else</span> l = m;</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%.12f\n"</span>, l);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%.12f\n"</span>, dis);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 暴力 </category>
            
            <category> 搜索 </category>
            
            <category> 二/三分搜索 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 三分搜索 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[BNUOJ 51645 ACM Battle（搜索、最小点覆盖）]]></title>
      <url>/2016/05/09/BNUOJ%2051645%20ACM%20Battle%EF%BC%88%E6%90%9C%E7%B4%A2%E3%80%81%E6%9C%80%E5%B0%8F%E7%82%B9%E8%A6%86%E7%9B%96%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$1 \leq N \leq 1000, 1 \leq M \leq 2000，N个点M条边的无向图$<br>$求这个图的最小点覆盖集的大小，如果大于10输出GG$<br><a id="more"></a></p>
</blockquote>
<p>分析：</p>
<blockquote>
<p>$由于最小点覆盖集的大小不超过10，所以可以直接裸搜10层$<br>$裸搜的话，每条边分别尝试它的2个端点，维护一下覆盖的边的状态就好了$<br>$当然暴力选边以及更新覆盖边的状态是不兹磁的$<br>$我们可以维护一下，每个点盖了哪些边，这个用bitset来O(nm)预处理就好了$<br>$然后就可以搜辣，不能每次遍历所有的边，这样复杂度带上bitest就O(2^{10}\times \frac{m^2}{64})了$<br>$实际上由于选择都是一样的，我们可以用cur优化，每次选择第一个未被盖的边就可以$<br>$然后加上最优性剪枝，就跑得飞快辣$<br>$时间复杂度是O(nm+2^{10}\times \frac{m}{64})$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-05-08</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e3</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> u, v;</div><div class="line">&#125; edge[N];</div><div class="line"></div><div class="line"><span class="built_in">bitset</span>&lt;2000&gt; sta[<span class="number">1000</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> dep, <span class="keyword">int</span>&amp; ans, <span class="built_in">bitset</span>&lt;<span class="number">2000</span>&gt; b)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(dep &gt;= ans || dep &gt; <span class="number">10</span>) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">if</span>(b.count() == m) &#123;ans = dep; <span class="keyword">return</span>;&#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</div><div class="line">        <span class="keyword">if</span>(b[i] == <span class="number">1</span>) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">int</span> u = edge[i].u, v = edge[i].v;</div><div class="line">        dfs(dep + <span class="number">1</span>, ans, b | sta[u]);</div><div class="line">        dfs(dep + <span class="number">1</span>, ans, b | sta[v]);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line">    <span class="keyword">clock_t</span> _ = clock();</div><div class="line"></div><div class="line">    <span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">while</span>(t--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</div><div class="line">            <span class="keyword">int</span> u, v; <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</div><div class="line">            edge[i] = (Edge) &#123;u, v&#125;;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</div><div class="line">            sta[i].reset();</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j)</div><div class="line">                <span class="keyword">if</span>(edge[j].u == i || edge[j].v == i)</div><div class="line">                    sta[i][j] = <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> ans = INF;</div><div class="line">        dfs(<span class="number">0</span>, ans, <span class="number">0</span>);</div><div class="line">        <span class="keyword">if</span>(ans == INF) <span class="built_in">puts</span>(<span class="string">"GG"</span>);</div><div class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\nTime cost: %.2fs\n"</span>, <span class="number">1.0</span> * (clock() - _) / CLOCKS_PER_SEC);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 暴力 </category>
            
            <category> 搜索 </category>
            
            <category> dfs/bfs </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 最小点覆盖 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[BNUOJ 50395 Vertex Cover（搜索、最小点覆盖）]]></title>
      <url>/2016/05/09/BNUOJ%2050395%20Vertex%20Cover%EF%BC%88%E6%90%9C%E7%B4%A2%E3%80%81%E6%9C%80%E5%B0%8F%E7%82%B9%E8%A6%86%E7%9B%96%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$2 \leq N \leq 500, 1 \leq M \leq \frac{n(n - 1)}{2}，N个点M条边的无向图$<br>$对于每条边(u, v)总有min(u, v)\le30，求这个图的最小点覆盖集的大小$<br><a id="more"></a></p>
</blockquote>
<p>分析：</p>
<blockquote>
<p>$裸搜的话，每条边分别尝试它的2个端点，具体搜到多少完全不知道，复杂度是爆炸的$<br>$但是这个题有一个很好的性质，min(u, v)\le30，这样最小点覆盖集不会超过30$<br>$所以直接尝试去搜这30个点，尝试选或者不选（不选的话那么它连的所有点就都要选了）$<br>$不然这条边就没有点来覆盖了，这里要预处理一下这30个点所连的边$<br>$用bitset来预处理就好了，其实就是类似邻接表存一下图$<br>$搜的过程用bitset来保存选取的点覆盖集当作状态$<br>$看起来复杂度是2^{30}，加上最优性剪枝，以及bitset优化，实际上跑得飞快$<br>$时间复杂度O(跑得过)$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-05-09</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="built_in">bitset</span>&lt;500&gt; g[<span class="number">30</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span>&amp; ans, <span class="built_in">bitset</span>&lt;<span class="number">500</span>&gt; vs)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> cnt = vs.count();</div><div class="line">    <span class="keyword">if</span>(cnt &gt;= ans) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">if</span>(u == min(n, <span class="number">30</span>)) &#123;ans = cnt; <span class="keyword">return</span>;&#125;</div><div class="line">    <span class="keyword">if</span>(vs[u]) dfs(u + <span class="number">1</span>, ans, vs);</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        vs[u] = <span class="number">1</span>;</div><div class="line">        dfs(u + <span class="number">1</span>, ans, vs); <span class="comment">//涂</span></div><div class="line">        vs[u] = <span class="number">0</span>;</div><div class="line">        dfs(u + <span class="number">1</span>, ans, vs | g[u]); <span class="comment">//不涂它，连的点就得涂</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line">    <span class="keyword">clock_t</span> _ = clock();</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m) == <span class="number">2</span>) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; ++i) g[i].reset();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</div><div class="line">            <span class="keyword">int</span> u, v; <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</div><div class="line">            --u; --v;</div><div class="line">            <span class="keyword">if</span>(u &gt; v) swap(u, v);</div><div class="line">            g[u][v] = <span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span>(v &lt; u) g[v][u] = <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> ans = INF;</div><div class="line">        dfs(<span class="number">0</span>, ans, <span class="number">0</span>);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\nTime cost: %.2fs\n"</span>, <span class="number">1.0</span> * (clock() - _) / CLOCKS_PER_SEC);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 暴力 </category>
            
            <category> 搜索 </category>
            
            <category> dfs/bfs </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 最小点覆盖 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDU 4122 Alice's mooncake shop（贪心、RMQ）]]></title>
      <url>/2016/05/02/HDU%204122%20Alice's%20mooncake%20shop%EF%BC%88%E8%B4%AA%E5%BF%83%E3%80%81RMQ%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$给定N\le 2500个订单，升序排列，保证合法$<br>$现在有个店开M\le 10^5小时，每小时做月饼的价格都不一样，不考虑做月饼的时间$<br>$每个月饼的保质期是t\le 10^5小时，每小时的花费为s\le 200$<br>$订单可以现做现卖，问如何制作才能满足所有订单，并使得总花费最小$<br>$求这个花费$<br><a id="more"></a></p>
</blockquote>
<p>分析：</p>
<blockquote>
<p>$首先先解析日期都成小时$<br>$对于i小时的订单，显然应该取[i-t+1, i]的最小的那个花费$<br>$为了方便处理，假设都在最后一天买，显然某一天的花费应该a_i+(m-i)\times s$<br>$之后取min\{cost[i-t+1, i]\}，再减去多算的(m-i)\times s$<br>$然后就做完了$<br>$时间复杂度O(nlogm+m)$<br>$妈蛋，我样处理日期要考虑重复的情况，赛上T到死了。。。while与if的一字之差$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-05-02</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">int</span> t, s;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Order</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> y, m, d, h;</div><div class="line">    <span class="keyword">int</span> id;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;d, &amp;y, &amp;h, &amp;r);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">see</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"(%d, %d, %d, %d)\n"</span>, y, m, d, h);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> r;</div><div class="line">&#125; o[<span class="number">2505</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">RE</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, *((<span class="keyword">int</span>*)<span class="number">0</span>));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"></div><div class="line">LL a[N];</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SparseTable</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    LL dp[<span class="number">20</span>][N];</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> _n, LL* a)</span> </span>&#123;</div><div class="line">        n = _n;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) dp[<span class="number">0</span>][i] = a[i];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; (<span class="number">1</span> &lt;&lt; i) &lt;= n; ++i)</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j + (<span class="number">1</span> &lt;&lt; i) - <span class="number">1</span> &lt;= n; ++j)</div><div class="line">                dp[i][j] = min(dp[i - <span class="number">1</span>][j],</div><div class="line">                               dp[i - <span class="number">1</span>][j + (<span class="number">1</span> &lt;&lt; i - <span class="number">1</span>)]);</div><div class="line">    &#125;</div><div class="line">    <span class="function">LL <span class="title">RMQ</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> k = <span class="number">31</span> - __builtin_clz(r - l + <span class="number">1</span>);</div><div class="line">        <span class="keyword">return</span> min(dp[k][l], dp[k][r - (<span class="number">1</span> &lt;&lt; k) + <span class="number">1</span>]);</div><div class="line">    &#125;</div><div class="line">&#125; st;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">char</span> mm[][<span class="number">10</span>] = &#123;<span class="string">""</span>, <span class="string">"Jan"</span>, <span class="string">"Feb"</span>, <span class="string">"Mar"</span>, <span class="string">"Apr"</span>, <span class="string">"May"</span>, <span class="string">"Jun"</span>, <span class="string">"Jul"</span>, <span class="string">"Aug"</span>, <span class="string">"Sep"</span>, <span class="string">"Oct"</span>, <span class="string">"Nov"</span>, <span class="string">"Dec"</span>&#125;;</div><div class="line"><span class="keyword">int</span> mdays[] = &#123;<span class="number">0</span>, <span class="number">31</span>, <span class="number">28</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isLeap</span><span class="params">(<span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> y % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; y % <span class="number">100</span> || y % <span class="number">400</span> == <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">go</span><span class="params">(<span class="keyword">int</span>&amp; y, <span class="keyword">int</span>&amp; m, <span class="keyword">int</span>&amp; d, <span class="keyword">int</span>&amp; h)</span> </span>&#123;</div><div class="line">    ++h;</div><div class="line">    <span class="keyword">if</span>(h &gt;= <span class="number">24</span>) h = <span class="number">0</span>, ++d;</div><div class="line">    <span class="keyword">int</span> cur = mdays[m];</div><div class="line">    <span class="keyword">if</span>(m == <span class="number">2</span> &amp;&amp; isLeap(y)) ++cur;</div><div class="line">    <span class="keyword">if</span>(d &gt; cur) d -= cur, ++m;</div><div class="line">    <span class="keyword">if</span>(m &gt; <span class="number">12</span>) m -= <span class="number">12</span>, ++y;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">getTime</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> day, <span class="keyword">int</span> year, <span class="keyword">int</span> h)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2000</span>; i &lt; year; i++) &#123;</div><div class="line">        <span class="keyword">if</span>(isLeap(i))res += <span class="number">366</span> * <span class="number">24</span>;</div><div class="line">        <span class="keyword">else</span> res += <span class="number">365</span> * <span class="number">24</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; i++) &#123;</div><div class="line">        res += mdays[i] * <span class="number">24</span>;</div><div class="line">        <span class="keyword">if</span>(isLeap(year) &amp;&amp; i == <span class="number">2</span>)res += <span class="number">24</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; day; i++)res += <span class="number">24</span>;</div><div class="line">    res += h + <span class="number">1</span>;</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m) == <span class="number">2</span> &amp;&amp; (n || m)) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">            <span class="keyword">char</span> mon[<span class="number">10</span>]; <span class="built_in">scanf</span>(<span class="string">"%s"</span>, mon);</div><div class="line">            o[i].read();</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">12</span>; ++j) &#123;</div><div class="line">                <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(mm[j], mon)) &#123;</div><div class="line">                    o[i].m = j;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;t, &amp;s);</div><div class="line"></div><div class="line">        <span class="keyword">int</span> Y = <span class="number">2000</span>, M = <span class="number">1</span>, D = <span class="number">1</span>, H = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>, i = <span class="number">1</span>; ; ++j) &#123;</div><div class="line"><span class="comment">//          o[i].see();</span></div><div class="line">            <span class="keyword">while</span>(make_tuple(Y, M, D, H) ==</div><div class="line">                    make_tuple(o[i].y, o[i].m, o[i].d, o[i].h)) &#123;</div><div class="line">                o[i].id = j;</div><div class="line"><span class="comment">//                printf("%d = %d\n", i, j);</span></div><div class="line">                ++i;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(i == n + <span class="number">1</span>) <span class="keyword">break</span>;</div><div class="line">            go(Y, M, D, H);</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%I64d"</span>, a + i);</div><div class="line">            a[i] += <span class="number">1L</span>L * (m - i) * s;</div><div class="line">        &#125;</div><div class="line">        st.init(m, a);</div><div class="line"></div><div class="line">        LL ans = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">            <span class="keyword">int</span> d = o[i].id;</div><div class="line">            LL cur = st.RMQ(max(<span class="number">1</span>, d - t + <span class="number">1</span>), d);</div><div class="line">            cur -= <span class="number">1L</span>L * (m - d) * s;</div><div class="line">            ans += cur * o[i].r;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 思维 </category>
            
            <category> 贪心 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> RMQ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[常见错误小结]]></title>
      <url>/2016/05/02/%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF%E5%B0%8F%E7%BB%93/</url>
      <content type="html"><![CDATA[<blockquote>
<p>$1. 递归时隐藏的修改了全局变量例如点分治重心$<font color="red"> $\to 每次复制一遍$</font><br>$2. 测试数据时未将空间开到题目要求, 隐藏的空间倍数关系例如无向图2倍$<font color="red"> $\to RE$</font><br>$3. 除数是个减法式子$<font color="red"> $整数\to RE   浮点数\to WA   \to 特判$</font><br>$4. 离线并查集的重复操作$<font color="red"> $\to 只有第一次才需要unite$</font><br>$5. 回溯暴搜的复杂度是阶乘级或者指数级$<font color="red"> $\to 看到正常数据的题再爆搜就可以去死了$</font><br>$6. 乘法取模, a \times b$<font color="red"> $\to a \% MOD \times (b\%MOD)\%MOD $</font><br>$7. two pointers的时候，相等时移动指针$<font color="red"> $\to 小心重复数据，死循环死你啊$</font><br>$8. 利用欧拉定理降幂的时候x^n\% MOD，特判x\% MOD == 0$<font color="red"> $\to 此时答案是0啊$</font><br><a id="more"></a></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 小结 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 小结 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDU 4125 Moles（nlogn建立二叉搜索树、kmp）]]></title>
      <url>/2016/05/02/HDU%204125%20Moles%EF%BC%88nlogn%E5%BB%BA%E7%AB%8B%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E3%80%81kmp%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$N\le 6\times 10^5，给定1\sim N的序列，按照这个顺序建立一颗二叉搜索树$<br>$奇数是1，偶数是0，先序遍历这颗二叉搜索树生成1个01的欧拉序列$<br>$查找T串可重叠的出现了几次，|T|\le 7000$<br><a id="more"></a></p>
</blockquote>
<p>分析：</p>
<blockquote>
<p>$不学是要还的。。$<br>$这个数据范围只能nlogn建立BST了，set动态维护一下插入的节点$<br>$每次查找比当前x大的的最小点r，以及比x小的最大点l$<br>$分别尝试r的左儿子，以及l的右儿子能不能插入就可以了$<br>$然后先序遍历一遍，C++开栈一发，跑个kmp就ok了$<br>$时间复杂度O(nlogn)$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-05-03</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">6e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">int</span> rt, ls[N], rs[N];</div><div class="line"><span class="keyword">char</span> s[N &lt;&lt; <span class="number">1</span>], t[<span class="number">7010</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> rt)</span> </span>&#123;</div><div class="line">    s[n++] = (rt &amp; <span class="number">1</span>) + <span class="string">'0'</span>;</div><div class="line">    <span class="keyword">if</span>(ls[rt]) &#123;</div><div class="line">        dfs(ls[rt]);</div><div class="line">        s[n++] = (rt &amp; <span class="number">1</span>) + <span class="string">'0'</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(rs[rt]) &#123;</div><div class="line">        dfs(rs[rt]);</div><div class="line">        s[n++] = (rt &amp; <span class="number">1</span>) + <span class="string">'0'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">kmp</span><span class="params">()</span> </span>&#123;</div><div class="line">    m = <span class="built_in">strlen</span>(t);</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nxt(m + <span class="number">1</span>);</div><div class="line">    nxt[<span class="number">0</span>] = <span class="number">-1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">-1</span>; i &lt; m;) &#123;</div><div class="line">        <span class="keyword">if</span>(j == <span class="number">-1</span> || t[i] == t[j]) nxt[++i] = ++j;</div><div class="line">        <span class="keyword">else</span> j = nxt[j];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; n;) &#123;</div><div class="line">        <span class="keyword">if</span>(j == <span class="number">-1</span> || s[i] == t[j]) ++i, ++j;</div><div class="line">        <span class="keyword">else</span> j = nxt[j];</div><div class="line">        <span class="keyword">if</span>(j == m) &#123;</div><div class="line">            ++ret;</div><div class="line">            j = nxt[j];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> T; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</div><div class="line">    <span class="keyword">while</span>(T--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">        <span class="built_in">memset</span>(ls, <span class="number">0</span>, <span class="keyword">sizeof</span> ls);</div><div class="line">        <span class="built_in">memset</span>(rs, <span class="number">0</span>, <span class="keyword">sizeof</span> rs);</div><div class="line"></div><div class="line">        <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; st;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">            <span class="keyword">int</span> x; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line">            <span class="keyword">if</span>(!st.size()) rt = x;</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">auto</span> it = st.lower_bound(x);</div><div class="line">                <span class="keyword">if</span>(it == st.end()) rs[*--it] = x;</div><div class="line">                <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="keyword">if</span>(!ls[*it]) ls[*it] = x;</div><div class="line">                    <span class="keyword">else</span> rs[*--it] = x;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            st.insert(x);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, t);</div><div class="line"></div><div class="line">        n = <span class="number">0</span>;</div><div class="line">        dfs(rt);</div><div class="line">        s[n] = <span class="number">0</span>;</div><div class="line"></div><div class="line">        <span class="keyword">static</span> <span class="keyword">int</span> kase = <span class="number">0</span>;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d: %d\n"</span>, ++kase, kmp());</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 数据结构 </category>
            
            <category> 二叉搜索树 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[HDU 5661 Claris and XOR（xor贪心）]]></title>
      <url>/2016/05/01/HDU%205661%20Claris%20and%20XOR%EF%BC%88xor%E8%B4%AA%E5%BF%83%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$给定a,b,c,d,1\leq a,b,c,d\leq10^{18}$<br>$现要求找到x\oplus y，x\in [a, b]，y\in[c, d]的最大值$<br><a id="more"></a></p>
</blockquote>
<p>分析：</p>
<blockquote>
<p>$显然从高位到低位开始贪心，要最大肯定优先要求不同$<br>$也就是先测试01和10这两种情况，再测试00和11这两种情况，同时判断是不是符合区间范围$<br>$假设i这位已经放置好了，显然最小值后面全是0，最大值即全是1$<br>$考虑合法比较麻烦，反向思考非法情况，最小值比右边界大，或最大值比左边界小$<br>$时间复杂度O(b)，b=log_2 10^{18}$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-04-25</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line">LL a, b, c, d;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ok</span><span class="params">(LL x, LL y, <span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">    LL lft = (<span class="number">1L</span>L &lt;&lt; i) - <span class="number">1</span>;</div><div class="line">    LL xr = x + lft, yr = y + lft;</div><div class="line">    <span class="keyword">if</span>(x &gt; b || xr &lt; a) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    <span class="keyword">if</span>(y &gt; d || yr &lt; c) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">while</span>(t--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%I64d%I64d%I64d%I64d"</span>, &amp;a, &amp;b, &amp;c, &amp;d);</div><div class="line">        LL x = <span class="number">0</span>, y = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">62</span>; ~i; --i) &#123;</div><div class="line">            LL delta = <span class="number">1L</span>L &lt;&lt; i;</div><div class="line">            <span class="keyword">if</span>(ok(x + delta, y, i)) x += delta;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(ok(x, y + delta, i)) y += delta;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(ok(x + delta, y + delta, i)) &#123;</div><div class="line">                x += delta;</div><div class="line">                y += delta;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, x ^ y);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 技巧 </category>
            
            <category> xor </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 贪心 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDU 5014 Number Sequence（xor贪心）]]></title>
      <url>/2016/05/01/HDU%205014%20Number%20Sequence%EF%BC%88xor%E8%B4%AA%E5%BF%83%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$给定n+1个数，a_i\in [0, n]，并且a_i\neq a_j$<br>$现要求构造n+1个b_i，构造方式同a_i，并且使得\sum a_i\oplus b_i最大$<br>$输出这个sum，以及n+1个对应的b_i$<br><a id="more"></a></p>
</blockquote>
<p>分析：</p>
<blockquote>
<p>$手玩一下发现，如果n+1个数是奇数，那么0是多余的，剩余的可以两两配对$<br>$如果n+1是偶数直接配对即可$<br>$配对方式通过手玩可以发现，从大的开始，贪心补全所有的0就可以了$<br>$时间复杂度O(n)$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-04-25</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, a[N], mp[N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) == <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a + i);</div><div class="line">        <span class="built_in">memset</span>(mp, <span class="number">-1</span>, <span class="keyword">sizeof</span> mp);</div><div class="line">        <span class="keyword">if</span>(~n &amp; <span class="number">1</span>) mp[<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line"></div><div class="line">        <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = n; ~i; --i) &#123;</div><div class="line">            <span class="keyword">if</span>(mp[i] == <span class="number">-1</span>) &#123;</div><div class="line">                <span class="keyword">int</span> b = <span class="number">32</span> - __builtin_clz(i);</div><div class="line">                <span class="keyword">int</span> all = (<span class="number">1</span> &lt;&lt; b) - <span class="number">1</span>;</div><div class="line">                mp[i] = all ^ i;</div><div class="line">                mp[all ^ i] = i;</div><div class="line">            &#125;</div><div class="line">            ans += i ^ mp[i];</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, ans);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i)</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d%c"</span>, mp[a[i]], <span class="string">" \n"</span>[i == n]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 技巧 </category>
            
            <category> xor </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 贪心 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDU 4757 Tree（可持久化trie）]]></title>
      <url>/2016/05/01/HDU%204757%20Tree%EF%BC%88%E5%8F%AF%E6%8C%81%E4%B9%85%E5%8C%96trie%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$N\le 10^5个点的树，点权A_i &lt; 2^{16}，M\le 10^5次询问$<br>$每次查询u\to v路径上点权与k异或的最大值$<br><a id="more"></a></p>
</blockquote>
<p>分析：</p>
<blockquote>
<p>$由于要取出路径那就只能可持久化trie了$<br>$每一颗trie都是前缀和，显然根据lca的那个思想，u\to v路径，就是$<br>$判断u这棵trie以及v这颗trie，以及lca(u, v)这颗trie的cnt域$<br>$即cnt[u]+cnt[v]-2*cnt[lca(u, v)]是否为正$<br>$但是这样别忘记特判lca这点的点权。。$<br>$其他的就是按照普通的做法贪心的去找这个最大值就好了$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-04-22</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Trie</span> &#123;</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">17</span> * <span class="number">1e5</span> + <span class="number">10</span>, S = <span class="number">2</span>;</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></div><div class="line">        <span class="keyword">int</span> nxt[S], cnt;</div><div class="line">    &#125; dat[M];</div><div class="line">    <span class="keyword">int</span> sz, root[N];</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">        sz = root[<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">        <span class="built_in">memset</span>(&amp;dat[<span class="number">0</span>], <span class="number">0</span>, <span class="keyword">sizeof</span> dat[<span class="number">0</span>]);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span>&amp; rt, <span class="keyword">int</span> fa, <span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> u; u = rt = ++sz;</div><div class="line">        dat[u] = dat[fa];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">15</span>; ~i; --i) &#123;</div><div class="line">            <span class="keyword">int</span> c = x &gt;&gt; i &amp; <span class="number">1</span>;</div><div class="line">            <span class="keyword">int</span> v = ++sz;</div><div class="line">            dat[v] = dat[dat[u].nxt[c]]; <span class="comment">//copy</span></div><div class="line">            ++dat[v].cnt;</div><div class="line">            dat[u].nxt[c] = v; <span class="comment">//link</span></div><div class="line">            u = v;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> z, <span class="keyword">int</span> x)</span> </span>&#123; <span class="comment">//lca没算</span></div><div class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">15</span>; ~i; --i) &#123;</div><div class="line">            <span class="keyword">int</span> c = x &gt;&gt; i &amp; <span class="number">1</span>;</div><div class="line">            <span class="keyword">int</span> have = dat[dat[u].nxt[c ^ <span class="number">1</span>]].cnt + dat[dat[v].nxt[c ^ <span class="number">1</span>]].cnt;</div><div class="line">            have -= <span class="number">2</span> * dat[dat[z].nxt[c ^ <span class="number">1</span>]].cnt;</div><div class="line">            <span class="keyword">if</span>(have) &#123;</div><div class="line">                ret |= <span class="number">1</span> &lt;&lt; i;</div><div class="line">                c ^= <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">            u = dat[u].nxt[c];</div><div class="line">            v = dat[v].nxt[c];</div><div class="line">            z = dat[z].nxt[c];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line">&#125; trie;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, q;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> v, nxt;</div><div class="line">&#125; edge[N &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> head[N], cnt;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</div><div class="line">    edge[cnt] = &#123;v, head[u]&#125;;</div><div class="line">    head[u] = cnt++;</div><div class="line">    edge[cnt] = &#123;u, head[v]&#125;;</div><div class="line">    head[v] = cnt++;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> val[N];</div><div class="line"><span class="keyword">int</span> dep[N], p[<span class="number">17</span>][N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa)</span> </span>&#123;</div><div class="line">    trie.insert(trie.root[u], trie.root[fa], val[u]);</div><div class="line"></div><div class="line">    p[<span class="number">0</span>][u] = fa;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">17</span>; ++i) p[i][u] = p[i - <span class="number">1</span>][p[i - <span class="number">1</span>][u]];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; ~i; i = edge[i].nxt) &#123;</div><div class="line">        <span class="keyword">int</span> v = edge[i].v;</div><div class="line">        <span class="keyword">if</span>(v == fa) <span class="keyword">continue</span>;</div><div class="line">        dep[v] = dep[u] + <span class="number">1</span>;</div><div class="line">        dfs(v, u);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(dep[u] &gt; dep[v]) swap(u, v);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">17</span>; ++i)</div><div class="line">        <span class="keyword">if</span>(dep[v] - dep[u] &gt;&gt; i &amp; <span class="number">1</span>) v = p[i][v];</div><div class="line">    <span class="keyword">if</span>(u == v) <span class="keyword">return</span> u;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">16</span>; ~i; --i)</div><div class="line">        <span class="keyword">if</span>(p[i][u] != p[i][v])</div><div class="line">            u = p[i][u], v = p[i][v];</div><div class="line">    <span class="keyword">return</span> p[<span class="number">0</span>][u];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;q) == <span class="number">2</span>) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, val + i);</div><div class="line"></div><div class="line">        cnt = <span class="number">0</span>; <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</div><div class="line">            <span class="keyword">int</span> u, v; <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</div><div class="line">            addEdge(u, v);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        trie.init();</div><div class="line">        dfs(<span class="number">1</span>, <span class="number">0</span>);</div><div class="line"></div><div class="line"><span class="comment">//        for(int i = 0; i &lt; 5; ++i)</span></div><div class="line"><span class="comment">//          for(int u = 1; u &lt;= n; ++u)</span></div><div class="line"><span class="comment">//              printf("p[%d][%d] = %d\n", i, u, p[i][u]);</span></div><div class="line"></div><div class="line">        <span class="keyword">while</span>(q--) &#123;</div><div class="line">            <span class="keyword">int</span> u, v, w; <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;u, &amp;v, &amp;w);</div><div class="line">            <span class="keyword">int</span> z = lca(u, v), ans = w ^ val[z];</div><div class="line">            ans = max(ans, trie.query(trie.root[u], trie.root[v], trie.root[z], w));</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 技巧 </category>
            
            <category> xor </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 可持久trie </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Educational Codeforces Round 12 E. Beautiful Subarrays（xor trie）]]></title>
      <url>/2016/05/01/Educational%20Codeforces%20Round%2012%20E.%20Beautiful%20Subarrays%EF%BC%88xor%20trie%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$N\le 10^6个点的数，xor(l, r)=A_l\oplus A_{l+1}\oplus\cdots\oplus A_r$<br>$求xor(l, r)\ge k的(l, r)对数$<br><a id="more"></a></p>
</blockquote>
<p>分析：</p>
<blockquote>
<p>$xor trie贪心$<br>$我们发现这个是个连续异或和，经典的技巧$<br>$设prefix[i]:=A_1\oplus A_2\oplus\cdots\oplus A_i$<br>$那么显然我们可以得到xor(l, r)=prefix[r]\oplus prefix[l-1]$<br>$所以就枚举每个r，不断的把prefix[i]从高位到低位插入到trie里$<br>$然后贪心的去找大于k的，因为插入的时候把这个prefix[i]的所有节点的cnt都增加了$<br>$最后再把=k的加上就可以不重不漏的算完了$<br>$时间复杂度O(nb)$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-04-21</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Trie</span> &#123;</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">32</span> * <span class="number">1e6</span> + <span class="number">10</span>, S = <span class="number">2</span>;</div><div class="line">    <span class="keyword">int</span> root, sz;</div><div class="line">    <span class="keyword">int</span> nxt[M][S], cnt[M];</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">newNode</span><span class="params">()</span> </span>&#123;</div><div class="line">        cnt[sz] = <span class="number">0</span>;</div><div class="line">        <span class="built_in">memset</span>(nxt[sz], <span class="number">-1</span>, <span class="keyword">sizeof</span> nxt[sz]);</div><div class="line">        <span class="keyword">return</span> sz++;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">        sz = <span class="number">0</span>;</div><div class="line">        root = newNode();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> u = root;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">31</span>; ~i; --i) &#123;</div><div class="line">            <span class="keyword">int</span> c = x &gt;&gt; i &amp; <span class="number">1</span>, &amp;v = nxt[u][c];</div><div class="line">            <span class="keyword">if</span>(v == <span class="number">-1</span>) v = newNode();</div><div class="line">            ++cnt[v];</div><div class="line">            u = v;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> u = root, ret = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">31</span>; ~i; --i) &#123;</div><div class="line">            <span class="keyword">int</span> c = x &gt;&gt; i &amp; <span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span>(k &gt;&gt; i &amp; <span class="number">1</span>) u = nxt[u][c ^ <span class="number">1</span>];</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                ret += cnt[nxt[u][c ^ <span class="number">1</span>]]; <span class="comment">//&gt;</span></div><div class="line">                u = nxt[u][c];</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(u == <span class="number">-1</span>) <span class="keyword">return</span> ret;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ret + cnt[u]; <span class="comment">//=</span></div><div class="line">    &#125;</div><div class="line">&#125; trie;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, k;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;k) == <span class="number">2</span>) &#123;</div><div class="line">        trie.init();</div><div class="line">        trie.insert(<span class="number">0</span>);</div><div class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">        <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">            <span class="keyword">int</span> x; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line">            sum ^= x;</div><div class="line">            ans += trie.query(sum, k);</div><div class="line">            trie.insert(sum);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 技巧 </category>
            
            <category> xor </category>
            
        </categories>
        
        
        <tags>
            
            <tag> xor trie </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[BZOJ 4260 Codechef REBXOR（xor trie）]]></title>
      <url>/2016/05/01/BZOJ%204260%20Codechef%20REBXOR%EF%BC%88xor%20trie%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$2\le N\le 4\times 10^5个数，A_i\le 10^9$<br>$求(A_{l_1}\oplus A_{l_1+1}\oplus\cdots\oplus A_{r_1}) + (A_{l_2}\oplus A_{l_2+1}\oplus\cdots\oplus A_{r_2})$<br>$且1\le l_1\le r_1 &lt; l_2 \le r_2，的最大值$<br><a id="more"></a></p>
</blockquote>
<p>分析：</p>
<blockquote>
<p>$xor trie配合简单dp思想$<br>$我们发现这个是个连续异或和，经典的技巧$<br>$设prefix[i]:=A_1\oplus A_2\oplus\cdots\oplus A_i$<br>$那么显然我们可以得到xor(l, r)=prefix[r]\oplus prefix[l-1]$<br>$所以一个显然的想法就是枚举4个点，但是可以通过预处理来降低复杂度$<br>$维护prefixMax[i]:=以i结尾的区间的最大连续异或和，这个可以用过trie来得到$<br>$把这个再前缀max一下，就可以得到\le i的区间的最大连续异或和了$<br>$再倒着搞一遍就可以解决了$<br>$为了方便可以多插入1个0$<br>$时间复杂度O(nb)$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-04-21</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">4e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Trie</span> &#123;</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">32</span> * <span class="number">4e5</span> + <span class="number">10</span>, S = <span class="number">2</span>;</div><div class="line">    <span class="keyword">int</span> root, sz;</div><div class="line">    <span class="keyword">int</span> nxt[M][S];</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">newNode</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="built_in">memset</span>(nxt[sz], <span class="number">-1</span>, <span class="keyword">sizeof</span> nxt[sz]);</div><div class="line">        <span class="keyword">return</span> sz++;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">        sz = <span class="number">0</span>;</div><div class="line">        root = newNode();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> u = root;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">31</span>; ~i; --i) &#123;</div><div class="line">            <span class="keyword">int</span> c = x &gt;&gt; i &amp; <span class="number">1</span>, &amp;v = nxt[u][c];</div><div class="line">            <span class="keyword">if</span>(v == <span class="number">-1</span>) v = newNode();</div><div class="line">            u = v;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> u = root, ret = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">31</span>; ~i; --i) &#123;</div><div class="line">            <span class="keyword">int</span> c = x &gt;&gt; i &amp; <span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span>(~nxt[u][c ^ <span class="number">1</span>]) &#123;</div><div class="line">                ret |= <span class="number">1</span> &lt;&lt; i;</div><div class="line">                u = nxt[u][c ^ <span class="number">1</span>];</div><div class="line">            &#125; <span class="keyword">else</span> u = nxt[u][c];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line">&#125; trie;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, a[N], sum[N], pre[N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    sum[<span class="number">0</span>] = sum[n + <span class="number">1</span>] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a + i);</div><div class="line">        sum[i] = sum[i - <span class="number">1</span>] ^ a[i];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    trie.init(); trie.insert(sum[<span class="number">0</span>]);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">        pre[i] = max(pre[i - <span class="number">1</span>], trie.query(sum[i]));</div><div class="line">        trie.insert(sum[i]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">    trie.init(); trie.insert(sum[n + <span class="number">1</span>]);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = n; i &gt; <span class="number">1</span>; --i) &#123;</div><div class="line">        sum[i] = sum[i + <span class="number">1</span>] ^ a[i];</div><div class="line">        ans = max(ans, pre[i - <span class="number">1</span>] + trie.query(sum[i]));</div><div class="line">        trie.insert(sum[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 技巧 </category>
            
            <category> xor </category>
            
        </categories>
        
        
        <tags>
            
            <tag> xor trie </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[POJ 3764 The xor-longest Path（xor trie）]]></title>
      <url>/2016/05/01/POJ%203764%20The%20xor-longest%20Path%EF%BC%88xor%20trie%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$N\le 10^5个点的树，A_i &lt; 2^{31}$<br>$路径异或和：=路径上所有边权的异或和，求最大的路径异或和$<br><a id="more"></a></p>
</blockquote>
<p>分析：</p>
<blockquote>
<p>$xor trie配合简单dp思想$<br>$我们发现这个是个连续异或和，经典的技巧$<br>$设prefix[i]:=A_1\oplus A_2\oplus\cdots\oplus A_i$<br>$那么显然我们可以得到xor(l, r)=prefix[r]\oplus prefix[l-1]$<br>$同理树上也是一样的，把树搜一遍，也就是相当于求f[i]:=以i这个点结尾的路径的最大异或和$<br>$最终答案ans = max\{f[i]\}$<br>$时间复杂度O(nb)$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-04-22</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Trie</span> &#123;</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">32</span> * <span class="number">1e5</span> + <span class="number">10</span>, S = <span class="number">2</span>;</div><div class="line">    <span class="keyword">int</span> root, sz;</div><div class="line">    <span class="keyword">int</span> nxt[M][S];</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">newNode</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="built_in">memset</span>(nxt[sz], <span class="number">-1</span>, <span class="keyword">sizeof</span> nxt[sz]);</div><div class="line">        <span class="keyword">return</span> sz++;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">        sz = <span class="number">0</span>;</div><div class="line">        root = newNode();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> u = root;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">31</span>; ~i; --i) &#123;</div><div class="line">            <span class="keyword">int</span> c = x &gt;&gt; i &amp; <span class="number">1</span>, &amp;v = nxt[u][c];</div><div class="line">            <span class="keyword">if</span>(v == <span class="number">-1</span>) v = newNode();</div><div class="line">            u = v;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> u = root, ret = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">31</span>; ~i; --i) &#123;</div><div class="line">            <span class="keyword">int</span> c = x &gt;&gt; i &amp; <span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span>(~nxt[u][c ^ <span class="number">1</span>]) &#123;</div><div class="line">                ret |= <span class="number">1</span> &lt;&lt; i;</div><div class="line">                u = nxt[u][c ^ <span class="number">1</span>];</div><div class="line">            &#125; <span class="keyword">else</span> u = nxt[u][c];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line">&#125; trie;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> v, nxt, c;</div><div class="line">&#125; edge[N &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> head[N], cnt;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> c)</span> </span>&#123;</div><div class="line">    edge[cnt] = &#123;v, head[u], c&#125;;</div><div class="line">    head[u] = cnt++;</div><div class="line">    edge[cnt] = &#123;u, head[v], c&#125;;</div><div class="line">    head[v] = cnt++;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> f, <span class="keyword">int</span> sum, <span class="keyword">int</span>&amp; ans)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; ~i; i = edge[i].nxt) &#123;</div><div class="line">        <span class="keyword">int</span> v = edge[i].v;</div><div class="line">        <span class="keyword">if</span>(v == f) <span class="keyword">continue</span>;</div><div class="line">        ans = max(ans, trie.query(sum ^ edge[i].c));</div><div class="line">        trie.insert(sum ^ edge[i].c);</div><div class="line">        dfs(v, u, sum ^ edge[i].c, ans);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) == <span class="number">1</span>) &#123;</div><div class="line">        cnt = <span class="number">0</span>; <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</div><div class="line">            <span class="keyword">int</span> u, v, c;  <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;u, &amp;v, &amp;c);</div><div class="line">            addEdge(u, v, c);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">        trie.init(); trie.insert(<span class="number">0</span>);</div><div class="line">        dfs(<span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, ans);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 技巧 </category>
            
            <category> xor </category>
            
        </categories>
        
        
        <tags>
            
            <tag> xor trie </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDU 5536 Chip Factory（xor trie）]]></title>
      <url>/2016/05/01/HDU%205536%20Chip%20Factory%EF%BC%88xor%20trie%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$3\le N\le 10^3个数，求\max_{i,j,k} (s_i+s_j) \oplus s_k的最大值，i\ne j\ne k$<br><a id="more"></a></p>
</blockquote>
<p>分析：</p>
<blockquote>
<p>$xor trie简单技巧$<br>$将所有数插入01 trie中，n^2枚举s_i+s_j，由于要不同先把它俩删了$<br>$然后再去贪心的找s_k，不要忘记恢复就好$<br>$时间复杂度O(n^2b)，b=log_2(max\{A_i\})$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-04-21</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, a[N];</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Trie</span> &#123;</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">32</span> * <span class="number">1e3</span> + <span class="number">10</span>, S = <span class="number">2</span>;</div><div class="line">    <span class="keyword">int</span> root, sz;</div><div class="line">    <span class="keyword">int</span> nxt[M][S], have[M];</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">newNode</span><span class="params">()</span> </span>&#123;</div><div class="line">        have[sz] = <span class="number">0</span>;</div><div class="line">        <span class="built_in">memset</span>(nxt[sz], <span class="number">-1</span>, <span class="keyword">sizeof</span> nxt[sz]);</div><div class="line">        <span class="keyword">return</span> sz++;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">        sz = <span class="number">0</span>;</div><div class="line">        root = newNode();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> d)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> u = root;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">31</span>; ~i; --i) &#123;</div><div class="line">            <span class="keyword">int</span> c = x &gt;&gt; i &amp; <span class="number">1</span>, &amp;v = nxt[u][c];</div><div class="line">            <span class="keyword">if</span>(v == <span class="number">-1</span>) v = newNode();</div><div class="line">            have[v] += d;</div><div class="line">            u = v;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> u = root, ret = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">31</span>; ~i; --i) &#123;</div><div class="line">            <span class="keyword">int</span> c = x &gt;&gt; i &amp; <span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span>(have[nxt[u][c ^ <span class="number">1</span>]]) &#123;</div><div class="line">                ret |= <span class="number">1</span> &lt;&lt; i;</div><div class="line">                u = nxt[u][c ^ <span class="number">1</span>];</div><div class="line">            &#125; <span class="keyword">else</span> u = nxt[u][c];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line">&#125; trie;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">while</span>(t--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">        trie.init();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a + i);</div><div class="line">            trie.update(a[i], <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">            trie.update(a[i], <span class="number">-1</span>);</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n; ++j) &#123;</div><div class="line">                trie.update(a[j], <span class="number">-1</span>);</div><div class="line">                ans = max(ans, trie.query(a[i] + a[j]));</div><div class="line">                trie.update(a[j], <span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">            trie.update(a[i], <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 技巧 </category>
            
            <category> xor </category>
            
        </categories>
        
        
        <tags>
            
            <tag> xor trie </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDU 4825 Xor Sum（xor trie）]]></title>
      <url>/2016/05/01/HDU%204825%20Xor%20Sum%EF%BC%88xor%20trie%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$N\le 10^5个数，M\le 10^5次询问$<br>$每次询问给出一个整数K，从数列A_i中找出一个数S使得K\oplus S值最大$<br><a id="more"></a></p>
</blockquote>
<p>分析：</p>
<blockquote>
<p>$xor trie基础题$<br>$将所有数插入01 trie中，每次询问就在trie上贪心的找$<br>$由于要最大，那么就从高位到低位插入，这样查找的时候也从高位到低位$<br>$由于xor的性质，0\oplus1=1，显然优先找不同的，这样贪心的找就可以了$<br>$时间复杂度为O(nb)，b=log_2(max\{A_i\})$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-04-21</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, q;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Trie</span> &#123;</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">32</span> * <span class="number">1e5</span> + <span class="number">10</span>, S = <span class="number">2</span>;</div><div class="line">    <span class="keyword">int</span> root, sz;</div><div class="line">    <span class="keyword">int</span> nxt[M][S], val[M];</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">newNode</span><span class="params">()</span> </span>&#123;</div><div class="line">        val[sz] = <span class="number">0</span>;</div><div class="line">        <span class="built_in">memset</span>(nxt[sz], <span class="number">-1</span>, <span class="keyword">sizeof</span> nxt[sz]);</div><div class="line">        <span class="keyword">return</span> sz++;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">        sz = <span class="number">0</span>;</div><div class="line">        root = newNode();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> u = root;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">31</span>; ~i; --i) &#123;</div><div class="line">            <span class="keyword">int</span> c = x &gt;&gt; i &amp; <span class="number">1</span>, &amp;v = nxt[u][c];</div><div class="line">            <span class="keyword">if</span>(v == <span class="number">-1</span>) v = newNode();</div><div class="line">            u = v;</div><div class="line">        &#125;</div><div class="line">        val[u] = x;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> u = root;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">31</span>; ~i; --i) &#123;</div><div class="line">            <span class="keyword">int</span> c = x &gt;&gt; i &amp; <span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span>(~nxt[u][c ^ <span class="number">1</span>]) u = nxt[u][c ^ <span class="number">1</span>];</div><div class="line">            <span class="keyword">else</span> u = nxt[u][c];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> val[u];</div><div class="line">    &#125;</div><div class="line">&#125; trie;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">while</span>(t--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;q);</div><div class="line">        trie.init();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">            <span class="keyword">int</span> x; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line">            trie.insert(x);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">static</span> <span class="keyword">int</span> kase = <span class="number">0</span>;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d:\n"</span>, ++kase);</div><div class="line">        <span class="keyword">while</span>(q--) &#123;</div><div class="line">            <span class="keyword">int</span> x; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, trie.query(x));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 技巧 </category>
            
            <category> xor </category>
            
        </categories>
        
        
        <tags>
            
            <tag> xor trie </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Codeforces Round 349 (Div. 2) D. World Tour（最短路）]]></title>
      <url>/2016/04/30/Codeforces%20Round%20349%20(Div.%202)%20D.%20World%20Tour%EF%BC%88%E6%9C%80%E7%9F%AD%E8%B7%AF%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$N\le 3000，M\le 5000，N个点M条边的权为1的有向图$<br>$求四个不同的点，使得a\rightarrow b \rightarrow c \rightarrow d都走最短路的路程和最长，路径中经过的点不作要求$<br><a id="more"></a></p>
</blockquote>
<p>分析：</p>
<blockquote>
<p>$直接跑N次bfs搞出全源最短路d[i][j]$<br>$然后用pair顺图i\rightarrow j存一次按距离排个序，逆图j\rightarrow i也搞一个$<br>$分别是o[i][j]和r[i][j]$<br>$枚举b和c，先找a，再d，注意要不同$<br>$由于这个条件，我们干脆再找一次，这次先找d再找a$<br>$注意不可达的。$<br>$更新答案即可，复杂度加上排序大概是O(n^2logn+nm)$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-04-30</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3e3</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[N];</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; P;</div><div class="line"><span class="keyword">int</span> d[N][N];</div><div class="line">P o[N][N], r[N][N]; <span class="comment">//original i-&gt;j, reversing i&lt;-j</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span>* d)</span> </span>&#123;</div><div class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q; q.push(s);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) d[i] = <span class="number">-1</span>;</div><div class="line">    d[s] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(q.size()) &#123;</div><div class="line">        <span class="keyword">int</span> u = q.front(); q.pop();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> v : G[u]) &#123;</div><div class="line">            <span class="keyword">if</span>(d[v] == <span class="number">-1</span>) &#123;</div><div class="line">                d[v] = d[u] + <span class="number">1</span>;</div><div class="line">                q.push(v);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">    <span class="keyword">while</span>(m--) &#123;</div><div class="line">        <span class="keyword">int</span> u, v; <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</div><div class="line">        G[u].push_back(v);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) bfs(i, d[i]);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</div><div class="line">            o[i][j] = &#123;d[i][j], j&#125;, r[i][j] = &#123;d[j][i], j&#125;;</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) sort(o[i] + <span class="number">1</span>, o[i] + <span class="number">1</span> + n);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) sort(r[i] + <span class="number">1</span>, r[i] + <span class="number">1</span> + n);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;  <span class="comment">//不可达的是最小的</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> b = <span class="number">1</span>; b &lt;= n; ++b) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> c = <span class="number">1</span>; c &lt;= n; ++c) &#123;</div><div class="line">            <span class="keyword">if</span>(b == c || d[b][c] == <span class="number">-1</span>) <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">int</span> x, y, i;</div><div class="line"></div><div class="line">            <span class="comment">//x first</span></div><div class="line">            i = n;</div><div class="line">            <span class="keyword">if</span>(~r[b][i].second)</div><div class="line">                <span class="keyword">while</span>(r[b][i].second == b || r[b][i].second == c) --i;</div><div class="line">            x = r[b][i].second;</div><div class="line"></div><div class="line">            i = n;</div><div class="line">            <span class="keyword">if</span>(~o[c][i].second)</div><div class="line">                <span class="keyword">while</span>(o[c][i].second == b || o[c][i].second == c</div><div class="line">                        || o[c][i].second == x) --i;</div><div class="line">            y = o[c][i].second;</div><div class="line"></div><div class="line">            <span class="keyword">if</span>(~d[x][b] &amp;&amp; ~d[c][y]) &#123;</div><div class="line">                <span class="keyword">int</span> tmp = d[x][b] + d[b][c] + d[c][y];</div><div class="line">                <span class="keyword">if</span>(tmp &gt; sum) sum = tmp, ans = &#123;x, b, c, y&#125;;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">//y first</span></div><div class="line">            i = n;</div><div class="line">            <span class="keyword">if</span>(~o[c][i].second)</div><div class="line">                <span class="keyword">while</span>(o[c][i].second == b || o[c][i].second == c) --i;</div><div class="line">            y = o[c][i].second;</div><div class="line"></div><div class="line">            i = n;</div><div class="line">            <span class="keyword">if</span>(~r[b][i].second)</div><div class="line">                <span class="keyword">while</span>(r[b][i].second == b || r[b][i].second == c ||</div><div class="line">                        r[b][i].second == y) --i;</div><div class="line">            x = r[b][i].second;</div><div class="line"></div><div class="line">            <span class="keyword">if</span>(~d[x][b] &amp;&amp; ~d[c][y]) &#123;</div><div class="line">                <span class="keyword">int</span> tmp = d[x][b] + d[b][c] + d[c][y];</div><div class="line">                <span class="keyword">if</span>(tmp &gt; sum) sum = tmp, ans = &#123;x, b, c, y&#125;;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> x : ans) <span class="built_in">printf</span>(<span class="string">"%d "</span>, x); <span class="built_in">puts</span>(<span class="string">""</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 图论 </category>
            
            <category> 最短路 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 最短路 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Codeforces Round 349 (Div. 2) C. Reberland Linguistics（dp）]]></title>
      <url>/2016/04/30/Codeforces%20Round%20349%20(Div.%202)%20C.%20Reberland%20Linguistics%EF%BC%88dp%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$给定5\le |L|\le 10^4长度的字符串，现划分这个字符串$<br>$使得第一个子串长度\ge 5，后面的所有子串长度为2或3，并且相邻的2个子串不能相同<br>$<br>$字典序输出所有划分方案中的长度为2或3的子串$<br><a id="more"></a></p>
</blockquote>
<p>分析：</p>
<blockquote>
<p>$- - 当然是dp啦，f[i][0]:=前i个字符，划分长度2的合法子串，s[i-1,i]$<br>$同理，f[i][1]:=前i个字符，划分长度3的合法子串，s[i-2,i-1,i]$<br>$这个dp是顺着的，我们发现没法保证中途的合法性，不能存储这些子串$<br>$但是倒着dp就可以了，就都是合法的了，就可以边搞边存了$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-04-30</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="built_in">string</span> s;</div><div class="line"><span class="keyword">int</span> f[N][<span class="number">2</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; s) &#123;</div><div class="line">        <span class="built_in">memset</span>(f, <span class="number">0</span>, <span class="keyword">sizeof</span> f);</div><div class="line">        s = <span class="string">' '</span> + s;</div><div class="line">        <span class="keyword">int</span> sz = s.size() - <span class="number">1</span>;</div><div class="line">        <span class="built_in">set</span>&lt;<span class="built_in">string</span>&gt; ss;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = sz, j = <span class="number">1</span>; i; --i, ++j) &#123;</div><div class="line">            <span class="keyword">if</span>(j &lt; <span class="number">2</span> || i &lt;= <span class="number">5</span>) <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">if</span>(j == <span class="number">2</span>) &#123;</div><div class="line">                ss.insert(s.substr(i, <span class="number">2</span>));</div><div class="line">                f[i][<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(j == <span class="number">3</span>) &#123;</div><div class="line">                ss.insert(s.substr(i, <span class="number">3</span>));</div><div class="line">                f[i][<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">if</span>(f[i + <span class="number">2</span>][<span class="number">0</span>]) &#123;</div><div class="line">                    <span class="built_in">string</span> b = s.substr(i + <span class="number">2</span>, <span class="number">2</span>);</div><div class="line">                    <span class="built_in">string</span> c = s.substr(i, <span class="number">2</span>);</div><div class="line">                    <span class="keyword">if</span>(b != c) &#123;</div><div class="line">                        ss.insert(c);</div><div class="line">                        f[i][<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span>(f[i + <span class="number">2</span>][<span class="number">1</span>]) &#123;</div><div class="line">                    <span class="built_in">string</span> c = s.substr(i, <span class="number">2</span>);</div><div class="line">                    ss.insert(c);</div><div class="line">                    f[i][<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span>(f[i + <span class="number">3</span>][<span class="number">0</span>]) &#123;</div><div class="line">                    <span class="built_in">string</span> c = s.substr(i, <span class="number">3</span>);</div><div class="line">                    ss.insert(c);</div><div class="line">                    f[i][<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span>(f[i + <span class="number">3</span>][<span class="number">1</span>]) &#123;</div><div class="line">                    <span class="built_in">string</span> b = s.substr(i + <span class="number">3</span>, <span class="number">3</span>);</div><div class="line">                    <span class="built_in">string</span> c = s.substr(i, <span class="number">3</span>);</div><div class="line">                    <span class="keyword">if</span>(b != c) &#123;</div><div class="line">                        ss.insert(c);</div><div class="line">                        f[i][<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="built_in">cout</span> &lt;&lt; ss.size() &lt;&lt; <span class="string">'\n'</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> s : ss) <span class="built_in">cout</span> &lt;&lt; s &lt;&lt; <span class="string">'\n'</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 动态规划 </category>
            
            <category> 线性dp </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 线性dp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDU 3585 maximum shortest distance（二分、最大团）]]></title>
      <url>/2016/04/29/HDU%203585%20maximum%20shortest%20distance%EF%BC%88%E4%BA%8C%E5%88%86%E3%80%81%E6%9C%80%E5%A4%A7%E5%9B%A2%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$给定N\le 50个点的坐标，从中选出2\le k\le n个点，使得两两最近的距离最远$<br>$求这个距离$<br><a id="more"></a></p>
</blockquote>
<p>分析：</p>
<blockquote>
<p>$看到最大化最小值就知道二分了$<br>$二分这个最小值，凡是大于的都连边，然后判断最大团是不是\ge k$<br>$100次T了，50次就过了$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-04-29</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">60</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="comment">// 1. 最大团点的数量 = 补图中最大独立集点的数量</span></div><div class="line"><span class="comment">// 2. 图的染色问题中，最少需要的颜色的数量 = 最大团点的数量</span></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MaxClique</span> &#123;</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> V = <span class="number">60</span>;</div><div class="line">    <span class="keyword">bool</span> g[V][V];</div><div class="line">    <span class="keyword">int</span> n, ans, max[V], adj[V][V];</div><div class="line">    <span class="keyword">int</span> path[V], clique[V]; <span class="comment">//for record</span></div><div class="line">    <span class="comment">//max[i]:= [i, n]'s maximum clique</span></div><div class="line">    <span class="comment">//adj[dep][i]:= available vertices</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> _n)</span> </span>&#123; n = _n; &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> dep)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(cur == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">if</span>(dep &gt; ans) &#123;</div><div class="line">                ans = dep;</div><div class="line">                swap(clique, path);</div><div class="line">                <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cur; ++i) &#123;</div><div class="line">            <span class="keyword">if</span>(dep + cur - i &lt;= ans) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//dep + left &lt;= ans</span></div><div class="line">            <span class="keyword">int</span> u = adj[dep][i], nxt = <span class="number">0</span>;</div><div class="line">            <span class="keyword">if</span>(dep + max[u] &lt;= ans) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//same as above</span></div><div class="line">            path[dep] = u;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; cur; ++j) &#123;</div><div class="line">                <span class="keyword">int</span> v = adj[dep][j];</div><div class="line">                <span class="keyword">if</span>(g[u][v]) adj[dep + <span class="number">1</span>][nxt++] = v;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(dfs(nxt, dep + <span class="number">1</span>)) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxClique</span><span class="params">()</span> </span>&#123;</div><div class="line">        ans = <span class="number">0</span>;</div><div class="line">        <span class="built_in">memset</span>(max, <span class="number">0</span>, <span class="keyword">sizeof</span> max);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = n - <span class="number">1</span>; ~i; --i) &#123;</div><div class="line">            <span class="keyword">int</span> cur = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; n; ++j)</div><div class="line">                <span class="keyword">if</span>(g[i][j]) adj[<span class="number">1</span>][cur++] = j;</div><div class="line">            path[<span class="number">0</span>] = i;</div><div class="line">            dfs(cur, <span class="number">1</span>);</div><div class="line">            max[i] = ans;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ans;</div><div class="line">    &#125;</div><div class="line">&#125; solver;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, k;</div><div class="line"><span class="keyword">int</span> x[N], y[N];</div><div class="line"><span class="keyword">double</span> d[N][N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;k) == <span class="number">2</span>) &#123;</div><div class="line">        solver.init(n);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, x + i, y + i);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; n; ++j)</div><div class="line">                d[i][j] = d[j][i] = hypot(x[i] - x[j], y[i] - y[j]);</div><div class="line"></div><div class="line">        <span class="keyword">double</span> l = <span class="number">0</span>, r = <span class="number">2e4</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">50</span>; ++i) &#123;</div><div class="line">            <span class="keyword">double</span> m = (l + r) / <span class="number">2</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> u = <span class="number">0</span>; u &lt; n; ++u)</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> v = u + <span class="number">1</span>; v &lt; n; ++v)</div><div class="line">                    solver.g[u][v] = solver.g[v][u] = d[u][v] &gt;= m;</div><div class="line">            <span class="keyword">if</span>(solver.maxClique() &gt;= k) l = m;</div><div class="line">            <span class="keyword">else</span> r = m;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%.2f\n"</span>, l);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 图论 </category>
            
            <category> 最大团 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 最大团 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Educational Codeforces Round 12 D. Simple Subset（最大团）]]></title>
      <url>/2016/04/29/Educational%20Codeforces%20Round%2012%20D.%20Simple%20Subset%EF%BC%88%E6%9C%80%E5%A4%A7%E5%9B%A2%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$给定N\le 10^3个数，从中选出一些数，使得这些数任意两两之和是素数$<br>$求最多选出的数的个数，以及方案$<br><a id="more"></a></p>
</blockquote>
<p>分析：</p>
<blockquote>
<p>$讲道理这题可以贪心，素数=奇数+偶数，所以不考虑1这个数的话答案最多是2$<br>$- - 最大团直接裸搞也可以，迷之复杂度1000个点都O(跑得过)$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-04-29</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e6</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MaxClique</span> &#123;</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> V = <span class="number">1e3</span> + <span class="number">10</span>;</div><div class="line">    <span class="keyword">bool</span> g[V][V];</div><div class="line">    <span class="keyword">int</span> n, ans, max[V], adj[V][V];</div><div class="line">    <span class="keyword">int</span> path[V], clique[V]; <span class="comment">//for record</span></div><div class="line">    <span class="comment">//max[i]:= [i, n]'s maximum clique</span></div><div class="line">    <span class="comment">//adj[dep][i]:= available vertices</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> _n)</span> </span>&#123; n = _n; &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> dep)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(cur == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">if</span>(dep &gt; ans) &#123;</div><div class="line">                ans = dep;</div><div class="line">                swap(clique, path);</div><div class="line">                <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cur; ++i) &#123;</div><div class="line">            <span class="keyword">if</span>(dep + cur - i &lt;= ans) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//dep + left &lt;= ans</span></div><div class="line">            <span class="keyword">int</span> u = adj[dep][i], nxt = <span class="number">0</span>;</div><div class="line">            <span class="keyword">if</span>(dep + max[u] &lt;= ans) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//same as above</span></div><div class="line">            path[dep] = u;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; cur; ++j) &#123;</div><div class="line">                <span class="keyword">int</span> v = adj[dep][j];</div><div class="line">                <span class="keyword">if</span>(g[u][v]) adj[dep + <span class="number">1</span>][nxt++] = v;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(dfs(nxt, dep + <span class="number">1</span>)) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxClique</span><span class="params">()</span> </span>&#123;</div><div class="line">        ans = <span class="number">0</span>;</div><div class="line">        <span class="built_in">memset</span>(max, <span class="number">0</span>, <span class="keyword">sizeof</span> max);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = n - <span class="number">1</span>; ~i; --i) &#123;</div><div class="line">            <span class="keyword">int</span> cur = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; n; ++j)</div><div class="line">                <span class="keyword">if</span>(g[i][j]) adj[<span class="number">1</span>][cur++] = j;</div><div class="line">            path[<span class="number">0</span>] = i;</div><div class="line">            dfs(cur, <span class="number">1</span>);</div><div class="line">            max[i] = ans;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ans;</div><div class="line">    &#125;</div><div class="line">&#125; solver;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="keyword">bool</span> notPrime[N];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">gao</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i * i &lt; N; ++i) &#123;</div><div class="line">        <span class="keyword">if</span>(notPrime[i]) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i * i; j &lt; N; j += i) notPrime[j] = <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    gao();</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) == <span class="number">1</span>) &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a(n);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</div><div class="line">        solver.init(n);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; n; ++j)</div><div class="line">                solver.g[i][j] = solver.g[j][i] = !notPrime[a[i] + a[j]];</div><div class="line">        <span class="keyword">int</span> ans = solver.maxClique();</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ans; ++i)</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d%c"</span>, a[solver.clique[i]], <span class="string">" \n"</span>[i == ans - <span class="number">1</span>]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 图论 </category>
            
            <category> 最大团 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 最大团 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CSU 1720 How to Get 2^n（trie上贪心、高精度）]]></title>
      <url>/2016/04/29/CSU%201720%20How%20to%20Get%202%5En%EF%BC%88trie%E4%B8%8A%E8%B4%AA%E5%BF%83%E3%80%81%E9%AB%98%E7%B2%BE%E5%BA%A6%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$给定N\le 10^5个数，1\le A_i\le 10^{30}(2^{100}&gt;10^{30})$<br>$求A_i+A_j=2^x的(i, j)对数$<br><a id="more"></a></p>
</blockquote>
<p>分析：</p>
<blockquote>
<p>$先把大整数转换成二进制，然后从低位到高位插到trie里$<br>$对于每个数A_i，先找到1个A_j，使得A_i+A_j为最小的那个2^x，从trie上找到A_j$<br>$对于之后比它大的2^y，A_j’的取值是A_j从x这个二进制位起都是1，trie累加之后的即可$<br>$感觉不是很好写，时间复杂度O(nb)，b=100$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-04-24</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> B = <span class="number">101</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Type</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="built_in">bitset</span>&lt;B&gt; b;</div><div class="line">    Type() &#123;</div><div class="line">        n = <span class="number">0</span>;</div><div class="line">        b.reset();</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">Type a[N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">toBinary</span><span class="params">(Type&amp; a, <span class="keyword">char</span>* b)</span> </span>&#123;</div><div class="line">    a = Type();</div><div class="line">    <span class="keyword">int</span> n = <span class="built_in">strlen</span>(b);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) b[i] -= <span class="string">'0'</span>;</div><div class="line">    reverse(b, b + n);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>; --n;</div><div class="line">    <span class="keyword">while</span>(~n) &#123;  <span class="comment">//use b[0], u fucking zz</span></div><div class="line">        a.b[a.n++] = b[<span class="number">0</span>] &amp; <span class="number">1</span>; <span class="comment">//mod</span></div><div class="line">        <span class="keyword">int</span> mod = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = n; ~i; --i) &#123; <span class="comment">//divide</span></div><div class="line">            mod = mod * <span class="number">10</span> + b[i];</div><div class="line">            b[i] = mod &gt;&gt; <span class="number">1</span>;</div><div class="line">            mod &amp;= <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(!b[n]) --n;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">Type <span class="title">subtract</span><span class="params">(Type&amp; a, Type&amp; b)</span> </span>&#123;</div><div class="line">    Type ret;</div><div class="line">    <span class="keyword">bool</span> lent = <span class="literal">false</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; B; ++i) &#123;</div><div class="line">        <span class="keyword">int</span> x = a.b[i];</div><div class="line">        <span class="keyword">if</span>(lent) &#123;</div><div class="line">            x -= <span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span>(x &lt; <span class="number">0</span>) x += <span class="number">2</span>;</div><div class="line">            <span class="keyword">else</span> lent = <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">        x -= b.b[i];</div><div class="line">        <span class="keyword">if</span>(x &lt; <span class="number">0</span>) &#123;</div><div class="line">            x += <span class="number">2</span>;</div><div class="line">            lent = <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">        ret.b[i] = x;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">char</span> b[<span class="number">50</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">getBitLength</span><span class="params">(Type&amp; b)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> bits = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = B; j; --j) &#123;</div><div class="line">        <span class="keyword">if</span>(b.b[j - <span class="number">1</span>]) &#123;</div><div class="line">            bits = j;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> bits;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Trie</span> &#123;</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> M = B * <span class="number">1e5</span> + <span class="number">10</span>, S = <span class="number">2</span>;</div><div class="line">    <span class="keyword">int</span> nxt[M][S], val[M];</div><div class="line">    <span class="keyword">int</span> root, sz;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">newNode</span><span class="params">()</span> </span>&#123;</div><div class="line">        val[sz] = <span class="number">0</span>;</div><div class="line">        <span class="built_in">memset</span>(nxt[sz], <span class="number">0</span>, <span class="keyword">sizeof</span> nxt[sz]);</div><div class="line">        <span class="keyword">return</span> sz++;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">        sz = <span class="number">0</span>; newNode();</div><div class="line">        root = newNode();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(Type&amp; b, <span class="keyword">int</span> d)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> u = root;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; b.n; ++i) &#123;</div><div class="line">            <span class="keyword">int</span> c = b.b[i], &amp;v = nxt[u][c];</div><div class="line">            <span class="keyword">if</span>(!v) v = newNode();</div><div class="line">            u = v;</div><div class="line">        &#125;</div><div class="line">        val[u] += d;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(Type&amp; b, <span class="keyword">int</span> bits)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> u = root;</div><div class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>, n = getBitLength(b);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bits; ++i) &#123;</div><div class="line">            <span class="keyword">int</span> c = b.b[i];</div><div class="line">            u = nxt[u][c];</div><div class="line">            <span class="keyword">if</span>(i == n - <span class="number">1</span>) ret += val[u];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = bits; i &lt; B; ++i) &#123;</div><div class="line">            u = nxt[u][<span class="number">1</span>];</div><div class="line">            ret += val[u];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line">&#125; trie;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> T; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</div><div class="line">    <span class="keyword">while</span>(T--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line"></div><div class="line">        trie.init();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>, b);</div><div class="line">            toBinary(a[i], b);</div><div class="line">            trie.update(a[i], <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">            trie.update(a[i], <span class="number">-1</span>);</div><div class="line"></div><div class="line">            <span class="keyword">int</span> bits = a[i].n;</div><div class="line">            Type b; b.b[bits] = <span class="number">1</span>;</div><div class="line">            Type c = subtract(b, a[i]);</div><div class="line">            ans += trie.query(c, bits);</div><div class="line"></div><div class="line">            trie.update(a[i], <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans &gt;&gt; <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 技巧 </category>
            
            <category> xor </category>
            
        </categories>
        
        
        <tags>
            
            <tag> trie上贪心 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CSU 1728 线形逐步共聚合反应（三分、dp）]]></title>
      <url>/2016/04/29/CSU%201728%20%E7%BA%BF%E5%BD%A2%E9%80%90%E6%AD%A5%E5%85%B1%E8%81%9A%E5%90%88%E5%8F%8D%E5%BA%94%EF%BC%88%E4%B8%89%E5%88%86%E3%80%81dp%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$给定N\le 2\times 10^5个数，现要使|\sum_{i=l}^r (A_i - x)|的最大值最小$<br><a id="more"></a></p>
</blockquote>
<p>分析：</p>
<blockquote>
<p>$令s(l, r)=\sum_{i=l}^r (A_i - x)$<br>$max\{|s(l, r)|\}$<br>$=max\{max\left(s(l, r), -s(l, r)\right)\}$<br>$=max\{max\{s(l, r)\}, max\{-s(l, r)\}\}$<br>$=max\{A, B\}$<br>$我们发现A和B分别是最大和最小连续子段和$<br>$A随x单调减，B随x单调增，则原函数是单峰的，我们可以用过三分来求这个最小值$<br>$时间复杂度为O(nlogC)$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-04-28</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="keyword">double</span> a[N];</div><div class="line"></div><div class="line"><span class="comment">//minimize the maximum substring sum</span></div><div class="line"><span class="function"><span class="keyword">double</span> <span class="title">check</span><span class="params">(<span class="keyword">double</span> x)</span> </span>&#123;</div><div class="line">    <span class="keyword">double</span> minv, maxv, sum1, sum2;</div><div class="line">    minv = maxv = sum1 = sum2 = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">        sum1 += a[i] - x;</div><div class="line">        sum2 += a[i] - x;</div><div class="line">        minv = min(minv, sum1);</div><div class="line">        maxv = max(maxv, sum2);</div><div class="line">        <span class="keyword">if</span>(sum1 &gt; <span class="number">0</span>) sum1 = <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span>(sum2 &lt; <span class="number">0</span>) sum2 = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> max(maxv, -minv);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">while</span>(t--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">"%lf"</span>, a + i);</div><div class="line">        <span class="keyword">double</span> l = <span class="number">0</span>, r = <span class="number">1e4</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; ++i) &#123;</div><div class="line">            <span class="keyword">double</span> ll = (<span class="number">2</span> * l + r) / <span class="number">3</span>;</div><div class="line">            <span class="keyword">double</span> rr = (l + <span class="number">2</span> * r) / <span class="number">3</span>;</div><div class="line">            <span class="keyword">if</span>(check(ll) &lt; check(rr)) r = rr;</div><div class="line">            <span class="keyword">else</span> l = ll;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%.12f\n"</span>, l);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 暴力 </category>
            
            <category> 搜索 </category>
            
            <category> 二/三分搜索 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 三分搜索 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CSU 1724 相等距离的和（线段树）]]></title>
      <url>/2016/04/29/CSU%201724%20%E7%9B%B8%E7%AD%89%E8%B7%9D%E7%A6%BB%E7%9A%84%E5%92%8C%EF%BC%88%E7%BA%BF%E6%AE%B5%E6%A0%91%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$给定1个空的升序集合A，集合元素下标从1开始，给出1个距离L，有三种操作：$<br>$add x:向集合中加入一个元素，数据保证这个元素不在集合中$<br>$del x:从集合中删除一个元素，数据保证这个元素存在集合中$<br>$sum x:输出A_x+A_{x+L}+A_{x+2L}+……(0&lt; x\le L)的值$<br><a id="more"></a></p>
</blockquote>
<p>分析：</p>
<blockquote>
<p>$线段树，把下标搞成从0开始的简单一点$<br>$每个节点维护cnt:=元素个数，sum[i]:=下标\%L=i的值的和$<br>$向上合并时先拷贝左儿子的sum，右儿子的sum根据左儿子元素个数计算新余数累加到当然节点$<br>$然后对于sum操作的答案就是sum[1][x-1]$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-04-28</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">int</span> n, L;</div><div class="line"><span class="keyword">int</span> cnt[N &lt;&lt; <span class="number">2</span>];</div><div class="line">LL sum[N &lt;&lt; <span class="number">2</span>][<span class="number">5</span>];</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; xs;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> rt)</span> </span>&#123;</div><div class="line">    cnt[rt] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; L; ++i) sum[rt][i] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span>(l == r) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">int</span> m = l + r &gt;&gt; <span class="number">1</span>;</div><div class="line">    build(l, m, rt &lt;&lt; <span class="number">1</span>);</div><div class="line">    build(m + <span class="number">1</span>, r, rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">up</span><span class="params">(<span class="keyword">int</span> rt)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> ls = rt &lt;&lt; <span class="number">1</span>, rs = ls | <span class="number">1</span>;</div><div class="line">    cnt[rt] = cnt[ls] + cnt[rs];</div><div class="line"></div><div class="line">    <span class="keyword">int</span> offset = cnt[ls];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; L; ++i) sum[rt][i] = sum[ls][i];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; L; ++i) sum[rt][(i + offset) % L] += sum[rs][i];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> v, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> rt)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(l == r) &#123;</div><div class="line">        cnt[rt] = v;</div><div class="line">        sum[rt][<span class="number">0</span>] = v * xs[l - <span class="number">1</span>];</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> m = l + r &gt;&gt; <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span>(o &lt;= m) update(o, v, l, m, rt &lt;&lt; <span class="number">1</span>);</div><div class="line">    <span class="keyword">else</span> update(o, v, m + <span class="number">1</span>, r, rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">    up(rt);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> op[N], a[N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;L) == <span class="number">2</span>) &#123;</div><div class="line">        xs.clear();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">            <span class="keyword">char</span> cmd[<span class="number">10</span>]; <span class="built_in">scanf</span>(<span class="string">"%s%d"</span>, cmd, a + i);</div><div class="line">            <span class="keyword">if</span>(*cmd == <span class="string">'s'</span>) op[i] = <span class="number">2</span>;</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                xs.push_back(a[i]);</div><div class="line">                op[i] = *cmd == <span class="string">'a'</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        sort(xs.begin(), xs.end());</div><div class="line">        xs.resize(unique(xs.begin(), xs.end()) - xs.begin());</div><div class="line">        build(<span class="number">1</span>, xs.size(), <span class="number">1</span>);</div><div class="line"></div><div class="line">        <span class="keyword">static</span> <span class="keyword">int</span> kase = <span class="number">0</span>;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Case %d:\n"</span>, ++kase);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">            <span class="keyword">if</span>(op[i] != <span class="number">2</span>) &#123;</div><div class="line">                <span class="keyword">int</span> o = lower_bound(xs.begin(), xs.end(), a[i]) - xs.begin() + <span class="number">1</span>;</div><div class="line">                update(o, op[i], <span class="number">1</span>, xs.size(), <span class="number">1</span>);</div><div class="line">            &#125; <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, sum[<span class="number">1</span>][a[i] - <span class="number">1</span>]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 数据结构 </category>
            
            <category> 线段树 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDU 5297 Y sequence (容斥、迭代)]]></title>
      <url>/2016/04/28/HDU%205297%20Y%20sequence%20(%E5%AE%B9%E6%96%A5%E3%80%81%E8%BF%AD%E4%BB%A3)/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$Y序列：不包含形如a^b(2\le b\le r, 2\le r\le 62)的数，并且Y(1)=2$<br>$求给定r下的Y(n)，N\le 2\times 10^{18}$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$这个题类似于之前做过的容斥题$<a href="http://acm.hdu.edu.cn/showproblem.php?pid=2204" target="_blank" rel="external">HDU 2204 Eddy’s爱好</a><br>$这种题的关键是如何不重不漏的计数，显然4^2会在2^4重复计数，所以我们就记最小的那个$<br>$接下来的关键就是容斥了，只容斥幂的素因子就好了，打好62内的素数表，注意选定的素因子不能超过r$<br>$2\times 3\times 5\times 7&gt;62，所以容斥的素因子个数不会超过3，复杂度不是很高$<br>$但是容斥的时候是可以的，但是不能超过62，因为4^{31}=2^{62}&gt;10^{18}$<br>$还要指数不能是1啊，然后统计n以后有多少a^e的数，直接把n开e次方就好了$<br>$据说会炸精度，上long double能存18位比较好$<br>$二分确实会T，我试过了，然后只要迭代就可以了，每次就加缺少的个数。。学到了$<br>$然后就是O(跑得过)了$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-04-27</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"></div><div class="line">LL n, r;</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; prime = &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">23</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">37</span>,</div><div class="line">                     <span class="number">41</span>, <span class="number">43</span>, <span class="number">47</span>, <span class="number">53</span>, <span class="number">59</span>, <span class="number">61</span></div><div class="line">                    &#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> e, <span class="keyword">int</span> cnt, LL n, LL&amp; sum)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(e &gt; <span class="number">62</span>) <span class="keyword">return</span>; <span class="comment">//4^31 -&gt; 2^62</span></div><div class="line">    <span class="keyword">if</span>(p == prime.size()) &#123;</div><div class="line">        <span class="keyword">if</span>(e == <span class="number">1</span>) <span class="keyword">return</span>;</div><div class="line">        LL cur = <span class="built_in">pow</span>((<span class="keyword">long</span> <span class="keyword">double</span>)(n + <span class="number">0.5</span>), <span class="number">1.0</span> / e) - <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span>(cnt &amp; <span class="number">1</span>) sum += cur;</div><div class="line">        <span class="keyword">else</span> sum -= cur;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    dfs(p + <span class="number">1</span>, e, cnt, n, sum);</div><div class="line">    <span class="keyword">if</span>(prime[p] &lt;= r) dfs(p + <span class="number">1</span>, e * prime[p], cnt + <span class="number">1</span>, n, sum);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">calc</span><span class="params">(LL n)</span> </span>&#123;</div><div class="line">    LL sum = <span class="number">0</span>;</div><div class="line">    dfs(<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, n, sum);</div><div class="line">    <span class="keyword">return</span> n - sum - <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">while</span>(t--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%I64d%I64d"</span>, &amp;n, &amp;r);</div><div class="line">        LL ans = n, cnt = calc(n);</div><div class="line">        <span class="keyword">while</span>(cnt &lt; n) &#123;</div><div class="line">            ans += n - cnt;</div><div class="line">            cnt = calc(ans);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 数学 </category>
            
            <category> 容斥 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 容斥 </tag>
            
            <tag> 迭代 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDU 5299 Circles Game (圆的扫描线、树上sg)]]></title>
      <url>/2016/04/27/HDU%205299%20Circles%20Game%20(%E5%9C%86%E7%9A%84%E6%89%AB%E6%8F%8F%E7%BA%BF%E3%80%81%E6%A0%91%E4%B8%8Asg)/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$平面上有N\le 5\times 10^4个两两不交的圆，现在有两个人轮流选取圆$<br>$每选到一个圆就要把这个圆及其内部的所有圆都删去，最后不能操作的人输$<br>$问谁有必胜策略$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$由于圆两两不交，如果根据圆的包含关系建个图（即每个圆向最近包含它的圆连边），可以得到一个森林$<br>$问题转化为树上的SG博弈，时间复杂度O(nlogn)$</p>
</blockquote>
<hr>
<p>(以下转载自<a href="http://csgrandeur.com/hdu3511-prison-break-guan-yu-yuan-de-sao-miao-xian/" target="_blank" rel="external">http://csgrandeur.com/hdu3511-prison-break-guan-yu-yuan-de-sao-miao-xian/</a></p>
<blockquote>
<p>$建图需要用到圆的扫描线，具体看下图：$<br><img src="http://7xru22.com1.z0.glb.clouddn.com/16-4-27/68350085.jpg" alt=""> <img src="http://7xru22.com1.z0.glb.clouddn.com/16-4-27/49884970.jpg" alt=""><br>$首先和传统扫描线的方法一样先把每个圆左右侧x坐标排个序作为事件，然后开始扫描$<br>$圆就麻烦在没有像矩形那样可以离散化的规则上下界，便无法用预处理好的离散编号来构建线段树$<br>$但是我们可以注意到对于扫描线扫描的过程中从上到下穿过各个圆的顺序是不会变的$<br>$所以可以利用二叉树，把扫描线经过的(边)有序地插入（这里用set就很方便高效了）$<br>$对于圆来说，这个边就是与上半圆交点纵坐标和与下半圆交点纵坐标$<br>$即使扫描线位置的变化，插入时用来比较的代表(边)的纵坐标会变化$<br>$但是扫描线穿过圆的顺序是不会变的，所以新的(边)依然会插入到正确的位置，其他(边)的相对位置不会改变$<br>$这样set二叉树的结构不会变，就可以修改比较函数里的全局变量$<br>$一共有4种情况，见代码吧$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-04-27</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> EPS = <span class="number">1e-8</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">sgn</span><span class="params">(<span class="keyword">double</span> x)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> x &lt; -EPS ? <span class="number">-1</span> : x &gt; EPS;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">double</span> timeLine;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Circle</span> &#123;</span></div><div class="line">    <span class="keyword">double</span> x, y, r;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%lf%lf%lf"</span>, &amp;x, &amp;y, &amp;r);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getY</span><span class="params">(<span class="keyword">int</span> up)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> y + up * (<span class="built_in">sqrt</span>(r * r - (x - timeLine) * (x - timeLine)));</div><div class="line">    &#125;</div><div class="line">&#125; c[N];</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">double</span>, <span class="keyword">int</span>&gt; Event; <span class="comment">//x</span></div><div class="line">Event e[N &lt;&lt; <span class="number">1</span>];</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> id, d;</div><div class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Node&amp; r) <span class="keyword">const</span> &#123;</div><div class="line">        <span class="keyword">double</span> y1 = c[id].getY(d), y2 = c[r.id].getY(r.d); <span class="comment">//y</span></div><div class="line">        <span class="keyword">return</span> sgn(y1 - y2) ? y1 &lt; y2 : d &lt; r.d;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, dep[N], p[N];</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> sg = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v : G[u]) sg ^= dfs(v) + <span class="number">1</span>;</div><div class="line">    <span class="keyword">return</span> sg;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">while</span>(t--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i) G[i].clear();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">            c[i].read();</div><div class="line">            e[<span class="number">2</span> * i - <span class="number">1</span>] = &#123;c[i].x - c[i].r, i&#125;;</div><div class="line">            e[<span class="number">2</span> * i] = &#123;c[i].x + c[i].r, -i&#125;;</div><div class="line">        &#125;</div><div class="line">        sort(e + <span class="number">1</span>, e + <span class="number">2</span> * n + <span class="number">1</span>);</div><div class="line"></div><div class="line">        <span class="built_in">set</span>&lt;Node&gt; s;</div><div class="line">        <span class="built_in">memset</span>(dep, <span class="number">0</span>, <span class="keyword">sizeof</span> dep);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2</span> * n; ++i) &#123;</div><div class="line">            timeLine = e[i].first;</div><div class="line">            <span class="keyword">int</span> id = e[i].second;</div><div class="line"></div><div class="line">            <span class="keyword">if</span>(id &lt; <span class="number">0</span>) &#123;</div><div class="line">                s.erase(&#123; -id, <span class="number">1</span>&#125;);</div><div class="line">                s.erase(&#123; -id, <span class="number">-1</span>&#125;);</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">auto</span> up = s.lower_bound(&#123;id, <span class="number">1</span>&#125;), dw = up;</div><div class="line">            <span class="keyword">if</span>(up == s.end() || dw == s.begin()) &#123; <span class="comment">//无包含</span></div><div class="line">                p[id] = <span class="number">0</span>;</div><div class="line">                dep[id] = <span class="number">1</span>;</div><div class="line">                G[<span class="number">0</span>].push_back(id);</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>((--dw)-&gt;id == up-&gt;id) &#123; <span class="comment">//直接被包含</span></div><div class="line">                p[id] = dw-&gt;id;</div><div class="line">                dep[id] = dep[dw-&gt;id] + <span class="number">1</span>;</div><div class="line">                G[dw-&gt;id].push_back(id);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">if</span>(dep[dw-&gt;id] == dep[up-&gt;id]) &#123; <span class="comment">//三圆是兄弟</span></div><div class="line">                    p[id] = p[dw-&gt;id];</div><div class="line">                    dep[id] = dep[dw-&gt;id];</div><div class="line">                    G[p[dw-&gt;id]].push_back(id);</div><div class="line">                &#125; <span class="keyword">else</span> &#123; <span class="comment">//两圆是兄弟，另一圆（深度小的）包两圆</span></div><div class="line">                    <span class="keyword">if</span>(dep[dw-&gt;id] &gt; dep[up-&gt;id]) swap(up, dw);</div><div class="line">                    p[id] = dw-&gt;id;</div><div class="line">                    dep[id] = dep[dw-&gt;id] + <span class="number">1</span>;</div><div class="line">                    G[dw-&gt;id].push_back(id);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            s.insert(&#123;id, <span class="number">1</span>&#125;);</div><div class="line">            s.insert(&#123;id, <span class="number">-1</span>&#125;);</div><div class="line">        &#125;</div><div class="line"></div><div class="line"><span class="comment">//      for(int i = 1; i &lt;= n; ++i) printf("%d-&gt;%d\n", p[i], i);</span></div><div class="line"></div><div class="line">        <span class="built_in">puts</span>(dfs(<span class="number">0</span>) ? <span class="string">"Alice"</span> : <span class="string">"Bob"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 计算几何 </category>
            
            <category> 扫描线 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 扫描线 </tag>
            
            <tag> 树上sg </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDU 5296 Annoying problem（LCA）]]></title>
      <url>/2016/04/26/HDU%205296%20Annoying%20problem%EF%BC%88LCA%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$N，Q\le 10^5，给定N个点的一棵树，边权C_i \le 100$<br>$Q次操作一个集合，输出每次操作后使得集合中点两两连通的最小边权和：$<br>$1 u:如果u不在集合中，则加入u$<br>$2 u:如果u不在集合中，则删除u$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$手玩一下可以发现，其实就是加入点或者删除点到最近的一条链的边权和$<br>$然后如何找呢，详细看这个博客吧，讲得很清楚：$<a href="http://blog.csdn.net/u014679804/article/details/48930481" target="_blank" rel="external">传送门</a><br>$根据dfs序来确定选择的链，如果集合中的dfs序比当前点u都大或者小，就取dfs最大点和最小点$<br>$反之，就选大于它的dfs序的第一个点和小于它的最大的那个点$<br>$点到链的最短距离：$<br><img src="http://7xru22.com1.z0.glb.clouddn.com/16-4-27/7110843.jpg" alt=""></p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-04-26</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, q;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> v, c;</div><div class="line">&#125;;</div><div class="line"><span class="built_in">vector</span>&lt;Edge&gt; G[N];</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> LOG = <span class="number">17</span>;</div><div class="line"><span class="keyword">int</span> dfn[N], dfsNum;</div><div class="line"><span class="keyword">int</span> dep[N], dis[N], p[LOG][N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa)</span> </span>&#123;</div><div class="line">    dfn[u] = ++dfsNum;</div><div class="line">    p[<span class="number">0</span>][u] = fa;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; LOG; ++i) p[i][u] = p[i - <span class="number">1</span>][p[i - <span class="number">1</span>][u]];</div><div class="line">    <span class="keyword">for</span>(Edge&amp; e : G[u]) &#123;</div><div class="line">        <span class="keyword">int</span> v = e.v, c = e.c;</div><div class="line">        <span class="keyword">if</span>(v == fa) <span class="keyword">continue</span>;</div><div class="line">        dep[v] = dep[u] + <span class="number">1</span>;</div><div class="line">        dis[v] = dis[u] + c;</div><div class="line">        dfs(v, u);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(dep[u] &gt; dep[v]) swap(u, v);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; LOG; ++i)</div><div class="line">        <span class="keyword">if</span>(dep[v] - dep[u] &gt;&gt; i &amp; <span class="number">1</span>) v = p[i][v];</div><div class="line">    <span class="keyword">if</span>(u == v) <span class="keyword">return</span> u;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = LOG - <span class="number">1</span>; ~i; --i)</div><div class="line">        <span class="keyword">if</span>(p[i][u] != p[i][v])</div><div class="line">            u = p[i][u], v = p[i][v];</div><div class="line">    <span class="keyword">return</span> p[<span class="number">0</span>][u];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//dis(u, x, y) = (dis(u, x) + dis(u, y) - dis(x, y)) / 2</span></div><div class="line"><span class="comment">//dis(u)+dis(x)-2dis(lca(u,x)) + dis(u)+dis(y)-2dis(lca(u,y))</span></div><div class="line"><span class="comment">//-dis(x)-dis(y)+2*dis(lca(x,y))</span></div><div class="line"></div><div class="line"><span class="comment">//vertex to chain</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> dis[u] - dis[lca(u, x)] - dis[lca(u, y)] + dis[lca(x, y)];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">gao</span><span class="params">(<span class="keyword">int</span> u, <span class="built_in">set</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt;&amp; s)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(!s.size()) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> x, y;</div><div class="line">    <span class="keyword">auto</span> iter = s.lower_bound(&#123;dfn[u], u&#125;);</div><div class="line">    <span class="keyword">if</span>(iter == s.end() || iter == s.begin()) &#123;</div><div class="line">        x = s.begin()-&gt;second;</div><div class="line">        y = s.rbegin()-&gt;second;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        x = iter-&gt;second;</div><div class="line">        --iter;</div><div class="line">        y = iter-&gt;second;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> get(u, x, y);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">while</span>(t--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;q);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) G[i].clear();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</div><div class="line">            <span class="keyword">int</span> u, v, c; <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;u, &amp;v, &amp;c);</div><div class="line">            G[u].push_back(&#123;v, c&#125;);</div><div class="line">            G[v].push_back(&#123;u, c&#125;);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        dfsNum = <span class="number">0</span>;</div><div class="line">        dfs(<span class="number">1</span>, <span class="number">0</span>);</div><div class="line"></div><div class="line">        <span class="keyword">static</span> <span class="keyword">int</span> kase = <span class="number">0</span>;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d:\n"</span>, ++kase);</div><div class="line"></div><div class="line">        <span class="built_in">set</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; s;</div><div class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(q--) &#123;</div><div class="line">            <span class="keyword">int</span> op, u; <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;op, &amp;u);</div><div class="line">            <span class="keyword">if</span>(op == <span class="number">1</span>) &#123;</div><div class="line">                <span class="keyword">if</span>(!s.count(&#123;dfn[u], u&#125;)) &#123;</div><div class="line">                    ans += gao(u, s);</div><div class="line">                    s.insert(&#123;dfn[u], u&#125;);</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">if</span>(s.count(&#123;dfn[u], u&#125;)) &#123;</div><div class="line">                    s.erase(&#123;dfn[u], u&#125;);</div><div class="line">                    ans -= gao(u, s);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 图论 </category>
            
            <category> LCA </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LCA </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ZOJ 3946 Highway Project（最短路、MST）]]></title>
      <url>/2016/04/25/ZOJ%203946%20Highway%20Project%EF%BC%88%E6%9C%80%E7%9F%AD%E8%B7%AF%E3%80%81MST%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$N，M\le 10^5，N个点M条边的无向图，每条边有(D, C)属性，分别是通过时间和修建花费$<br>$现要保证0点到所有点最短路的情况下，花费最少$<br>$求最短路和以及花费$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$dijkstra的时候同时更新下到每个点的花费就好了$<br>$其实就是prim的感觉，对算法要仔细理解辣$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-04-23</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> v, d, c;</div><div class="line">&#125;;</div><div class="line"><span class="built_in">vector</span>&lt;Edge&gt; G[N];</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> pair&lt;LL, <span class="keyword">int</span>&gt; P;</div><div class="line">LL f[N], g[N];</div><div class="line"><span class="keyword">bool</span> done[N];</div><div class="line">pair&lt;LL, LL&gt; dijkstra() &#123;</div><div class="line">    priority_queue&lt;P, <span class="built_in">vector</span>&lt;P&gt;, greater&lt;P&gt; &gt; q;</div><div class="line">    q.push(&#123;<span class="number">0</span>, <span class="number">0</span>&#125;);</div><div class="line">    <span class="built_in">memset</span>(f, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> f);</div><div class="line">    <span class="built_in">memset</span>(g, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> g);</div><div class="line">    <span class="built_in">memset</span>(done, <span class="number">0</span>, <span class="keyword">sizeof</span> done);</div><div class="line">    f[<span class="number">0</span>] = g[<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(q.size()) &#123;</div><div class="line">        <span class="keyword">int</span> u = q.top().second; q.pop();</div><div class="line">        <span class="keyword">if</span>(done[u]) <span class="keyword">continue</span>;</div><div class="line">        done[u] = <span class="literal">true</span>;</div><div class="line">        <span class="keyword">for</span>(Edge&amp; e : G[u]) &#123;</div><div class="line">            <span class="keyword">int</span> v = e.v, d = e.d, c = e.c;</div><div class="line">            <span class="keyword">if</span>(f[v] &gt; f[u] + d || f[v] == f[u] + d &amp;&amp; g[v] &gt; c) &#123;</div><div class="line">                f[v] = f[u] + d;</div><div class="line">                g[v] = c;</div><div class="line">                q.push(&#123;f[v], v&#125;);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    pair&lt;LL, LL&gt; ret = &#123;<span class="number">0</span>, <span class="number">0</span>&#125;;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</div><div class="line">        ret.first += f[i];</div><div class="line">        ret.second += g[i];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">while</span>(t--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) G[i].clear();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</div><div class="line">            <span class="keyword">int</span> u, v, d, c; <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;u, &amp;v, &amp;d, &amp;c);</div><div class="line">            G[u].push_back(&#123;v, d, c&#125;);</div><div class="line">            G[v].push_back(&#123;u, d, c&#125;);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">auto</span> ans = dijkstra();</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%lld %lld\n"</span>, ans.first, ans.second);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 图论 </category>
            
            <category> 最短路 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[ZOJ 3944 People Counting（暴力）]]></title>
      <url>/2016/04/25/ZOJ%203944%20People%20Counting%EF%BC%88%E6%9A%B4%E5%8A%9B%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$N\times M的矩阵，N，M\le 100，现给定人的形状，人可能被部分遮挡$<br>$问图里有几个人$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$以头为标志点来存个位置数组，然后碰到身体部分就统一到头$<br>$一定是对他的身体部分进行标记$<br>$（有可能身体是别人的。。怪自己写代码不鲁棒。。强行有trick）$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-04-23</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">char</span> s[<span class="number">300</span>][<span class="number">300</span>];</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> OFF = <span class="number">100</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">char</span>* peo = <span class="string">"O/|\\()"</span>;</div><div class="line"><span class="keyword">int</span> d[][<span class="number">2</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">-1</span>, <span class="number">2</span>, <span class="number">1</span>&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">while</span>(t--) &#123;</div><div class="line">        <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="keyword">sizeof</span> s);</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = OFF; i &lt; n + OFF; ++i) <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s[i] + OFF);</div><div class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = OFF; i &lt; n + OFF; ++i) &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = OFF; j &lt; m + OFF; ++j) &#123;</div><div class="line">                <span class="keyword">if</span>(s[i][j] == <span class="string">'.'</span>) <span class="keyword">continue</span>;</div><div class="line">                ++ans;</div><div class="line">                <span class="keyword">int</span> idx = <span class="built_in">strchr</span>(peo, s[i][j]) - peo;</div><div class="line">                <span class="keyword">int</span> x = i - d[idx][<span class="number">0</span>], y = j - d[idx][<span class="number">1</span>];</div><div class="line"><span class="comment">//                printf("%d:= %d %d %d %d\n", idx, i - OFF, j - OFF, x - OFF, y - OFF);</span></div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">6</span>; ++k) &#123;</div><div class="line">                    <span class="keyword">int</span> nx = x + d[k][<span class="number">0</span>], ny = y + d[k][<span class="number">1</span>];</div><div class="line">                    <span class="keyword">if</span>(s[nx][ny] == peo[k]) s[nx][ny] = <span class="string">'.'</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 暴力 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[ZOJ 3939 The Lucky Week（打表）]]></title>
      <url>/2016/04/25/ZOJ%203939%20The%20Lucky%20Week%EF%BC%88%E6%89%93%E8%A1%A8%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$Lucky Week:某个星期一是这月的1、11、21号的话$<br>$给定第1个Lucky Week的星期一，问第N\le 10^9的日期$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$写个函数来打表咯，发现400就是周期了，然后就很简单了$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-04-23</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> Y, M, D, n;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isLeap</span><span class="params">(<span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> y % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; y % <span class="number">100</span> || y % <span class="number">400</span> == <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> mon[] = &#123;<span class="number">0</span>, <span class="number">31</span>, <span class="number">28</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">go</span><span class="params">(<span class="keyword">int</span>&amp; y, <span class="keyword">int</span>&amp; m, <span class="keyword">int</span>&amp; d)</span> </span>&#123;</div><div class="line">    d += <span class="number">7</span>;</div><div class="line">    <span class="keyword">int</span> curMonth = m == <span class="number">2</span> &amp;&amp; isLeap(y) ? mon[<span class="number">2</span>] + <span class="number">1</span> : mon[m];</div><div class="line">    <span class="keyword">if</span>(d &gt; curMonth) ++m, d -= curMonth;</div><div class="line">    <span class="keyword">if</span>(m &gt; <span class="number">12</span>) ++y, m -= <span class="number">12</span>;</div><div class="line">    <span class="keyword">return</span> d == <span class="number">1</span> || d == <span class="number">11</span> || d == <span class="number">21</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    Y = <span class="number">2016</span>, M = <span class="number">4</span>, D = <span class="number">11</span>;</div><div class="line">    <span class="keyword">int</span> y = <span class="number">2016</span>, m = <span class="number">4</span>, d = <span class="number">11</span>;</div><div class="line">    <span class="keyword">int</span> cnt = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span>(<span class="literal">true</span>) &#123;  <span class="comment">//2058</span></div><div class="line">        <span class="keyword">bool</span> have = go(y, m, d);</div><div class="line">        cnt += have;</div><div class="line">        <span class="keyword">if</span>(make_tuple(y, m, d) &gt;= make_tuple(Y + <span class="number">400</span>, M, D)) &#123;</div><div class="line">            cnt -= have;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"><span class="comment">//    printf("!!%d %d %d\n", y, m, d);</span></div><div class="line"><span class="comment">//    prln(cnt);</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">while</span>(t--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;Y, &amp;M, &amp;D, &amp;n); --n;</div><div class="line">        Y += <span class="number">400</span> * (n / <span class="number">2058</span>);</div><div class="line">        n %= <span class="number">2058</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n;)</div><div class="line">            <span class="keyword">if</span>(go(Y, M, D)) ++i;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d %d\n"</span>, Y, M, D);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 暴力 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[ZOJ 3938 Defuse the Bomb（模拟）]]></title>
      <url>/2016/04/25/ZOJ%203938%20Defuse%20the%20Bomb%EF%BC%88%E6%A8%A1%E6%8B%9F%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$模拟Defuse the Bomb这个游戏的说明书啦$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$写个函数来判断是位置还是值咯，代码量少，而且不会写错$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-04-23</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt;&amp; ans, <span class="keyword">int</span>* a, <span class="keyword">bool</span> position, <span class="keyword">int</span> value)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(position) ans.push_back(&#123;value, a[value]&#125;);</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">4</span>; ++i)</div><div class="line">            <span class="keyword">if</span>(a[i] == value) ans.push_back(&#123;i, a[i]&#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">while</span>(t--) &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; ans;</div><div class="line">        ans.push_back(&#123;<span class="number">0</span>, <span class="number">0</span>&#125;); <span class="comment">//garbage value</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; ++i) &#123;</div><div class="line">            <span class="keyword">int</span> d, a[<span class="number">5</span>]; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;d);</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">4</span>; ++j) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a + j);</div><div class="line">            <span class="keyword">if</span>(i == <span class="number">1</span>) &#123;</div><div class="line">                <span class="keyword">if</span>(d == <span class="number">1</span>) update(ans, a, <span class="number">1</span>, <span class="number">2</span>);</div><div class="line">                <span class="keyword">else</span> update(ans, a, <span class="number">1</span>, d);</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(i == <span class="number">2</span>) &#123;</div><div class="line">                <span class="keyword">if</span>(d == <span class="number">1</span>) update(ans, a, <span class="number">0</span>, <span class="number">4</span>);</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(d == <span class="number">2</span> || d == <span class="number">4</span>)</div><div class="line">                    update(ans, a, <span class="number">1</span>, ans[<span class="number">1</span>].first);</div><div class="line">                <span class="keyword">else</span> ans.push_back(&#123;<span class="number">1</span>, a[<span class="number">1</span>]&#125;);</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(i == <span class="number">3</span>) &#123;</div><div class="line">                <span class="keyword">if</span>(d == <span class="number">1</span>) update(ans, a, <span class="number">0</span>, ans[<span class="number">2</span>].second);</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(d == <span class="number">2</span>) update(ans, a, <span class="number">0</span>, ans[<span class="number">1</span>].second);</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(d == <span class="number">3</span>) update(ans, a, <span class="number">1</span>, <span class="number">3</span>);</div><div class="line">                <span class="keyword">else</span> update(ans, a, <span class="number">0</span>, <span class="number">4</span>);</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(i == <span class="number">4</span>) &#123;</div><div class="line">                <span class="keyword">if</span>(d == <span class="number">1</span>) update(ans, a, <span class="number">1</span>, ans[<span class="number">1</span>].first);</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(d == <span class="number">2</span>) update(ans, a, <span class="number">1</span>, <span class="number">1</span>);</div><div class="line">                <span class="keyword">else</span> update(ans, a, <span class="number">1</span>, ans[<span class="number">2</span>].first);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">if</span>(d == <span class="number">1</span>) update(ans, a, <span class="number">0</span>, ans[<span class="number">1</span>].second);</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(d == <span class="number">2</span>) update(ans, a, <span class="number">0</span>, ans[<span class="number">2</span>].second);</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(d == <span class="number">3</span>) update(ans, a, <span class="number">0</span>, ans[<span class="number">4</span>].second);</div><div class="line">                <span class="keyword">else</span> update(ans, a, <span class="number">0</span>, ans[<span class="number">3</span>].second);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; ++i)</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, ans[i].first, ans[i].second);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 暴力 </category>
            
            <category> 小模拟 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[北京林业大学“计蒜客”杯程序设计竞赛]]></title>
      <url>/2016/04/25/%E5%8C%97%E4%BA%AC%E6%9E%97%E4%B8%9A%E5%A4%A7%E5%AD%A6%E2%80%9C%E8%AE%A1%E8%92%9C%E5%AE%A2%E2%80%9D%E6%9D%AF%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AB%9E%E8%B5%9B/</url>
      <content type="html"><![CDATA[<p><del>zz选手只做了7个题</del><br>$A、B、C、D、E、G、H$</p>
<a id="more"></a>
<h3 id="A-喝酒"><a href="#A-喝酒" class="headerlink" title="A.喝酒"></a>A.喝酒</h3><p>题意：</p>
<blockquote>
<p>$N瓶酒，3个盖子或者4个空瓶可以换1瓶酒，问能喝几瓶$</p>
</blockquote>
<p>分析：</p>
<blockquote>
<p>$直接模拟一下，别忘记换的酒也有盖子和瓶子$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-04-24</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">while</span>(t--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">        <span class="keyword">int</span> ans = n, a = n, b = n;</div><div class="line">        <span class="keyword">while</span>(a &gt;= <span class="number">3</span> || b &gt;= <span class="number">4</span>) &#123;</div><div class="line">            <span class="keyword">int</span> delta = a / <span class="number">3</span> + b / <span class="number">4</span>;</div><div class="line">            a = a % <span class="number">3</span> + delta;</div><div class="line">            b = b % <span class="number">4</span> + delta;</div><div class="line">            ans += delta;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="B-大钉骑马走江湖"><a href="#B-大钉骑马走江湖" class="headerlink" title="B.大钉骑马走江湖"></a>B.大钉骑马走江湖</h3><p>题意：</p>
<blockquote>
<p>$N*M的图，马走日，问到终点要几步$</p>
</blockquote>
<p>分析：</p>
<blockquote>
<p>$打个方向表和蹩马腿的表，然后直接bfs就好$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-04-24</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">char</span> s[<span class="number">105</span>][<span class="number">105</span>];</div><div class="line"><span class="keyword">int</span> f[<span class="number">105</span>][<span class="number">105</span>];</div><div class="line"><span class="keyword">int</span> sx, sy, tx, ty;</div><div class="line"><span class="keyword">int</span> d[][<span class="number">2</span>] = &#123;&#123;<span class="number">1</span>, <span class="number">2</span>&#125;, &#123;<span class="number">1</span>, <span class="number">-2</span>&#125;, &#123; <span class="number">-1</span>, <span class="number">2</span>&#125;, &#123; <span class="number">-1</span>, <span class="number">-2</span>&#125;, &#123;<span class="number">2</span>, <span class="number">1</span>&#125;, &#123;<span class="number">2</span>, <span class="number">-1</span>&#125;, &#123; <span class="number">-2</span>, <span class="number">1</span>&#125;, &#123; <span class="number">-2</span>, <span class="number">-1</span>&#125;&#125;;</div><div class="line"><span class="keyword">int</span> no[][<span class="number">2</span>] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q; q.push(sx * m + sy);</div><div class="line">    <span class="built_in">memset</span>(f, <span class="number">-1</span>, <span class="keyword">sizeof</span> f);</div><div class="line">    f[sx][sy] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(q.size()) &#123;</div><div class="line">        <span class="keyword">int</span> u = q.front(); q.pop();</div><div class="line">        <span class="keyword">int</span> x = u / m, y = u % m;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; ++i) &#123;</div><div class="line">            <span class="keyword">int</span> nx = x + d[i][<span class="number">0</span>], ny = y + d[i][<span class="number">1</span>];</div><div class="line">            <span class="keyword">int</span> kx = x + no[i][<span class="number">0</span>], ky = y + no[i][<span class="number">1</span>];</div><div class="line">            <span class="keyword">if</span>(nx &lt; <span class="number">0</span> || nx &gt;= n || ny &lt; <span class="number">0</span> || ny &gt;= m) <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">if</span>(kx &lt; <span class="number">0</span> || kx &gt;= n || ky &lt; <span class="number">0</span> || ky &gt;= m) <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">if</span>(s[nx][ny] == <span class="string">'#'</span> || s[kx][ky] == <span class="string">'#'</span>) <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">if</span>(f[nx][ny] == <span class="number">-1</span>) &#123;</div><div class="line">                f[nx][ny] = f[x][y] + <span class="number">1</span>;</div><div class="line">                q.push(nx * m + ny);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> f[tx][ty];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m) == <span class="number">2</span>) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s[i]);</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j) &#123;</div><div class="line">                <span class="keyword">if</span>(s[i][j] == <span class="string">'s'</span>) sx = i, sy = j;</div><div class="line">                <span class="keyword">if</span>(s[i][j] == <span class="string">'e'</span>) tx = i, ty = j;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, bfs());</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="C-Candy"><a href="#C-Candy" class="headerlink" title="C. Candy"></a>C. Candy</h3><p>题意：</p>
<blockquote>
<p>$N\le10^5个人，每个人有个权，现开始发糖，至少1个$<br>$要求权比旁边2个人大的，必须糖比他多$<br>$问最少需要发多少糖$</p>
</blockquote>
<p>分析：</p>
<blockquote>
<p>$暴力，先给每个人发一个，然后正着补一遍，倒着补一遍就好了$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-04-24</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, a[N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) == <span class="number">1</span>) &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v(n + <span class="number">1</span>, <span class="number">1</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a + i);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">            <span class="keyword">if</span>(i &gt; <span class="number">1</span> &amp;&amp; a[i] &gt; a[i - <span class="number">1</span>]) v[i] = max(v[i], v[i - <span class="number">1</span>] + <span class="number">1</span>);</div><div class="line">            <span class="keyword">if</span>(i &lt; n &amp;&amp; a[i] &gt; a[i + <span class="number">1</span>]) v[i] = max(v[i], v[i + <span class="number">1</span>] + <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = n; i; --i) &#123;</div><div class="line">            <span class="keyword">if</span>(i &gt; <span class="number">1</span> &amp;&amp; a[i] &gt; a[i - <span class="number">1</span>]) v[i] = max(v[i], v[i - <span class="number">1</span>] + <span class="number">1</span>);</div><div class="line">            <span class="keyword">if</span>(i &lt; n &amp;&amp; a[i] &gt; a[i + <span class="number">1</span>]) v[i] = max(v[i], v[i + <span class="number">1</span>] + <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line"><span class="comment">//        for(int x : v) printf("%d ", x); puts("");</span></div><div class="line">        <span class="keyword">int</span> ans = accumulate(v.begin() + <span class="number">1</span>, v.end(), <span class="number">0</span>);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="D-A-letter-from-Chensg"><a href="#D-A-letter-from-Chensg" class="headerlink" title="D. A letter from Chensg"></a>D. A letter from Chensg</h3><p>题意：</p>
<blockquote>
<p>$求N个串的字典序最小的最长公共子串$<br>$我很喜欢这封love letter啊$</p>
</blockquote>
<p>分析：</p>
<blockquote>
<p>$数据非常小，直接从长到短的暴力就好了，正解当然是sa啦$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2015-10-30</span></div><div class="line"><span class="comment">//  Copyright (c) 2015 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//#pragma comment(linker, "/STACK:1024000000,1024000000")</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="built_in">string</span> s[<span class="number">15</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> t; <span class="built_in">cin</span> &gt;&gt; t;</div><div class="line">    <span class="keyword">while</span>(t--) &#123;</div><div class="line">        <span class="built_in">cin</span> &gt;&gt; n;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">cin</span> &gt;&gt; s[i];</div><div class="line">        <span class="built_in">string</span> ans;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> sz = <span class="number">60</span>; sz &gt;= <span class="number">3</span>; --sz) &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> st = <span class="number">0</span>; st + sz - <span class="number">1</span> &lt; <span class="number">60</span>; ++st) &#123;</div><div class="line">                <span class="keyword">bool</span> ok = <span class="literal">true</span>;</div><div class="line">                <span class="built_in">string</span> cur = s[<span class="number">1</span>].substr(st, sz);</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</div><div class="line">                    <span class="keyword">if</span>(s[i].find(cur) == <span class="built_in">string</span>::npos) &#123;</div><div class="line">                        ok = <span class="literal">false</span>;</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span>(!ok) <span class="keyword">continue</span>;</div><div class="line">                <span class="keyword">if</span>(!ans.size() || cur &lt; ans) ans = cur;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(ans.size()) <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(ans.size()) <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">'\n'</span>;</div><div class="line">        <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"No significant commonalities\n"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="E-delightful-world"><a href="#E-delightful-world" class="headerlink" title="E. delightful world"></a>E. delightful world</h3><p>题意：</p>
<blockquote>
<p>$猜1个01串，先现给出N\le 35次猜想，以及对应的猜对的个数\le 5$<br>$问符合要求的串有几个$</p>
</blockquote>
<p>分析：</p>
<blockquote>
<p>$meet in middle辣，二进制枚举前半部分，然后哈希这个串的匹配情况成数字，因为猜对个数小嘛$<br>$然后从另一半计数就好了$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-04-24</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">char</span> s[<span class="number">15</span>][<span class="number">40</span>];</div><div class="line"><span class="keyword">int</span> a[<span class="number">15</span>];</div><div class="line">LL ten[<span class="number">20</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    ten[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">20</span>; ++i) ten[i] = ten[i - <span class="number">1</span>] * <span class="number">10</span>;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m) == <span class="number">2</span>) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) <span class="built_in">scanf</span>(<span class="string">"%s%d"</span>, s[i], a + i);</div><div class="line">        <span class="built_in">map</span>&lt;LL, <span class="keyword">int</span>&gt; mp;</div><div class="line">        <span class="keyword">int</span> half = n &gt;&gt; <span class="number">1</span>, lft = n - half;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1</span> &lt;&lt; half; ++i) &#123;</div><div class="line">            <span class="keyword">bool</span> ok = <span class="literal">true</span>;</div><div class="line">            LL sum = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j) &#123;</div><div class="line">                <span class="keyword">int</span> cnt = <span class="number">0</span>;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; half; ++k)</div><div class="line">                    <span class="keyword">if</span>(s[j][k] - <span class="string">'0'</span> == (i &gt;&gt; k &amp; <span class="number">1</span>)) ++cnt;</div><div class="line">                <span class="keyword">if</span>(cnt &lt;= a[j]) sum += cnt * ten[j];</div><div class="line">                <span class="keyword">else</span> &#123;</div><div class="line">                    ok = <span class="literal">false</span>;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(ok) ++mp[sum];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        LL ans = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1</span> &lt;&lt; lft; ++i) &#123;</div><div class="line">            <span class="keyword">bool</span> ok = <span class="literal">true</span>;</div><div class="line">            LL sum = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j) &#123;</div><div class="line">                <span class="keyword">int</span> cnt = <span class="number">0</span>;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; lft; ++k)</div><div class="line">                    <span class="keyword">if</span>(s[j][half + k] - <span class="string">'0'</span> == (i &gt;&gt; k &amp; <span class="number">1</span>)) ++cnt;</div><div class="line">                <span class="keyword">if</span>(cnt &lt;= a[j]) sum += (a[j] - cnt) * ten[j];</div><div class="line">                <span class="keyword">else</span> &#123;</div><div class="line">                    ok = <span class="literal">false</span>;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(ok) ans += mp[sum];</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="G-易彰彪的一张表"><a href="#G-易彰彪的一张表" class="headerlink" title="G. 易彰彪的一张表"></a>G. 易彰彪的一张表</h3><p>题意：</p>
<blockquote>
<p>$N个长度为M的字符串，如果他们首尾相连，问T串是否是合并串的子串$</p>
</blockquote>
<p>分析：</p>
<blockquote>
<p>$数据很小，直接合并到一起string::find$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-04-24</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m) &#123;</div><div class="line">        <span class="built_in">string</span> s, t;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">            <span class="built_in">cin</span> &gt;&gt; t;</div><div class="line">            s += t;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.size(); ++i) s[i] = <span class="built_in">tolower</span>(s[i]);</div><div class="line">        <span class="built_in">cin</span> &gt;&gt; t;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t.size(); ++i) t[i] = <span class="built_in">tolower</span>(t[i]);</div><div class="line">        <span class="keyword">if</span>(s.find(t) != <span class="built_in">string</span>::npos) <span class="built_in">cout</span> &lt;&lt; <span class="string">"YES\n"</span>;</div><div class="line">        <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"NO\n"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="H-Ivan-的等待焦虑症发作了"><a href="#H-Ivan-的等待焦虑症发作了" class="headerlink" title="H. Ivan 的等待焦虑症发作了"></a>H. Ivan 的等待焦虑症发作了</h3><p>题意：</p>
<blockquote>
<p>$10个电梯上下楼，会在一些层停留，问到达规定层的时间（不算这层的停留时间）$</p>
</blockquote>
<p>分析：</p>
<blockquote>
<p>$数据很小直接一层一层走的模拟就好了，一开始写lower_bound没看数据写了半天。$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-04-24</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, p, wh[<span class="number">5</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;p) == <span class="number">2</span>) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, wh + i);</div><div class="line">        <span class="keyword">bool</span> s[<span class="number">5</span>][<span class="number">50</span>] = &#123;&#125;;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">            <span class="keyword">int</span> cnt; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;cnt);</div><div class="line">            <span class="keyword">while</span>(cnt--) &#123;</div><div class="line">                <span class="keyword">int</span> x; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line">                s[i][x] = <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans(n + <span class="number">1</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">            <span class="keyword">if</span>(wh[i] == p) ans[i] = <span class="number">0</span>;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(wh[i] &gt; p) &#123;</div><div class="line">                ans[i] = <span class="number">5</span>;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = wh[i] - <span class="number">1</span>; j &gt; p; --j) &#123;</div><div class="line">                    ans[i] += <span class="number">5</span>;</div><div class="line">                    <span class="keyword">if</span>(s[i][j]) ans[i] += <span class="number">15</span>;</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                ans[i] = <span class="number">5</span>;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = wh[i] + <span class="number">1</span>; j &lt; p; ++j) &#123;</div><div class="line">                    ans[i] += <span class="number">5</span>;</div><div class="line">                    <span class="keyword">if</span>(s[i][j]) ans[i] += <span class="number">15</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d%c"</span>, ans[i], <span class="string">" \n"</span>[i == n]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 套题 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[HDU 5289	Assignment（two pointers）]]></title>
      <url>/2016/04/12/HDU%205289%20Assignment%EF%BC%88two%20pointers%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$N\le 10^5的序列，A_i\le 10^9$<br>$求连续区间中任意2个数差值不超过k的区间个数$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$two pointers经典题辣，还是这种写法$<br>$对于每个左端点，找到最右的右端点统计贡献数即可$<br>$时间复杂度O(n)$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-04-12</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, a[N], k;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">while</span>(t--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;k);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a + i);</div><div class="line">        <span class="built_in">multiset</span>&lt;<span class="keyword">int</span>&gt; s;</div><div class="line">        <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> l = <span class="number">1</span>, r = <span class="number">1</span>; l &lt;= n; ++l) &#123;</div><div class="line">            <span class="keyword">while</span>(r &lt;= n) &#123;</div><div class="line">                <span class="keyword">if</span>(s.size()) &#123;</div><div class="line">                    <span class="keyword">if</span>(a[r] - *s.begin() &gt;= k || *s.rbegin() - a[r] &gt;= k)</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">                s.insert(a[r++]);</div><div class="line">            &#125;</div><div class="line">            ans += r - l;</div><div class="line">            s.erase(s.find(a[l]));</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 技巧 </category>
            
            <category> two pointers </category>
            
        </categories>
        
        
        <tags>
            
            <tag> two pointers </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDU 5288 OO’s Sequence（贡献）]]></title>
      <url>/2016/04/12/HDU%205288%20OO%E2%80%99s%20Sequence%EF%BC%88%E8%B4%A1%E7%8C%AE%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$N\le 10^5的序列，A_i\le 10^4$<br>$f(l, r):=区间中除自己以外都不是自己的约数的a_i的个数$<br>$求\sum_{i=1}^{n}\sum_{j=i}^{n}f(i,j)  mod  (10^{9}+7)$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$对于a_i，对于它的任意约数x，假设离它最近的约数的位置是pre_{x}和nxt_x$<br>$那么a_i能贡献的区间，显然左端点的选择是(pre_x, i]，右端点的选择是[i, nxt_i)$<br>$那么对答案的贡献是(i-pre_x)\cdot(nxt_x-i)$<br>$时间复杂度是O(n\sqrt{n})，约数级别是O(\sqrt{n})的$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-04-12</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, a[N];</div><div class="line"><span class="keyword">int</span> pre[N];</div><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; divisors[N];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">gao</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">1e4</span>; ++i)</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt;= <span class="number">1e4</span>; j += i)</div><div class="line">            divisors[j].push_back(i);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    gao();</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) == <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a + i);</div><div class="line"></div><div class="line">        <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; last;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">            pre[i] = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> d : divisors[a[i]]) pre[i] = max(pre[i], last[d]);</div><div class="line">            last[a[i]] = i;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        last.clear();</div><div class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = n; i; --i) &#123;</div><div class="line">            <span class="keyword">int</span> nxt = n + <span class="number">1</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> d : divisors[a[i]]) <span class="keyword">if</span>(last[d]) nxt = min(nxt, last[d]);</div><div class="line">            ans += <span class="number">1L</span>L * (i - pre[i]) * (nxt - i) % MOD;</div><div class="line">            <span class="keyword">if</span>(ans &gt;= MOD) ans -= MOD;</div><div class="line">            last[a[i]] = i;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 数学 </category>
            
            <category> 贡献 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 贡献 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Facebook Hacker Cup 2016 Round 1 C. Yachtzee（期望）]]></title>
      <url>/2016/04/12/Facebook%20Hacker%20Cup%202016%20Round%201%20C.%20Yachtzee%EF%BC%88%E6%9C%9F%E6%9C%9B%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$给定初始金钱[A, B]均匀分布，A, B\le 10^9$<br>$现在购买一个东西，分成N\le 10^5部分，每部分价值为C_i\le 10^9$<br>$会不停的按顺序购买N个部分直到不能购买为止$<br>$问剩余钱数的期望$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$根据期望的线性可加性，我们可以求[0, B]的期望减去[0, A]的期望$<br>$然后对于[0, x]的期望，对C_i求个前缀和，对于每个区间[C_{i-1}, C_i]$<br>$L_i=C_i-C_{i-1}，如果完全覆盖那么它的贡献是L_i\cdot\frac{L_i}{2}$<br>$周期cycle = x/C_n，剩下的left=x\%C_n，计算方式相同$<br>$那么总贡献E=cycle\cdot L_i\cdot\frac{L_i}{2}+E_{left}，期望E’=\frac{E_B-E_A}{B-A}$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-01-17</span></div><div class="line"><span class="comment">//  Copyright (c) 2015 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:1024000000,1024000000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, A, B;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line">LL a[N];</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">calc</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">    LL ret = <span class="number">0</span>;</div><div class="line">    LL cycle = x / a[n], left = x % a[n];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</div><div class="line">        ret += (a[i] - a[i - <span class="number">1</span>]) * (a[i] - a[i - <span class="number">1</span>]);</div><div class="line">    ret *= cycle;</div><div class="line">    <span class="keyword">int</span> k = lower_bound(a + <span class="number">1</span>, a + n + <span class="number">1</span>, left) - a;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; ++i)</div><div class="line">        ret += (min(a[i], left) - a[i - <span class="number">1</span>]) * (min(a[i], left) - a[i - <span class="number">1</span>]);</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"yachtzee.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">    freopen(<span class="string">"yachtzee_out.txt"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">while</span>(t--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;A, &amp;B);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, a + i);</div><div class="line">            a[i] += a[i - <span class="number">1</span>];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">double</span> ans = <span class="number">1.0</span> * (calc(B) - calc(A)) / <span class="number">2</span> / (B - A);</div><div class="line">        <span class="keyword">static</span> <span class="keyword">int</span> kase = <span class="number">0</span>;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d: %.9f\n"</span>, ++kase, ans);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 数学 </category>
            
            <category> 概率/期望 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 期望 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDU 5157 Harry and magic string（回文树）]]></title>
      <url>/2016/04/11/HDU%205157%20Harry%20and%20magic%20string%EF%BC%88%E5%9B%9E%E6%96%87%E6%A0%91%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$N\le 10^5的字符串S，设T_1、T_2为S的2个回文子串，并且T_1和T_2不相交$<br>$求(T_1, T_2)的对数有多少$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$回文树预处理$<br>$pre[i]:=以i字符结尾的回文串的个数，suf[i]:=以i字符开头的回文串的个数$<br>$对中一个求前缀和，比如是suf[i]，然后答案ans=\sum_{i=1}^{n-1}pre[i]\times sum[i+1]$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-04-09</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PalindromicTree</span> &#123;</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e5</span> + <span class="number">10</span>, S = <span class="number">26</span>;</div><div class="line">    <span class="keyword">int</span> n, sz, last;</div><div class="line">    <span class="keyword">int</span> nxt[M][S], fail[M], len[M], s[M];</div><div class="line">    <span class="keyword">int</span> cnt[M], dif[M];</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">newNode</span><span class="params">(<span class="keyword">int</span> l)</span> </span>&#123;</div><div class="line">        len[sz] = l;</div><div class="line">        cnt[sz] = dif[sz] = <span class="number">0</span>;</div><div class="line">        <span class="built_in">memset</span>(nxt[sz], <span class="number">0</span>, <span class="keyword">sizeof</span> nxt[sz]);</div><div class="line">        <span class="keyword">return</span> sz++;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">        sz = last = <span class="number">0</span>;</div><div class="line">        newNode(<span class="number">0</span>); newNode(<span class="number">-1</span>);</div><div class="line">        s[n = <span class="number">0</span>] = <span class="number">-1</span>; <span class="comment">// 无关字符减少特判</span></div><div class="line">        fail[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getFail</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</div><div class="line">        <span class="keyword">while</span>(s[n - len[u] - <span class="number">1</span>] != s[n]) u = fail[u];</div><div class="line">        <span class="keyword">return</span> u;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> c)</span> </span>&#123;</div><div class="line">        s[++n] = c;</div><div class="line">        <span class="keyword">int</span> u = getFail(last); <span class="comment">// 找到这个回文串的匹配位置</span></div><div class="line">        <span class="keyword">int</span>&amp; v = nxt[u][c];</div><div class="line">        <span class="keyword">if</span>(!v) &#123;</div><div class="line">            <span class="keyword">int</span> cur = newNode(len[u] + <span class="number">2</span>);</div><div class="line">            fail[cur] = nxt[getFail(fail[u])][c];</div><div class="line">            v = cur;</div><div class="line">            cnt[v] = cnt[fail[v]] + <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        ++dif[v];</div><div class="line">        last = v;</div><div class="line">        <span class="keyword">return</span> cnt[v];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">count</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//父亲累加儿子，如果 fail[v]=u ，则 u 一定是 v 的子回文串</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = sz - <span class="number">1</span>; ~i; --i) dif[fail[i]] += dif[i];</div><div class="line">    &#125;</div><div class="line">&#125; pt;</div><div class="line"></div><div class="line"><span class="keyword">char</span> s[N];</div><div class="line"><span class="keyword">long</span> <span class="keyword">long</span> suf[N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%s"</span>, s + <span class="number">1</span>) == <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">int</span> n = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</div><div class="line">        pt.init();</div><div class="line">        suf[n + <span class="number">1</span>] = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = n; i; --i) &#123;</div><div class="line">            <span class="keyword">int</span> cnt = pt.add(s[i] - <span class="string">'a'</span>);</div><div class="line">            suf[i] = suf[i + <span class="number">1</span>] + cnt;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        pt.init();</div><div class="line">        <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</div><div class="line">            ans += pt.add(s[i] - <span class="string">'a'</span>) * suf[i + <span class="number">1</span>];</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 字符串 </category>
            
            <category> Manacher/回文树 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 回文树 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDU 5658 CA Loves Palindromic（Manacher | 回文树）]]></title>
      <url>/2016/04/11/HDU%205658%20CA%20Loves%20Palindromic%EF%BC%88Manacher%20%20%E5%9B%9E%E6%96%87%E6%A0%91%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$N\le 10^3的字符串，Q\le 10^5次询问$<br>$每次询问[l, r]区间本质不同的回文子串有几个，即不完全相同的回文子串$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$Manacher做法，就离线询问，然后判断回文，哈希判重$<br>$回文树就更暴力了，直接预处理ans[l][r]$<br>$回文树的学习直接上鸟神博客$，<a href="http://blog.csdn.net/u013368721/article/details/42100363" target="_blank" rel="external">Palindromic Tree——回文树【处理一类回文串问题的强力工具】</a></p>
</blockquote>
<p>Manacher代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-04-08</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e3</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BIT</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> n, b[N];</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> _n)</span> </span>&#123;</div><div class="line">        n = _n;</div><div class="line">        <span class="built_in">memset</span>(b, <span class="number">0</span>, <span class="keyword">sizeof</span> b);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> v)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span>(; i; i -= i &amp; -i) b[i] += v;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(; i &lt;= n; i += i &amp; -i) ret += b[i];</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line">&#125; bit;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Manacher</span> &#123;</span></div><div class="line">    <span class="keyword">char</span> s[N &lt;&lt; <span class="number">1</span>];</div><div class="line">    <span class="keyword">int</span> n, p[N &lt;&lt; <span class="number">1</span>];</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">char</span>* a)</span> </span>&#123;</div><div class="line">        s[<span class="number">0</span>] = <span class="string">'@'</span>; s[<span class="number">1</span>] = <span class="string">'#'</span>; n = <span class="number">2</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; a[i]; ++i)</div><div class="line">            s[n++] = a[i], s[n++] = <span class="string">'#'</span>;</div><div class="line">        s[n] = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">gao</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> mx = <span class="number">0</span>, id, ret = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</div><div class="line">            p[i] = mx &gt; i ? min(mx - i, p[<span class="number">2</span> * id - i]) : <span class="number">1</span>;</div><div class="line">            <span class="keyword">while</span>(s[i - p[i]] == s[i + p[i]]) ++p[i];</div><div class="line">            <span class="keyword">if</span>(mx &lt; i + p[i]) mx = i + p[i], id = i;</div><div class="line">            ret = max(ret, p[i] - <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">ok</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</div><div class="line">        l &lt;&lt;= <span class="number">1</span>; r &lt;&lt;= <span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> k = l + r &gt;&gt; <span class="number">1</span>;</div><div class="line">        <span class="keyword">return</span> k + p[k] - <span class="number">1</span> &gt;= r;</div><div class="line">    &#125;</div><div class="line">&#125; manacher;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ULL;</div><div class="line"><span class="keyword">const</span> ULL seed[<span class="number">2</span>] = &#123;MOD, MOD + <span class="number">2</span>&#125;;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Hash</span> &#123;</span></div><div class="line">    <span class="keyword">typedef</span> pair&lt;ULL, ULL&gt; Type;</div><div class="line">    ULL power[<span class="number">2</span>][N], h[<span class="number">2</span>][N];</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">char</span>* a)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i) &#123;</div><div class="line">            power[i][<span class="number">0</span>] = <span class="number">1</span>; h[i][<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; a[j]; ++j) &#123;</div><div class="line">                power[i][j] = power[i][j - <span class="number">1</span>] * seed[i];</div><div class="line">                h[i][j] = h[i][j - <span class="number">1</span>] * seed[i] + a[j];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function">Type <span class="title">get</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123; <span class="comment">// [l, r]</span></div><div class="line">        Type ret;</div><div class="line">        ret.first = h[<span class="number">0</span>][r] - h[<span class="number">0</span>][l - <span class="number">1</span>] * power[<span class="number">0</span>][r - l + <span class="number">1</span>];</div><div class="line">        ret.second = h[<span class="number">1</span>][r] - h[<span class="number">1</span>][l - <span class="number">1</span>] * power[<span class="number">1</span>][r - l + <span class="number">1</span>];</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line">&#125; hsh;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, q;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> Q = <span class="number">1e5</span> + <span class="number">10</span>;</div><div class="line"><span class="keyword">int</span> ans[Q];</div><div class="line"><span class="keyword">char</span> a[N];</div><div class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; qs[N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">while</span>(t--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, a + <span class="number">1</span>);</div><div class="line">        n = <span class="built_in">strlen</span>(a + <span class="number">1</span>);</div><div class="line"></div><div class="line">        hsh.init(a);</div><div class="line">        manacher.init(a);</div><div class="line">        manacher.gao();</div><div class="line"></div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;q);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) qs[i].clear();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; ++i) &#123;</div><div class="line">            <span class="keyword">int</span> l, r; <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;l, &amp;r);</div><div class="line">            qs[r].push_back(&#123;l, i&#125;);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        bit.init(n);</div><div class="line">        <span class="built_in">map</span>&lt;Hash::Type, <span class="keyword">int</span>&gt; mp;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; ++j) &#123;</div><div class="line">                <span class="keyword">if</span>(!manacher.ok(j, i)) <span class="keyword">continue</span>; <span class="comment">//not palindromic</span></div><div class="line">                Hash::Type h = hsh.get(j, i);</div><div class="line">                <span class="keyword">if</span>(mp.count(h)) bit.add(mp[h], <span class="number">-1</span>);</div><div class="line">                bit.add(j, <span class="number">1</span>);</div><div class="line">                mp[h] = j;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; q : qs[i]) ans[q.second] = bit.sum(q.first);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; ++i) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>回文树代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-04-08</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e3</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="comment">// last:= 指向添加一个字符后形成的最长回文串的节点</span></div><div class="line"><span class="comment">// s[i]:= 第 i 次添加的字符 n:= s 数组时针</span></div><div class="line"><span class="comment">// fail[i]:= i 失配后跳转到的 i 表示的最长回文串的最长真后缀回文串的节点</span></div><div class="line"><span class="comment">// cnt[i]:= 以 i 表示的最长回文串的右端点为右端点的回文串个数</span></div><div class="line"><span class="comment">// dif[i]:= i 表示的本质不同的回文串个数 （需要重新统计）</span></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PalindromicTree</span> &#123;</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e3</span> + <span class="number">10</span>, S = <span class="number">26</span>;</div><div class="line">    <span class="keyword">int</span> n, sz, last;</div><div class="line">    <span class="keyword">int</span> nxt[M][S], fail[M], len[M], s[M];</div><div class="line">    <span class="keyword">int</span> cnt[M], dif[M];</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">newNode</span><span class="params">(<span class="keyword">int</span> l)</span> </span>&#123;</div><div class="line">        len[sz] = l;</div><div class="line">        cnt[sz] = dif[sz] = <span class="number">0</span>;</div><div class="line">        <span class="built_in">memset</span>(nxt[sz], <span class="number">0</span>, <span class="keyword">sizeof</span> nxt[sz]);</div><div class="line">        <span class="keyword">return</span> sz++;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">        sz = last = <span class="number">0</span>;</div><div class="line">        newNode(<span class="number">0</span>); newNode(<span class="number">-1</span>);</div><div class="line">        s[n = <span class="number">0</span>] = <span class="number">-1</span>; <span class="comment">// 无关字符减少特判</span></div><div class="line">        fail[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getFail</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</div><div class="line">        <span class="keyword">while</span>(s[n - len[u] - <span class="number">1</span>] != s[n]) u = fail[u];</div><div class="line">        <span class="keyword">return</span> u;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> c)</span> </span>&#123;</div><div class="line">        s[++n] = c;</div><div class="line">        <span class="keyword">int</span> u = getFail(last); <span class="comment">// 找到这个回文串的匹配位置</span></div><div class="line">        <span class="keyword">int</span>&amp; v = nxt[u][c];</div><div class="line">        <span class="keyword">if</span>(!v) &#123;</div><div class="line">            <span class="keyword">int</span> cur = newNode(len[u] + <span class="number">2</span>);</div><div class="line">            fail[cur] = nxt[getFail(fail[u])][c];</div><div class="line">            v = cur;</div><div class="line">            cnt[v] = cnt[fail[v]] + <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        ++dif[v];</div><div class="line">        last = v;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">count</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//父亲累加儿子，如果 fail[v]=u ，则 u 一定是 v 的子回文串</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = sz - <span class="number">1</span>; ~i; --i) dif[fail[i]] += dif[i];</div><div class="line">    &#125;</div><div class="line">&#125; pt;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, q;</div><div class="line"><span class="keyword">char</span> a[N];</div><div class="line"><span class="keyword">int</span> ans[N][N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">while</span>(t--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, a + <span class="number">1</span>);</div><div class="line">        n = <span class="built_in">strlen</span>(a + <span class="number">1</span>);</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">            pt.init();</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt;= n; ++j) &#123;</div><div class="line">                pt.add(a[j] - <span class="string">'a'</span>);</div><div class="line">                ans[i][j] = pt.sz - <span class="number">2</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;q);</div><div class="line">        <span class="keyword">while</span>(q--) &#123;</div><div class="line">            <span class="keyword">int</span> l, r; <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;l, &amp;r);</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans[l][r]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 字符串 </category>
            
            <category> Manacher/回文树 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 回文树 </tag>
            
            <tag> Manacher </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SOJ 4484 静态规划（dp）]]></title>
      <url>/2016/04/11/SOJ%204484%20%E9%9D%99%E6%80%81%E8%A7%84%E5%88%92%EF%BC%88dp%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$N\le 10^5个沙堆，|A_i|\le10^9，可以任意加减每个沙堆的高度$<br>$现要使得修改后的沙堆高度A_i’\le A_{i+1}’，i\in [1, N)$<br>$求最小修改的高度和$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$如果后一个元素比前一个小，那么最少改变的情况就是让他和前一个<br>元素相等$<br>$如果比前一个元素大或者相等，则不需做出改变$<br>$仔细想想就可以发现其实最后的序列就是由原始数组的元素组成的$<br>$那么我们先对原始数组排个序$<br>$f[i][j]=1\sim i，且第i个元素更改为排序后的第j个元素的最小修改高度和$<br>$然后暴力转移是O(n^3)，前缀和优化一下就O(n^2)了，再滚动数组一波$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-04-10</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3e3</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">19970303</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, a[N], s[N];</div><div class="line"><span class="keyword">long</span> <span class="keyword">long</span> f[<span class="number">2</span>][N];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span>&amp; x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>((x += y) &gt;= MOD) x -= MOD;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) == <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a + i), s[i] = a[i];</div><div class="line">        sort(s + <span class="number">1</span>, s + <span class="number">1</span> + n);</div><div class="line"></div><div class="line">        <span class="keyword">int</span> p = <span class="number">0</span>;</div><div class="line">        <span class="built_in">memset</span>(f[p], <span class="number">0</span>, <span class="keyword">sizeof</span> f[p]);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">            <span class="built_in">memset</span>(f[!p], <span class="number">0</span>, <span class="keyword">sizeof</span> f[!p]);</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</div><div class="line">                f[!p][j] = f[p][j] + <span class="built_in">abs</span>(a[i] - s[j]);</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">2</span>; j &lt;= n; ++j)</div><div class="line">                f[!p][j] = min(f[!p][j], f[!p][j - <span class="number">1</span>]);</div><div class="line">            p = !p;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, f[p][n] % MOD);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 动态规划 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> dp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDU 4647 Another Graph Game（贪心、边权映射到点权）]]></title>
      <url>/2016/04/11/HDU%204647%20Another%20Graph%20Game%EF%BC%88%E8%B4%AA%E5%BF%83%E3%80%81%E8%BE%B9%E6%9D%83%E6%98%A0%E5%B0%84%E5%88%B0%E7%82%B9%E6%9D%83%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$N，M\le 10^5，N个点M条边，点权W_i、边权C_i \le 10^9 $<br>$2个人玩游戏轮流选点得到权值，选过的不能再选$<br>$规定如果一条边的2个端点都被同一个人选到，那么它获得边权$<br>$假设2个人采取最优策略，输出先手得分-后手得分$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$考虑没有边的情况，那么显然2个人从大到小选$<br>$有边，那么就把边权均分到2个点上，如果同1个人选到刚好就加起来了，不同人就抵消了$<br>$符合题意，避免小数，把权加倍即可$<br>$时间复杂度O(nlogn)$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-03-11</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:1024000000,1024000000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">long</span> <span class="keyword">long</span> a[N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m) == <span class="number">2</span>) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">"%I64d"</span>, a + i), a[i] &lt;&lt;= <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</div><div class="line">            <span class="keyword">int</span> u, v, w; <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;u, &amp;v, &amp;w);</div><div class="line">            a[u] += w; a[v] += w;</div><div class="line">        &#125;</div><div class="line">        sort(a + <span class="number">1</span>, a + <span class="number">1</span> + n);</div><div class="line">        <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = n; i; --i)</div><div class="line">            <span class="keyword">if</span>(i &amp; <span class="number">1</span>) ans -= a[i];</div><div class="line">            <span class="keyword">else</span> ans += a[i];</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, ans &gt;&gt; <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 思维 </category>
            
            <category> 贪心 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 贪心 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SOJ 4482	忽悠大神（MST、点权映射到边权）]]></title>
      <url>/2016/04/11/SOJ%204482%20%E5%BF%BD%E6%82%A0%E5%A4%A7%E7%A5%9E%EF%BC%88MST%E3%80%81%E7%82%B9%E6%9D%83%E6%98%A0%E5%B0%84%E5%88%B0%E8%BE%B9%E6%9D%83%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$N，M\le 10^5，N个点M条边无向图，点权W_i，边权C_i\le 1000$<br>$现要保证图联通的情况下删除最多的边$<br>$在此基础上，使得从某一起点出发，经过所有的点回到原点的权和最小$<br>$输出这个权和$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$我们发现因为要来回，所以边权其实是\times 2的，选了边其实2个端点必定会走$<br>$所以其实可以把点权映射到点上，即对于(u, v)新的边权为w_u+w_v+2\times c_{uv}$<br>$然后求一遍MST就好了，当然起点要再算一次，选择最小权的那个起点就好了$<br>$时间复杂度O(n+mlogm)$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-04-09</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> u, v, c;</div><div class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Edge&amp; e) <span class="keyword">const</span> &#123;</div><div class="line">        <span class="keyword">return</span> c &lt; e.c;</div><div class="line">    &#125;</div><div class="line">&#125; edge[N];</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DSU</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> n, p[N];</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> _n)</span> </span>&#123;</div><div class="line">        n = _n;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) p[i] = i;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> p[x] = p[x] == x ? x : find(p[x]);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">unite</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">        x = find(x), y = find(y);</div><div class="line">        <span class="keyword">if</span>(x == y) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        p[x] = y;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125; dsu;</div><div class="line"></div><div class="line"><span class="keyword">int</span> w[N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m) == <span class="number">2</span>) &#123;</div><div class="line">        <span class="keyword">int</span> ans = INF;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, w + i);</div><div class="line">            ans = min(ans, w[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</div><div class="line">            <span class="keyword">int</span> u, v, c; <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;u, &amp;v, &amp;c);</div><div class="line">            edge[i] = (Edge) &#123;u, v, <span class="number">2</span> * c + w[u] + w[v]&#125;;</div><div class="line">        &#125;</div><div class="line">        sort(edge + <span class="number">1</span>, edge + <span class="number">1</span> + m);</div><div class="line"></div><div class="line">        dsu.init(n);</div><div class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</div><div class="line">            <span class="keyword">int</span> u = edge[i].u, v = edge[i].v;</div><div class="line">            <span class="keyword">if</span>(dsu.unite(u, v)) &#123;</div><div class="line">                ans += edge[i].c;</div><div class="line">                <span class="keyword">if</span>(++cnt == n - <span class="number">1</span>) <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 图论 </category>
            
            <category> 最小生成树 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MST </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SOJ 4481 学院杯辩论赛（概率dp）]]></title>
      <url>/2016/04/11/SOJ%204481%20%E5%AD%A6%E9%99%A2%E6%9D%AF%E8%BE%A9%E8%AE%BA%E8%B5%9B%EF%BC%88%E6%A6%82%E7%8E%87dp%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$N\le 7，给定2^N个队伍进行N轮比赛$<br>$每轮比赛将所遇剩余队伍编号排序，第一小的队伍和第二小的比，第三小的和第四小的比，以此类推$<br>$N轮比赛后剩余一支队伍，问哪只队伍获胜概率最大，输出编号$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$概率dp，f[i][j]:=队伍j活到第i轮比赛的概率$<br>$我们发现转移其实类似于线段树，自底向上转移，从第0轮开始$<br>$对于上一个区间，显然它的左儿子的队友都是右儿子，反之同理$<br>$时间复杂度O(n\times 2^n)$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-04-09</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="keyword">double</span> a[<span class="number">1</span> &lt;&lt; <span class="number">7</span>][<span class="number">1</span> &lt;&lt; <span class="number">7</span>], f[<span class="number">7</span>][<span class="number">1</span> &lt;&lt; <span class="number">7</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123; <span class="comment">// [l, r]</span></div><div class="line">    <span class="keyword">if</span>(l == r) &#123;</div><div class="line">        f[n][l] = <span class="number">1</span>;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> m = l + r &gt;&gt; <span class="number">1</span>;</div><div class="line">    dfs(n - <span class="number">1</span>, l, m);</div><div class="line">    dfs(n - <span class="number">1</span>, m + <span class="number">1</span>, r);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = l; i &lt;= r; ++i) f[n][i] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = l; i &lt;= m; ++i)</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = m + <span class="number">1</span>; j &lt;= r; ++j)</div><div class="line">            f[n][i] += f[n - <span class="number">1</span>][i] * f[n - <span class="number">1</span>][j] * a[i][j];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = m + <span class="number">1</span>; i &lt;= r; ++i)</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = l; j &lt;= m; ++j)</div><div class="line">            f[n][i] += f[n - <span class="number">1</span>][i] * f[n - <span class="number">1</span>][j] * a[i][j];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) == <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1</span> &lt;&lt; n; ++i)</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">1</span> &lt;&lt; n; ++j)</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%lf"</span>, a[i] + j);</div><div class="line"></div><div class="line">        dfs(n, <span class="number">0</span>, (<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span>);</div><div class="line"></div><div class="line">        pair&lt;<span class="keyword">double</span>, <span class="keyword">int</span>&gt; ans = make_pair(<span class="number">-1</span>, -INF);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1</span> &lt;&lt; n; ++i)</div><div class="line">            ans = max(ans, make_pair(f[n][i], -i));</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, -ans.second + <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 动态规划 </category>
            
            <category> 概率/期望dp </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 概率dp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SOJ 4479 Easy Problem III（区间贪心）]]></title>
      <url>/2016/04/11/SOJ%204479%20Easy%20Problem%20III%EF%BC%88%E5%8C%BA%E9%97%B4%E8%B4%AA%E5%BF%83%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$给定一条无限长的直线，给定N\le 10^5条线段[s, t]覆盖这条直线$<br>$问覆盖的长度（重复覆盖只算一次）$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$经典区间贪心问题，左端点排序，然后维护最右端点就好了$<br>$累加答案的时候，记得判断大小关系。。。$<br>$时间复杂度O(nlogn)$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-04-09</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n;</div><div class="line">pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; a[N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">while</span>(t--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a[i].first, &amp;a[i].second);</div><div class="line">        sort(a + <span class="number">1</span>, a + <span class="number">1</span> + n);</div><div class="line">        <span class="keyword">int</span> ans = a[<span class="number">1</span>].second - a[<span class="number">1</span>].first, r = a[<span class="number">1</span>].second;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</div><div class="line">            <span class="keyword">if</span>(a[i].first &gt; r) ans += a[i].second - a[i].first;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(a[i].second &gt; r) ans += a[i].second - r;</div><div class="line">            r = max(r, a[i].second);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 思维 </category>
            
            <category> 贪心 </category>
            
            <category> 区间贪心 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 区间贪心 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SOJ 4478 Easy Problem II（栈）]]></title>
      <url>/2016/04/11/SOJ%204478%20Easy%20Problem%20II%EF%BC%88%E6%A0%88%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$N\le 10^5，1-N的数按顺序入栈，现给定出栈序列，问是否合法$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$栈模拟一下就好了$<br>$时间复杂度O(n)$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-04-09</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">while</span>(t--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">        <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;</div><div class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>, ok = <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">            <span class="keyword">int</span> x; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line">            <span class="keyword">while</span>(s.empty() || x != s.top()) &#123;</div><div class="line">                <span class="keyword">if</span>(cnt == n) &#123;</div><div class="line">                    ok = <span class="literal">false</span>;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">                s.push(++cnt);</div><div class="line">            &#125;</div><div class="line">            s.pop();</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">puts</span>(ok ? <span class="string">"Yes"</span> : <span class="string">"No"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 数据结构 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[ZOJ 3933 Team Formation（KM）]]></title>
      <url>/2016/04/10/ZOJ%203933%20Team%20Formation%EF%BC%88KM%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$N\le 500个人，分为X组和Y组，每个人可能是男或者女$<br>$X和Y要匹配，现要每个人都有厌恶的list，不和list上的人匹配$<br>$求最大匹配数，以及满足条件下的女生总和最多的方案，输出任意方案$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$赤果果的最大权匹配模型，500个点费用流显然是跑不过去的(反正我的不行)$<br>$对于这种求妹子数的也是很经典的模型了$<br>$然后能连的边权是1，如果有妹子就边权增加$ <code>妹子数*D</code>$，D是个比最大匹配数大的数$<br>$跑出来妹子数就是最大权/D，打印方案即可$<br>$连边的时候X部还是Y部要注意，打印方案的时候也要注意$<br>$时间复杂度O(n^3)$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-04-10</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">500</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> g[N][N], slack[N];</div><div class="line"><span class="keyword">int</span> lx[N], ly[N];</div><div class="line"><span class="keyword">int</span> match[N], n;</div><div class="line"><span class="keyword">bool</span> vx[N], vy[N];</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</div><div class="line">    vx[u] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">        <span class="keyword">if</span>(!vy[i]) &#123;</div><div class="line">            <span class="keyword">int</span> t = lx[u] + ly[i] - g[u][i];</div><div class="line">            <span class="keyword">if</span>(t == <span class="number">0</span>) &#123;</div><div class="line">                vy[i] = <span class="number">1</span>;</div><div class="line">                <span class="keyword">if</span>(match[i] == <span class="number">-1</span> || dfs(match[i])) &#123;</div><div class="line">                    match[i] = u;</div><div class="line">                    <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">else</span> slack[i] = min(slack[i], t);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">KM</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="built_in">memset</span>(match, <span class="number">-1</span>, <span class="keyword">sizeof</span>(match));</div><div class="line">    <span class="built_in">memset</span>(ly, <span class="number">0</span>, <span class="keyword">sizeof</span>(ly));</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">        lx[i] = -INF;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</div><div class="line">            lx[i] = max(lx[i], g[i][j]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) slack[j] = INF;</div><div class="line">        <span class="keyword">while</span>(<span class="number">1</span>) &#123;</div><div class="line">            <span class="built_in">memset</span>(vx, <span class="number">0</span>, <span class="keyword">sizeof</span>(vx));</div><div class="line">            <span class="built_in">memset</span>(vy, <span class="number">0</span>, <span class="keyword">sizeof</span>(vy));</div><div class="line">            <span class="keyword">if</span>(dfs(i)) <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">int</span> d = INF;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</div><div class="line">                <span class="keyword">if</span>(!vy[j]) d = min(d, slack[j]);</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</div><div class="line">                <span class="keyword">if</span>(vx[j]) lx[j] -= d;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</div><div class="line">                <span class="keyword">if</span>(vy[j]) ly[j] += d;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> D = <span class="number">1e6</span>;</div><div class="line"><span class="keyword">bool</span> lft[N], girl[N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">while</span>(t--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line"></div><div class="line">        <span class="keyword">char</span> buf[N];</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, buf + <span class="number">1</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</div><div class="line">            lft[i] = buf[i] == <span class="string">'0'</span>;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, buf + <span class="number">1</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</div><div class="line">            girl[i] = buf[i] == <span class="string">'0'</span>;</div><div class="line"></div><div class="line">        <span class="built_in">memset</span>(g, <span class="number">0</span>, <span class="keyword">sizeof</span> g);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">            <span class="keyword">if</span>(!lft[i]) <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</div><div class="line">                <span class="keyword">if</span>(lft[j]) <span class="keyword">continue</span>;</div><div class="line">                g[i][j] = (girl[i] + girl[j]) * D + <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">            <span class="keyword">int</span> cnt; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;cnt);</div><div class="line">            <span class="keyword">while</span>(cnt--) &#123;</div><div class="line">                <span class="keyword">int</span> x; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line">                <span class="keyword">if</span>(lft[i] &amp;&amp; !lft[x]) g[i][x] = <span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        KM();</div><div class="line"></div><div class="line">        <span class="keyword">int</span> matches = <span class="number">0</span>, ans = <span class="number">0</span>;</div><div class="line">        <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; path;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">            <span class="keyword">if</span>(match[i] == <span class="number">-1</span> || !g[match[i]][i]) <span class="keyword">continue</span>;</div><div class="line">            ++matches;</div><div class="line">            ans += g[match[i]][i];</div><div class="line">            path.push_back(make_pair(match[i], i));</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, matches, ans / D);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; path.size(); ++i)</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, path[i].first, path[i].second);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 图论 </category>
            
            <category> 二分图 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 最大权匹配 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ZOJ 3932 Handshakes（逆向思维）]]></title>
      <url>/2016/04/10/ZOJ%203932%20Handshakes%EF%BC%88%E9%80%86%E5%90%91%E6%80%9D%E7%BB%B4%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$有一间教室，N\le 10^5依次来到这间教室，每个人来的时候要跟里面的所有人握手$<br>$现在给定每个人进来那一次握了多少次手$<br>$求每个人最多握多少次手，输出那个最大值$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$显然最大的情况就是后面的人全是它的朋友$<br>$如果后面某个人握手了，就当作是前面的人也握了$<br>$所以倒着搞一遍就好了$<br>$时间复杂度O(n)$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-04-10</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, a[N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">while</span>(t--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a + i);</div><div class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>, cnt = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = n; i; --i) &#123;</div><div class="line">            ans = max(ans, a[i] + cnt);</div><div class="line">            cnt += a[i] &gt; <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 思维 </category>
            
            <category> 逆向思维 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[ZOJ 3930 Dice Notation（模拟）]]></title>
      <url>/2016/04/10/ZOJ%203930%20Dice%20Notation%EF%BC%88%E6%A8%A1%E6%8B%9F%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$给定规则让你展开式子，就读3个小圆点就可以了$<br>$1.ndX\Rightarrow(\underbrace{[dX] + \cdots + [dX])}_n，dX\Rightarrow [dX]，+号左右各1个空格$<br>$2.给+-*/的左右各添加1个空格$<br>$3.最后添加，$”$ = [Result]$”</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$有个坑，就是数字别解析，ndX的X也别解析$<br>$然后就能过了，赛上用BigInt逗比了，还是太懒，估计是把前导0给我去了$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-04-10</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, idx;</div><div class="line"><span class="keyword">char</span> s[N], tmp[N];</div><div class="line"></div><div class="line"><span class="keyword">char</span> op[] = <span class="string">"+-*/"</span>;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isoperator</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> c &amp;&amp; <span class="built_in">strchr</span>(op, c);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">char</span>* tmp)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(n &gt; <span class="number">1</span>) <span class="built_in">putchar</span>(<span class="string">'('</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"[d%s]"</span>, tmp);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i)</div><div class="line">        <span class="built_in">printf</span>(<span class="string">" + [d%s]"</span>, tmp);</div><div class="line">    <span class="keyword">if</span>(n &gt; <span class="number">1</span>) <span class="built_in">putchar</span>(<span class="string">')'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">while</span>(s[idx] &amp;&amp; s[idx] != <span class="string">')'</span>) &#123;</div><div class="line">        <span class="keyword">if</span>(s[idx] == <span class="string">'('</span>) &#123;</div><div class="line">            <span class="built_in">putchar</span>(<span class="string">'('</span>); ++idx;</div><div class="line">            dfs();</div><div class="line">            <span class="built_in">putchar</span>(<span class="string">')'</span>); ++idx;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(<span class="built_in">isdigit</span>(s[idx])) &#123;</div><div class="line">            <span class="keyword">int</span> l = <span class="number">0</span>, r = <span class="number">0</span>;</div><div class="line">            <span class="keyword">while</span>(<span class="built_in">isdigit</span>(s[idx])) tmp[l++] = s[idx++]; tmp[l] = <span class="number">0</span>;</div><div class="line">            <span class="keyword">if</span>(s[idx] != <span class="string">'d'</span>) &#123;</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%s"</span>, tmp); <span class="comment">//just digit</span></div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line">            l = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; tmp[i]; ++i) l = l * <span class="number">10</span> + tmp[i] - <span class="string">'0'</span>;</div><div class="line"></div><div class="line">            ++idx; <span class="comment">//jump d</span></div><div class="line">            <span class="keyword">while</span>(<span class="built_in">isdigit</span>(s[idx])) tmp[r++] = s[idx++];  tmp[r] = <span class="number">0</span>;</div><div class="line">            display(l, tmp);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(isoperator(s[idx])) <span class="built_in">printf</span>(<span class="string">" %c "</span>, s[idx++]);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d "</span>, &amp;t);</div><div class="line">    <span class="keyword">while</span>(t--) &#123;</div><div class="line">        <span class="keyword">char</span> buf[<span class="number">2005</span>]; gets(buf);</div><div class="line">        n = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; buf[i]; ++i) &#123;</div><div class="line">            <span class="keyword">if</span>(<span class="built_in">isspace</span>(buf[i])) <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">if</span>(buf[i] == <span class="string">'d'</span> &amp;&amp; (!s[n] || s[n] &amp;&amp; !<span class="built_in">isdigit</span>(s[n]))) s[++n] = <span class="string">'1'</span>;</div><div class="line">            s[++n] = buf[i];</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        s[n + <span class="number">1</span>] = <span class="number">0</span>;</div><div class="line"></div><div class="line">        idx = <span class="number">1</span>;</div><div class="line">        dfs();</div><div class="line">        <span class="built_in">printf</span>(<span class="string">" = [Result]\n"</span>);  <span class="comment">//puts("");</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 暴力 </category>
            
            <category> 小模拟 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 模拟 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ZOJ 3929 Deque and Balls（数学、BIT）]]></title>
      <url>/2016/04/10/ZOJ%203929%20Deque%20and%20Balls%EF%BC%88%E6%95%B0%E5%AD%A6%E3%80%81BIT%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$N\le 10^5的序列，A_i\le N，将这个序列按顺序装入一个deque$<br>$每次装在deque的首尾概率均等，问所有序列相邻逆序个数的期望$<br>$相邻逆序个数：=\sum_{i=1}^{N-1} A_i &gt; A_{i+1}$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$首先对于deque我们可以发现，任意1个中轴左右的数的下标都是递增的$<br>$假设a_1为中轴，那么a_2,\cdots,a_n只能按顺序放右或者不放右（即放左）$<br>$那么总的合法序列的个数即为2^{n-1}$<br>$考虑任意一个逆序对答案的贡献：$<br>$WLOG，(a_i, a_j), j &gt; i，显然只能放在放在右边，由前面的性质可知a_i和a_j间是没有数的$<br>$a_i对a_j的贡献，E_{ij}=2^{i-2}\cdot2^{n-j}，a_1已经放了，左边还有i-2个，右边n-j个$<br>$我们用BIT来维护a_i对a_j的贡献，显然只统计a_i&gt;a_j的$<br>$同理，(a_j, a_i), j&gt;i，显然只能放在左边，贡献同理，E_{ij}=2^{i-2}\cdot2^{n-j}$<br>$同理，只统计a_j &lt; a_i的$<br>$注意答案是乘2^i MOD 10^9+7哦，所以约分后还要乘2$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-04-10</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span>&amp; x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>((x += y) &gt;= MOD) x -= MOD;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BIT</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> n, dir, b[N];</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> _n, <span class="keyword">int</span> _dir)</span> </span>&#123;</div><div class="line">        n = _n; dir = _dir;</div><div class="line">        <span class="built_in">memset</span>(b, <span class="number">0</span>, <span class="keyword">sizeof</span> b);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> v)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span>(; i &amp;&amp; i &lt;= n; i += dir * (i &amp; -i))</div><div class="line">            add(b[i], v);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(; i &amp;&amp; i &lt;= n; i -= dir * (i &amp; -i))</div><div class="line">            add(ret, b[i]);</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line">&#125; small, large;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, a[N];</div><div class="line"><span class="keyword">int</span> two[N] = &#123;<span class="number">1</span>&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; ++i) add(two[i], two[i - <span class="number">1</span>] * <span class="number">2</span>);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">while</span>(t--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a + i);</div><div class="line"></div><div class="line">        small.init(n, <span class="number">1</span>);</div><div class="line">        large.init(n, <span class="number">-1</span>);</div><div class="line"></div><div class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">        small.update(a[<span class="number">1</span>], <span class="number">1</span>); <span class="comment">//中轴</span></div><div class="line">        large.update(a[<span class="number">1</span>], <span class="number">1</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</div><div class="line">            add(ans, <span class="number">1L</span>L * two[n - i] * large.query(a[i] + <span class="number">1</span>) % MOD); <span class="comment">//放右边</span></div><div class="line">            add(ans, <span class="number">1L</span>L * two[n - i] * small.query(a[i] - <span class="number">1</span>) % MOD); <span class="comment">//放左边</span></div><div class="line"></div><div class="line">            small.update(a[i], two[i - <span class="number">2</span>]); <span class="comment">//except 1</span></div><div class="line">            large.update(a[i], two[i - <span class="number">2</span>]); <span class="comment">//except 1</span></div><div class="line">        &#125;</div><div class="line">        add(ans, ans);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 数学 </category>
            
            <category> 贡献 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> BIT </tag>
            
            <tag> 逆序数 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Educational Codeforces Round 11 C. Hard Process（two pointers）]]></title>
      <url>/2016/04/10/Educational%20Codeforces%20Round%2011%20C.%20Hard%20Process%EF%BC%88two%20pointers%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$N\le 3\times 10^5的序列，A_i = 0 或者1$<br>$k\le N次操作将0变成1，求最长的连续1序列长度，并打印方案$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$two pointers经典题啦，记录下比较好的写法$<br>$时间复杂度O(n)$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-04-08</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, k, a[N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;k) == <span class="number">2</span>) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a + i);</div><div class="line"></div><div class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</div><div class="line">        pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; ans = &#123;<span class="number">0</span>, <span class="number">0</span>&#125;; <span class="comment">//sum, l</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> l = <span class="number">1</span>, r = <span class="number">1</span>; l &lt;= n; ++l) &#123;</div><div class="line">            <span class="keyword">while</span>(r &lt;= n &amp;&amp; cnt + !a[r] &lt;= k) cnt += !a[r++];</div><div class="line">            ans = max(ans, &#123;r - l, l&#125;);</div><div class="line">            cnt -= !a[l];</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans.first);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = ans.second; ans.first--; ++i) a[i] = <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">printf</span>(<span class="string">"%d%c"</span>, a[i], <span class="string">" \n"</span>[i == n]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 技巧 </category>
            
            <category> two pointers </category>
            
        </categories>
        
        
        <tags>
            
            <tag> two pointers </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Codeforces Round 346 (Div. 2) F. Polycarp and Hay（逆向思维、bfs）]]></title>
      <url>/2016/04/07/Codeforces%20Round%20346%20(Div.%202)%20F.%20Polycarp%20and%20Hay%EF%BC%88%E9%80%86%E5%90%91%E6%80%9D%E7%BB%B4%E3%80%81bfs%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$N，M\le 10^3，N\times M的矩阵，每个格子A_{ij}\le 10^9$<br>$现选出一些数变小使得它们的和为K\le 10^{18}，需满足：$<br>$1.至少有1个数不变$<br>$2.选出的所有数必须相同$<br>$3.选出的数必须连通$<br>$存在输出YES，打印任意解，否则输出NO$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$枚举不变的数，显然它们都是K的约数，先把它们村下来$<br>$赛上写的从小到大枚举bfs，加了BIT优化，蓝儿并不能改变O((nm)^2)的命运$<br>$但是如果你想想从大到小的话，就可以复用之前bfs到的了$<br>$用并查集维护连通的size，大的一定可以变小嘛，这样复杂度就保证了$<br>$找到答案之后，再重新bfs一次打印解就好了$<br>$不完全一样的东西少复用啊，强迫症要改啊$<br>$时间复杂度O(nm)$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-03-31</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[N], T[N];</div><div class="line"><span class="keyword">int</span> dfn[N], low[N], in[N], id[N], bcc, dfsNum;</div><div class="line"><span class="keyword">int</span> stk[N], top;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> f)</span> </span>&#123;</div><div class="line">    dfn[u] = low[u] = ++dfsNum;</div><div class="line">    stk[++top] = u;</div><div class="line">    in[u] = <span class="literal">true</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span>&amp; v : G[u]) &#123;</div><div class="line">        <span class="keyword">if</span>(v == f) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">if</span>(!dfn[v]) &#123;</div><div class="line">            tarjan(v, u);</div><div class="line">            low[u] = min(low[u], low[v]);</div><div class="line">        &#125; <span class="keyword">else</span> low[u] = min(low[u], dfn[v]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(low[u] == dfn[u]) &#123;</div><div class="line">        ++bcc;</div><div class="line">        <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</div><div class="line">            <span class="keyword">int</span> v = stk[top--];</div><div class="line">            in[v] = <span class="literal">false</span>;</div><div class="line">            id[v] = bcc;</div><div class="line">            <span class="keyword">if</span>(v == u) <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">    bcc = dfsNum = <span class="number">0</span>;</div><div class="line">    <span class="built_in">memset</span>(dfn, <span class="number">0</span>, <span class="keyword">sizeof</span> dfn);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">bool</span> vis[N];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">bool</span>&amp; ok, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; sz)</span> </span>&#123;</div><div class="line">    vis[u] = <span class="literal">true</span>;</div><div class="line">    ok |= (sz[u] &gt; <span class="number">1</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v : T[u]) &#123;</div><div class="line">        <span class="keyword">if</span>(vis[v]) <span class="keyword">continue</span>;</div><div class="line">        dfs(v, ok, sz);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</div><div class="line">        <span class="keyword">int</span> u, v; <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</div><div class="line">        G[u].push_back(v);</div><div class="line">        G[v].push_back(u);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    init();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="keyword">if</span>(!dfn[i]) tarjan(i, <span class="number">-1</span>);</div><div class="line"></div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; sz(N, <span class="number">0</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) sz[id[i]]++;</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">        <span class="keyword">int</span> u = id[i];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span>&amp; j : G[i]) &#123;</div><div class="line">            <span class="keyword">int</span> v = id[j];</div><div class="line">            T[u].push_back(v);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= bcc; ++i) &#123;</div><div class="line">        <span class="keyword">if</span>(vis[i]) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">bool</span> ok = <span class="literal">false</span>;</div><div class="line">        dfs(i, ok, sz);</div><div class="line">        ans += !ok;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 思维 </category>
            
            <category> 逆向思维 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> bfs </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Codeforces Round 346 (Div. 2) E. New Reform（边双连通缩点、连通块）]]></title>
      <url>/2016/04/07/Codeforces%20Round%20346%20(Div.%202)%20E.%20New%20Reform%EF%BC%88%E8%BE%B9%E5%8F%8C%E8%BF%9E%E9%80%9A%E7%BC%A9%E7%82%B9%E3%80%81%E8%BF%9E%E9%80%9A%E5%9D%97%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$N，M\le 10^5，N个点M条边的无向图，现在给每条边定向$<br>$求定向后0入度的点的个数$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$首先对于环(边双连通分量)来说，无论怎么定向都不会有0入度的点的$<br>$那么对于边双缩点之后的图(森林)，对于每个连通块(树)来说：$<br>$如果含有大于1的环(边双连通分量)，以它为根，所有边都指向远离根的方向$<br>$此时，根不是0入度，所有儿子也不是$<br>$统计不是这样的树的个数就好了$<br>$时间复杂度为O(n+m)$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-03-31</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[N], T[N];</div><div class="line"><span class="keyword">int</span> dfn[N], low[N], in[N], id[N], bcc, dfsNum;</div><div class="line"><span class="keyword">int</span> stk[N], top;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> f)</span> </span>&#123;</div><div class="line">    dfn[u] = low[u] = ++dfsNum;</div><div class="line">    stk[++top] = u;</div><div class="line">    in[u] = <span class="literal">true</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span>&amp; v : G[u]) &#123;</div><div class="line">        <span class="keyword">if</span>(v == f) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">if</span>(!dfn[v]) &#123;</div><div class="line">            tarjan(v, u);</div><div class="line">            low[u] = min(low[u], low[v]);</div><div class="line">        &#125; <span class="keyword">else</span> low[u] = min(low[u], dfn[v]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(low[u] == dfn[u]) &#123;</div><div class="line">        ++bcc;</div><div class="line">        <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</div><div class="line">            <span class="keyword">int</span> v = stk[top--];</div><div class="line">            in[v] = <span class="literal">false</span>;</div><div class="line">            id[v] = bcc;</div><div class="line">            <span class="keyword">if</span>(v == u) <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">    bcc = dfsNum = <span class="number">0</span>;</div><div class="line">    <span class="built_in">memset</span>(dfn, <span class="number">0</span>, <span class="keyword">sizeof</span> dfn);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">bool</span> vis[N];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">bool</span>&amp; ok, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; sz)</span> </span>&#123;</div><div class="line">    vis[u] = <span class="literal">true</span>;</div><div class="line">    ok |= (sz[u] &gt; <span class="number">1</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v : T[u]) &#123;</div><div class="line">        <span class="keyword">if</span>(vis[v]) <span class="keyword">continue</span>;</div><div class="line">        dfs(v, ok, sz);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</div><div class="line">        <span class="keyword">int</span> u, v; <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</div><div class="line">        G[u].push_back(v);</div><div class="line">        G[v].push_back(u);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    init();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="keyword">if</span>(!dfn[i]) tarjan(i, <span class="number">-1</span>);</div><div class="line"></div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; sz(N, <span class="number">0</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) sz[id[i]]++;</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">        <span class="keyword">int</span> u = id[i];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span>&amp; j : G[i]) &#123;</div><div class="line">            <span class="keyword">int</span> v = id[j];</div><div class="line">            T[u].push_back(v);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= bcc; ++i) &#123;</div><div class="line">        <span class="keyword">if</span>(vis[i]) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">bool</span> ok = <span class="literal">false</span>;</div><div class="line">        dfs(i, ok, sz);</div><div class="line">        ans += !ok;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 图论 </category>
            
            <category> 连通图 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 边双连通 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDU 5654 xiaoxin and his watermelon candy（离线思想、BIT）]]></title>
      <url>/2016/04/07/HDU%205654%20xiaoxin%20and%20his%20watermelon%20candy%EF%BC%88%E7%A6%BB%E7%BA%BF%E6%80%9D%E6%83%B3%E3%80%81BIT%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$N，Q\le 2\times 10^5，N个数的序列，A_i\in[0,10^9]$<br>$定义奇怪的三元组为(i,j,k)，i,j,k连续，且A_i\le A_j\le A_k$<br>$询问区间[l,r]中不同的奇怪三元组的个数$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$离线sb套路题，询问右端点排序$<br>$从左往右扫描A_i，一旦找到合法的三元组$<br>$BIT维护出现的个数，更新要在三元组的第1个位置$<br>$就把之前的位置-1，现在的位置+1$<br>$现在所有以i为右端点的询问的答案，只要查询sum(L,i)就可以了$<br>$即ans(L,i)=sum(L,i)，这里BIT倒过来用就可以了，向前更新，向后查询$<br>$当然你要主席树强制在线也是兹磁的，反正复杂度一样的$<br>$时间复杂度为O(nlogn)$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-04-07</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, q, a[N];</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BIT</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> n, b[N];</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> _n)</span> </span>&#123;</div><div class="line">        n = _n;</div><div class="line">        <span class="built_in">memset</span>(b, <span class="number">0</span>, <span class="keyword">sizeof</span> b);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> v)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span>(; i; i -= i &amp; -i) b[i] += v;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(; i &lt;= n; i += i &amp; -i) ret += b[i];</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line">&#125; bit;</div><div class="line"></div><div class="line"><span class="keyword">int</span> ans[N];</div><div class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; qs[N];</div><div class="line"><span class="keyword">typedef</span> tuple&lt;<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>&gt; tripe;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">while</span>(t--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a + i);</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;q);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) qs[i].clear();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; ++i) &#123;</div><div class="line">            <span class="keyword">int</span> l, r; <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;l, &amp;r);</div><div class="line">            qs[r].push_back(&#123;l, i&#125;);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        bit.init(n);</div><div class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</div><div class="line">        <span class="built_in">map</span>&lt;tripe, <span class="keyword">int</span>&gt; mp;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">            cnt = a[i] &gt;= a[i - <span class="number">1</span>] ? cnt + <span class="number">1</span> : <span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span>(cnt &gt; <span class="number">2</span>) &#123;</div><div class="line">                tripe cur = tripe(a[i - <span class="number">2</span>], a[i - <span class="number">1</span>], a[i]);</div><div class="line">                <span class="keyword">if</span>(mp.count(cur)) bit.add(mp[cur], <span class="number">-1</span>);</div><div class="line">                mp[cur] = i - <span class="number">2</span>;</div><div class="line">                bit.add(i - <span class="number">2</span>, <span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; q : qs[i]) ans[q.second] = bit.sum(q.first);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; ++i) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 思维 </category>
            
            <category> 离线思想 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> BIT </tag>
            
            <tag> 离线 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDU 5653 Bomber Man wants to bomb an Array（dp）]]></title>
      <url>/2016/04/07/HDU%205653%20Bomber%20Man%20wants%20to%20bomb%20an%20Array%EF%BC%88dp%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$N\le 2\times 10^3，N个格子，M\le N个炸弹$<br>$每个炸弹可以向左向右炸任意距离，假设为L，R，那么贡献E_i=L+R+1$<br>$每个格子只能炸1次，总贡献为\Pi_{i=1}^mE_i$<br>$求最大的总贡献$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$dp，f[i]:=前i个格子被炸掉的最大贡献$<br>$转移就枚举炸弹，枚举左右炸的距离，然后这个看起来的三方的dp是二方的$<br>$f[0]=1，f[r] = max(f[r], f[l-1]*(r-l+1))，log2一下就变成+了$<br>$只看左右端点，都只是枚举了n$<br>$时间复杂度O(n^2)$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-04-07</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e3</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">int</span> a[N];</div><div class="line"><span class="keyword">double</span> v[N], f[N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2000</span>; ++i) v[i] = log2(i);</div><div class="line">    <span class="keyword">while</span>(t--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">        a[<span class="number">0</span>] = <span class="number">0</span>; a[m + <span class="number">1</span>] = n + <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a + i), ++a[i];</div><div class="line">        sort(a + <span class="number">1</span>, a + <span class="number">1</span> + m);</div><div class="line"></div><div class="line">        <span class="built_in">memset</span>(f, <span class="number">0</span>, <span class="keyword">sizeof</span> f);</div><div class="line">        f[<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> l = a[i - <span class="number">1</span>] + <span class="number">1</span>; l &lt;= a[i]; ++l)</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> r = a[i]; r &lt;= a[i + <span class="number">1</span>] - <span class="number">1</span>; ++r)</div><div class="line">                    f[r] = max(f[r], f[l - <span class="number">1</span>] + v[r - l + <span class="number">1</span>]);</div><div class="line"></div><div class="line">        <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">1e6</span> * f[n];</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 动态规划 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> dp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDU 5652 India and China Origins（并查集）]]></title>
      <url>/2016/04/07/HDU%205652%20India%20and%20China%20Origins%EF%BC%88%E5%B9%B6%E6%9F%A5%E9%9B%86%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$N，M\le 5\times 10^2，N\times M的矩阵，0表示可通过，1不可通过$<br>$这个矩阵是连通的当且仅当，从第一行的任意一点出发可以到最后一行$<br>$给定Q\le N\times M次修改，将矩阵的0变1$<br>$问最早哪一次修改使得矩阵不连通$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$显然建立一个超源连到第一行，超汇连到最后一行$<br>$然后直接二分+bfs或者并查集判断连通性就做完了$<br>$其实可以倒着来想，先全部把1加进去，再1个1个删掉$<br>$这里要注意源汇的连通性哦，反正我觉得前者好写$<br>$时间复杂度O((n+m)logm)或者O(n+m)$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-04-07</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5e2</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DSU</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> n, p[N * N], r[N * N];</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> _n)</span> </span>&#123;</div><div class="line">        n = _n;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) p[i] = i, r[i] = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> p[x] = p[x] == x ? x : find(p[x]);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">unite</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">        x = find(x), y = find(y);</div><div class="line">        <span class="keyword">if</span>(x == y) <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">if</span>(r[x] &gt; r[y]) swap(x, y);</div><div class="line">        <span class="keyword">if</span>(r[x] == r[y]) ++ r[y];</div><div class="line">        p[x] = y;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">same</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> find(x) == find(y);</div><div class="line">    &#125;</div><div class="line">&#125; dsu;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m, q;</div><div class="line"><span class="keyword">char</span> a[N][N];</div><div class="line">pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; qs[N * N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">ID</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> x * m + y;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">process</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">int</span> d[][<span class="number">2</span>] = &#123; <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>&#125;;</div><div class="line">    <span class="keyword">if</span>(a[i][j] == <span class="string">'1'</span>) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; ++k) &#123;</div><div class="line">        <span class="keyword">int</span> x = i + d[k][<span class="number">0</span>], y = j + d[k][<span class="number">1</span>];</div><div class="line">        <span class="keyword">if</span>(y &lt; <span class="number">0</span> || y &gt;= m) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">if</span>(x &lt; <span class="number">0</span>) dsu.unite(ID(i, j), n * m);</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(x &gt;= n) dsu.unite(ID(i, j), n * m + <span class="number">1</span>);</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a[x][y] == <span class="string">'0'</span>) dsu.unite(ID(i, j), ID(x, y));</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">while</span>(t--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) <span class="built_in">scanf</span>(<span class="string">"%s"</span>, a[i]);</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;q);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; q; ++i) &#123;</div><div class="line">            <span class="keyword">int</span> x, y; <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</div><div class="line">            qs[i] = &#123;x, y&#125;;</div><div class="line">            a[x][y] = <span class="string">'1'</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        dsu.init(n * m + <span class="number">2</span>);</div><div class="line">        <span class="keyword">int</span> s = n * m, t = s + <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</div><div class="line">            <span class="keyword">if</span>(a[<span class="number">0</span>][i] == <span class="string">'0'</span>) dsu.unite(s, ID(<span class="number">0</span>, i));</div><div class="line">            <span class="keyword">if</span>(a[n - <span class="number">1</span>][i] == <span class="string">'0'</span>) dsu.unite(ID(n - <span class="number">1</span>, i), t);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j)</div><div class="line">                process(i, j);</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(dsu.same(s, t)) &#123;<span class="built_in">puts</span>(<span class="string">"-1"</span>); <span class="keyword">continue</span>;&#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = q - <span class="number">1</span>; ~i; --i) &#123;</div><div class="line">            <span class="keyword">int</span> x = qs[i].first, y = qs[i].second;</div><div class="line">            a[x][y] = <span class="string">'0'</span>;</div><div class="line">            process(x, y);</div><div class="line">            <span class="keyword">if</span>(dsu.same(s, t)) &#123;</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, i + <span class="number">1</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 数据结构 </category>
            
            <category> 并查集 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 离线 </tag>
            
            <tag> 并查集 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDU 5651 xiaoxin juju needs help（组合数学）]]></title>
      <url>/2016/04/07/HDU%205651%20xiaoxin%20juju%20needs%20help%EF%BC%88%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$N\le 2\times 10^3的字符串，字符集大小为26$<br>$现在重排它，问有多少个不同的回文串$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$这个很显然了，num_{字符出现奇数个数}&gt;1肯定GG$<br>$没出现奇数字符直接搞就好了，出现了就取出1个放在中间，剩下的都是偶数个数了$<br>$ans=\frac{ {\frac{n}{2}}!} {c_1 !\cdot c_2!\cdots c_m!}，很简单的组合计数啦$<br>$就是要求个逆元$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-04-07</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e3</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">char</span> s[N];</div><div class="line"><span class="keyword">int</span> f[N], inv[N], finv[N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    f[<span class="number">0</span>] = inv[<span class="number">0</span>] = finv[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">    f[<span class="number">1</span>] = inv[<span class="number">1</span>] = finv[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">1000</span>; ++i) &#123;</div><div class="line">        f[i] = <span class="number">1L</span>L * i * f[i - <span class="number">1</span>] % MOD;</div><div class="line">        inv[i] = <span class="number">1L</span>L * (MOD - MOD / i) * inv[MOD % i] % MOD;</div><div class="line">        finv[i] = <span class="number">1L</span>L * inv[i] * finv[i - <span class="number">1</span>] % MOD;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">while</span>(t--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</div><div class="line">        <span class="keyword">int</span> n = <span class="built_in">strlen</span>(s);</div><div class="line"></div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; c(<span class="number">26</span>, <span class="number">0</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) c[s[i] - <span class="string">'a'</span>]++;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> odd = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i) odd += c[i] &amp; <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span>(odd &gt; <span class="number">1</span>) &#123;<span class="built_in">puts</span>(<span class="string">"0"</span>); <span class="keyword">continue</span>;&#125;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> ans = f[n / <span class="number">2</span>];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)</div><div class="line">            ans = <span class="number">1L</span>L * ans * finv[c[i] / <span class="number">2</span>] % MOD;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 数学 </category>
            
            <category> 组合数学 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 逆元 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDU 5639 Deletion（最大流）]]></title>
      <url>/2016/04/07/HDU%205639%20Deletion%EF%BC%88%E6%9C%80%E5%A4%A7%E6%B5%81%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$N，M\le 2\times 10^3，N个点M条边的无向图$<br>$每次选择从图中删掉一些边，要求选出来的边构成的子图的每个连通块最多只有一个环$<br>$问最少需要删几次才能把所有边都删掉$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p><img src="http://7xru22.com1.z0.glb.clouddn.com/16-4-7/42023196.jpg" alt=""><br>$这想法真是炫酷，虽然我做过混合图欧拉回路那个题，早都忘了$<br>$第二种解法也是炫酷$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-04-07</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">4e3</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">8e3</span> + <span class="number">10</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> v, nxt, cap;</div><div class="line">&#125; edge[M &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> head[N], cnt;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">addDouble</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> c1, <span class="keyword">int</span> c2 = <span class="number">0</span>)</span> </span>&#123;</div><div class="line">    edge[cnt] = &#123;v, head[u], c1&#125;;</div><div class="line">    head[u] = cnt++;</div><div class="line">    edge[cnt] = &#123;u, head[v], c2&#125;;</div><div class="line">    head[v] = cnt++;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> lev[N], cur[N];</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span> </span>&#123;</div><div class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</div><div class="line">    <span class="built_in">memset</span>(lev, <span class="number">0</span>, <span class="keyword">sizeof</span> lev);</div><div class="line">    q.push(s);  lev[s] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span>(q.size() &amp;&amp; !lev[t]) &#123;</div><div class="line">        <span class="keyword">int</span> u = q.front(); q.pop();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; ~i; i = edge[i].nxt) &#123;</div><div class="line">            <span class="keyword">int</span> v = edge[i].v;</div><div class="line">            <span class="keyword">if</span>(edge[i].cap &gt; <span class="number">0</span> &amp;&amp; !lev[v]) &#123;</div><div class="line">                lev[v] = lev[u] + <span class="number">1</span>;</div><div class="line">                q.push(v);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> lev[t];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> t, <span class="keyword">int</span> delta)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(u == t || !delta) <span class="keyword">return</span> delta;</div><div class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = cur[u]; ~i; i = edge[i].nxt) &#123;</div><div class="line">        <span class="keyword">int</span> v = edge[i].v;</div><div class="line">        <span class="keyword">if</span>(edge[i].cap &gt; <span class="number">0</span> &amp;&amp; lev[v] == lev[u] + <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">int</span> d = dfs(v, t, min(delta, edge[i].cap));</div><div class="line">            cur[u] = i;</div><div class="line">            ret += d; delta -= d;</div><div class="line">            edge[i].cap -= d;</div><div class="line">            edge[i ^ <span class="number">1</span>].cap += d;</div><div class="line"></div><div class="line">            <span class="keyword">if</span>(delta == <span class="number">0</span>) <span class="keyword">return</span> ret;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    lev[u] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dinic</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(bfs(s, t)) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = s; i &lt;= t; ++i) cur[i] = head[i];</div><div class="line">        ret += dfs(s, t, INF);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">int</span> u[M], v[M];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">    cnt = <span class="number">0</span>; <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</div><div class="line">    <span class="keyword">int</span> s = <span class="number">0</span>, t = n + m + <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) addDouble(s, i, x);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</div><div class="line">        addDouble(u[i], i + n, <span class="number">1</span>);</div><div class="line">        addDouble(v[i], i + n, <span class="number">1</span>);</div><div class="line">        addDouble(i + n, t, <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> dinic(s, t) == m;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">while</span>(t--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, u + i, v + i);</div><div class="line"></div><div class="line">        <span class="keyword">int</span> l = <span class="number">0</span>, r = m;</div><div class="line">        <span class="keyword">while</span>(l &lt;= r) &#123;</div><div class="line">            <span class="keyword">int</span> m = l + r &gt;&gt; <span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span>(check(m)) r = m - <span class="number">1</span>;</div><div class="line">            <span class="keyword">else</span> l = m + <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, l);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 图论 </category>
            
            <category> 网络流 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 拓扑排序 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDU 5638 Toposort（拓扑排序）]]></title>
      <url>/2016/04/07/HDU%205638%20Toposort%EF%BC%88%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$N\le 10^5个点，M\le 2\times 10^5条边的无向图，现删去K\le M条边$<br>$要使得最小拓扑序最小，求这个拓扑序$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$参考下普通的用堆维护求字典序最小拓扑序$ $用某种数据结构维护入度小于等于k的所有点$<br>$每次找出编号最小的i，强制删掉它的所有入边，表现为k-=inDegree_i$<br>$可以用线段树维护全局入度，每次线段树上二分找\le k的最小的i$<br>$其实也可以用堆来机智的做，反正每个只会用一次，复杂度是保证了的$<br>$时间复杂度为O(nlogn)$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-04-06</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m, k;</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">while</span>(t--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;m, &amp;k);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) G[i].clear();</div><div class="line"></div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; in(N, <span class="number">0</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</div><div class="line">            <span class="keyword">int</span> u, v; <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</div><div class="line">            G[u].push_back(v);</div><div class="line">            ++in[v];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; used(N, <span class="literal">false</span>);</div><div class="line">        priority_queue&lt;<span class="keyword">int</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;, greater&lt;<span class="keyword">int</span>&gt; &gt; q;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="keyword">if</span>(in[i] &lt;= k) q.push(i);</div><div class="line"></div><div class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">            <span class="keyword">int</span> u;</div><div class="line">            <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</div><div class="line">                u = q.top(); q.pop();</div><div class="line">                <span class="keyword">if</span>(!used[u] &amp;&amp; in[u] &lt;= k) <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            k -= in[u];</div><div class="line">            used[u] = <span class="literal">true</span>;</div><div class="line"></div><div class="line">            ans += <span class="number">1L</span>L * i * u % MOD;</div><div class="line">            <span class="keyword">if</span>(ans &gt;= MOD) ans -= MOD;</div><div class="line"></div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> v : G[u])</div><div class="line">                <span class="keyword">if</span>(--in[v] &lt;= k) q.push(v);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 图论 </category>
            
            <category> 拓扑排序 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 拓扑排序 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDU 5637 Transform（bfs）]]></title>
      <url>/2016/04/07/HDU%205637%20Transform%EF%BC%88bfs%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$N\le 15个整数A_i \le 10^5，对于一个数x，2种操作：$<br>$1.翻转二进制位中的1个位$<br>$2.x\oplus A_i，1次选择1个A_i，\oplus为二进制异或$<br>$Q\le 10^5询问，s\to t的最小操作数$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$对于第一种操作其实就是x\oplus 2^i，i\in [0,17)$<br>$多次询问其实我们可以bfs预处理，d[x]为到x的最小步数$<br>$然后我们发现ans(s,t)=d[s\oplus t]$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-04-06</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m, a[<span class="number">16</span>];</div><div class="line"><span class="keyword">int</span> d[<span class="number">1</span> &lt;&lt; <span class="number">17</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">while</span>(t--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a + i);</div><div class="line">        <span class="built_in">memset</span>(d, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> d);</div><div class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q; q.push(<span class="number">0</span>);</div><div class="line">        d[<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(q.size()) &#123;</div><div class="line">            <span class="keyword">int</span> u = q.front(); q.pop();</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">17</span>; ++i) &#123;</div><div class="line">                <span class="keyword">int</span> v = u ^ (<span class="number">1</span> &lt;&lt; i);</div><div class="line">                <span class="keyword">if</span>(d[v] == INF) &#123;</div><div class="line">                    d[v] = d[u] + <span class="number">1</span>;</div><div class="line">                    q.push(v);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">                <span class="keyword">int</span> v = u ^ a[i];</div><div class="line">                <span class="keyword">if</span>(d[v] == INF) &#123;</div><div class="line">                    d[v] = d[u] + <span class="number">1</span>;</div><div class="line">                    q.push(v);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</div><div class="line">            <span class="keyword">int</span> s, t; <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;s, &amp;t);</div><div class="line">            ans += <span class="number">1L</span>L * i * d[s ^ t] % MOD;</div><div class="line">            <span class="keyword">if</span>(ans &gt;= MOD) ans -= MOD;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 暴力 </category>
            
            <category> 搜索 </category>
            
            <category> dfs/bfs </category>
            
        </categories>
        
        
        <tags>
            
            <tag> bfs </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDU 5636 Shortest Path（floyd）]]></title>
      <url>/2016/04/07/HDU%205636%20Shortest%20Path%EF%BC%88floyd%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$N，M\le 10^5，N个点M条边的形成一条链的无向图$<br>$即只有(i,i+1,1)这样的边，i\in[1,N)$<br>$现在添加3条长度为1的边，Q次询问dis(a,b)$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$把这6个点floyd一下，然后暴力枚举经过这6个点中的2个点，或者不经过$<br>$时间复杂度为O(6^2\cdot m)$<br>$当然建图跑spfa也可以，求dis[6][N]，枚举经过这6个点中的1个点，或者不经过$<br>$时间复杂度为O(6m)$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-04-06</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m, a[<span class="number">4</span>], b[<span class="number">4</span>];</div><div class="line"><span class="keyword">int</span> g[<span class="number">7</span>][<span class="number">7</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">while</span>(t--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span>; ++i) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, a + i, b + i);</div><div class="line">            v.push_back(a[i]);</div><div class="line">            v.push_back(b[i]);</div><div class="line">        &#125;</div><div class="line">        sort(v.begin(), v.end());</div><div class="line">        v.resize(unique(v.begin(), v.end()) - v.begin());</div><div class="line"></div><div class="line">        <span class="keyword">int</span> sz = v.size();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= sz; ++i)</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= sz; ++j)</div><div class="line">                g[i][j] = <span class="built_in">abs</span>(v[i - <span class="number">1</span>] - v[j - <span class="number">1</span>]);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span>; ++i) &#123;</div><div class="line">            <span class="keyword">int</span> x = lower_bound(v.begin(), v.end(), a[i]) - v.begin() + <span class="number">1</span>;</div><div class="line">            <span class="keyword">int</span> y = lower_bound(v.begin(), v.end(), b[i]) - v.begin() + <span class="number">1</span>;</div><div class="line">            g[x][y] = min(g[x][y], <span class="number">1</span>);</div><div class="line">            g[y][x] = min(g[y][x], <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= sz; ++k)</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= sz; ++i)</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= sz; ++j)</div><div class="line">                    g[i][j] = min(g[i][j], g[i][k] + g[k][j]);</div><div class="line"></div><div class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</div><div class="line">            <span class="keyword">int</span> x, y; <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</div><div class="line"></div><div class="line">            <span class="keyword">int</span> cur = <span class="built_in">abs</span>(x - y);</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= sz; ++j)</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= sz; ++k)</div><div class="line">                    cur = min(cur, <span class="built_in">abs</span>(x - v[j - <span class="number">1</span>]) + g[j][k] + <span class="built_in">abs</span>(y - v[k - <span class="number">1</span>]));</div><div class="line"></div><div class="line">            ans += <span class="number">1L</span>L * i * cur % MOD;</div><div class="line">            <span class="keyword">if</span>(ans &gt;= MOD) ans -= MOD;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 图论 </category>
            
            <category> 最短路 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> floyd </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[VK Cup 2016 - Round 1 E. Bear and Contribution（贪心）]]></title>
      <url>/2016/03/30/VK%20Cup%202016%20-%20Round%201%20E.%20Bear%20and%20Contribution%EF%BC%88%E8%B4%AA%E5%BF%83%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$N，K\le 2\times 10^5，给定N个数，现在要使其中至少K个数变得相同$<br>$b，c\le 1000，其中增加5的代价是b，增加1的代价是c$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$显然的想法是都变成已有某个数比较优$<br>$但是b，c大小没给定，如果b很小，那么我们可以稍微通过+1变大我们这个数，同时其他的数+5$<br>$所以我们发现选择的数应该是a_i+j, j\in[0,5)$<br>$这样我们只要维护5个set，来动态维护k个数就好了$<br>$但是每次我们要O(1)计算出变成当前数的花费，其实只要把之前的数都变成[0,4)$<br>$之后再统一变成当前数就好辣，就可以O(1)计算了，注意负数哦$<br>$时间复杂度O(5nlogn)$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-03-30</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">int</span> n, k, a[N];</div><div class="line">LL b, c;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;<span class="keyword">return</span> (x % <span class="number">5</span> + <span class="number">5</span>) % <span class="number">5</span>;&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">count</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;<span class="keyword">return</span> (x - get(x)) / <span class="number">5</span>;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%I64d%I64d"</span>, &amp;n, &amp;k, &amp;b, &amp;c);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a + i);</div><div class="line">    b = min(b, <span class="number">5</span> * c);</div><div class="line">    sort(a + <span class="number">1</span>, a + <span class="number">1</span> + n);</div><div class="line"></div><div class="line">    <span class="built_in">multiset</span>&lt;LL&gt; s[<span class="number">5</span>];</div><div class="line">    LL ans = <span class="number">1e18</span>, cost[<span class="number">5</span>] = &#123;&#125;;</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; ++j) &#123;</div><div class="line">            <span class="keyword">int</span> wh = get(a[i] + j);</div><div class="line">            <span class="keyword">int</span> times = count(a[i] + j);</div><div class="line">            LL cur = j * c - times * b;</div><div class="line"></div><div class="line">            s[wh].insert(cur);</div><div class="line">            cost[wh] += cur;</div><div class="line">            <span class="keyword">if</span>(s[wh].size() &gt; k) &#123;</div><div class="line">                cost[wh] -= *s[wh].rbegin();</div><div class="line">                s[wh].erase(s[wh].find(*s[wh].rbegin()));</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span>(s[wh].size() == k) &#123;</div><div class="line">                LL tmp = cost[wh] + times * b * k;</div><div class="line">                ans = min(ans, tmp);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, ans);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 思维 </category>
            
            <category> 贪心 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[VK Cup 2016 - Round 1 D. Bear and Polynomials（哈希）]]></title>
      <url>/2016/03/29/VK%20Cup%202016%20-%20Round%201%20D.%20Bear%20and%20Polynomials%EF%BC%88%E5%93%88%E5%B8%8C%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$N\le 2\times 10^5，给定一个N次多项式，即P(x)=\sum_{i=0}^N a_i\cdot x^i$<br>$已经P(2)\neq 0，现要改变其中一个系数a_i，使得P’(2)=0$<br>$求方法数$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$由于N非常大，所以直接算是不行的$<br>$我们可以通过对素数取模来哈希这个结果，这个素数一定要比max\{a_i\}大$<br>$取2个素数，之后枚举每个系数，算出答案，比较是否相等即可，同时别忘记负数答案了$<br>$各种取模，注意不要模出负数了$<br>$时间复杂度O(n)$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-03-29</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, k;</div><div class="line"><span class="keyword">int</span> a[N];</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">ksm</span><span class="params">(LL x, LL n, LL MOD)</span> </span>&#123;</div><div class="line">    LL ret = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(; n; n &gt;&gt;= <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">if</span>(n &amp; <span class="number">1</span>) ret = ret * x % MOD;</div><div class="line">        x = x * x % MOD;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;k);</div><div class="line">    LL sum[<span class="number">2</span>] = &#123;&#125;, mod[<span class="number">2</span>] = &#123;MOD, MOD + <span class="number">2</span>&#125;;</div><div class="line">    LL power[<span class="number">2</span>] = &#123;<span class="number">1</span>, <span class="number">1</span>&#125;, base[<span class="number">2</span>] = &#123;<span class="number">2</span>, <span class="number">2</span>&#125;;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a + i);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; ++j) &#123;</div><div class="line">            sum[j] = (sum[j] + a[i] * power[j] % mod[j]) % mod[j];</div><div class="line">            sum[j] = (sum[j] + mod[j]) % mod[j];</div><div class="line">            power[j] = power[j] * base[j] % mod[j];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i) power[i] = <span class="number">1</span>, base[i] = ksm(<span class="number">2</span>, mod[i] - <span class="number">2</span>, mod[i]);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i) &#123;</div><div class="line">        LL delta[<span class="number">2</span>];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; ++j) &#123;</div><div class="line">            delta[j] = (a[i] - sum[j] * power[j] % mod[j]) % mod[j];</div><div class="line">            delta[j] = (delta[j] + mod[j]) % mod[j];</div><div class="line">            power[j] = power[j] * base[j] % mod[j];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        LL cof = INF;</div><div class="line">        <span class="keyword">if</span>(delta[<span class="number">0</span>] == delta[<span class="number">1</span>]) cof = delta[<span class="number">0</span>];</div><div class="line">        <span class="keyword">if</span>(delta[<span class="number">0</span>] - mod[<span class="number">0</span>] == delta[<span class="number">1</span>] - mod[<span class="number">1</span>]) cof = delta[<span class="number">0</span>] - mod[<span class="number">0</span>];</div><div class="line">        <span class="keyword">if</span>(<span class="built_in">abs</span>(cof) &gt; k || i == n &amp;&amp; cof == <span class="number">0</span>) <span class="keyword">continue</span>;</div><div class="line"></div><div class="line">        ++ans;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 技巧 </category>
            
            <category> 哈希 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 哈希 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Educational Codeforces Round 10 D. Nested Segments（离线思想、BIT）]]></title>
      <url>/2016/03/28/Educational%20Codeforces%20Round%2010%20D.%20Nested%20Segments%EF%BC%88%E7%A6%BB%E7%BA%BF%E6%80%9D%E6%83%B3%E3%80%81BIT%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$N \le 2\times 10^5个线段，问第i个线段包含多少个其它线段$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$经典离线套路题了，询问右端点排序$<br>$从左往右扫描每个数i（相当于固定了右端点）$<br>$然后对于所有[L, i]的询问，查询sum(L, i)就是答案了$<br>$这里其实把BIT倒过来就可以完成了，向前更新，向后查询$<br>$之后把每个询问（线段）的左端点添加进线段树中$<br>$时间复杂度O(nlogn)$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-03-25</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">4e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, ans[N];</div><div class="line">pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; tmp[N];</div><div class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; qs[N];</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BIT</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> n, b[N];</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> _n)</span> </span>&#123;</div><div class="line">        n = _n;</div><div class="line">        <span class="built_in">memset</span>(b, <span class="number">0</span>, <span class="keyword">sizeof</span> b);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> v)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span>(; i; i -= i &amp; -i) b[i] += v;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(; i &lt;= n; i += i &amp; -i) ret += b[i];</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line">&#125; bit;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; xs;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">        <span class="keyword">int</span> l, r; <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;l, &amp;r);</div><div class="line">        xs.push_back(l);</div><div class="line">        xs.push_back(r);</div><div class="line">        tmp[i] = &#123;l, r&#125;;</div><div class="line">    &#125;</div><div class="line">    sort(xs.begin(), xs.end());</div><div class="line">    xs.resize(unique(xs.begin(), xs.end()) - xs.begin());</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">        <span class="keyword">int</span> l = tmp[i].first, r = tmp[i].second;</div><div class="line">        l = lower_bound(xs.begin(), xs.end(), l) - xs.begin() + <span class="number">1</span>;</div><div class="line">        r = lower_bound(xs.begin(), xs.end(), r) - xs.begin() + <span class="number">1</span>;</div><div class="line">        qs[r].push_back(&#123;l, i&#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    bit.init(xs.size());</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= xs.size(); ++i) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; p : qs[i]) &#123;</div><div class="line">            ans[p.second] = bit.sum(p.first);</div><div class="line">            bit.add(p.first, <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans[i]);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 思维 </category>
            
            <category> 离线思想 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> BIT </tag>
            
            <tag> 离线 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Educational Codeforces Round 10 E. Pursuit For Artifacts（边双连通缩点）]]></title>
      <url>/2016/03/28/Educational%20Codeforces%20Round%2010%20E.%20Pursuit%20For%20Artifacts%EF%BC%88%E8%BE%B9%E5%8F%8C%E8%BF%9E%E9%80%9A%E7%BC%A9%E7%82%B9%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$N，M\le 3\times 10^5，N个点，M条边的无向图，无重边自环$<br>$边权为0或1，问s\to t是否存权\ge 1且每条边经过一次的一条路径$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$边双缩点成树，树边(桥边)权保留，bcc内总权映射到点上$<br>$ans=dis(s,t)\ge 1$<br>$正确性就是bcc任意2点连通，是个简单环嘛，选有1的那半边走就好啦$ $并且树上2点路径是唯一的，满足题意就做完了$<br>$时间复杂度O(n+m)$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-03-25</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> v, c;</div><div class="line">&#125;;</div><div class="line"><span class="built_in">vector</span>&lt;Edge&gt; G[N], T[N];</div><div class="line"><span class="keyword">int</span> dfn[N], low[N], in[N], id[N], bcc, dfsNum;</div><div class="line"><span class="keyword">int</span> stk[N], top;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> f)</span> </span>&#123;</div><div class="line">    dfn[u] = low[u] = ++dfsNum;</div><div class="line">    stk[++top] = u;</div><div class="line">    in[u] = <span class="literal">true</span>;</div><div class="line">    <span class="keyword">for</span>(Edge e : G[u]) &#123;</div><div class="line">        <span class="keyword">int</span> v = e.v;</div><div class="line">        <span class="keyword">if</span>(v == f) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">if</span>(!dfn[v]) &#123;</div><div class="line">            tarjan(v, u);</div><div class="line">            low[u] = min(low[u], low[v]);</div><div class="line">        &#125; <span class="keyword">else</span> low[u] = min(low[u], dfn[v]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(low[u] == dfn[u]) &#123;</div><div class="line">        ++bcc;</div><div class="line">        <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</div><div class="line">            <span class="keyword">int</span> v = stk[top--];</div><div class="line">            in[v] = <span class="literal">false</span>;</div><div class="line">            id[v] = bcc;</div><div class="line">            <span class="keyword">if</span>(v == u) <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">    bcc = dfsNum = <span class="number">0</span>;</div><div class="line">    <span class="built_in">memset</span>(dfn, <span class="number">0</span>, <span class="keyword">sizeof</span> dfn);</div><div class="line">    tarjan(<span class="number">1</span>, <span class="number">-1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> val[N];</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t, <span class="keyword">int</span> fa, <span class="keyword">int</span> sum)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(s == t) <span class="keyword">return</span> sum + val[t];</div><div class="line">    <span class="keyword">for</span>(Edge e : T[s]) &#123;</div><div class="line">        <span class="keyword">int</span> v = e.v;</div><div class="line">        <span class="keyword">if</span>(v == fa) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">if</span>(dfs(v, t, s, sum + e.c + val[v])) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</div><div class="line">        <span class="keyword">int</span> u, v, c; <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;u, &amp;v, &amp;c);</div><div class="line">        G[u].push_back(&#123;v, c&#125;);</div><div class="line">        G[v].push_back(&#123;u, c&#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    init();</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">        <span class="keyword">int</span> u = id[i];</div><div class="line">        <span class="keyword">for</span>(Edge e : G[i]) &#123;</div><div class="line">            <span class="keyword">int</span> v = id[e.v];</div><div class="line">            <span class="keyword">if</span>(u == v) val[u] += e.c;</div><div class="line">            <span class="keyword">else</span> T[u].push_back(&#123;v, e.c&#125;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> s, t; <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;s, &amp;t);</div><div class="line">    <span class="built_in">puts</span>(dfs(id[s], id[t], <span class="number">-1</span>, val[id[s]]) ? <span class="string">"YES"</span> : <span class="string">"NO"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 图论 </category>
            
            <category> 连通图 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 边双连通 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Educational Codeforces Round 10 C. Foe Pairs（离线思想、贪心）]]></title>
      <url>/2016/03/28/Educational%20Codeforces%20Round%2010%20C.%20Foe%20Pairs%EF%BC%88%E7%A6%BB%E7%BA%BF%E6%80%9D%E6%83%B3%E3%80%81%E8%B4%AA%E5%BF%83%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$N，M\le 3\times 10^5，N个数，M个非法数对(a_i,b_i)$<br>$求不包含任何非法数对的区间个数$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$ans=总区间数-非法的$<br>$经典离线套路了$<br>$非法的话，直接把非法数对转化成区间，对这些区间右端点排序$<br>$挨个枚举每个点作为右端点，对于每个点显然它的贡献是最大的那个l([1,l]都可以选做左端点)$<br>$累计贡献，就可以算出答案了$<br>$时间复杂度O(nlogn)$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-03-25</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">int</span> a[N], wh[N];</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; qs[N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m) == <span class="number">2</span>) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a + i);</div><div class="line">            wh[a[i]] = i;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) qs[i].clear();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</div><div class="line">            <span class="keyword">int</span> x, y; <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</div><div class="line">            x = wh[x]; y = wh[y];</div><div class="line">            <span class="keyword">if</span>(x &gt; y) swap(x, y);</div><div class="line">            qs[y].push_back(x);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> l = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> x : qs[i]) l = max(l, x);</div><div class="line">            ans += l;</div><div class="line">        &#125;</div><div class="line">        ans = <span class="number">1L</span>L * n * (n + <span class="number">1</span>) / <span class="number">2</span> - ans;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 思维 </category>
            
            <category> 离线思想 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 离线 </tag>
            
            <tag> 贪心 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[UVA 10968 KuPellaKes（贪心、最短路）]]></title>
      <url>/2016/03/28/UVA%2010968%20KuPellaKes%EF%BC%88%E8%B4%AA%E5%BF%83%E3%80%81%E6%9C%80%E7%9F%AD%E8%B7%AF%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$N\le 2000个点的图，无重边自环，现要删去一些边$<br>$使得所有的点都是正偶度，保证图最多有2个奇度点$<br>$输出满足要求的要删去的最少的边，不能输出Poor Koorosh$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$首先奇度点只有0个或2个，因为total degree = 2|E|，是偶度，必有偶数个奇度点$<br>$首先check图是不是合法，有没有孤立节点，或者1度的奇度点(删了就变了0了)$<br>$如果0个奇度点，答案显然是0，不然就是2个奇度点的最短路$<br>$因为删去2个奇度点的一条边，如果路上经过偶度点，显然会删去2条边(1入1出)$<br>$最终肯定是个合法的图，最短路显然是最优答案咯$<br>$但是不能经过2度的偶度点(去掉2度就为0了)$<br>$时间复杂度为O(n+m)$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-03-27</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e3</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[N];</div><div class="line"></div><div class="line"><span class="keyword">int</span> d[N];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span> </span>&#123;</div><div class="line">    <span class="built_in">memset</span>(d, <span class="number">-1</span>, <span class="keyword">sizeof</span> d);</div><div class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q; q.push(s);</div><div class="line">    d[s] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(q.size()) &#123;</div><div class="line">        <span class="keyword">int</span> u = q.front(); q.pop();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G[u].size(); ++i) &#123;</div><div class="line">            <span class="keyword">int</span> v = G[u][i];</div><div class="line">            <span class="keyword">if</span>(G[v].size() == <span class="number">2</span>) <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">if</span>(d[v] == <span class="number">-1</span>) &#123;</div><div class="line">                d[v] = d[u] + <span class="number">1</span>;</div><div class="line">                q.push(v);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> d[t];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) G[i].clear();</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</div><div class="line">        <span class="keyword">int</span> u, v; <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</div><div class="line">        G[u].push_back(v);</div><div class="line">        G[v].push_back(u);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> s, t; s = t = <span class="number">-1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">        <span class="keyword">if</span>(G[i].size() &lt;= <span class="number">1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">        <span class="keyword">if</span>(G[i].size() &amp; <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">if</span>(s == <span class="number">-1</span>) s = i;</div><div class="line">            <span class="keyword">else</span> t = i;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//deg = 2E, so vertices of odd degree = 2</span></div><div class="line">    <span class="keyword">if</span>(s == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    assert(t != <span class="number">-1</span>);</div><div class="line">    <span class="keyword">return</span> bfs(s, t);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m) == <span class="number">2</span> &amp;&amp; (n || m)) &#123;</div><div class="line">        <span class="keyword">int</span> ans = solve();</div><div class="line">        <span class="keyword">if</span>(~ans) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">        <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"Poor Koorosh"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 图论 </category>
            
            <category> 最短路 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 贪心 </tag>
            
            <tag> 最短路 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDU 5324 Boring Class（LIS、二维分块）]]></title>
      <url>/2016/03/28/HDU%205324%20Boring%20Class%EF%BC%88LIS%E3%80%81%E4%BA%8C%E7%BB%B4%E5%88%86%E5%9D%97%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$N\le 5\times 10^4，给定2个长度为N的序列，A_i，B_i$<br>$现要选出对于2个序列同样的子序列，假设下标为p_1\le p_2\le \dots\le p_m$<br>$满足A_{p_1}\ge A_{p_2}\dots\ge A_{p_m}, 且B_{p_1}\ge B_{p_2}\dots\ge B_{p_m}$<br>$求最长的这样的子序列，打印下标，多解输出字典序最小解$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$如果直接按照LIS的dp方程转移是n^2的，考虑优化一下转移$<br>$由于要最小字典序的，所以得倒着搞，因为状态是以i结尾的嘛$<br>$倒着搞的话，对于一个点(up_i, down_i)看成(x,y)来说$<br>$每次转移就是找左上角的点，即x要小，y要大的点$<br>$这个我们可以用二维分块来搞，以\sqrt n的代价来转移$<br>$cdq分治，树套树都可以$<br>$时间复杂度为O(n\sqrt n)或者O(nlog^2n)$</p>
</blockquote>
<p>二维分块代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-03-22</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> B = <span class="number">250</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="keyword">int</span> x[N], y[N];</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; P;</div><div class="line"></div><div class="line">P pre[B][B]; <span class="comment">//x's prefix max</span></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> first, second;</div><div class="line">    <span class="keyword">int</span> id;</div><div class="line">&#125; X[N], Y[N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">compress</span><span class="params">(<span class="keyword">int</span> *x, <span class="keyword">int</span> delta)</span> </span>&#123;</div><div class="line">    <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; xs;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) xs.push_back(&#123;x[i], delta * i&#125;);</div><div class="line">    sort(xs.begin(), xs.end());</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</div><div class="line">        x[i] = lower_bound(xs.begin(), xs.end(), make_pair(x[i],</div><div class="line">                           delta * i)) - xs.begin() + <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">getMax</span><span class="params">(P&amp; x, P y)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(x.first &lt; y.first) x = y;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(x.first == y.first &amp;&amp; x.second &gt; y.second) x = y;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> v, <span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">    X[y] = &#123;x, v, id&#125;, Y[x] = &#123;y, v, id&#125;;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= y / B; ++i) getMax(pre[x / B][i], &#123;v, id&#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; query(<span class="keyword">int</span> x, <span class="keyword">int</span> y) &#123;</div><div class="line">    pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; ret = &#123;<span class="number">0</span>, <span class="number">0</span>&#125;;</div><div class="line">    <span class="keyword">int</span> tx = x / B, ty = y / B;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = tx * B; i &lt; x; ++i)</div><div class="line">        <span class="keyword">if</span>(Y[i].first &gt; y) getMax(ret, &#123;Y[i].second, Y[i].id&#125;);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = y + <span class="number">1</span>; i &lt; (ty + <span class="number">1</span>) * B; ++i)</div><div class="line">        <span class="keyword">if</span>(X[i].first &lt; x) getMax(ret, &#123;X[i].second, X[i].id&#125;);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tx; ++i) getMax(ret, pre[i][ty + <span class="number">1</span>]);</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> prevv[N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) == <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, x + i);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, y + i);</div><div class="line">        compress(x, <span class="number">-1</span>);</div><div class="line">        compress(y, <span class="number">1</span>);</div><div class="line"></div><div class="line">        <span class="built_in">memset</span>(pre, <span class="number">0</span>, <span class="keyword">sizeof</span> pre);</div><div class="line">        <span class="built_in">memset</span>(Y, <span class="number">0xc0</span>, <span class="keyword">sizeof</span> Y);</div><div class="line">        <span class="built_in">memset</span>(X, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> X);</div><div class="line"></div><div class="line">        P ans = &#123;<span class="number">0</span>, <span class="number">0</span>&#125;;</div><div class="line">        <span class="built_in">memset</span>(prevv, <span class="number">0</span>, <span class="keyword">sizeof</span> prevv);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; --i) &#123;</div><div class="line">            P ret = query(x[i], y[i]);</div><div class="line">            prevv[i] = ret.second;</div><div class="line"></div><div class="line">            update(x[i], y[i], ret.first + <span class="number">1</span>, i);</div><div class="line">            getMax(ans, &#123;ret.first + <span class="number">1</span>, i&#125;);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans.first);</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; path;</div><div class="line">        <span class="keyword">int</span> u = ans.second;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= ans.first; ++i) &#123;</div><div class="line">            path.push_back(u);</div><div class="line">            u = prevv[u];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; path.size(); ++i)</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d%c"</span>, path[i], <span class="string">" \n"</span>[i == path.size() - <span class="number">1</span>]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 动态规划 </category>
            
            <category> 最长上升子序列 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LIS </tag>
            
            <tag> 二维分块 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDU 5318 The Goddess Of The Moon（dp、矩阵快速幂）]]></title>
      <url>/2016/03/28/HDU%205318%20The%20Goddess%20Of%20The%20Moon%EF%BC%88dp%E3%80%81%E7%9F%A9%E9%98%B5%E5%BF%AB%E9%80%9F%E5%B9%82%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$N\le 50，M\le 10^9，N个字符串，选出M个拼接到一起$<br>$(i, j)拼接的条件是i的后缀和j的前缀的公共长度\ge 2$<br>$问拼接成不同的字符串的个数，答案对10^9+7取模$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$N小，并且M是10^9，赤果果的告诉你是矩阵快速幂$<br>$据说字符串要先去重，这是一个trick$<br>$f[i][j]:=长度为i，j结尾的方法数，转移矩阵是trans[i][j]:=(i, j)能否拼接$<br>$ans =\sum_{i=1}^n f[M][i]= f[1][i]\cdot (trans[i][j])^{M-1}$<br>$时间复杂度为O(n^3logm)$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-03-22</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">50</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Matrix</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> row, col;</div><div class="line">    LL mat[N][N];</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> r, <span class="keyword">int</span> c, <span class="keyword">bool</span> one = <span class="literal">false</span>)</span> </span>&#123;</div><div class="line">        row = r; col = c;</div><div class="line">        <span class="built_in">memset</span>(mat, <span class="number">0</span>, <span class="keyword">sizeof</span> mat);</div><div class="line">        <span class="keyword">if</span>(!one) <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; ++i) mat[i][i] = <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    Matrix <span class="keyword">operator</span>* (<span class="keyword">const</span> Matrix&amp; rhs) &#123;</div><div class="line">        Matrix ret; ret.init(row, rhs.col);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; col; ++k) &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; ++i) &#123;</div><div class="line">                <span class="keyword">if</span>(mat[i][k] == <span class="number">0</span>) <span class="keyword">continue</span>;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; rhs.col; ++j) &#123;</div><div class="line">                    <span class="keyword">if</span>(rhs.mat[k][j] == <span class="number">0</span>) <span class="keyword">continue</span>;</div><div class="line">                    ret.mat[i][j] = (ret.mat[i][j] + mat[i][k] * rhs.mat[k][j]) % MOD;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line">    Matrix <span class="keyword">operator</span>^ (LL n) &#123;</div><div class="line">        Matrix ret, x = *<span class="keyword">this</span>;</div><div class="line">        ret.init(row, col, <span class="number">1</span>);</div><div class="line">        <span class="keyword">while</span>(n) &#123;</div><div class="line">            <span class="keyword">if</span>(n &amp; <span class="number">1</span>) ret = ret * x;</div><div class="line">            x = x * x;</div><div class="line">            n &gt;&gt;= <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line">&#125; A, ans;</div><div class="line"></div><div class="line"><span class="built_in">string</span> a[<span class="number">55</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= a[x].size(); ++i) &#123;</div><div class="line">        <span class="built_in">string</span> suffix = a[x].substr(a[x].size() - i);</div><div class="line">        <span class="built_in">string</span> prefix = a[y].substr(<span class="number">0</span>, i);</div><div class="line">        <span class="keyword">if</span>(suffix == prefix) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">while</span>(t--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">        <span class="built_in">set</span>&lt;<span class="built_in">string</span>&gt; s;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</div><div class="line">            <span class="keyword">char</span> buf[<span class="number">20</span>]; <span class="built_in">scanf</span>(<span class="string">"%s"</span>, buf);</div><div class="line">            s.insert(buf);</div><div class="line">        &#125;</div><div class="line">        n = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;str : s) a[n++] = str;</div><div class="line"></div><div class="line">        A.init(n, n);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j)</div><div class="line">                A.mat[i][j] = check(i, j);</div><div class="line"></div><div class="line"><span class="comment">//      prln(check(0, 0));</span></div><div class="line"><span class="comment">//      for(int i = 0; i &lt; n; ++i)&#123;</span></div><div class="line"><span class="comment">//          for(int j = 0; j &lt; n; ++j)</span></div><div class="line"><span class="comment">//              printf("(%s, %s): %d\n", a[i].c_str(), a[j].c_str(), A.mat[i][j]);</span></div><div class="line"><span class="comment">//      &#125;</span></div><div class="line"></div><div class="line">        ans.init(<span class="number">1</span>, n);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) ans.mat[<span class="number">0</span>][i] = <span class="number">1</span>;</div><div class="line">        ans = ans * (A ^ m - <span class="number">1</span>);</div><div class="line"></div><div class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</div><div class="line">            <span class="keyword">if</span>((sum += ans.mat[<span class="number">0</span>][i]) &gt;= MOD) sum -= MOD;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, sum);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 动态规划 </category>
            
            <category> 矩阵优化 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 矩阵快速幂 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDU 5323 Solve this interesting problem（dfs）]]></title>
      <url>/2016/03/28/HDU%205323%20Solve%20this%20interesting%20problem%EF%BC%88dfs%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$给定总区间为[0, N]的线段树的一个区间[L, R]，0\le L，R\le10^9，\frac{L}{R-L+1} \leq 2015$<br>$求最小的包含这个[L, R]的线段树的N$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$由于线段树每向上合并一次，区间大小就加倍，显然当L=0时的最小R就是答案$<br>$设合并次数为x，即\frac{L}{2^x(R-L+1)}=0\le 1，2^x \ge \frac{L}{R-L+1}$<br>$由\frac{L}{R-L+1} \leq 2015近似知：2^x \le 2015\Rightarrow x\le 11$<br>$由于要枚举在左子树、右子树的左儿子和右儿子，枚举量是O(4^{11})$<br>$加上最优性剪枝，显然这个复杂度是可以通过的$<br>$看图可以发现答案在R’\le 2R内$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-03-22</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> L, R;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span>&amp; ans)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(l &lt; <span class="number">0</span> || r &gt;= ans || r &gt; <span class="number">2</span> * R) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">if</span>(!l) &#123;</div><div class="line">        ans = min(ans, r);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    dfs(<span class="number">2</span> * l - r - <span class="number">1</span>, r, ans);</div><div class="line">    dfs(<span class="number">2</span> * l - r - <span class="number">2</span>, r, ans);</div><div class="line">    dfs(l, -l + <span class="number">2</span> * r, ans);</div><div class="line">    dfs(l, -l + <span class="number">2</span> * r + <span class="number">1</span>, ans);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;L, &amp;R) == <span class="number">2</span>) &#123;</div><div class="line">        <span class="keyword">int</span> ans = INF;</div><div class="line">        dfs(L, R, ans);</div><div class="line">        <span class="keyword">if</span>(ans == INF) ans = <span class="number">-1</span>;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 暴力 </category>
            
            <category> 搜索 </category>
            
            <category> dfs/bfs </category>
            
        </categories>
        
        
        <tags>
            
            <tag> dfs </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDU 4651 Partition（五边形数）]]></title>
      <url>/2016/03/28/HDU%204651%20Partition%EF%BC%88%E4%BA%94%E8%BE%B9%E5%BD%A2%E6%95%B0%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$N\le 10^5，求整数N的划分数是多少，答案对10^9+7取模$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$这个东西就是五边形数，当然n^{1.5}的dp也可以，太神了不懂$<br>$所以直接公式搞就好辣，时间复杂度也是O(n^{1.5})$<br>$f(0)=1，f(n)=\displaystyle\sum_{k=1}(-1)^{k+1}\cdot \left( f(n-{k(3k-1)\over 2}) + f(n-{k(3k+1)\over 2})\right)$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-03-11</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:1024000000,1024000000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="comment">//五边形数: f(n) = sum( (-1)^(k+1) [ P(n-k(3k-1)/2) + P(n-k(3k+1)/2)] )</span></div><div class="line"></div><div class="line"><span class="keyword">int</span> n, f[N];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span>&amp; x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">    x += y;</div><div class="line">    x %= MOD;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    f[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">1e5</span>; ++i) &#123;</div><div class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>, delta = <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; ; ++j, delta = -delta) &#123;</div><div class="line">            <span class="keyword">int</span> x = i - j * (<span class="number">3</span> * j - <span class="number">1</span>) / <span class="number">2</span>;</div><div class="line">            <span class="keyword">int</span> y = i - j * (<span class="number">3</span> * j + <span class="number">1</span>) / <span class="number">2</span>;</div><div class="line">            <span class="keyword">if</span>(x &lt; <span class="number">0</span> &amp;&amp; y &lt; <span class="number">0</span>) <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">if</span>(x &gt;= <span class="number">0</span>) add(sum, delta * f[x]);</div><div class="line">            <span class="keyword">if</span>(y &gt;= <span class="number">0</span>) add(sum, delta * f[y]);</div><div class="line">        &#125;</div><div class="line">        f[i] = (sum % MOD + MOD) % MOD;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">while</span>(t--) &#123;</div><div class="line">        <span class="keyword">int</span> n; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, f[n]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 数学 </category>
            
            <category> 组合数学 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 五边形数 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDU 4650 Minimum Average Weight Path（floyd）]]></title>
      <url>/2016/03/28/HDU%204650%20Minimum%20Average%20Weight%20Path%EF%BC%88floyd%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$N\le 100，M\le 10^4，N个点，M条边的图，无重边，可能有自环$<br>$所有节点对(u, v)的min\{\frac{dis(u, v)}{len(u, v)}\}，不连通输出NO$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$floyd求一发连通性，判断NO$<br>$然后f[k][i][j]:=i到j长度为k的最短路$<br>$floyd的循环顺序是可以换的嘛，把i拿到最外面去枚举，这样可以复用数组$<br>$就变成f[k][j]:=i出发，长度为k到j的最短路$<br>$然后更新答案，注意由于有环，那么判断可不可以经过环$<br>$经过的话，环的答案如果比较小，显然可以无限绕环来逼近环长（极限思想嘛）$<br>$时间复杂度O(n^4)$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-03-12</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:1024000000,1024000000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e2</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">int</span> f[N][N], g[N][N], con[N][N];</div><div class="line"><span class="keyword">double</span> ans[N][N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m) == <span class="number">2</span>) &#123;</div><div class="line">        <span class="built_in">memset</span>(g, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> g);</div><div class="line">        <span class="built_in">memset</span>(con, <span class="number">0</span>, <span class="keyword">sizeof</span> con);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</div><div class="line">                ans[i][j] = <span class="number">1e18</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</div><div class="line">            <span class="keyword">int</span> x, y, c; <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;x, &amp;y, &amp;c);</div><div class="line">            g[x][y] = c;</div><div class="line">            con[x][y] = <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; ++k)</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</div><div class="line">                    con[i][j] |= con[i][k] &amp; con[k][j];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">            <span class="built_in">memset</span>(f, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> f);</div><div class="line">            f[<span class="number">0</span>][i] = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> l = <span class="number">1</span>; l &lt;= n; ++l)</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; ++k)</div><div class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</div><div class="line">                        f[l][j] = min(f[l][j], f[l - <span class="number">1</span>][k] + g[k][j]);</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> l = <span class="number">1</span>; l &lt;= n; ++l)</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</div><div class="line">                    ans[i][j] = min(ans[i][j], f[l][j] * <span class="number">1.</span> / l);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</div><div class="line">                <span class="keyword">if</span>(!con[i][j]) <span class="built_in">printf</span>(<span class="string">"NO%c"</span>, <span class="string">" \n"</span>[j == n]);</div><div class="line">                <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; ++k)</div><div class="line">                        <span class="keyword">if</span>(con[i][k] &amp; con[k][j])</div><div class="line">                            ans[i][j] = min(ans[i][j], ans[k][k]);</div><div class="line">                    <span class="built_in">printf</span>(<span class="string">"%.3f%c"</span>, ans[i][j], <span class="string">" \n"</span>[j == n]);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 图论 </category>
            
            <category> 最短路 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> floyd </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDU 4649 Professor Tian（概率dp）]]></title>
      <url>/2016/03/28/HDU%204649%20Professor%20Tian%EF%BC%88%E6%A6%82%E7%8E%87dp%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$N\le 200个运算符的式子，给定每个运算符和数字A_i\le 2^{20}$<br>$但是它俩有可能一起消失，消失的概率是p_i$<br>$问算式的期望是多少$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$期望dp很多时候都可以转化成概率dp做的$<br>$暴力作法f[i][2^{20}]:=前i个数，答案是j的期望，可以水过去$<br>$其实按位就可以了，f[i][21][2]:=前i个数，答案j位是k的期望$<br>$然后算出来，答案统计一下就好了$<br>$时间复杂度O(n*20)$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-03-11</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:1024000000,1024000000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, a[<span class="number">205</span>];</div><div class="line"><span class="keyword">char</span> s[<span class="number">205</span>];</div><div class="line"><span class="keyword">double</span> p[<span class="number">205</span>], f[<span class="number">205</span>][<span class="number">21</span>][<span class="number">2</span>]; <span class="comment">//前i个数运算的值, j位为0/1的概率</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) == <span class="number">1</span>) &#123;</div><div class="line">        ++n;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a + i);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">" %c"</span>, s + i);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">"%lf"</span>, p + i);</div><div class="line"></div><div class="line">        <span class="built_in">memset</span>(f, <span class="number">0</span>, <span class="keyword">sizeof</span> f);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">21</span>; ++i) f[<span class="number">1</span>][i][a[<span class="number">1</span>] &gt;&gt; i &amp; <span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">21</span>; ++j) &#123;</div><div class="line">                <span class="keyword">int</span> b = a[i] &gt;&gt; j &amp; <span class="number">1</span>;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">2</span>; ++k) &#123;</div><div class="line">                    f[i][j][k] += f[i - <span class="number">1</span>][j][k] * p[i];</div><div class="line">                    <span class="keyword">if</span>(s[i] == <span class="string">'^'</span>) f[i][j][k ^ b] += f[i - <span class="number">1</span>][j][k] * (<span class="number">1</span> - p[i]);</div><div class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(s[i] == <span class="string">'&amp;'</span>) f[i][j][k &amp; b] += f[i - <span class="number">1</span>][j][k] * (<span class="number">1</span> - p[i]);</div><div class="line">                    <span class="keyword">else</span> f[i][j][k | b] += f[i - <span class="number">1</span>][j][k] * (<span class="number">1</span> - p[i]);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">double</span> ans = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">21</span>; ++i) ans += f[n][i][<span class="number">1</span>] * (<span class="number">1</span> &lt;&lt; i);</div><div class="line">        <span class="keyword">static</span> <span class="keyword">int</span> kase = <span class="number">0</span>;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Case %d:\n%.6f\n"</span>, ++kase, ans);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 动态规划 </category>
            
            <category> 概率/期望dp </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 概率dp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDU 4643 GSM（中垂线）]]></title>
      <url>/2016/03/28/HDU%204643%20GSM%EF%BC%88%E4%B8%AD%E5%9E%82%E7%BA%BF%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$N，M\le 50，N个城市，M个基站，每个城市从最近的基站接收信号，K个询问$<br>$u v：u\to v的直线路径中切换了几次基站$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$线段中垂线上的点到线段树两端点的距离相等$<br>$所以可以求出所有的基站对的中垂线，然后求出与u\to v的交点$<br>$看交点在不在线段上且是不是最近的基站，合法交点个数就是答案$<br>$时间复杂度O(kn^2)，貌似这题k不大，大力出奇迹$</p>
</blockquote>
<hr>
<blockquote>
<p><img src="http://7xru22.com1.z0.glb.clouddn.com/16-3-28/49468601.jpg" alt=""><br>$黑点是基站的管辖范围，这样形成一个V图$<br>$标程给了一个利用V图思想，二分u\to v中点找边界的做法，看2边各有几个$<br>$每次看它们在不在一个颜色的区域，在就是0，不在就二分$<br>$显然边界个数就是答案$</p>
</blockquote>
<p>暴力代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-03-12</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:1024000000,1024000000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> EPS = <span class="number">1e-7</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">sgn</span><span class="params">(<span class="keyword">double</span> x)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> x &lt; -EPS ? <span class="number">-1</span> : x &gt; EPS;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> &#123;</span></div><div class="line">    <span class="keyword">double</span> x, y;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">()</span> </span>&#123;<span class="built_in">scanf</span>(<span class="string">"%lf%lf"</span>, &amp;x, &amp;y);&#125;</div><div class="line">    Point <span class="keyword">operator</span>+(<span class="keyword">const</span> Point&amp; p) &#123;</div><div class="line">        <span class="keyword">return</span> &#123;x + p.x, y + p.y&#125;;</div><div class="line">    &#125;</div><div class="line">    Point <span class="keyword">operator</span>-(<span class="keyword">const</span> Point&amp; p) &#123;</div><div class="line">        <span class="keyword">return</span> &#123;x - p.x, y - p.y&#125;;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">double</span> <span class="keyword">operator</span>*(<span class="keyword">const</span> Point&amp; p) &#123;</div><div class="line">        <span class="keyword">return</span> x * p.x + y * p.y;</div><div class="line">    &#125;</div><div class="line">    Point <span class="keyword">operator</span>*(<span class="keyword">const</span> <span class="keyword">double</span>&amp; t) &#123;</div><div class="line">        <span class="keyword">return</span> &#123;x * t, y * t&#125;;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">double</span> <span class="keyword">operator</span>^(<span class="keyword">const</span> Point&amp; p) &#123;</div><div class="line">        <span class="keyword">return</span> x * p.y - y * p.x;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">double</span> <span class="title">length</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> hypot(x, y);</div><div class="line">    &#125;</div><div class="line">&#125; a[<span class="number">55</span>], b[<span class="number">55</span>];</div><div class="line"><span class="keyword">typedef</span> Point Vector;</div><div class="line"></div><div class="line"><span class="function">Point <span class="title">getLineIntersection</span><span class="params">(Point p, Vector v, Point q, Vector w)</span> </span>&#123;</div><div class="line">    Vector u = p - q;</div><div class="line">    <span class="keyword">double</span> t = (w ^ u) / (v ^ w);</div><div class="line">    <span class="keyword">return</span> p + v * t;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">onSeg</span><span class="params">(Point p, Point a, Point b)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> !sgn((a - p) ^ (b - p)) &amp;&amp; sgn((a - p) * (b - p)) &lt; <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Line</span> &#123;</span></div><div class="line">    Point p; Vector v;</div><div class="line">&#125; l[<span class="number">55</span>][<span class="number">55</span>];</div><div class="line"></div><div class="line"><span class="function">Line <span class="title">getMidLine</span><span class="params">(Point a, Point b)</span> </span>&#123;</div><div class="line">    Point m = (a + b) * <span class="number">0.5</span>;</div><div class="line">    Vector u = b - a;</div><div class="line">    <span class="keyword">return</span> &#123;m, &#123; -u.y, u.x&#125;&#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(Point o, <span class="keyword">double</span> d)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</div><div class="line">        <span class="keyword">if</span>(sgn(d - (o - b[i]).length()) &gt; <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m) == <span class="number">2</span>) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) a[i].read();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</div><div class="line">            b[i].read();</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i; ++j) l[i][j] = getMidLine(b[i], b[j]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> q; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;q);</div><div class="line">        <span class="keyword">while</span>(q--) &#123;</div><div class="line">            <span class="keyword">int</span> u, v; <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</div><div class="line">            <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i; ++j) &#123;</div><div class="line">                    <span class="keyword">if</span>(!sgn(l[i][j].v ^ (a[v] - a[u]))) <span class="keyword">continue</span>;</div><div class="line">                    Point o = getLineIntersection(l[i][j].p, l[i][j].v, a[u], a[v] - a[u]);</div><div class="line">                    <span class="keyword">if</span>(onSeg(o, a[u], a[v])) ans += check(o, (o - b[i]).length());</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 计算几何 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 计算几何 </tag>
            
            <tag> Voronoi图 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[UVA 11402 Ahoy, Pirates!（线段树标记合并）]]></title>
      <url>/2016/03/28/UVA%2011402%20Ahoy,%20Pirates!%EF%BC%88%E7%BA%BF%E6%AE%B5%E6%A0%91%E6%A0%87%E8%AE%B0%E5%90%88%E5%B9%B6%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$读入比较麻烦，N\le 1.1\times 10^6的01串，四种操作$<br>$F a b：[a, b]变为1$<br>$E a b：[a, b]变为0$<br>$I a b：[a, b]01翻转，即0变1，1变0$<br>$S a b：[a, b]中1有多少个$<br>$输出S操作的结果，输出也很恶心$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$pushDown的时候可能儿子也有标记，这时候合并一下就好了$<br>$get这种写标记合并函数的新姿势，其它都是裸的区间更新，区间查询$<br>$别忘记更新的时候，合并标记哦$<br>$时间复杂度O(nlogn)$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-03-26</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1.1e6</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="built_in">string</span> str;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> l, r;</div><div class="line">    <span class="keyword">int</span> sum;</div><div class="line">    Node() &#123;&#125;</div><div class="line">    Node(<span class="keyword">int</span> l, <span class="keyword">int</span> r): l(l), r(r) &#123;&#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">len</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> r - l + <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(v == <span class="number">-1</span>) <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">if</span>(v == <span class="number">2</span>) sum = len() - sum;</div><div class="line">        <span class="keyword">else</span> sum = len() * v;</div><div class="line">    &#125;</div><div class="line">&#125; dat[N &lt;&lt; <span class="number">2</span>];</div><div class="line"></div><div class="line"><span class="keyword">int</span> tag[N &lt;&lt; <span class="number">2</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushUp</span><span class="params">(<span class="keyword">int</span> rt)</span> </span>&#123;</div><div class="line">    dat[rt].sum = dat[rt &lt;&lt; <span class="number">1</span>].sum + dat[rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].sum;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">combineTag</span><span class="params">(<span class="keyword">int</span> fa, <span class="keyword">int</span>&amp; son)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(fa == <span class="number">2</span>) &#123;</div><div class="line">        <span class="keyword">if</span>(son == <span class="number">-1</span>) son = <span class="number">2</span>;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(son == <span class="number">2</span>) son = <span class="number">-1</span>;</div><div class="line">        <span class="keyword">else</span> son ^= <span class="number">1</span>; <span class="comment">// switch 0, 1</span></div><div class="line">    &#125; <span class="keyword">else</span> son = fa; <span class="comment">//set 0, 1</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushDown</span><span class="params">(<span class="keyword">int</span> rt)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(tag[rt] == <span class="number">-1</span>) <span class="keyword">return</span>;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> ls = rt &lt;&lt; <span class="number">1</span>, rs = ls | <span class="number">1</span>;</div><div class="line">    dat[ls].<span class="built_in">set</span>(tag[rt]);</div><div class="line">    dat[rs].<span class="built_in">set</span>(tag[rt]);</div><div class="line">    combineTag(tag[rt], tag[ls]);</div><div class="line">    combineTag(tag[rt], tag[rs]);</div><div class="line"></div><div class="line">    tag[rt] = <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> rt)</span> </span>&#123;</div><div class="line">    dat[rt] = Node(l, r);</div><div class="line">    tag[rt] = <span class="number">-1</span>;</div><div class="line">    <span class="keyword">if</span>(l == r) &#123;</div><div class="line">        dat[rt].sum = str[l] - <span class="string">'0'</span>;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> m = l + r &gt;&gt; <span class="number">1</span>;</div><div class="line">    build(l, m, rt &lt;&lt; <span class="number">1</span>);</div><div class="line">    build(m + <span class="number">1</span>, r, rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">    pushUp(rt);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> v, <span class="keyword">int</span> rt)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(L &lt;= dat[rt].l &amp;&amp; dat[rt].r &lt;= R) &#123;</div><div class="line">        dat[rt].<span class="built_in">set</span>(v);</div><div class="line">        combineTag(v, tag[rt]);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    pushDown(rt);</div><div class="line">    <span class="keyword">int</span> m = dat[rt].l + dat[rt].r &gt;&gt; <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span>(L &lt;= m) update(L, R, v, rt &lt;&lt; <span class="number">1</span>);</div><div class="line">    <span class="keyword">if</span>(R &gt; m) update(L, R, v, rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">    pushUp(rt);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> rt)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(L &lt;= dat[rt].l &amp;&amp; dat[rt].r &lt;= R) <span class="keyword">return</span> dat[rt].sum;</div><div class="line">    pushDown(rt);</div><div class="line">    <span class="keyword">int</span> m = dat[rt].l + dat[rt].r &gt;&gt; <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span>(L &lt;= m) ret += query(L, R, rt &lt;&lt; <span class="number">1</span>);</div><div class="line">    <span class="keyword">if</span>(R &gt; m) ret += query(L, R, rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">while</span>(t--) &#123;</div><div class="line">        str.clear();</div><div class="line">        <span class="keyword">int</span> m; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</div><div class="line">        <span class="keyword">while</span>(m--) &#123;</div><div class="line">            <span class="keyword">int</span> cnt;</div><div class="line">            <span class="keyword">char</span> buf[<span class="number">105</span>]; <span class="built_in">scanf</span>(<span class="string">"%d%s"</span>, &amp;cnt, buf);</div><div class="line">            <span class="keyword">while</span>(cnt--) str += buf;</div><div class="line">        &#125;</div><div class="line">        build(<span class="number">0</span>, str.size() - <span class="number">1</span>, <span class="number">1</span>);</div><div class="line"></div><div class="line">        <span class="keyword">int</span> q; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;q);</div><div class="line">        <span class="keyword">int</span> qs = <span class="number">0</span>;</div><div class="line">        <span class="keyword">static</span> <span class="keyword">int</span> kase = <span class="number">0</span>;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Case %d:\n"</span>, ++kase);</div><div class="line">        <span class="keyword">while</span>(q--) &#123;</div><div class="line">            <span class="keyword">char</span> op[<span class="number">2</span>]; <span class="keyword">int</span> a, b; <span class="built_in">scanf</span>(<span class="string">"%s%d%d"</span>, op, &amp;a, &amp;b);</div><div class="line">            <span class="keyword">if</span>(*op == <span class="string">'F'</span>) update(a, b, <span class="number">1</span>, <span class="number">1</span>);</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(*op == <span class="string">'E'</span>) update(a, b, <span class="number">0</span>, <span class="number">1</span>);</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(*op == <span class="string">'I'</span>) update(a, b, <span class="number">2</span>, <span class="number">1</span>);</div><div class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"Q%d: %d\n"</span>, ++qs, query(a, b, <span class="number">1</span>));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 数据结构 </category>
            
            <category> 线段树 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 线段树 </tag>
            
            <tag> 标记合并 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[UVA 10771 Barbarian tribes（思维 | 线段树模拟约瑟夫环）]]></title>
      <url>/2016/03/28/UVA%2010771%20Barbarian%20tribes%EF%BC%88%E6%80%9D%E7%BB%B4%20%20%E7%BA%BF%E6%AE%B5%E6%A0%91%E6%A8%A1%E6%8B%9F%E7%BA%A6%E7%91%9F%E5%A4%AB%E7%8E%AF%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$1\le N + M\le 2000，1\le K\le 1000，N+M个人围成环，前N为G，后M为K$<br>$现在每轮：$<br>$每K个各杀1个，杀2个，添加一个到第2个死的位置上，相同加G，不同加K$<br>$也就是说每轮死1个，N+M-1轮后只剩1个，问是G还是K$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$线段树求K-th number的姿势直接暴力模拟$<br>$需要注意的是，1个死了，当前名次要-1，1个没死不动就好$<br>$时间复杂度为O((N+M)log(N+M))，跑了1.6s$<br>$也就是说这题起码有1W组case。。。$<br>$你特么不说一声，让我浪费时间写链表模拟。。O((N+M)K)直接T成sb了$</p>
</blockquote>
<hr>
<blockquote>
<p>$其实有O(1)解法，设G为0，K为1，GG和KK变G，GK和KG变K$<br>$这其实就是异或，然后异或满足交换律，显然有奇数个1答案才是K$<br>$所以一行代码：$<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">puts</span>(M &amp; <span class="number">1</span> ? <span class="string">"Keka"</span> : <span class="string">"Gared"</span>);</div></pre></td></tr></table></figure></p>
</blockquote>
<p>线段树模拟代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-03-26</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m, k;</div><div class="line"></div><div class="line"><span class="keyword">int</span> val[N &lt;&lt; <span class="number">2</span>], sum[N &lt;&lt; <span class="number">2</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> rt)</span> </span>&#123;</div><div class="line">    sum[rt] = r - l + <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span>(l == r) &#123;</div><div class="line">        val[rt] = l &lt;= n ? <span class="number">1</span> : <span class="number">2</span>;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> m = l + r &gt;&gt; <span class="number">1</span>;</div><div class="line">    build(l, m, rt &lt;&lt; <span class="number">1</span>);</div><div class="line">    build(m + <span class="number">1</span>, r, rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; query(<span class="keyword">int</span> k, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> rt) &#123;</div><div class="line">    --sum[rt];</div><div class="line">    <span class="keyword">if</span>(l == r) <span class="keyword">return</span> make_pair(l, val[rt]);</div><div class="line">    <span class="keyword">int</span> m = l + r &gt;&gt; <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span>(sum[rt &lt;&lt; <span class="number">1</span>] &gt;= k) <span class="keyword">return</span> query(k, l, m, rt &lt;&lt; <span class="number">1</span>);</div><div class="line">    <span class="keyword">return</span> query(k - sum[rt &lt;&lt; <span class="number">1</span>], m + <span class="number">1</span>, r, rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> v, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> rt)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(l == r) &#123;</div><div class="line">        val[rt] = v;</div><div class="line">        sum[rt] = <span class="number">1</span>;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> m = l + r &gt;&gt; <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span>(o &lt;= m) update(o, v, l, m, rt &lt;&lt; <span class="number">1</span>);</div><div class="line">    <span class="keyword">else</span> update(o, v, m + <span class="number">1</span>, r, rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">    sum[rt] = sum[rt &lt;&lt; <span class="number">1</span>] + sum[rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;m, &amp;k) == <span class="number">3</span> &amp;&amp; (n || m || k)) &#123;</div><div class="line">        build(<span class="number">1</span>, n + m, <span class="number">1</span>);</div><div class="line">        n += m;</div><div class="line">        <span class="keyword">int</span> rk = k;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n - <span class="number">1</span>; ++i) &#123;</div><div class="line">            <span class="keyword">int</span> lft = n - i;</div><div class="line">            <span class="keyword">int</span> last = query(rk, <span class="number">1</span>, n, <span class="number">1</span>).second;</div><div class="line">            rk = (rk - <span class="number">1</span> + k) % lft;</div><div class="line">            <span class="keyword">if</span>(rk == <span class="number">0</span>) rk = lft;</div><div class="line"></div><div class="line">            pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; now = query(rk, <span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">            <span class="keyword">int</span> v = last == now.second ? <span class="number">1</span> : <span class="number">2</span>;</div><div class="line">            update(now.first, v, <span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">            rk = (rk + k) % lft;</div><div class="line">            <span class="keyword">if</span>(rk == <span class="number">0</span>) rk = lft;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> ans = query(<span class="number">1</span>, <span class="number">1</span>, n, <span class="number">1</span>).second;</div><div class="line">        <span class="built_in">puts</span>(ans == <span class="number">1</span> ? <span class="string">"Gared"</span> : <span class="string">"Keka"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 数据结构 </category>
            
            <category> 线段树 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 线段树 </tag>
            
            <tag> 约瑟夫环 </tag>
            
            <tag> 思维 </tag>
            
            <tag> 异或 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CDOJ 1051 Eggs broken（期望dp）]]></title>
      <url>/2016/03/28/CDOJ%201051%20Eggs%20broken%EF%BC%88%E6%9C%9F%E6%9C%9Bdp%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$1\le N\le 1000层楼，1\le K\le 15个鸡蛋，选择楼投鸡蛋，已知N层楼必碎$<br>$假设鸡蛋在[1, N]碎均匀分布，问知道在哪层碎的最小期望投掷次数$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$期望dp，f[n][k]:=n层楼，i个鸡蛋的最小期望次数$<br>$显然边界是f[1][k]=0，1个的时候只能试蛋，f[n][1]=((1+n-1)(n-1)/2+(n-1))/n$<br>$我们知道鸡蛋的多的时候，肯定二分嘛，少的时候先二分最后一个试蛋嘛（从下往上挨个来）$<br>$这样太难写了，反正求最小期望次数，直接暴力枚举在哪一层投，取最小的$<br>$如果当前投i碎了，那么就变成了子问题1\sim i，k-1个蛋投，即f[i][k-1]$<br>$没碎，继续在上面投，看成子问题，1\sim n-i，k个蛋，即f[n-i][k]$<br>$再乘上各自的概率，i/n和(n-i)/n$<br>$这样复杂度是可以接受的，为O(n^2k)$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-03-28</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e3</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">double</span> f[N][<span class="number">20</span>];</div><div class="line"><span class="keyword">bool</span> vis[N][<span class="number">20</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">double</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">    <span class="keyword">double</span>&amp; ret = f[n][k];</div><div class="line">    <span class="keyword">if</span>(vis[n][k]) <span class="keyword">return</span> ret;</div><div class="line">    vis[n][k] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span>(n == <span class="number">1</span>) <span class="keyword">return</span> ret = <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span>(k == <span class="number">1</span>) <span class="keyword">return</span> ret = (<span class="number">1.</span> * n * (n - <span class="number">1</span>) / <span class="number">2</span> + n - <span class="number">1</span>) / n;</div><div class="line">    ret = INF;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i)</div><div class="line">        ret = min(ret, dfs(i, k - <span class="number">1</span>) * i / n + dfs(n - i, k) * (n - i) / n + <span class="number">1</span>);</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> n, k; <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;k);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%.5f\n"</span>, dfs(n, k));</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 动态规划 </category>
            
            <category> 概率/期望dp </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 期望dp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDU 4642 Fliping game（博弈）]]></title>
      <url>/2016/03/26/HDU%204642%20Fliping%20game%EF%BC%88%E5%8D%9A%E5%BC%88%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$N, M\le 100，N\times M的棋盘，每个值为0或者1$<br>$A和B玩游戏，每次选择一个矩形区域把里面的01翻转，但要求选择的左上角必须为1$<br>$谁不能操作了谁输，假设2个人采取最优策略，输出胜者$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$可以看出，每次翻转都会翻动最右下角的格子$<br>$如果右下角刚开始为1，那么先手的人每次都翻动右下角的，使该格子变为0$<br>$后手的翻其他矩形，肯定会使得最右下角的格子变为1$<br>$这样先手每次都翻右下角这个格子，最后肯定是后手败$<br>$如果右下角刚开始为0，同理后手可以通过这个策略来使自己必胜$<br>$所以A_{nm}为1先手胜，否则后手胜$<br>$时间复杂度为O(nm)$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-03-25</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">int</span> a[<span class="number">105</span>][<span class="number">105</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">while</span>(t--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j)</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a[i] + j);</div><div class="line">        <span class="built_in">puts</span>(a[n][m] ? <span class="string">"Alice"</span> : <span class="string">"Bob"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 数学 </category>
            
            <category> 博弈 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 博弈 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDU 4638 Group（离线思想、BIT）]]></title>
      <url>/2016/03/26/HDU%204638%20Group%EF%BC%88%E7%A6%BB%E7%BA%BF%E6%80%9D%E6%83%B3%E3%80%81BIT%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$N, Q\le 10^5，1\sim N的序列，Q次询问$<br>$现有分组要求：组内的人id必须连续，假设人数为k，则价值为k^2$<br>$询问区间[L,R]，问区间能获得的最大价值的组数是多少个$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$由于价值是平方，显然让每组人数达到最多，从大到小来贪心$<br>$问题就转化成了，区间最少能分几组$<br>$思考一下对于x这个数，显然只能向x-1，x+1连边，我们发现组数=区间大小-边数$<br>$经典离线套路题了，询问右端点排序$<br>$从左往右扫描每个数A_i（相当于固定了右端点）$<br>$把A_i-1和A_i+1的位置添加到BIT中$<br>$发现所有以i为右端点的询问[L,i]只要查询[L,i]的和就好了$<br>$然后这个和就是我们想要的，ans(L,R)=R-L+1-sum(L,i)$<br>$这里其实把BIT倒过来就可以完成了，向前更新，向后查询$<br>$时间复杂度为O(nlogn)$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-03-25</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BIT</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> n, b[N];</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> _n)</span> </span>&#123;</div><div class="line">        n = _n;</div><div class="line">        <span class="built_in">memset</span>(b, <span class="number">0</span>, <span class="keyword">sizeof</span> b);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> v)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span>(; i; i -= i &amp; -i) b[i] += v;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(; i &lt;= n; i += i &amp; -i) ret += b[i];</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line">&#125; bit;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, q;</div><div class="line"><span class="keyword">int</span> a[N], wh[N], ans[N];</div><div class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; qs[N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">while</span>(t--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;q);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a + i);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) qs[i].clear();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; ++i) &#123;</div><div class="line">            <span class="keyword">int</span> l, r; <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;l, &amp;r);</div><div class="line">            qs[r].push_back(&#123;l, i&#125;);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        bit.init(n);</div><div class="line">        <span class="built_in">memset</span>(wh, <span class="number">0</span>, <span class="keyword">sizeof</span> wh);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">            <span class="keyword">int</span> x = a[i];</div><div class="line">            <span class="keyword">if</span>(wh[x - <span class="number">1</span>]) bit.add(wh[x - <span class="number">1</span>], <span class="number">1</span>);</div><div class="line">            <span class="keyword">if</span>(wh[x + <span class="number">1</span>]) bit.add(wh[x + <span class="number">1</span>], <span class="number">1</span>);</div><div class="line">            wh[x] = i;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; q : qs[i]) ans[q.second] = i - q.first + <span class="number">1</span> - bit.sum(q.first);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; ++i) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 思维 </category>
            
            <category> 离线思想 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> BIT </tag>
            
            <tag> 离线 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDU 4635 Strongly connected（scc缩点）]]></title>
      <url>/2016/03/26/HDU%204635%20Strongly%20connected%EF%BC%88scc%E7%BC%A9%E7%82%B9%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$N, M\le 10^5的简单有向图，无重边自环$<br>$问最多添加多少条边使得这个图不成为强联通图，如果已经是输出-1$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$参考出题人题解啦$<br>$图肯定可以分成两个部X和Y，只有X\to Y的边没有T\to X的边这样图就不强联通$<br>$那么要使得边数尽可能的多，则X部肯定是一个完全图，Y部也是$<br>$同时X部中每个点到Y部的每个点都有一条边$<br>$假设X部有x个点，Y部有y个点，有x+y=N，同时边数E=xy+x(x-1)+y(y-1)$<br>$整理得E=N^2-N-xy，当x+y为定值时，二者越接近，xy越大$<br>$要使得边数最多，那么X部和Y部的点数的个数差距就要越大$<br>$所以首先对于给定的有向图scc缩点$<br>$对于缩点后的每个点，如果它的出度或者入度为0，那么它才有可能成为X部或者Y部$<br>$所以只要求缩点之后的出度或者入度为0的点中，包含节点数最少的那个点$<br>$令它为一个部，其它所有点加起来做另一个部，就可以得到最多边数的图了$<br>$ans = E-M$<br>$时间复杂度为O(N+M)$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-03-25</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[N];</div><div class="line"><span class="keyword">int</span> dfn[N], low[N], in[N], id[N], scc, dfsNum;</div><div class="line"><span class="keyword">int</span> stk[N], top;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</div><div class="line">    dfn[u] = low[u] = ++dfsNum;</div><div class="line">    stk[++top] = u;</div><div class="line">    in[u] = <span class="literal">true</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v : G[u]) &#123;</div><div class="line">        <span class="keyword">if</span>(!dfn[v]) &#123;</div><div class="line">            tarjan(v);</div><div class="line">            low[u] = min(low[u], low[v]);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(in[v]) low[u] = min(low[u], dfn[v]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(low[u] == dfn[u]) &#123;</div><div class="line">        ++scc;</div><div class="line">        <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</div><div class="line">            <span class="keyword">int</span> v = stk[top--];</div><div class="line">            in[v] = <span class="literal">false</span>;</div><div class="line">            id[v] = scc;</div><div class="line">            <span class="keyword">if</span>(v == u) <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">while</span>(t--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) G[i].clear();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</div><div class="line">            <span class="keyword">int</span> u, v; <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</div><div class="line">            G[u].push_back(v);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        scc = dfsNum = <span class="number">0</span>;</div><div class="line">        <span class="built_in">memset</span>(dfn, <span class="number">0</span>, <span class="keyword">sizeof</span> dfn);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="keyword">if</span>(!dfn[i]) tarjan(i);</div><div class="line"></div><div class="line">        <span class="keyword">static</span> <span class="keyword">int</span> kase = <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span>(scc == <span class="number">1</span>) &#123;<span class="built_in">printf</span>(<span class="string">"Case %d: -1\n"</span>, ++kase); <span class="keyword">continue</span>;&#125;</div><div class="line"></div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; in(N, <span class="number">0</span>), out(N, <span class="number">0</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">            <span class="keyword">int</span> u = id[i];</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j : G[i]) &#123;</div><div class="line">                <span class="keyword">int</span> v = id[j];</div><div class="line">                <span class="keyword">if</span>(u == v) <span class="keyword">continue</span>;</div><div class="line">                out[u] = in[v] = <span class="literal">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; cnt(N, <span class="number">0</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) ++cnt[id[i]];</div><div class="line"></div><div class="line">        <span class="keyword">int</span> x = INF;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= scc; ++i)</div><div class="line">            <span class="keyword">if</span>(!in[i] || !out[i]) x = min(x, cnt[i]);</div><div class="line">        <span class="keyword">int</span> y = n - x;</div><div class="line"></div><div class="line">        <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">1L</span>L * n * n - n - <span class="number">1L</span>L * x * y - m;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Case %d: %I64d\n"</span>, ++kase, ans);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 图论 </category>
            
            <category> 连通图 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> scc </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[网易游戏一面]]></title>
      <url>/2016/03/24/%E7%BD%91%E6%98%93%E6%B8%B8%E6%88%8F%E4%B8%80%E9%9D%A2/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote>
<p>打$offer$收割编程赛，结果拿到了据说比$M\$、GG$还难进的网易游戏的面试机会<br>非常尴尬啊，前几天上牛客看了一大波计网的东西，本想前一晚（昨晚）再看一遍<code>cpp primer</code>的<br>蓝儿搞博客站内搜索搞的太久直接爆炸，没看，<del>结局是今天炸锅</del></p>
</blockquote>
<a id="more"></a>
<h3 id="各种问题"><a href="#各种问题" class="headerlink" title="各种问题"></a>各种问题</h3><p>总的来说，把学的基础全部问了一遍，简历没写项目，就没问我这个</p>
<h4 id="C-语言部分"><a href="#C-语言部分" class="headerlink" title="C++语言部分"></a>C++语言部分</h4><ul>
<li><p><code>int</code>、<code>long</code>，<code>long long</code>位数，<code>int*</code>位数<br>反正根据编译器位数和操作系统位数答一答就好了</p>
</li>
<li><p>你用过<code>c++ stl</code>么？<br>讲道理，ACM选手天天用，顺序容器、关联容器总的开始，然后我就巴拉巴拉介绍一堆</p>
</li>
<li><p><code>c++ stl</code>里<code>map</code>与<code>unordered_map</code>的区别？<br>- - 也许面试官不知道ACM是干啥的，反正基本区别就是实现了，一个是<code>RBTree</code>，另一个是<code>hashtable</code><br>空间复杂度、时间复杂度的区别，<code>BST</code>有序啥的</p>
</li>
<li><p>快排是咋实现的？<br>我会的东西当然说一点了，均摊复杂度$O(nlogn)$，最坏$O(n^2)$<br>还多说了轴值选择对于复杂度的影响，以及<code>std::sort</code>内省式排序的实现</p>
</li>
<li><p>讲讲shared_ptr？<br>第一次<strong>炸锅</strong>在这里，我明明知道会问<code>auto ptr</code>的东西，还tm再晚都一点没看<code>cpp primer</code><br>然后只能凭借一年前看的印象和经验答了，讲了下有引用计数，自动析构，。(可能有内存池管理啥的)<br>然后就没啥说的了</p>
</li>
<li><p>虚函数是咋实现多态的？<br>基类定义，派生类重载啦，然后说了下细节，虚表啥的，(这里好虚都忘的差不多了</p>
</li>
<li><p>派生类如何调用基类的函数？<br>我忘记可以通过域访问符了，就答了强转，非常尴尬，说了下切片啥的，估计面试官可能忘了切片吧</p>
</li>
<li><p><code>dynamic_cast</code>和<code>static_cast</code>的区别<br>真的太久远了，实在是不记得了，就讲道理了一下</p>
</li>
<li><p>堆和栈的区别，不是标准库的那个<br>就讲了堆存全局变量，静态变量，会初始化<br>栈上局部变量，还有函数栈帧啥的，详细问了我栈我懵比<br>所知有限啊，其实堆知道的多点吧，可是问的我栈。</p>
</li>
<li><p>好像还有别的记不起来了</p>
</li>
</ul>
<h4 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h4><p> 事务和啥啥啥的区别忘记了，反正数据库全忘光，第二次<strong>炸锅</strong></p>
<h4 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h4><p>  进程线程区别，多线程编程<br>  前者就讲道理答了一波，后者同步互斥啥的</p>
<h4 id="计网"><a href="#计网" class="headerlink" title="计网"></a>计网</h4><ul>
<li><p><code>tcp</code>和<code>udp</code>的区别<br>这个大家都会吧</p>
</li>
<li><p>炫酷的问题：如果同时使用<code>tcp</code>和<code>udp</code>通过80端口发数据，会不会炸<br>第三次<strong>炸锅</strong>，我说不行，讲道理答了一波，事后问同学发现炸了</p>
</li>
</ul>
<h4 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h4><ul>
<li><p>设计模式都有啥？<br>我就记得工厂、单例、观察者了，</p>
</li>
<li><p>讲讲工厂模式<br>我实在不知道具体咋说，其实我还是熟悉单例模式 - -<br>然后就照着数据看过的一点点<code>cocos2d-x</code>的源码讲道理了一波</p>
</li>
</ul>
<h4 id="算法题"><a href="#算法题" class="headerlink" title="算法题"></a>算法题</h4><blockquote>
<p>$N$大小的数组，只有$1\sim N-1$的数，只有一个重复出现了，找出来</p>
</blockquote>
<ul>
<li>显然的计数排序嘛</li>
<li>然后爆炸，想太多了（<del>难题做多了？</del>），然后想到鸽笼原理和异或发现没法做</li>
<li>其实之前有人跟我说个异或解法的</li>
</ul>
<blockquote>
<p>其实数组和减去$1\sim N-1$的和就完了，应该果断说不知道让提示的</p>
</blockquote>
<p><strong>应该意识到想歪了就不可能想出来的，唉，这彻底炸锅了</strong></p>
<h4 id="我想问的"><a href="#我想问的" class="headerlink" title="我想问的"></a>我想问的</h4><ul>
<li>就随便问了下网易游戏的情况，以及游戏咋开发的，你们有没有自己的引擎这种废话，面试官很健谈啊</li>
<li>我今天答的怎么样，你答的挺好的，（<del>这是说你妥妥的跪了么</del>）</li>
</ul>
<h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>第一次面试攒经验吧，专业课还是很重要的，<br>- - 多看书吧，既然不能写项目就多看书吧，书才是知识的源泉啊</p>
]]></content>
      
        <categories>
            
            <category> Doing </category>
            
            <category> Interview </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDU 4631 Sad Love Story（离线思想、分治）]]></title>
      <url>/2016/03/23/HDU%204631%20Sad%20Love%20Story%EF%BC%88%E7%A6%BB%E7%BA%BF%E6%80%9D%E6%83%B3%E3%80%81%E5%88%86%E6%B2%BB%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$N\le 5\times 10^5，给定二维平面上N个点，定义距离为欧氏距离的平方$<br>$挨个加入每个点，对于i&gt;1的所有点，求[1,i]的最近点对距离，输出这些距离和$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$考虑离线，倒着做，求一次最近点对，假设得到的点为(p, q)，p &lt; q$<br>$那么显然[q,n]的答案都是dis(p,q)$<br>$去掉[q,n]这些点，做[1,q-1]的部分，成为子问题$<br>$由于是随机数据，每次问题规模下降1/3，所以总体复杂度大概是O(nlog^2n)$</p>
</blockquote>
<hr>
<blockquote>
<p>$其实还可以直接暴力，挨个添加点到set，设当前答案为d$<br>$对于每个点，设坐标为(x,y)，暴力查询横坐标在[x-d, x+d]范围的点$<br>$由于随机数据，答案下降的很快，所以跑的飞快$<br>$时间复杂度大概在O(nlogn)$</p>
</blockquote>
<p>第一种解法代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-03-18</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:1024000000,1024000000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; P;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line">P a[N]; <span class="keyword">int</span> id[N];</div><div class="line"></div><div class="line">pair&lt;LL, P&gt; dfs(<span class="keyword">int</span> l, <span class="keyword">int</span> r) &#123;</div><div class="line">    <span class="keyword">if</span>(l == r) <span class="keyword">return</span> &#123;~<span class="number">0u</span>ll &gt;&gt; <span class="number">2</span>, &#123; <span class="number">-1</span>, <span class="number">-1</span>&#125;&#125;;</div><div class="line">    <span class="keyword">int</span> m = l + r &gt;&gt; <span class="number">1</span>;</div><div class="line">    LL x = a[id[m]].first;</div><div class="line"></div><div class="line">    <span class="keyword">auto</span> ret = min(dfs(l, m), dfs(m + <span class="number">1</span>, r));</div><div class="line">    inplace_merge(id + l, id + m + <span class="number">1</span>, id + r + <span class="number">1</span>, [](<span class="keyword">int</span> x, <span class="keyword">int</span> y) &#123;</div><div class="line">        <span class="keyword">return</span> a[x].second &lt; a[y].second;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = l; i &lt;= r; ++i) &#123;</div><div class="line">        <span class="keyword">int</span> p = id[i];</div><div class="line">        <span class="keyword">if</span>((a[p].first - x) * (a[p].first - x) &gt;= ret.first) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; v.size(); ++j) &#123;</div><div class="line">            <span class="keyword">int</span> q = v[v.size() - <span class="number">1</span> - j];</div><div class="line">            LL dy = a[p].second - a[q].second;</div><div class="line">            <span class="keyword">if</span>(dy * dy &gt;= ret.first) <span class="keyword">break</span>;</div><div class="line">            LL dx = a[p].first - a[q].first;</div><div class="line">            LL d = dx * dx + dy * dy;</div><div class="line">            <span class="keyword">if</span>(d &lt; ret.first) ret = &#123;d, &#123;p, q&#125;&#125;;</div><div class="line">        &#125;</div><div class="line">        v.push_back(p);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">while</span>(t--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">        <span class="keyword">int</span> a1, b1, c1, a2, b2, c2;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;a1, &amp;b1, &amp;c1);</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;a2, &amp;b2, &amp;c2);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">            a[i].first = (<span class="number">1L</span>L * a1 * a[i - <span class="number">1</span>].first + b1) % c1;</div><div class="line">            a[i].second = (<span class="number">1L</span>L * a2 * a[i - <span class="number">1</span>].second + b2) % c2;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        LL ans = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> r = n; r &gt; <span class="number">1</span>;) &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= r; ++i) id[i] = i;</div><div class="line">            sort(id + <span class="number">1</span>, id + <span class="number">1</span> + r, [](<span class="keyword">int</span> x, <span class="keyword">int</span> y) &#123;</div><div class="line">                <span class="keyword">return</span> a[x] &lt; a[y];</div><div class="line">            &#125;);</div><div class="line">            <span class="keyword">auto</span> cp = dfs(<span class="number">1</span>, r);</div><div class="line">            <span class="keyword">int</span> nxt = max(cp.second.first, cp.second.second);</div><div class="line"></div><div class="line">            ans += cp.first * (r - nxt + <span class="number">1</span>);</div><div class="line">            r = nxt - <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 思维 </category>
            
            <category> 分治 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 分治 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[平面最近点对问题]]></title>
      <url>/2016/03/23/%E5%B9%B3%E9%9D%A2%E6%9C%80%E8%BF%91%E7%82%B9%E5%AF%B9%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h3 id="问题简述"><a href="#问题简述" class="headerlink" title="问题简述"></a>问题简述</h3><blockquote>
<p>$给定二维平面上N个点，定义距离为欧氏距离$<br>$对于N个点组成的所有点对(i, j)，i\ne j, i, j\in[1,N]$<br>$求最小的(i,j)点对距离$</p>
</blockquote>
<a id="more"></a>
<h3 id="暴力求解"><a href="#暴力求解" class="headerlink" title="暴力求解"></a>暴力求解</h3><ul>
<li>显然暴力求解的时间复杂度是$O(n^2)$的，是否可以优化呢？存在带$log$的算法么？<br>考虑一下分治法</li>
</ul>
<h3 id="分治法"><a href="#分治法" class="headerlink" title="分治法"></a>分治法</h3><blockquote>
<p>由主定理我们可以知道：$T(n)=2T(n/2)+O(n)\Rightarrow O(nlogn)$<br>  这就需要我们尽可能的将原问题划分成<code>2</code>个相等的子问题<br>  并且划分<code>2</code>个子问题，合并<code>2</code>个子问题，或者处理1个子问题对另1个子问题的影响不能超过$O(n)$</p>
</blockquote>
<ul>
<li><p>划分<br>如果将所有的点按照二维偏序（即横坐标$x$为第一关键字，纵坐标$y$为第二关键字）排序<br>那么通过中间的那个点就可以将所有点划分成均等的<code>2</code>部分了<br>这样我们以$O(nlogn)-O(1)$的时间复杂度做到了这一点</p>
</li>
<li><p>递归处理子问题<br><img src="http://7xru22.com1.z0.glb.clouddn.com/16-3-23/81385096.jpg" alt=""><br>假设均等的<code>2</code>部分的子问题的答案分别是$d_1,d_2$，显然当前答案就是$d=min(d_1,d_2)$<br>$(1)$类型的答案为$d$，但是我们发现$(2)$类型的答案很有可能$\le d$<br>即中间那个点，在它两边的点形成的点对很有可能也会是答案<br>也就说<code>1</code>个子问题对另<code>1</code>个子问题产生了影响，接下来思考如何计算这一部分的答案</p>
</li>
<li><p>子问题间的影响<br><img src="http://7xru22.com1.z0.glb.clouddn.com/16-3-23/34666651.jpg" alt=""></p>
<ul>
<li><p>可能产生影响的点<br>对于中间点<code>p</code>来说，显然左右横坐标距离<code>d</code>以内的才是要考虑的点<br>即若<code>p</code>点坐标为$(x,y)$，那么要考虑的点的横坐标$x-d&lt;x’&lt;x+d$，其它的点显然不能产生影响<br>找到了这些可能产生影响的点后，点最坏有$n$个，如果一一枚举还是$O(n^2)$<br>难道就逃脱不了$n^2$的命运了么？</p>
</li>
<li><p>能对一个点贡献答案的点<br>对于其中一个点$p_1$，能产生答案的点只考虑$y$比它大的那部分（这样一对点不会重复枚举）<br>即若$p_1$点坐标为$(x,y)$，那么要考虑的点的横坐标$x-d&lt;x’&lt;x+d$，纵坐标$y \le y’ \le y +d$<br>也就是说对$p_1$贡献答案的点应该就是如图那样的矩形部分</p>
</li>
<li><p>矩形内至多有6个点<br>我说矩形里至多有<code>6</code>个点你信不信！我们来证明一下：<br><img src="http://7xru22.com1.z0.glb.clouddn.com/16-3-23/72387356.jpg" alt="">、<br>将矩形$R$的长为$2d$的边三等分，宽为$d$的边二等分<br>这样我们得到了<code>6</code>个$\frac{2d}{3}\times \frac{d}{2}$的小矩形<br>假设位于中轴线两侧的<code>4</code>个小矩形中有多于<code>2</code>个点，<br>设$u，v$是位于同一小矩形中的两个点，则<br>$d(u,v)=\sqrt{(x_u - x_v) ^ 2 + (y_u-y_v) ^ 2 }\le \sqrt{(d / 2) ^ 2 + (2d / 3) ^ 2} = \sqrt{25 / 36 * d ^ 2}=\frac{5d}{6} &lt; d$<br>因为递归已经算出两边子问题解为最优为$d$了，这显然是矛盾的，所以每个小矩形最多只能有<code>1</code>个点<br>但是跨越中轴线的<code>2</code>个小矩形中可能会有多于<code>2</code>个点，但我们发现它们只能在中轴线上<br>不然就与其他<code>4</code>个小矩形中的点构成了小于$d$的点对了，但是由于合法性最坏的点对如下图：<br><img src="http://7xru22.com1.z0.glb.clouddn.com/16-3-23/19551345.jpg" alt=""><br>这样最多就只有<code>6</code>个点了，重合点是非法的，因为会被分到<code>2</code>边，然后违法了$d$是最优解的条件<br>$\blacksquare$</p>
</li>
<li><p>时间复杂度分析<br>有一个对$y$坐标排序，我们可以通过归并来实现，这样就还是$O(n)$<br>总时间复杂度：$T(n)=2T(n/2)+O(6n)\Rightarrow O(nlogn)$</p>
</li>
</ul>
</li>
</ul>
<h3 id="分治法实现"><a href="#分治法实现" class="headerlink" title="分治法实现"></a>分治法实现</h3><p>$UVA 10245 模版裸题：$<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-03-18</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:1024000000,1024000000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e4</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">double</span>, <span class="keyword">double</span>&gt; P;</div><div class="line">P a[N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">double</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(l == r) <span class="keyword">return</span> INF;</div><div class="line">    <span class="keyword">int</span> m = l + r &gt;&gt; <span class="number">1</span>;</div><div class="line">    <span class="keyword">double</span> x = a[m].first;</div><div class="line"></div><div class="line">    <span class="keyword">double</span> d = min(dfs(l, m), dfs(m + <span class="number">1</span>, r));</div><div class="line">    inplace_merge(a + l, a + m + <span class="number">1</span>, a + r + <span class="number">1</span>, [](P x, P y) &#123;</div><div class="line">        <span class="keyword">return</span> x.second &lt; y.second;  <span class="comment">//按照y来归并2个数组</span></div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = l; i &lt;= r; ++i) &#123;</div><div class="line">        <span class="keyword">if</span>(<span class="built_in">abs</span>(a[i].first - x) &gt;= d) <span class="keyword">continue</span>; <span class="comment">//距离中轴小于d点加入</span></div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; v.size(); ++j) &#123;</div><div class="line">            <span class="keyword">int</span> k = v[v.size() - <span class="number">1</span> - j];  <span class="comment">//倒着检查y坐标相差小于d的点</span></div><div class="line">            <span class="keyword">double</span> dy = a[i].second - a[k].second;</div><div class="line">            <span class="keyword">if</span>(dy &gt;= d) <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">double</span> dx = a[i].first - a[k].first;</div><div class="line">            d = min(d, hypot(dx, dy));</div><div class="line">        &#125;</div><div class="line">        v.push_back(i);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> d;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) == <span class="number">1</span> &amp;&amp; n) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">"%lf%lf"</span>, &amp;a[i].first, &amp;a[i].second);</div><div class="line">        sort(a + <span class="number">1</span>, a + <span class="number">1</span> + n);</div><div class="line"></div><div class="line">        <span class="keyword">double</span> d = dfs(<span class="number">1</span>, n);</div><div class="line">        <span class="keyword">if</span>(d &gt;= <span class="number">1e4</span>) &#123;<span class="built_in">puts</span>(<span class="string">"INFINITY"</span>); <span class="keyword">continue</span>;&#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%.4f\n"</span>, d);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 小结 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 分治 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[BZOJ 2743 采花（离线思想、BIT）]]></title>
      <url>/2016/03/23/BZOJ%202743%20%E9%87%87%E8%8A%B1%EF%BC%88%E7%A6%BB%E7%BA%BF%E6%80%9D%E6%83%B3%E3%80%81BIT%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$N，C，Q\le 10^6，C\le N，给定一个N大小序列，A_i\le C，Q次询问$<br>$每次询问[L,R]区间有多少个出现至少2次的不同的整数$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$经典离线套路题了，询问右端点排序$<br>$从左往右扫描每个数A_i（相当于固定了右端点）$<br>$维护A_i出现的前一个位置为last_{i}，用BIT维护，只要单点更新last_{i}为1$<br>$但是这样出现2次以上的就会多算，我们需要减去前一个位置的前一个位置$<br>$也就是更新last_{last_i}为-1，这样扫描下去就不会多算了，每次只有当前的前一次出现的位置产生了贡献$<br>$此时所有右端点为i的询问[L,i]的答案就是，ans(L,i)=sum(L,i)$<br>$这里其实把BIT倒过来就可以完成了，向前更新，向后查询$<br>$时间复杂度为O(nlogn)$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-03-23</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BIT</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> n, b[N];</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> _n)</span> </span>&#123;</div><div class="line">        n = _n;</div><div class="line">        <span class="built_in">memset</span>(b, <span class="number">0</span>, <span class="keyword">sizeof</span> b);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> v)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span>(; i; i -= i &amp; -i) b[i] += v;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(; i &lt;= n; i += i &amp; -i) ret += b[i];</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line">&#125; bit;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, c, q, a[N];</div><div class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; qs[N];</div><div class="line"><span class="keyword">int</span> last[N], wh[N], ans[N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;c, &amp;q);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a + i);</div><div class="line">        last[i] = wh[a[i]];</div><div class="line">        wh[a[i]] = i;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; ++i) &#123;</div><div class="line">        <span class="keyword">int</span> l, r; <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;l, &amp;r);</div><div class="line">        qs[r].push_back(make_pair(l, i));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    bit.init(n);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">        <span class="keyword">if</span>(last[i]) bit.add(last[i], <span class="number">1</span>);</div><div class="line">        <span class="keyword">if</span>(last[last[i]]) bit.add(last[last[i]], <span class="number">-1</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; qs[i].size(); ++j) &#123;</div><div class="line">            pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&amp; q = qs[i][j];</div><div class="line">            ans[q.second] = bit.sum(q.first);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; ++i) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans[i]);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 思维 </category>
            
            <category> 离线思想 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> BIT </tag>
            
            <tag> 离线 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[BZOJ 1878 HH的项链（离线思想、BIT）]]></title>
      <url>/2016/03/23/BZOJ%201878%20HH%E7%9A%84%E9%A1%B9%E9%93%BE%EF%BC%88%E7%A6%BB%E7%BA%BF%E6%80%9D%E6%83%B3%E3%80%81BIT%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$N\le 5\times 10^4，Q\le 2\times 10^5，给定一个N大小序列，A_i\in[0,10^6]，Q次询问$<br>$每次询问[L,R]区间有多少个不同的整数$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$经典离线套路题了，询问右端点排序$<br>$从左往右扫描每个数A_i（相当于固定了右端点）$<br>$维护A_i出现的前一个位置为last_{A_i}，用BIT维护，只要单点更新last_{A_i}为1$<br>$发现所有以i为右端点的询问[L,i]中重复出现的数，查询[L,i]的区间和即可$<br>$此时不同的整数的个数，ans(L,i)=i-L+1-sum(L,i)$<br>$这里其实把BIT倒过来就可以完成了，向前更新，向后查询$<br>$时间复杂度为O(nlogn)$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-03-23</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BIT</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> n, b[N];</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> _n)</span> </span>&#123;</div><div class="line">        n = _n;</div><div class="line">        <span class="built_in">memset</span>(b, <span class="number">0</span>, <span class="keyword">sizeof</span> b);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> v)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span>(; i; i -= i &amp; -i) b[i] += v;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(; i &lt;= n; i += i &amp; -i) ret += b[i];</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line">&#125; bit;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="keyword">int</span> a[N];</div><div class="line"><span class="keyword">int</span> q, ans[N];</div><div class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; qs[N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a + i);</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;q);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; ++i) &#123;</div><div class="line">        <span class="keyword">int</span> l, r; <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;l, &amp;r);</div><div class="line">        qs[r].push_back(make_pair(l, i));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    bit.init(n);</div><div class="line">    <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; last;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">        <span class="keyword">int</span> x = a[i];</div><div class="line">        <span class="keyword">if</span>(last.count(x)) bit.add(last[x], <span class="number">1</span>);</div><div class="line">        last[x] = i;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; qs[i].size(); ++j) &#123;</div><div class="line">            pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&amp; q = qs[i][j];</div><div class="line">            ans[q.second] = i - q.first + <span class="number">1</span> - bit.sum(q.first);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; ++i) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans[i]);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 思维 </category>
            
            <category> 离线思想 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> BIT </tag>
            
            <tag> 离线 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDU 4630 No Pain No Game（离线思想、BIT）]]></title>
      <url>/2016/03/23/HDU%204630%20No%20Pain%20No%20Game%EF%BC%88%E7%A6%BB%E7%BA%BF%E6%80%9D%E6%83%B3%E3%80%81BIT%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$N\le 5\times 10^4，Q\le 5\times 10^4，给定一个1\sim N的排列，Q次询问$<br>$每次询问[L,R]区间任意2个数的gcd的最大值，规定1个数答案是0$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$经典离线套路题了，询问右端点排序$<br>$从左往右扫描每个数A_i（相当于固定了右端点）$<br>$对于每个数的约数x，维护它的倍数中的前一个位置为last_x$<br>$用BIT维护，只要单点更新所有约数x的last_x为x$<br>$发现所有以i为右端点的询问[L,i]只要查询[L,i]的最大值就好了$<br>$这里其实把BIT倒过来就可以完成了，向前更新，向后查询$<br>$筛法预处理1\sim N的约数，总时间复杂度为O(nlogn)$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-03-22</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5e4</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BIT</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> n, b[N];</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> _n)</span> </span>&#123;</div><div class="line">        n = _n;</div><div class="line">        <span class="built_in">memset</span>(b, <span class="number">0</span>, <span class="keyword">sizeof</span> b);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> v)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span>(; i; i -= i &amp; -i) b[i] = max(b[i], v);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(; i &lt;= n; i += i &amp; -i) ret = max(ret, b[i]);</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line">&#125; bit;</div><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; divisors[N];</div><div class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; qs[N];</div><div class="line"><span class="keyword">int</span> n, q, a[N], ans[N];</div><div class="line"><span class="keyword">int</span> last[N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5e4</span>; ++i)</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt;= <span class="number">5e4</span>; j += i)</div><div class="line">            divisors[j].push_back(i);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">while</span>(t--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a + i);</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;q);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) qs[i].clear();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; ++i) &#123;</div><div class="line">            <span class="keyword">int</span> l, r; <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;l, &amp;r);</div><div class="line">            qs[r].push_back(&#123;l, i&#125;);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        bit.init(n);</div><div class="line">        <span class="built_in">memset</span>(last, <span class="number">0</span>, <span class="keyword">sizeof</span> last);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">            <span class="keyword">int</span> v = a[i];</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> x : divisors[v]) &#123;</div><div class="line">                <span class="keyword">if</span>(last[x]) bit.add(last[x], x);</div><div class="line">                last[x] = i;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> q : qs[i]) ans[q.second] = bit.sum(q.first);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; ++i) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 思维 </category>
            
            <category> 离线思想 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> BIT </tag>
            
            <tag> 离线 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CROC 2016 - Elimination Round E. Intellectual Inquiry（贪心、dp）]]></title>
      <url>/2016/03/22/CROC%202016%20-%20Elimination%20Round%20E.%20Intellectual%20Inquiry%EF%BC%88%E8%B4%AA%E5%BF%83%E3%80%81dp%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$N\le 10^6长度的字符串，给定字符集大小K\le26$<br>$现在后面添加M \le10^6个字符，使得新的字符串的不同子序列个数最多$<br>$输出这个个数，对10^9+7取模$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$先看没有添加字符的情况，考虑f[i]:=前i个字符形成的不同子序列个数$<br>$如果这个字符之前没出现过，先累加之前的答案，然后添加这个字符，或者单独这个字符本身$<br>$即f[i]=2\cdot f[i-1]+1$<br>$如果这个字符之前出现过了，还是先累加之前的答案，然后添加这个字符$<br>$但是这个字符出现过了，就不算单独本身了，之前算过了$<br>$定义上一次出现的位置为pre，还要减去这个字符和pre-1这些字符重复的部分$<br>$即f[i]=2\cdot f[i-1]-f[pre-1]$<br>$对于后面新增加的字符，怎样才能让不同的字符最多，我们观察转移方程发现：$<br>$答案是成倍递增的，所以要让一开始的大，也就是说减去的少，基于这样的贪心$<br>$那么每次选择字符的时候都选上一次出现位置最早的$<br>$其实也就是给pre数组排个序，周期性的添加嘛，每个周期都是一样的$<br>$知道了添加的字符，继续做上面的dp就可以了$<br>$时间复杂度O(N+M)$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-03-21</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e6</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, k;</div><div class="line"><span class="built_in">string</span> s;</div><div class="line"><span class="keyword">int</span> pre[<span class="number">26</span>], rk[<span class="number">26</span>], f[N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k &gt;&gt; s;</div><div class="line">    <span class="built_in">memset</span>(pre, <span class="number">-1</span>, <span class="keyword">sizeof</span> pre);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.size(); ++i) pre[s[i] - <span class="string">'a'</span>] = i;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; ++i) rk[i] = i;</div><div class="line">    sort(rk, rk + k, [](<span class="keyword">int</span> x, <span class="keyword">int</span> y) &#123;</div><div class="line">        <span class="keyword">return</span> pre[x] &lt; pre[y];</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</div><div class="line">        <span class="keyword">int</span> c = rk[i % k];</div><div class="line">        s += <span class="keyword">char</span>(c + <span class="string">'a'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">memset</span>(pre, <span class="number">-1</span>, <span class="keyword">sizeof</span> pre);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.size(); ++i) &#123;</div><div class="line">        <span class="keyword">int</span> c = s[i] - <span class="string">'a'</span>;</div><div class="line">        <span class="keyword">if</span>(~pre[c]) f[i + <span class="number">1</span>] = (<span class="number">2</span> * f[i] % MOD - f[pre[c]] + MOD) % MOD;</div><div class="line">        <span class="keyword">else</span> f[i + <span class="number">1</span>] = (<span class="number">2</span> * f[i] + <span class="number">1</span>) % MOD;</div><div class="line">        pre[c] = i;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> ans = (f[s.size()] + <span class="number">1</span>) % MOD;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">'\n'</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 动态规划 </category>
            
            <category> 线性dp </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 贪心 </tag>
            
            <tag> 线性dp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CROC 2016 - Elimination Round D. Robot Rapping Results Report（二分、拓扑排序）]]></title>
      <url>/2016/03/22/CROC%202016%20-%20Elimination%20Round%20D.%20Robot%20Rapping%20Results%20Report%EF%BC%88%E4%BA%8C%E5%88%86%E3%80%81%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$N\le 10^5个人，M\le 10^5条拓扑关系$<br>$问最早第几条边加入的时候可以唯一确定拓扑关系$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$显然的二分答案啦$<br>$拓扑排序每次取出一个顶点的时候看看这个顶点是不是唯一的就可以判断拓扑关系是否唯一了$<br>$时间复杂度O((n+m)logm)$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-03-19</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:1024000000,1024000000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">int</span> u[N], v[N];</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> m)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) G[i].clear();</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; in(n + <span class="number">1</span>, <span class="number">0</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</div><div class="line">        G[u[i]].push_back(v[i]);</div><div class="line">        ++in[v[i]];</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="keyword">if</span>(!in[i]) q.push(i);</div><div class="line">    <span class="keyword">while</span>(q.size()) &#123;</div><div class="line">        <span class="keyword">int</span> u = q.front(); q.pop();</div><div class="line">        <span class="keyword">if</span>(q.size()) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> v : G[u])</div><div class="line">            <span class="keyword">if</span>(--in[v] == <span class="number">0</span>) q.push(v);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, u + i, v + i);</div><div class="line">    <span class="keyword">int</span> l = <span class="number">1</span>, r = m;</div><div class="line">    <span class="keyword">while</span>(l &lt;= r) &#123;</div><div class="line">        <span class="keyword">int</span> m = l + r &gt;&gt; <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span>(check(m)) r = m - <span class="number">1</span>;</div><div class="line">        <span class="keyword">else</span> l = m + <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(l == m + <span class="number">1</span>) l = <span class="number">-1</span>;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, l);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 图论 </category>
            
            <category> 拓扑排序 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 二分搜索 </tag>
            
            <tag> 拓扑排序 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[IndiaHacks 2016 D. Delivery Bears（二分、最大流）]]></title>
      <url>/2016/03/21/IndiaHacks%202016%20D.%20Delivery%20Bears%EF%BC%88%E4%BA%8C%E5%88%86%E3%80%81%E6%9C%80%E5%A4%A7%E6%B5%81%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$给定N\le 50个城市，M\le 500条有向边，X\le10^5为熊的个数$<br>$边描述为(u_i,v_i,c_i)，表示u_i\to v_i可以通过c_i物品$<br>$现要求恰好用X只熊，且每只熊运送的物品多少相同$<br>$求最多能从1到n运多少物品$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$首先很显然要二分每只熊运送多少物品，答案就是X*这个值$<br>$接下来如何check可行，显然可以转换一下模型$<br>$把每条边运送物品变为在当前的mid物品下，可以通过多少只熊$<br>$所以check就变成了，1到n能否至少通过X只熊，建图后判断最大流是不是\ge X$<br>$需要注意的是，容量可能会爆int$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-03-19</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:1024000000,1024000000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">50</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1000</span> + <span class="number">10</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> head[N], pnt[M], cap[M], nxt[M], cnt;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span> </span>&#123;</div><div class="line">    pnt[cnt] = v;</div><div class="line">    cap[cnt] = w;</div><div class="line">    nxt[cnt] = head[u];</div><div class="line">    head[u] = cnt++;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_double</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w1, <span class="keyword">int</span> w2 = <span class="number">0</span>)</span> </span>&#123;</div><div class="line">    add_edge(u, v, w1);</div><div class="line">    add_edge(v, u, w2);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> lev[N], cur[N];</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span> </span>&#123;</div><div class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</div><div class="line">    <span class="built_in">memset</span>(lev, <span class="number">0</span>, <span class="keyword">sizeof</span> lev);</div><div class="line">    q.push(s);  lev[s] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span>(q.size() &amp;&amp; !lev[t]) &#123;</div><div class="line">        <span class="keyword">int</span> u = q.front(); q.pop();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; ~i; i = nxt[i]) &#123;</div><div class="line">            <span class="keyword">int</span> v = pnt[i];</div><div class="line">            <span class="keyword">if</span>(cap[i] &gt; <span class="number">0</span> &amp;&amp; !lev[v]) &#123;</div><div class="line">                lev[v] = lev[u] + <span class="number">1</span>;</div><div class="line">                q.push(v);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> lev[t];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> t, <span class="keyword">int</span> delta)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(u == t || !delta) <span class="keyword">return</span> delta;</div><div class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = cur[u]; ~i; i = nxt[i]) &#123;</div><div class="line">        <span class="keyword">int</span> v = pnt[i];</div><div class="line">        <span class="keyword">if</span>(cap[i] &gt; <span class="number">0</span> &amp;&amp; lev[v] == lev[u] + <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">int</span> d = dfs(v, t, min(delta, cap[i]));</div><div class="line">            cur[u] = i;</div><div class="line">            ret += d; delta -= d;</div><div class="line">            cap[i] -= d;</div><div class="line">            cap[i ^ <span class="number">1</span>] += d;</div><div class="line"></div><div class="line">            <span class="keyword">if</span>(delta == <span class="number">0</span>) <span class="keyword">return</span> ret;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    lev[u] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dinic</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(bfs(s, t)) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = s; i &lt;= t; ++i) cur[i] = head[i];</div><div class="line">        ret += dfs(s, t, INF);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m, k;</div><div class="line"><span class="keyword">int</span> u[M], v[M], c[M];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">double</span> x)</span> </span>&#123;</div><div class="line">    cnt = <span class="number">0</span>; <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</div><div class="line">        add_double(u[i], v[i], min(c[i] / x, <span class="number">1e9</span>));</div><div class="line">    <span class="keyword">return</span> dinic(<span class="number">1</span>, n) &gt;= k;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;m, &amp;k);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, u + i, v + i, c + i);</div><div class="line">    <span class="keyword">double</span> l = <span class="number">0</span>, r = <span class="number">1e6</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; ++i) &#123;</div><div class="line">        <span class="keyword">double</span> mid = (l + r) / <span class="number">2</span>;</div><div class="line">        <span class="keyword">if</span>(check(mid)) l = mid;</div><div class="line">        <span class="keyword">else</span> r = mid;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%.12f\n"</span>, l * k);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 图论 </category>
            
            <category> 网络流 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 二分搜索 </tag>
            
            <tag> 最大流 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[IndiaHacks 2016 C. Bear and Up-Down（暴力）]]></title>
      <url>/2016/03/21/IndiaHacks%202016%20C.%20Bear%20and%20Up-Down%EF%BC%88%E6%9A%B4%E5%8A%9B%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$给定N\le 1.5\times10^5个整数，定义一个序列是漂亮的：$<br>$所有奇数下标i，A_i &lt; A_{i+1}，所有偶数下标i，A_i &gt; A_{i+1}$<br>$现给定一个不漂亮的序列，问有多少方法使得它变漂亮$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$可以发现，错误的位置不能超过4个，因为交换A_i和A_j最多只能影响i - 1, i, j - 1, j四个位置$<br>$其实不用想那么多，反正这个位置不能很多$<br>$然后直接暴力就可以了，枚举错误位置和序列里的数交换，判断是否满足要求$<br>$统计完答案时候，要把和错误的换的容斥掉$<br>$时间复杂度O(n)$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-03-19</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:1024000000,1024000000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, a[N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(x &amp; <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">if</span>(a[x - <span class="number">1</span>] &gt; a[x] &amp;&amp; a[x] &lt; a[x + <span class="number">1</span>]) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">if</span>(a[x - <span class="number">1</span>] &lt; a[x] &amp;&amp; a[x] &gt; a[x + <span class="number">1</span>]) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isLegal</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; e)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> x : e) <span class="keyword">if</span>(!check(x)) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) == <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a + i);</div><div class="line">        a[<span class="number">0</span>] = INF;</div><div class="line">        a[n + <span class="number">1</span>] = n &amp; <span class="number">1</span> ? INF : <span class="number">0</span>;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; e;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</div><div class="line">            <span class="keyword">if</span>(!check(i)) e.push_back(i);</div><div class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span>(e.size() &lt; <span class="number">10</span>) &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> x : e) &#123;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">                    swap(a[x], a[i]);</div><div class="line">                    ans += check(i) &amp;&amp; isLegal(e);</div><div class="line">                    swap(a[x], a[i]);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; e.size(); ++i) &#123;</div><div class="line">                <span class="keyword">int</span> x = e[i];</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; e.size(); ++j) &#123;</div><div class="line">                    <span class="keyword">int</span> y = e[j];</div><div class="line">                    swap(a[x], a[y]);</div><div class="line">                    ans -= isLegal(e);</div><div class="line">                    swap(a[x], a[y]);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 暴力 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[HihoCoder 1279 Rikka with Sequence（状压dp）]]></title>
      <url>/2016/03/21/HihoCoder%201279%20Rikka%20with%20Sequence%EF%BC%88%E7%8A%B6%E5%8E%8Bdp%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$给定N\le 50个整数，A_i\in[0,2^{13})$<br>$从中选取若干个数(不为0)使得bitwise and的结果和bitwise xor的结果相同$<br>$求方法数$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$首先根据and和xor运算的性质进行分析，如果要相等，以二进制位来看：$<br>$为0的话，要有偶数个1，并且有至少1个0$<br>$为1的话，要有奇数个1，并且没有0$<br>$显然一眼状压dp，偶数个1，奇数个1，全为1还是不全为1，状态数4<br>^{13}炸了$<br>$考虑优化，反正我是想不到，三进制状压：$<br>$0:=偶数个1且不全为1，1:=奇数个1且不全为1，2:=全为1$<br>$再开1维，0/1:=选取了偶/奇数个数$<br>$然后你奇妙的发现这包含了上面的四种状态，状态数3^{13}×2，完美$<br>$f[i][S][0/1]:=前i个数，选取的数的状态是S，选取的数的个数是奇/偶的方法数$<br>$转移就01背包转移就好了，这个数选还是不选$<br>$由于转移是O(13)的，出题人说常数卡的好能过，窝折半预处理到O(1)特么的还是T了一晚上$<br>$卡了半天常数才过，最后窝发现并不是卡常数，是特么的不滚动就要T，估计是MLE给搞T了$<br>$能滚动就滚动吧，别偷懒了$<br>$时间复杂度O(n×3^{13})$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-03-21</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> S = <span class="number">1594323</span>; <span class="comment">//3^13</span></div><div class="line">LL f[<span class="number">2</span>][S][<span class="number">2</span>];</div><div class="line"><span class="comment">// S: 0-&gt;偶数个1(不全是) 1-&gt;奇数个1(不全是) 2-&gt;全是1</span></div><div class="line"><span class="comment">// 0/1: 选取了偶/奇数个数</span></div><div class="line"></div><div class="line"><span class="keyword">int</span> sta[<span class="number">13</span>];</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">decode</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</div><div class="line">        sta[i] = s % <span class="number">3</span>;</div><div class="line">        s /= <span class="number">3</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">encode</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> code = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = n - <span class="number">1</span>; ~i; --i) code = code * <span class="number">3</span> + sta[i];</div><div class="line">    <span class="keyword">return</span> code;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> HS = <span class="number">2187</span>; <span class="comment">//3^7</span></div><div class="line"><span class="keyword">int</span> trans[HS][<span class="number">1</span> &lt;&lt; <span class="number">7</span>][<span class="number">2</span>];</div><div class="line"><span class="keyword">int</span> sHigh[S], sLow[S];</div><div class="line"><span class="keyword">int</span> th[<span class="number">13</span>] = &#123;<span class="number">1</span>&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">gao</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">13</span>; ++i) th[i] = th[i - <span class="number">1</span>] * <span class="number">3</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; S; ++j) sHigh[j] = j / HS, sLow[j] = j % HS;</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; HS; ++i) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">1</span> &lt;&lt; <span class="number">7</span>; ++j) &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> p = <span class="number">0</span>; p &lt; <span class="number">2</span>; ++p) &#123;</div><div class="line">                <span class="keyword">int</span> newS = i;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">7</span>; ++k) &#123;</div><div class="line">                    <span class="keyword">int</span> b = i / th[k] % <span class="number">3</span>;</div><div class="line">                    <span class="keyword">if</span>(j &gt;&gt; k &amp; <span class="number">1</span>) &#123; <span class="comment">//1</span></div><div class="line">                        <span class="keyword">if</span>(b != <span class="number">2</span>) &#123;</div><div class="line">                            <span class="comment">//sta[k] ^= 1; //奇偶互换</span></div><div class="line">                            newS += (b ? <span class="number">-1</span> : <span class="number">1</span>) * th[k];</div><div class="line">                        &#125;</div><div class="line">                    &#125; <span class="keyword">else</span> &#123; <span class="comment">//0</span></div><div class="line">                        <span class="keyword">if</span>(b == <span class="number">2</span>) &#123;</div><div class="line">                            <span class="comment">//sta[k] = p; //不全是1了</span></div><div class="line">                            newS += (p - <span class="number">2</span>) * th[k];</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="comment">//trans[i][j][p] = encode(7);</span></div><div class="line">                trans[i][j][p] = newS;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> p)</span> </span>&#123;</div><div class="line">    decode(s, <span class="number">13</span>);</div><div class="line">    <span class="comment">//偶数个1(不全是) 同为0, 奇数个1(全是) 同为1</span></div><div class="line">    <span class="comment">//非法的同理</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">13</span>; ++i)</div><div class="line">        <span class="keyword">if</span>(sta[i] == <span class="number">1</span> || !p &amp;&amp; sta[i] == <span class="number">2</span>) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    gao();</div><div class="line"></div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> p = <span class="number">0</span>;</div><div class="line">    f[p][S - <span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">        <span class="keyword">int</span> x; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line">        <span class="keyword">int</span> xHigh = x / (<span class="number">1</span> &lt;&lt; <span class="number">7</span>), xLow = x % (<span class="number">1</span> &lt;&lt; <span class="number">7</span>);</div><div class="line">        <span class="built_in">memset</span>(f[!p], <span class="number">0</span>, <span class="keyword">sizeof</span> f[!p]);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; S; ++j) &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">2</span>; ++k) &#123;</div><div class="line">                <span class="keyword">if</span>(!f[p][j][k]) <span class="keyword">continue</span>;</div><div class="line">                <span class="keyword">int</span> newHigh = trans[sHigh[j]][xHigh][k];</div><div class="line">                <span class="keyword">int</span> newLow = trans[sLow[j]][xLow][k];</div><div class="line">                <span class="keyword">int</span> newS = newHigh * HS + newLow;</div><div class="line">                f[!p][newS][k ^ <span class="number">1</span>] += f[p][j][k]; <span class="comment">//选</span></div><div class="line"></div><div class="line"><span class="comment">//                pr(i); pr(j); pr(k); prln(x);</span></div><div class="line"><span class="comment">//                pr(sLow); pr(xLow); pr(sHigh); prln(xHigh);</span></div><div class="line"><span class="comment">//                pr(newHigh); pr(newLow); prln(newS);</span></div><div class="line"><span class="comment">//                decode(j, 13);</span></div><div class="line"><span class="comment">//                for(int k = 0; k &lt; 13; ++k) printf("%d ", sta[k]); puts("");</span></div><div class="line"><span class="comment">//                decode(newS, 13);</span></div><div class="line"><span class="comment">//                for(int k = 0; k &lt; 13; ++k) printf("%d ", sta[k]); puts("");</span></div><div class="line"><span class="comment">//                if(i == n) printf("f[%d][%d]=%I64d\n", newS, k ^ 1, f[i][newS][k ^ 1]);</span></div><div class="line"></div><div class="line">                f[!p][j][k] += f[p][j][k]; <span class="comment">//不选</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        p = !p;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    LL ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; S; ++i)</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; ++j)</div><div class="line">            <span class="keyword">if</span>(f[p][i][j] &amp;&amp; check(i, j)) ans += f[p][i][j];</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 动态规划 </category>
            
            <category> 状压dp </category>
            
        </categories>
        
        
        <tags>
            
            <tag> dp </tag>
            
            <tag> 折半枚举 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDU 5305 Friends（dfs）]]></title>
      <url>/2016/03/18/HDU%205305%20Friends%EF%BC%88dfs%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$给定N\le 8，M\le N(N-1)/2的图$<br>$现要给边染色，使得每个点的边一半是白，一半是黑$<br>$求满足条件的方法数$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$如果枚举边的颜色的话，边数有28，复杂度是2^{28}会T$<br>$考虑到一半一半，所以所有点的度数必须是偶数(一个剪枝)，边数是24$<br>$但是没有根本的改变结果，考虑对每个点的所有边进行染色，由于边确定了$<br>$下一个节点的一些边的颜色会被确定，会使得枚举的边变少，达不到24，现在就很快了$<br>$至此问题解决，时间复杂度O(1s内可过)$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-03-17</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:1024000000,1024000000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m, ans;</div><div class="line"><span class="keyword">int</span> g[<span class="number">10</span>][<span class="number">10</span>], deg[<span class="number">10</span>];</div><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; get(<span class="keyword">int</span> u, <span class="keyword">int</span> w) &#123;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; ret;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec;</div><div class="line">    <span class="keyword">if</span>(w == <span class="number">0</span>) ret.push_back(vec);</div><div class="line">    <span class="keyword">if</span>(w == <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">            <span class="keyword">if</span>(g[u][i] != <span class="number">1</span> || i == u) <span class="keyword">continue</span>;</div><div class="line">            vec.push_back(i);</div><div class="line">            ret.push_back(vec);</div><div class="line">            vec.pop_back();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(w == <span class="number">2</span>) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">            <span class="keyword">if</span>(g[u][i] != <span class="number">1</span> || i == u) <span class="keyword">continue</span>;</div><div class="line">            vec.push_back(i);</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n; ++j) &#123;</div><div class="line">                <span class="keyword">if</span>(g[u][j] != <span class="number">1</span> || j == u) <span class="keyword">continue</span>;</div><div class="line">                vec.push_back(j);</div><div class="line">                ret.push_back(vec);</div><div class="line">                vec.pop_back();</div><div class="line">            &#125;</div><div class="line">            vec.pop_back();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(w == <span class="number">3</span>) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">            <span class="keyword">if</span>(g[u][i] != <span class="number">1</span> || i == u) <span class="keyword">continue</span>;</div><div class="line">            vec.push_back(i);</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n; ++j) &#123;</div><div class="line">                <span class="keyword">if</span>(g[u][j] != <span class="number">1</span> || j == u) <span class="keyword">continue</span>;</div><div class="line">                vec.push_back(j);</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = j + <span class="number">1</span>; k &lt;= n; ++k) &#123;</div><div class="line">                    <span class="keyword">if</span>(g[u][k] != <span class="number">1</span> || k == u) <span class="keyword">continue</span>;</div><div class="line">                    vec.push_back(k);</div><div class="line">                    ret.push_back(vec);</div><div class="line">                    vec.pop_back();</div><div class="line">                &#125;</div><div class="line">                vec.pop_back();</div><div class="line">            &#125;</div><div class="line">            vec.pop_back();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(u == n + <span class="number">1</span>) &#123;</div><div class="line">        ++ans;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> w = <span class="number">0</span>, b = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v = <span class="number">1</span>; v &lt;= n; ++v) &#123;</div><div class="line">        <span class="keyword">if</span>(g[u][v] == <span class="number">2</span>) ++w;</div><div class="line">        <span class="keyword">if</span>(g[u][v] == <span class="number">3</span>) ++b;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(w &gt; deg[u] / <span class="number">2</span> || b &gt; deg[u] / <span class="number">2</span>) <span class="keyword">return</span>;</div><div class="line"></div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; white = get(u, deg[u] / <span class="number">2</span> - w);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; vec : white) &#123;</div><div class="line">        <span class="keyword">int</span> tmp[<span class="number">10</span>][<span class="number">10</span>];</div><div class="line">        <span class="built_in">memcpy</span>(tmp, g, <span class="keyword">sizeof</span> g);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> wh : vec) g[u][wh] = g[wh][u] = <span class="number">2</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> v = <span class="number">1</span>; v &lt;= n; ++v) <span class="keyword">if</span>(g[u][v] == <span class="number">1</span>) g[u][v] = g[v][u] = <span class="number">3</span>;</div><div class="line">        dfs(u + <span class="number">1</span>);</div><div class="line">        <span class="built_in">memcpy</span>(g, tmp, <span class="keyword">sizeof</span> tmp);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">while</span>(t--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">        <span class="keyword">if</span>(!m) &#123;<span class="built_in">puts</span>(<span class="string">"1"</span>); <span class="keyword">continue</span>;&#125;</div><div class="line">        <span class="built_in">memset</span>(g, <span class="number">0</span>, <span class="keyword">sizeof</span> g);</div><div class="line">        <span class="built_in">memset</span>(deg, <span class="number">0</span>, <span class="keyword">sizeof</span> deg);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</div><div class="line">            <span class="keyword">int</span> u, v; <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</div><div class="line">            g[u][v] = g[v][u] = <span class="number">1</span>;</div><div class="line">            ++deg[u]; ++deg[v];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">bool</span> ok = <span class="literal">true</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</div><div class="line">            <span class="keyword">if</span>(deg[i] &amp; <span class="number">1</span>) ok = <span class="literal">false</span>;</div><div class="line">        <span class="keyword">if</span>(!ok) &#123;<span class="built_in">puts</span>(<span class="string">"0"</span>); <span class="keyword">continue</span>;&#125;</div><div class="line"></div><div class="line">        ans = <span class="number">0</span>;</div><div class="line">        dfs(<span class="number">1</span>);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 暴力 </category>
            
            <category> 搜索 </category>
            
            <category> dfs/bfs </category>
            
        </categories>
        
        
        <tags>
            
            <tag> dfs </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDU 5303 Delicious Apples（贪心）]]></title>
      <url>/2016/03/18/HDU%205303%20Delicious%20Apples%EF%BC%88%E8%B4%AA%E5%BF%83%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$给定L\le 10^9的环形路，家在0号点，N\le 10^5颗苹果树，每棵有A_i个苹果，\sum A_i \le 10^5$<br>$现有一个K\le 10^5的篮子，求从家出发把所有的苹果装回家的最短路程$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$首先可以发现，肯定是先把近的苹果先拿走，如果拿了远的再拿近的再拿远的路程会交叉，就不优了$<br>$其次再考虑会不会可能走一圈，发现是可以的，见下图：$<br><img src="http://7xru22.com1.z0.glb.clouddn.com/16-3-18/25212458.jpg" alt=""><br>$设起点到a的距离为l_1，到b的距离为l_2，且l_1, l_2 &gt; {L\over 4}, A_a+A_b\le k$<br>$那么走一圈的路程是L，直接从最近的拿是2(l_1+l_2) &gt; L，此时显然走一圈更优$<br>$更可以得出l_1,l_2\le {L\over 4}直接拿比较好$<br>$问题来了，可不可能走多圈呢，还是上面的图，看2圈的情况：$<br>$不过设A_a = x &lt; k, A_b = k + y, 且A_a+A_b \le 2k$<br>$显然如果两边都是k的话，就不能绕圈了，所以可能走2圈一定是这样的$<br>$直接拿的话是2(l_1+2l_2)&gt;{3L\over 2}，走2圈是2L，走1圈+先拿k是L+2l_2$<br>$显然走2圈最差，其次L+2l_2 - (2(l_1+2l_2))=L - (2(l_1+l_2)) &lt; 0，走1圈+先拿k最优$<br>$显然更多圈的情况其实都可以规约到2圈的情况$<br>$由于苹果个数10^5，把苹果分开看，l[i]:=左边拿i个苹果的代价,r[i]同理$<br>$所以问题解决了，只要枚举最后一次2边拿的让它走1圈就好了$<br>$时间复杂度因为有排序所以是O(nlogn)$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-03-18</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:1024000000,1024000000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> L, n, k;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">while</span>(t--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;L, &amp;n, &amp;k);</div><div class="line">        <span class="built_in">vector</span>&lt;LL&gt; l(<span class="number">1</span>, <span class="number">0</span>), r(<span class="number">1</span>, <span class="number">0</span>); <span class="comment">//l[0] = r[0] = 0</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">            <span class="keyword">int</span> x, y; <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</div><div class="line">            <span class="keyword">while</span>(y--) &#123;</div><div class="line">                <span class="keyword">if</span>(x &lt;&lt; <span class="number">1</span> &lt; L) l.push_back(x);</div><div class="line">                <span class="keyword">else</span> r.push_back(L - x);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        sort(l.begin(), l.end());</div><div class="line">        sort(r.begin(), r.end());</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = k; i &lt; l.size(); ++i) l[i] += l[i - k];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = k; i &lt; r.size(); ++i) r[i] += r[i - k];</div><div class="line"></div><div class="line">        LL ans = l.back() + r.back() &lt;&lt; <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= k; ++i) &#123;</div><div class="line">            <span class="keyword">int</span> a = max(<span class="number">0</span>, (<span class="keyword">int</span>)l.size() - <span class="number">1</span> - i);</div><div class="line">            <span class="keyword">int</span> b = max(<span class="number">0</span>, (<span class="keyword">int</span>)r.size() - <span class="number">1</span> - (k - i));</div><div class="line">            ans = min(ans, L + (l[a] + r[b] &lt;&lt; <span class="number">1</span>));</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 思维 </category>
            
            <category> 贪心 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 贪心 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDU 5301	Buildings（思维）]]></title>
      <url>/2016/03/18/HDU%205301%20Buildings%EF%BC%88%E6%80%9D%E7%BB%B4%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$给定N, M\le 10^8的矩形，其中有1个1*1的格子坏掉了$<br>$现要把矩形切成多个小矩形，使得所有的小矩形都与原矩形边界相连$<br>$并最小化最大的小矩形面积，求这个面积$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$可以发现，如果没有坏掉的格子，答案是中心点距离边界的最短距离$<br>$不管中心点是1个、2个还是4个，我们总可以根据对称性发现中心点们的答案都是一样的$<br>$所以中心点选一个就可以了$<br>$问题来了，现在有坏掉的格子，有可能使得答案变大，所以坏掉的格子周围四个点也要考虑$<br>$如果坏掉的格子占据了中心点呢$<br>$无所谓，中心点的四邻点必然还有一个中心点$<br>$(1个中心点的除外，考虑它的四邻点，但是我们已经考虑过啦，因为它也是坏掉的点嘛)$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-03-17</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:1024000000,1024000000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m, x0, y0;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(x == x0 &amp;&amp; y == y0) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> u = x, d = n - x + <span class="number">1</span>, l = y, r = m - y + <span class="number">1</span>;</div><div class="line">    <span class="comment">//cross the obstacle</span></div><div class="line">    <span class="keyword">if</span>(x == x0) &#123;</div><div class="line">        <span class="keyword">if</span>(y &gt; y0) l = INF;</div><div class="line">        <span class="keyword">else</span> r = INF;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(y == y0) &#123;</div><div class="line">        <span class="keyword">if</span>(x &gt; x0) u = INF;</div><div class="line">        <span class="keyword">else</span> d = INF;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> min(min(u, d), min(l, r));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;n, &amp;m, &amp;x0, &amp;y0) == <span class="number">4</span>) &#123;</div><div class="line">        <span class="comment">//just one center, because of symmetric</span></div><div class="line">        <span class="keyword">int</span> ans = get(n + <span class="number">1</span> &gt;&gt; <span class="number">1</span>, m + <span class="number">1</span> &gt;&gt; <span class="number">1</span>);</div><div class="line"></div><div class="line">        <span class="comment">//even if the obstacle occupying the center, but we still ensure the answer</span></div><div class="line">        <span class="comment">//since iterating the 4 directions, one center must be included</span></div><div class="line">        <span class="keyword">int</span> d[][<span class="number">2</span>] = &#123; <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>&#125;;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</div><div class="line">            <span class="keyword">int</span> x = x0 + d[i][<span class="number">0</span>], y = y0 + d[i][<span class="number">1</span>];</div><div class="line">            <span class="keyword">if</span>(x &lt; <span class="number">1</span> || x &gt; n || y &lt; <span class="number">1</span> || y &gt; m) <span class="keyword">continue</span>;</div><div class="line">            ans = max(ans, get(x, y));</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 思维 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Hihocoder 1273 清理海报（判断矩形相交）]]></title>
      <url>/2016/03/13/Hihocoder%201273%20%E6%B8%85%E7%90%86%E6%B5%B7%E6%8A%A5%EF%BC%88%E5%88%A4%E6%96%AD%E7%9F%A9%E5%BD%A2%E7%9B%B8%E4%BA%A4%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>中文题意</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$如果i可以被j覆盖就从i向j连一条边，判断矩形相交看代码吧$<br>$覆盖的情况可以状压矩形的四个角，判断能不能撕开$<br>$时间复杂度O(n^2)$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-03-13</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:1024000000,1024000000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e3</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> y1 asdasdasd</span></div><div class="line"></div><div class="line"><span class="keyword">int</span> w, h, n;</div><div class="line"><span class="keyword">int</span> x1[N], y1[N], x2[N], y2[N];</div><div class="line"><span class="keyword">bool</span> vis[N];</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">intersect</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> minx = max(x1[i], x1[j]);</div><div class="line">    <span class="keyword">int</span> maxx = min(x2[i], x2[j]);</div><div class="line">    <span class="keyword">int</span> miny = max(y1[i], y1[j]);</div><div class="line">    <span class="keyword">int</span> maxy = min(y2[i], y2[j]);</div><div class="line">    <span class="keyword">if</span>(minx &gt;= maxx || miny &gt;= maxy) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">inside</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> x &gt; x1[i] &amp;&amp; x &lt; x2[i] &amp;&amp; y &gt; y1[i] &amp;&amp; y &lt; y2[i];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//i被j包含</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">cover</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span>(inside(x1[i], y1[i], j)) ret |= <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span>(inside(x1[i], y2[i], j)) ret |= <span class="number">2</span>;</div><div class="line">    <span class="keyword">if</span>(inside(x2[i], y2[i], j)) ret |= <span class="number">4</span>;</div><div class="line">    <span class="keyword">if</span>(inside(x2[i], y1[i], j)) ret |= <span class="number">8</span>;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> st, <span class="keyword">int</span> u, <span class="keyword">int</span>&amp; sta)</span> </span>&#123;</div><div class="line">    vis[u] = <span class="literal">true</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v : G[u]) &#123;</div><div class="line">        <span class="keyword">if</span>(vis[v]) <span class="keyword">continue</span>;</div><div class="line">        sta |= cover(st, v);</div><div class="line">        dfs(st, v, sta);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;w, &amp;h, &amp;n);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, x1 + i, y1 + i, x2 + i, y2 + i);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n; ++j)</div><div class="line">            <span class="keyword">if</span>(intersect(i, j)) G[i].push_back(j);</div><div class="line">    &#125;</div><div class="line"><span class="comment">//    for(int i = 1; i &lt;= n; ++i)&#123;</span></div><div class="line"><span class="comment">//      printf("%d: ", i);</span></div><div class="line"><span class="comment">//      for(int v : G[i]) printf("%d ", v); puts("");</span></div><div class="line"><span class="comment">//    &#125;</span></div><div class="line">    pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; ans = make_pair(<span class="number">0</span>, <span class="number">0</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">        <span class="built_in">memset</span>(vis, <span class="literal">false</span>, <span class="keyword">sizeof</span> vis);</div><div class="line">        <span class="keyword">int</span> sta = <span class="number">0</span>;</div><div class="line">        dfs(i, i, sta);</div><div class="line">        <span class="keyword">if</span>(sta == <span class="number">15</span>) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) cnt += vis[j];</div><div class="line">        <span class="keyword">if</span>(cnt &gt; ans.first) ans = make_pair(cnt, i);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, ans.first, ans.second);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 计算几何 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 判断矩形相交 </tag>
            
            <tag> 状压 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hihocoder 1272 买零食（签到）]]></title>
      <url>/2016/03/13/Hihocoder%201272%20%E4%B9%B0%E9%9B%B6%E9%A3%9F%EF%BC%88%E7%AD%BE%E5%88%B0%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>中文题意</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$忘记double可以+0.5了，sb了手动解析浮点数$<br>$数据很小直接暴力C_n^1，C_n^2，C_n^3，更新答案就可以了$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-03-13</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:1024000000,1024000000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="keyword">int</span> a[<span class="number">55</span>], b[<span class="number">55</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">while</span>(t--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">            <span class="keyword">char</span> s[<span class="number">100</span>];  <span class="built_in">scanf</span>(<span class="string">"%s%d"</span>, s, b + i);</div><div class="line">            <span class="keyword">bool</span> have = <span class="number">0</span>; <span class="keyword">int</span> x = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; s[j]; ++j) &#123;</div><div class="line">                <span class="keyword">if</span>(s[j] == <span class="string">'.'</span>) &#123;</div><div class="line">                    have = <span class="literal">true</span>;</div><div class="line">                    <span class="keyword">if</span>(s[j + <span class="number">1</span>]) x = x * <span class="number">10</span> + s[j + <span class="number">1</span>] - <span class="string">'0'</span>;</div><div class="line">                    <span class="keyword">else</span> x = x * <span class="number">10</span>;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">                x = x * <span class="number">10</span> + s[j] - <span class="string">'0'</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(!have) x = x * <span class="number">10</span>;</div><div class="line">            a[i] = x;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</div><div class="line">            <span class="keyword">if</span>(a[i] % <span class="number">50</span> == <span class="number">0</span>) ans = max(ans, b[i]);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n; ++j)</div><div class="line">                <span class="keyword">if</span>((a[i] + a[j]) % <span class="number">50</span> == <span class="number">0</span>) ans = max(ans, b[i] + b[j]);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n; ++j)</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = j + <span class="number">1</span>; k &lt;= n; ++k)</div><div class="line">                    <span class="keyword">if</span>((a[i] + a[j] + a[k]) % <span class="number">50</span> == <span class="number">0</span>)</div><div class="line">                        ans = max(ans, b[i] + b[j] + b[k]);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 暴力 </category>
            
            <category> 签到 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World —— 博客搭建历程]]></title>
      <url>/2016/03/09/Hello%20World%20%E2%80%94%E2%80%94%20%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%8E%86%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p><del>Updating</del></p>
<h2 id="搭建博客"><a href="#搭建博客" class="headerlink" title="搭建博客"></a>搭建博客</h2><p>使用<code>hexo</code>生成静态博客并架设在免费的<code>github pages</code>平台<br>详情看这篇博客，<a href="http://hifor.net/2015/07/01/%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-hexo-github/" target="_blank" rel="external">零基础免费搭建个人博客-hexo+github</a></p>
<a id="more"></a>
<h2 id="主题选择"><a href="#主题选择" class="headerlink" title="主题选择"></a>主题选择</h2><p>搞了半天，研究了<code>jacman，next，...</code>，最后发现还是自带的<code>landscape</code>挺好的，然后就用了<code>landscape-plus</code><br>准备在此基础上改改，借鉴了<a href="http://shijiajie.com/2015/08/29/hexo-theme-landscape-plus-optimize/" target="_blank" rel="external">这个人</a>的修改姿势，并自己添加了一些东西</p>
<ul>
<li><p>修改归档挂件的时间格式：（左边为原图，右边为效果图）<br><img src="http://7xru22.com1.z0.glb.clouddn.com/16-3-14/80562236.jpg" alt=""></p>
<ul>
<li>路径: <code>\themes\landscape-plus\layout\_widget\archive.ejs</code> 第<code>5</code>行<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;%- list_archives(&#123;format: &apos;YYYY年 MM月&apos;&#125;) %&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li><p>修改归档页面的时间格式：（左边为原图，右边为效果图）<br><img src="http://7xru22.com1.z0.glb.clouddn.com/16-3-14/97283281.jpg" alt=""></p>
<ul>
<li>路径：<code>\themes\landscape-plus\layout\_partial\archive-post.ejs</code> 第<code>4</code>行<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;%- partial(&apos;post/date&apos;, &#123;class_name: &apos;archive-article-date&apos;, date_format: &apos;MM-DD&apos;&#125;) %&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li><p>添加新挂件，推荐文章：<br><img src="http://7xru22.com1.z0.glb.clouddn.com/16-3-14/51498733.jpg" alt=""></p>
<ul>
<li>路径：<code>\themes\landscape-plus\layout\_widget\archive\recent_comments.ejs</code> 新文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&lt;% if (site.posts.length)&#123; %&gt;</div><div class="line">  &lt;div class=&quot;widget-wrap&quot;&gt;</div><div class="line">    &lt;h3 class=&quot;widget-title&quot;&gt;&lt;%= __(&apos;recent_comments&apos;) %&gt;&lt;/h3&gt;</div><div class="line">    &lt;div class=&quot;widget&quot;&gt;</div><div class="line">      &lt;!-- 多说最新评论 start --&gt;</div><div class="line">      &lt;div class=&quot;ds-recent-comments&quot; data-num-items=&quot;5&quot; data-show-avatars=&quot;0&quot; data-show-time=&quot;1&quot; data-show-title=&quot;1&quot; data-show-admin=&quot;1&quot; data-excerpt-length=&quot;70&quot;&gt;&lt;/div&gt;</div><div class="line">      &lt;!-- 多说最新评论 end --&gt;</div><div class="line">      &lt;!-- 多说公共JS代码 start (一个网页只需插入一次) --&gt;</div><div class="line">      &lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">        var duoshuoQuery = &#123;short_name:&quot;Taos&quot;&#125;;</div><div class="line">        (function() &#123;</div><div class="line">          var ds = document.createElement(&apos;script&apos;);</div><div class="line">          ds.type = &apos;text/javascript&apos;;ds.async = true;</div><div class="line">          ds.src = (document.location.protocol == &apos;https:&apos; ? &apos;https:&apos; : &apos;http:&apos;) + &apos;//static.duoshuo.com/embed.js&apos;;</div><div class="line">          ds.charset = &apos;UTF-8&apos;;</div><div class="line">          (document.getElementsByTagName(&apos;head&apos;)[0] || document.getElementsByTagName(&apos;body&apos;)[0]).appendChild(ds);</div><div class="line">        &#125;)();</div><div class="line">      &lt;/script&gt;</div><div class="line">      &lt;!-- 多说公共JS代码 end --&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;% &#125; %&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li><p>添加新挂件，最近评论：<br><img src="http://7xru22.com1.z0.glb.clouddn.com/16-3-14/28683113.jpg" alt=""></p>
<ul>
<li><p>路径：<code>\themes\landscape-plus\layout\_widget\archive\recent_comments.ejs</code> 新文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&lt;% if (site.posts.length)&#123; %&gt;</div><div class="line">  &lt;div class=&quot;widget-wrap&quot;&gt;</div><div class="line">    &lt;h3 class=&quot;widget-title&quot;&gt;&lt;%= __(&apos;recent_comments&apos;) %&gt;&lt;/h3&gt;</div><div class="line">    &lt;div class=&quot;widget&quot;&gt;</div><div class="line">      &lt;!-- 多说最新评论 start --&gt;</div><div class="line">      &lt;div class=&quot;ds-recent-comments&quot; data-num-items=&quot;5&quot; data-show-avatars=&quot;0&quot; data-show-time=&quot;1&quot; data-show-title=&quot;1&quot; data-show-admin=&quot;1&quot; data-excerpt-length=&quot;70&quot;&gt;&lt;/div&gt;</div><div class="line">      &lt;!-- 多说最新评论 end --&gt;</div><div class="line">      &lt;!-- 多说公共JS代码 start (一个网页只需插入一次) --&gt;</div><div class="line">      &lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">        var duoshuoQuery = &#123;short_name:&quot;Taos&quot;&#125;;</div><div class="line">        (function() &#123;</div><div class="line">          var ds = document.createElement(&apos;script&apos;);</div><div class="line">          ds.type = &apos;text/javascript&apos;;ds.async = true;</div><div class="line">          ds.src = (document.location.protocol == &apos;https:&apos; ? &apos;https:&apos; : &apos;http:&apos;) + &apos;//static.duoshuo.com/embed.js&apos;;</div><div class="line">          ds.charset = &apos;UTF-8&apos;;</div><div class="line">          (document.getElementsByTagName(&apos;head&apos;)[0] || document.getElementsByTagName(&apos;body&apos;)[0]).appendChild(ds);</div><div class="line">        &#125;)();</div><div class="line">      &lt;/script&gt;</div><div class="line">      &lt;!-- 多说公共JS代码 end --&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;% &#125; %&gt;</div></pre></td></tr></table></figure>
</li>
<li><p><a>添加最近评论挂件样式表</a><br>路径：<code>\themes\landscape-plus\source\css\_partial\sidebar-aside.styl</code> 末尾添加</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.ds-recent-comments</div><div class="line">  margin: -16px 0 0 0</div><div class="line">  a</div><div class="line">    color: color-link</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li><p>文章结尾增加声明文字：<br><img src="http://7xru22.com1.z0.glb.clouddn.com/16-3-14/82348825.jpg" alt=""></p>
<ul>
<li><p>路径：<code>\themes\landscape-plus\layout\_partial\post\statement.ejs</code> 新文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;% if (!index &amp;&amp; page.source != &apos;about/index.md&apos;)&#123; %&gt;</div><div class="line">  &lt;div class=&quot;article-statement&quot;&gt;</div><div class="line">    &lt;hr&gt; </div><div class="line"> &lt;!-- 内容 --&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;% &#125; %&gt;</div></pre></td></tr></table></figure>
</li>
<li><p><a>添加声明文字样式表</a><br>路径：<code>\themes\landscape-plus\source\css\_partial\sidebar.styl</code> 末尾添加</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">.article-statement</div><div class="line">  font-size: 0.85em;</div><div class="line">  line-height: 1.6em;</div><div class="line">  margin: 0.5em 0;</div><div class="line">  text-shadow: 0 1px #fff;</div><div class="line">  color: #999;</div><div class="line">  a</div><div class="line">    &amp;:hover</div><div class="line">      text-decoration: none;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li><p>页脚中添加访问统计、为超链接添加target=”_blank”属性：<br><img src="http://7xru22.com1.z0.glb.clouddn.com/16-3-14/55063221.jpg" alt=""></p>
<ul>
<li>路径：<code>\themes\landscape-plus-bak\layout\_partial\footer.ejs</code> 修改为<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">&lt;footer id=&quot;footer&quot;&gt;</div><div class="line">  &lt;script async src=&quot;https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt; &lt;/script&gt;</div><div class="line">  &lt;% if (theme.sidebar === &apos;bottom&apos;)&#123; %&gt;</div><div class="line">    &lt;%- partial(&apos;_partial/sidebar&apos;) %&gt;</div><div class="line">  &lt;% &#125; %&gt;</div><div class="line">  &lt;div class=&quot;outer&quot;&gt;</div><div class="line">    &lt;div id=&quot;footer-info&quot; class=&quot;inner&quot; align = &quot;center&quot;&gt;</div><div class="line">      Copyright &amp;copy; &lt;%= date(new Date(), &apos;YYYY&apos;) %&gt; </div><div class="line">	  &lt;a href=&quot;/&quot; target=&quot;_blank&quot;&gt; &lt;%= config.author || config.title %&gt; &lt;/a&gt; &lt;br&gt;</div><div class="line">      Powered by &lt;a href=&quot;https://hexo.io/zh-cn/docs/index.html&quot; target=&quot;_blank&quot;&gt;Hexo&lt;/a&gt;</div><div class="line">	  &amp;nbsp;|&amp;nbsp;</div><div class="line">      Theme by &lt;a href=&quot;https://github.com/xiangming/landscape-plus&quot; target=&quot;_blank&quot;&gt;landscape-plus&lt;/a&gt;</div><div class="line">	  &amp;nbsp;|&amp;nbsp;</div><div class="line">	  &lt;span id=&quot;busuanzi_container_site_pv&quot;&gt;</div><div class="line">        总访问量 &lt;a href=&quot;http://service.ibruce.info/&quot; target=&quot;_blank&quot;&gt;&lt;span id=&quot;busuanzi_value_site_pv&quot;&gt;&lt;/span&gt;&lt;/a&gt; 次</div><div class="line">      &lt;/span&gt;</div><div class="line">      &lt;span id=&quot;busuanzi_container_site_uv&quot;&gt;</div><div class="line">        &lt;a href=&quot;http://service.ibruce.info/&quot; target=&quot;_blank&quot;&gt;&lt;span id=&quot;busuanzi_value_site_uv&quot;&gt;&lt;/span&gt;&lt;/a&gt; 人</div><div class="line">      &lt;/span&gt;  </div><div class="line">    &lt;/div&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">    &lt;!-- 为超链接加上target=&apos;_blank&apos;属性 --&gt;</div><div class="line">	&lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">		$(document).ready(function() &#123;</div><div class="line">			$(&apos;a[href^=&quot;http&quot;]&apos;).each(function() &#123;</div><div class="line">			$(this).attr(&apos;target&apos;, &apos;_blank&apos;);</div><div class="line">		&#125;);</div><div class="line">	&#125;);</div><div class="line">	&lt;/script&gt;</div><div class="line">&lt;/footer&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li><p>文章添加生成目录开关<br><img src="http://7xru22.com1.z0.glb.clouddn.com/16-3-14/29113644.jpg" alt=""></p>
<ul>
<li><p>路径：<code>\themes\landscape-plus\layout\_partial\article.ejs</code> 搜索<code>&lt;%- post.content %&gt;</code>前面添加</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;!-- Table of Contents --&gt;</div><div class="line">&lt;% if (!index &amp;&amp; post.toc)&#123; %&gt;</div><div class="line">  &lt;div id=&quot;toc&quot; class=&quot;toc-article&quot;&gt;</div><div class="line">    &lt;strong class=&quot;toc-title&quot;&gt;Contents&lt;/strong&gt;</div><div class="line">    &lt;%- toc(post.content) %&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;% &#125; %&gt;</div></pre></td></tr></table></figure>
</li>
<li><p><a>添加目录样式表</a><br>路径：<code>\themes\landscape-plus\source\css\_partial\article.styl</code> 末尾添加</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">.toc-article</div><div class="line">  background #eee</div><div class="line">  border 1px solid #bbb</div><div class="line">  border-radius 10px</div><div class="line">  margin 1.5em 0 0.3em 1.5em</div><div class="line">  padding 1.2em 1em 0 1em</div><div class="line">  max-width 28%</div><div class="line">.toc-title</div><div class="line">  font-size 120%</div><div class="line">#toc</div><div class="line">  line-height 1em</div><div class="line">  font-size 0.9em</div><div class="line">  float right</div><div class="line">  .toc</div><div class="line">    padding 0</div><div class="line">    margin 1em</div><div class="line">    line-height 1.8em</div><div class="line">    li</div><div class="line">      list-style-type none</div><div class="line">  .toc-child </div><div class="line">    margin-left 1em</div></pre></td></tr></table></figure>
</li>
<li><p><a>启用目录</a><br>在需要添加文章目录的的博文<code>md</code>文件中添加开关<code>toc: true</code><br>如果不喜欢链接的颜色，可以编辑<code>\themes\landscape-plus\source\css\_variables.styl</code> 第<code>6</code>行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">color-link = #E32D40</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>文章标题添加一条灰色分割线<br><img src="http://7xru22.com1.z0.glb.clouddn.com/16-3-14/4653222.jpg" alt=""></p>
<ul>
<li>路径：<code>\themes\landscape-plus\source\css\_partial\article.styl</code> 第<code>26</code>行<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.article-header</div><div class="line"> padding: article-padding</div><div class="line"> border-bottom: 2px solid color-border</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h2 id="问题处理"><a href="#问题处理" class="headerlink" title="问题处理"></a>问题处理</h2><ul>
<li><p>Marked渲染markdown与Mathjax渲染latex冲突<br>路径：<code>\node_modules\marked\lib\marked.js</code></p>
<ul>
<li><p>第<code>451</code>行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">escape: /^\\([\\`*&#123;&#125;\[\]()# +\-.!_&gt;])/,</div><div class="line">修改为：</div><div class="line">escape: /^\\([`*\[\]()# +\-.!_&gt;])/,</div></pre></td></tr></table></figure>
</li>
<li><p>第<code>854</code>行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">return &apos;&lt;em&gt;&apos; + text + &apos;&lt;/em&gt;&apos;;</div><div class="line">修改为：</div><div class="line">return &apos;_&apos; + text + &apos;_&apos;;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>图床和云空间选择<br><a href="http://yotuku.cn/#!/" target="_blank" rel="external">极简图床</a>配合<a href="http://www.qiniu.com" target="_blank" rel="external">七牛云</a>,感觉挺棒的</p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Doing </category>
            
            <category> Blog </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Codeforces Round 345 (Div. 2) E. Table Compression（拓扑排序）]]></title>
      <url>/2016/03/08/Codeforces%20Round%20345%20(Div.%202)%20E.%20Table%20Compression%EF%BC%88%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$n*m \le 10^6的矩阵，现在要压缩矩阵里的数字的大小，使得最大的数字尽量小$<br>$压缩的要求是，保证每行或者每列的相对数字大小不变，并且每行或者每列的相等的数字压缩后还相等$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$大小关系是一种拓扑关系，所以我们可以建图拓扑排序$<br>$由于每行或者每列的相等数字大小不变，所以先把它们用并查集缩点$<br>$如果暴力向比它大的数字连边的话，边数将是n^3级别的，会爆炸$<br>$考虑拓扑关系具有传递性，只需要向第一个比它大的连边即可，这样边数就是n^2级别了$<br>$我们只要将每行或者每列排序，二分查找这个数就可以了$<br>$时间复杂度O(nmlognm)$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-03-08</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:1024000000,1024000000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DSU</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> n, p[N];</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> _n)</span> </span>&#123;</div><div class="line">        n = _n;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) p[i] = i;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> p[x] = p[x] == x ? x : find(p[x]);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">unite</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">        x = find(x), y = find(y);</div><div class="line">        <span class="keyword">if</span>(x == y) <span class="keyword">return</span>;</div><div class="line">        p[x] = y;</div><div class="line">    &#125;</div><div class="line">&#125; dsu;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; P;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="built_in">vector</span>&lt;P&gt;&amp; tmp)</span> </span>&#123;</div><div class="line">    sort(tmp.begin(), tmp.end());</div><div class="line">    <span class="keyword">int</span> sz = tmp.size();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; sz; ++j) &#123;</div><div class="line">        <span class="keyword">int</span> p = j;</div><div class="line">        <span class="keyword">while</span>(j + <span class="number">1</span> &lt; sz &amp;&amp; tmp[j + <span class="number">1</span>].first == tmp[p].first) &#123;</div><div class="line">            dsu.unite(tmp[j + <span class="number">1</span>].second, tmp[p].second);</div><div class="line">            ++j;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;P&gt; &gt;  a(n, <span class="built_in">vector</span>&lt;P&gt;(m)), b(m, <span class="built_in">vector</span>&lt;P&gt;(n));</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j) &#123;</div><div class="line">            <span class="keyword">int</span> x; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line">            a[i][j] = &#123;x, i * m + j&#125;;</div><div class="line">            b[j][i] = &#123;x, i * m + j&#125;;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    dsu.init(n * m);</div><div class="line">    <span class="comment">//merge row equal values</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) merge(a[i]);</div><div class="line">    <span class="comment">//merge column equal values</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) merge(b[i]);</div><div class="line"></div><div class="line">    <span class="comment">//new graph</span></div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; in(n * m, <span class="number">0</span>);</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; g(n * m);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;P&gt;&amp; cur = a[i];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j) &#123;</div><div class="line">            <span class="keyword">auto</span> iter = upper_bound(cur.begin(), cur.end(), P(cur[j].first, INF));</div><div class="line">            <span class="keyword">if</span>(iter == cur.end()) <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">int</span> u = dsu.find(cur[j].second), v = dsu.find(iter-&gt;second);</div><div class="line">            g[u].push_back(v); ++in[v];</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> p = j; j &lt; m &amp;&amp; cur[j + <span class="number">1</span>].first == cur[p].first; ++j);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;P&gt;&amp; cur = b[i];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</div><div class="line">            <span class="keyword">auto</span> iter = upper_bound(cur.begin(), cur.end(), P(cur[j].first, INF));</div><div class="line">            <span class="keyword">if</span>(iter == cur.end()) <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">int</span> u = dsu.find(cur[j].second), v = dsu.find(iter-&gt;second);</div><div class="line">            g[u].push_back(v); ++in[v];</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> p = j; j &lt; n &amp;&amp; cur[j + <span class="number">1</span>].first == cur[p].first; ++j);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans(n * m, <span class="number">0</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n * m; ++i) &#123;</div><div class="line">        <span class="keyword">if</span>(in[i]) <span class="keyword">continue</span>;</div><div class="line">        q.push(i);</div><div class="line">        ans[i] = <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span>(q.size()) &#123;</div><div class="line">        <span class="keyword">int</span> u = q.front(); q.pop();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> v : g[u]) &#123;</div><div class="line">            ans[v] = max(ans[v], ans[u] + <span class="number">1</span>);</div><div class="line">            <span class="keyword">if</span>(--in[v] == <span class="number">0</span>) q.push(v);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j)</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d%c"</span>, ans[dsu.find(i * m + j)], <span class="string">" \n"</span>[j == m - <span class="number">1</span>]);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 图论 </category>
            
            <category> 拓扑排序 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 拓扑排序 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Codeforces Round 345 (Div. 2) D. Image Preview（二分搜索）]]></title>
      <url>/2016/03/08/Codeforces%20Round%20345%20(Div.%202)%20D.%20Image%20Preview%EF%BC%88%E4%BA%8C%E5%88%86%E6%90%9C%E7%B4%A2%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$n\le 5\times 10^5手机图片，每种图片可能是h的也可能是w的，w要观看的话就要有旋转花费b$<br>$观看一张图片需要1单位时间，手机图片显示是个环，滑动切换的花费是a$<br>$初始在第一张图片，切换到的图片必须要观看$<br>$给定T\le 10^9时间，问最多能看多少图片$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$特判第一张图片，预处理出前缀观看时间，和后缀观看时间$<br>$向右枚举一次，然后二分倒着能看多少，两者加起来，同理向左枚举，二分顺着能看多少$<br>$注意细节和边界$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-03-07</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:1024000000,1024000000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, a, b, T;</div><div class="line"><span class="keyword">int</span> pre[N], suf[N];</div><div class="line"><span class="keyword">char</span> s[N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;n, &amp;a, &amp;b, &amp;T) == <span class="number">4</span>) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s + <span class="number">1</span>);</div><div class="line">        pre[<span class="number">1</span>] = suf[n + <span class="number">1</span>] = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i)</div><div class="line">            pre[i] = pre[i - <span class="number">1</span>] + a + (s[i] == <span class="string">'w'</span> ? b : <span class="number">0</span>) + <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = n; i; --i)</div><div class="line">            suf[i] = suf[i + <span class="number">1</span>] + a + (s[i] == <span class="string">'w'</span> ? b : <span class="number">0</span>) + <span class="number">1</span>;</div><div class="line">        reverse(suf + <span class="number">1</span>, suf + <span class="number">1</span> + n);</div><div class="line"></div><div class="line">        <span class="keyword">int</span> first = (s[<span class="number">1</span>] == <span class="string">'w'</span> ? b : <span class="number">0</span>) + <span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> ans = first &lt;= T;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</div><div class="line">            <span class="keyword">if</span>(pre[i] + first &gt; T) <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">int</span> leave = T - pre[i] - first - (i - <span class="number">1</span>) * a;</div><div class="line">            <span class="keyword">int</span> can = upper_bound(suf + <span class="number">1</span>, suf + <span class="number">1</span> + n, leave) - suf - <span class="number">1</span>;</div><div class="line">            ans = max(ans, i + can);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">            <span class="keyword">if</span>(suf[i] + first &gt; T) <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">int</span> leave = T - suf[i] - first - i * a;</div><div class="line">            <span class="keyword">int</span> can = upper_bound(pre + <span class="number">2</span>, pre + <span class="number">1</span> + n, leave) - pre - <span class="number">2</span>;</div><div class="line">            ans = max(ans, i + can + <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        ans = min(ans, n);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 暴力 </category>
            
            <category> 搜索 </category>
            
            <category> 二/三分搜索 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 二分搜索 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDU 4609 3-idiots（FFT）]]></title>
      <url>/2016/03/07/HDU%204609%203-idiots%EF%BC%88FFT%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>$n\le 10^5条线段，每条长度A_i \le 10^5，问随机取3个，可以组成三角形的概率$</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>$cnt_i:=长度为i的线段有几个，然后卷积一下就是2个线段之和为i的方法数有多少$<br>$之后枚举最长边，累加答案就好了$<br>$要减去一些不符合的，首先自己+自己的减去，还要除2，去掉重复的$<br>$枚举的是最长边，所以累加答案的时候要减掉一些非法的情况$</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-03-07</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:1024000000,1024000000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;complex&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">4e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">complex</span>&lt;<span class="keyword">double</span>&gt; Complex;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">rader</span><span class="params">(Complex *y, <span class="keyword">int</span> len)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>, j = len / <span class="number">2</span>; i &lt; len - <span class="number">1</span>; i++) &#123;</div><div class="line">        <span class="keyword">if</span>(i &lt; j) swap(y[i], y[j]);</div><div class="line">        <span class="keyword">int</span> k = len / <span class="number">2</span>;</div><div class="line">        <span class="keyword">while</span>(j &gt;= k) &#123;j -= k; k /= <span class="number">2</span>;&#125;</div><div class="line">        <span class="keyword">if</span>(j &lt; k) j += k;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">fft</span><span class="params">(Complex *y, <span class="keyword">int</span> len, <span class="keyword">int</span> op)</span> </span>&#123;</div><div class="line">    rader(y, len);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> h = <span class="number">2</span>; h &lt;= len; h &lt;&lt;= <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">double</span> ang = op * <span class="number">2</span> * PI / h;</div><div class="line">        Complex wn(cos(ang), sin(ang));</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len; j += h) &#123;</div><div class="line">            <span class="function">Complex <span class="title">w</span><span class="params">(<span class="number">1</span>, <span class="number">0</span>)</span></span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = j; k &lt; j + h / <span class="number">2</span>; k++) &#123;</div><div class="line">                Complex u = y[k];</div><div class="line">                Complex t = w * y[k + h / <span class="number">2</span>];</div><div class="line">                y[k] = u + t;</div><div class="line">                y[k + h / <span class="number">2</span>] = u - t;</div><div class="line">                w = w * wn;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(op == <span class="number">-1</span>) <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) y[i] /= len;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Complex A[N];</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">int</span> n, a[N];</div><div class="line">LL cnt[N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">while</span>(t--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">        <span class="built_in">memset</span>(cnt, <span class="number">0</span>, <span class="keyword">sizeof</span> cnt);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a + i);</div><div class="line">            ++cnt[a[i]];</div><div class="line">        &#125;</div><div class="line">        sort(a + <span class="number">1</span>, a + <span class="number">1</span> + n);</div><div class="line"></div><div class="line">        <span class="keyword">int</span> len = <span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span>(len &lt;= a[n] &lt;&lt; <span class="number">1</span>) len &lt;&lt;= <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) A[i] = Complex(cnt[i], <span class="number">0</span>);</div><div class="line">        fft(A, len, <span class="number">1</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) A[i] *= A[i];</div><div class="line">        fft(A, len, <span class="number">-1</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) cnt[i] = A[i].real() + <span class="number">0.5</span>;</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) --cnt[a[i] &lt;&lt; <span class="number">1</span>];</div><div class="line">        len = a[n] &lt;&lt; <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len; ++i) cnt[i] &gt;&gt;= <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len; ++i) cnt[i] += cnt[i - <span class="number">1</span>];</div><div class="line"></div><div class="line">        LL sum = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">            sum += cnt[len] - cnt[a[i]];</div><div class="line">            sum -= n - <span class="number">1</span>; <span class="comment">//&#123;self, other&#125; &gt; self</span></div><div class="line">            sum -= <span class="number">1L</span>L * (i - <span class="number">1</span>) * (n - i); <span class="comment">// &#123;small, large&#125; &gt; self</span></div><div class="line">            sum -= <span class="number">1L</span>L * (n - i) * (n - i - <span class="number">1</span>) / <span class="number">2</span>; <span class="comment">//&#123;large, large&#125; &gt; self;</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">double</span> ans = <span class="number">1.</span> * sum / (<span class="number">1.</span> * n * (n - <span class="number">1</span>) * (n - <span class="number">2</span>) / <span class="number">6</span>);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%.7f\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 数学 </category>
            
            <category> FFT/NTT/FWT </category>
            
        </categories>
        
        
        <tags>
            
            <tag> FFT </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Educational Codeforces Round 9 F. Magic Matrix（离线暴力、bitset）]]></title>
      <url>/2016/03/07/Educational%20Codeforces%20Round%209%20F.%20Magic%20Matrix%EF%BC%88%E7%A6%BB%E7%BA%BF%E6%9A%B4%E5%8A%9B%E3%80%81bitset%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意:</p>
<blockquote>
<p>$给你一个n*n, n\le 2500的矩阵，判断这个矩阵是不是魔力矩阵$<br>$魔力矩阵的定义为：$<br>$1.对角线都为0$<br>$2.矩阵对称, 即a_{ij}=a_{ji}$<br>$3.对于任意一个格子(i,j)满足,\forall k，a[i][j]\le max(a[i][k],a[j][k])$</p>
</blockquote>
<a id="more"></a>
<p>分析:</p>
<blockquote>
<p>$bitset[i]:=维护i行比当前这个数小的列的状态$<br>$把矩阵所有元素对于值进行排序, 然后对于当前这个a_{ij}询问, 添加进去所有比它小的值到bitset中$<br>$回答询问的时候只要看, bitset[i]和bitset[j]中有没有交集, 即存在一个k使得max(a[i][k],a[j][k])&lt;a[i][j]$<br>$对于1,2条件就很简单了$<br>$时间复杂度O(n^3/64),其实是水过了$</p>
</blockquote>
<p>代码:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-03-07</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:1024000000,1024000000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2500</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, a[N][N];</div><div class="line"><span class="built_in">bitset</span>&lt;N&gt; b[N];</div><div class="line">pair&lt;<span class="keyword">int</span>, pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; q[N * N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a[i] + j);</div><div class="line">            q[i * n + j] = &#123;a[i][j], &#123;i, j&#125;&#125;;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    sort(q, q + n * n);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j)</div><div class="line">            <span class="keyword">if</span>(i == j &amp;&amp; a[i][j] || a[i][j] != a[j][i])</div><div class="line">                <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"NOT MAGIC"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> idx = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n * n; ++i) &#123;</div><div class="line">        <span class="keyword">auto</span> wh = q[i].second;</div><div class="line">        <span class="keyword">int</span> x = wh.first, y = wh.second;</div><div class="line">        <span class="keyword">while</span>(q[idx].first &lt; a[x][y]) &#123;</div><div class="line">            wh = q[idx].second;</div><div class="line">            b[wh.first][wh.second] = <span class="number">1</span>;</div><div class="line">            ++idx;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>((b[x] &amp; b[y]).any()) <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"NOT MAGIC"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">puts</span>(<span class="string">"MAGIC"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 思维 </category>
            
            <category> 离线思想 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> bitset </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Educational Codeforces Round 9 E. Thief in a Shop（FFT）]]></title>
      <url>/2016/03/06/Educational%20Codeforces%20Round%209%20E.%20Thief%20in%20a%20Shop%EF%BC%88FFT%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意:</p>
<blockquote>
<p>$给定N,K\le 10^3,N种物品,价值A_i\le 10^3, 必须装K个物品的背包$<br>$求所有能装的价值，从小到大输出$</p>
</blockquote>
<a id="more"></a>
<p>分析:</p>
<blockquote>
<p>$其实就是长度为1000的物品价值向量的k次幂,存在该价值就为1否则为0$<br>$然后用fft求k次卷积就好了$<br>$用bool数组可以降低精度误差, 同时不要直接把fft的len设置成10^6， 可以优化下常数$<br>$时间复杂度是O(WlogWlogk), W=10^6$</p>
</blockquote>
<p>代码:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-03-06</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:1024000000,1024000000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;complex&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = (<span class="number">1</span> &lt;&lt; <span class="number">21</span>) + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">complex</span>&lt;<span class="keyword">double</span>&gt; Complex;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">rader</span><span class="params">(Complex *y, <span class="keyword">int</span> len)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>, j = len / <span class="number">2</span>; i &lt; len - <span class="number">1</span>; i++) &#123;</div><div class="line">        <span class="keyword">if</span>(i &lt; j) swap(y[i], y[j]);</div><div class="line">        <span class="keyword">int</span> k = len / <span class="number">2</span>;</div><div class="line">        <span class="keyword">while</span>(j &gt;= k) &#123;j -= k; k /= <span class="number">2</span>;&#125;</div><div class="line">        <span class="keyword">if</span>(j &lt; k) j += k;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">fft</span><span class="params">(Complex *y, <span class="keyword">int</span> len, <span class="keyword">int</span> op)</span> </span>&#123;</div><div class="line">    rader(y, len);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> h = <span class="number">2</span>; h &lt;= len; h &lt;&lt;= <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">double</span> ang = op * <span class="number">2</span> * PI / h;</div><div class="line">        Complex wn(cos(ang), sin(ang));</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len; j += h) &#123;</div><div class="line">            <span class="function">Complex <span class="title">w</span><span class="params">(<span class="number">1</span>, <span class="number">0</span>)</span></span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = j; k &lt; j + h / <span class="number">2</span>; k++) &#123;</div><div class="line">                Complex u = y[k];</div><div class="line">                Complex t = w * y[k + h / <span class="number">2</span>];</div><div class="line">                y[k] = u + t;</div><div class="line">                y[k + h / <span class="number">2</span>] = u - t;</div><div class="line">                w = w * wn;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(op == <span class="number">-1</span>) <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) y[i] /= len;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m, k;</div><div class="line">Complex A[N], B[N];</div><div class="line"><span class="keyword">bool</span> p[N], q[N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">multiply</span><span class="params">(<span class="keyword">bool</span> *p, <span class="keyword">int</span> &amp;n, <span class="keyword">bool</span> *q, <span class="keyword">int</span> m)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> len = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span>(len &lt;= n + m) len &lt;&lt;= <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) A[i] = Complex(i &lt;= n ? p[i] : <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) B[i] = Complex(i &lt;= m ? q[i] : <span class="number">0</span>, <span class="number">0</span>);</div><div class="line"></div><div class="line">    fft(A, len, <span class="number">1</span>);</div><div class="line">    fft(B, len, <span class="number">1</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) A[i] *= B[i];</div><div class="line">    fft(A, len, <span class="number">-1</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n + m; ++i) p[i] = A[i].real() &gt; <span class="number">0.5</span>;</div><div class="line">    n += m;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;k);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">        <span class="keyword">int</span> x; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line">        q[x] = <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    m = <span class="number">1000</span>;</div><div class="line">    n = <span class="number">0</span>; p[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span>(k) &#123;</div><div class="line">        <span class="keyword">if</span>(k &amp; <span class="number">1</span>) multiply(p, n, q, m);</div><div class="line">        <span class="keyword">if</span>(k &gt; <span class="number">1</span>) multiply(q, m, q, m);</div><div class="line">        k &gt;&gt;= <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="keyword">if</span>(p[i]) <span class="built_in">printf</span>(<span class="string">"%d "</span>, i); <span class="built_in">puts</span>(<span class="string">""</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 数学 </category>
            
            <category> FFT/NTT/FWT </category>
            
        </categories>
        
        
        <tags>
            
            <tag> FFT </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDU 4606 Occupy Cities （计算几何、最短路、最小路径覆盖）]]></title>
      <url>/2016/03/01/HDU%204606%20Occupy%20Cities%20%EF%BC%88%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95%E3%80%81%E6%9C%80%E7%9F%AD%E8%B7%AF%E3%80%81%E6%9C%80%E5%B0%8F%E8%B7%AF%E5%BE%84%E8%A6%86%E7%9B%96%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>题意：</p>
<blockquote>
<p>给出$n\le 100$个城市需要去占领，有$m\le 100$条线段是障碍物，有$p\le 100$个士兵可以用<br>占领城市有个先后顺序，每个士兵有个背包，占领城市之后，仅能补给一次背包<br>问背包容量最少是多少，可以用这$p$个士兵完成任务，起点任意</p>
</blockquote>
<a id="more"></a>
<p>分析：</p>
<blockquote>
<p>枚举城市以及障碍的顶点，需要特判是某个障碍的$2$个端点的情况，求一下距离，判断是否与线段相交<br>然后$floyd$预处理最短路<br>二分背包容量，根据占领的先后顺序建边，跑二分图最小路径覆盖判断是否$p$个士兵可以占领</p>
</blockquote>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-03-01</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:1024000000,1024000000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3e2</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> EPS = <span class="number">1e-8</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">sgn</span><span class="params">(<span class="keyword">double</span> x)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> x &lt; -EPS ? <span class="number">-1</span> : x &gt; EPS;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m, p, schedule[N];</div><div class="line"><span class="keyword">double</span> d[N][N];</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> &#123;</span></div><div class="line">    <span class="keyword">double</span> x, y;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">()</span> </span>&#123;<span class="built_in">scanf</span>(<span class="string">"%lf%lf"</span>, &amp;x, &amp;y);&#125;</div><div class="line">    Point <span class="keyword">operator</span>-(<span class="keyword">const</span> Point&amp; p) &#123;</div><div class="line">        <span class="keyword">return</span> &#123;x - p.x, y - p.y&#125;;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">double</span> <span class="keyword">operator</span>*(<span class="keyword">const</span> Point&amp; p) &#123;</div><div class="line">        <span class="keyword">return</span> x * p.x + y * p.y;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">double</span> <span class="keyword">operator</span>^(<span class="keyword">const</span> Point&amp; p) &#123;</div><div class="line">        <span class="keyword">return</span> x * p.y - y * p.x;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">double</span> <span class="title">length</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">sqrt</span>(*<span class="keyword">this</span> **<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">&#125; ps[N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">segmentProperIntersection</span><span class="params">(Point a1, Point a2, Point b1, Point b2)</span> </span>&#123;</div><div class="line">    <span class="keyword">double</span> c1 = (a2 - a1) ^ (b1 - a1), c2 = (a2 - a1) ^ (b2 - a1);</div><div class="line">    <span class="keyword">double</span> c3 = (b2 - b1) ^ (a1 - b1), c4 = (b2 - b1) ^ (a2 - b1);</div><div class="line">    <span class="keyword">return</span> sgn(c1) * sgn(c2) &lt; <span class="number">0</span> &amp;&amp; sgn(c3) * sgn(c4) &lt; <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">bool</span> vis[N];</div><div class="line"><span class="keyword">int</span> match[N];</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v : G[u]) &#123;</div><div class="line">        <span class="keyword">if</span>(vis[v]) <span class="keyword">continue</span>;</div><div class="line">        vis[v] = <span class="literal">true</span>;</div><div class="line">        <span class="keyword">if</span>(!match[v] || dfs(match[v])) &#123;</div><div class="line">            match[v] = u;</div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">double</span> x)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) G[i].clear();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">        <span class="keyword">int</span> u = schedule[i];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n; ++j) &#123;</div><div class="line">            <span class="keyword">int</span> v = schedule[j];</div><div class="line">            <span class="keyword">if</span>(sgn(x - d[u][v]) &gt;= <span class="number">0</span>) G[u].push_back(v);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> matches = <span class="number">0</span>;</div><div class="line">    <span class="built_in">memset</span>(match, <span class="number">0</span>, <span class="keyword">sizeof</span> match);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">        <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span> vis);</div><div class="line">        matches += dfs(i);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> n - matches &lt;= p;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">while</span>(t--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;m, &amp;p);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) ps[i].read();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</div><div class="line">            ps[n + i].read();</div><div class="line">            ps[n + m + i].read();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, schedule + i);</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n + <span class="number">2</span> * m; ++i)</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n + <span class="number">2</span> * m; ++j)</div><div class="line">                d[i][j] = i == j ? <span class="number">0</span> : <span class="number">1e18</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n + <span class="number">2</span> * m; ++i) &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n + <span class="number">2</span> * m; ++j) &#123;</div><div class="line">                <span class="keyword">if</span>(i &gt; n &amp;&amp; j - i == m) <span class="keyword">continue</span>; <span class="comment">//same barrier's two ends</span></div><div class="line">                <span class="keyword">bool</span> can = <span class="literal">true</span>;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= m; ++k) &#123;</div><div class="line">                    <span class="keyword">if</span>(segmentProperIntersection(ps[i], ps[j], ps[n + k], ps[n + m + k])) &#123;</div><div class="line">                        can = <span class="literal">false</span>;</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span>(can) d[i][j] = d[j][i] = (ps[i] - ps[j]).length();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//Floyd</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n + <span class="number">2</span> * m; ++k)</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n + <span class="number">2</span> * m; ++i)</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n + <span class="number">2</span> * m; ++j)</div><div class="line">                    d[i][j] = min(d[i][j], d[i][k] + d[k][j]);</div><div class="line"></div><div class="line">        <span class="keyword">double</span> l = <span class="number">0</span>, r = <span class="number">1e5</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; ++i) &#123;</div><div class="line">            <span class="keyword">double</span> m = (l + r) / <span class="number">2</span>;</div><div class="line">            <span class="keyword">if</span>(check(m)) r = m;</div><div class="line">            <span class="keyword">else</span> l = m;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%.2f\n"</span>, l);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 图论 </category>
            
            <category> 二分图 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 最小路径覆盖 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
