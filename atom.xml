<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>TaoSama&#39;s Blog</title>
  
  <subtitle>Reborn and Be Together</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://TaoSama.com/"/>
  <updated>2018-07-31T16:46:00.000Z</updated>
  <id>http://TaoSama.com/</id>
  
  <author>
    <name>TaoSama</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Notes, Spark SQL and DataFrames</title>
    <link href="http://TaoSama.com/2018-08-01/spark-sql-and-dataframes-notes/"/>
    <id>http://TaoSama.com/2018-08-01/spark-sql-and-dataframes-notes/</id>
    <published>2018-07-31T16:44:00.000Z</published>
    <updated>2018-07-31T16:46:00.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h3><p>One use of Spark SQL is to execute SQL queries. Spark SQL can also be used to read data from an existing Hive installation. </p><a id="more"></a><h3 id="Datasets-and-DataFrames"><a href="#Datasets-and-DataFrames" class="headerlink" title="Datasets and DataFrames"></a>Datasets and DataFrames</h3><p><strong>A Dataset is a distributed collection of data</strong>. Dataset is a new interface added in Spark 1.6 that provides the benefits of RDDs (strong typing, ability to use powerful lambda functions) with the benefits of Spark SQL’s optimized execution engine.<br>The Dataset API is available in Scala and Java. Python does not have the support for the Dataset API. But due to Python’s dynamic nature, many of the benefits of the Dataset API are already available (i.e. you can access the field of a row by name naturally row.columnName). The case for R is similar.<br><strong>A DataFrame is a Dataset organized into named columns</strong>. It is conceptually equivalent to a table in a relational database or a data frame in R/Python, but with richer optimizations under the hood.<br>In the Scala API, <strong>DataFrame</strong> is simply a type alias of <code>Dataset[Row]</code>. While, in Java API, users need to use <code>Dataset&lt;Row&gt;</code> to represent a <strong>DataFrame</strong>.</p><h3 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h3><h4 id="SparkSession"><a href="#SparkSession" class="headerlink" title="SparkSession"></a>SparkSession</h4><pre><code class="python">from pyspark.sql import SparkSessionspark = SparkSession \    .builder \    .appName(&quot;Python Spark SQL basic example&quot;) \    .config(&quot;spark.some.config.option&quot;, &quot;some-value&quot;) \    .getOrCreate()</code></pre><h4 id="DataFrame-Operation"><a href="#DataFrame-Operation" class="headerlink" title="DataFrame Operation"></a>DataFrame Operation</h4><pre><code class="python"># spark is an existing SparkSessiondf = spark.read.json(&quot;examples/src/main/resources/people.json&quot;)# Displays the content of the DataFrame to stdoutdf.show()# +----+-------+# | age|   name|# +----+-------+# |null|Michael|# |  30|   Andy|# |  19| Justin|# +----+-------+# spark, df are from the previous example# Print the schema in a tree formatdf.printSchema()# root# |-- age: long (nullable = true)# |-- name: string (nullable = true)# Select only the &quot;name&quot; columndf.select(&quot;name&quot;).show()# +-------+# |   name|# +-------+# |Michael|# |   Andy|# | Justin|# +-------+# Select everybody, but increment the age by 1df.select(df[&#39;name&#39;], df[&#39;age&#39;] + 1).show()# +-------+---------+# |   name|(age + 1)|# +-------+---------+# |Michael|     null|# |   Andy|       31|# | Justin|       20|# +-------+---------+# Select people older than 21df.filter(df[&#39;age&#39;] &gt; 21).show()# +---+----+# |age|name|# +---+----+# | 30|Andy|# +---+----+# Count people by agedf.groupBy(&quot;age&quot;).count().show()# +----+-----+# | age|count|# +----+-----+# |  19|    1|# |null|    1|# |  30|    1|# +----+-----+# Register the DataFrame as a SQL temporary viewdf.createOrReplaceTempView(&quot;people&quot;)sqlDF = spark.sql(&quot;SELECT * FROM people&quot;)sqlDF.show()# +----+-------+# | age|   name|# +----+-------+# |null|Michael|# |  30|   Andy|# |  19| Justin|# +----+-------+# Register the DataFrame as a global temporary viewdf.createGlobalTempView(&quot;people&quot;)# Global temporary view is tied to a system preserved database `global_temp`spark.sql(&quot;SELECT * FROM global_temp.people&quot;).show()# +----+-------`此处输入代码`+# | age|   name|# +----+-------+# |null|Michael|# |  30|   Andy|# |  19| Justin|# +----+-------+# Global temporary view is cross-sessionspark.newSession().sql(&quot;SELECT * FROM global_temp.people&quot;).show()# +----+-------+# | age|   name|# +----+-------+# |null|Michael|# |  30|   Andy|# |  19| Justin|# +----+-------+</code></pre><h4 id="Interoperating-with-RDDs"><a href="#Interoperating-with-RDDs" class="headerlink" title="Interoperating with RDDs"></a>Interoperating with RDDs</h4><pre><code class="python">from pyspark.sql import Rowsc = spark.sparkContext# Load a text file and convert each line to a Row.lines = sc.textFile(&quot;examples/src/main/resources/people.txt&quot;)parts = lines.map(lambda l: l.split(&quot;,&quot;))people = parts.map(lambda p: Row(name=p[0], age=int(p[1])))# Infer the schema, and register the DataFrame as a table.schemaPeople = spark.createDataFrame(people)schemaPeople.createOrReplaceTempView(&quot;people&quot;)# The schema is encoded in a string.# schemaString = &quot;name age&quot;# fields = [StructField(field_name, StringType(), True) for field_name in schemaString.split()]# schema = StructType(fields)# Apply the schema to the RDD.# schemaPeople = spark.createDataFrame(people, schema)# SQL can be run over DataFrames that have been registered as a table.teenagers = spark.sql(&quot;SELECT name FROM people WHERE age &gt;= 13 AND age &lt;= 19&quot;)# The results of SQL queries are Dataframe objects.# rdd returns the content as an :class:`pyspark.RDD` of :class:`Row`.teenNames = teenagers.rdd.map(lambda p: &quot;Name: &quot; + p.name).collect()for name in teenNames:    print(name)# Name: Justin</code></pre><h4 id="Data-Sources"><a href="#Data-Sources" class="headerlink" title="Data Sources"></a>Data Sources</h4><pre><code class="python"># Generic Load/Save Functionsdf = spark.read.load(&quot;examples/src/main/resources/people.json&quot;, format=&quot;json&quot;)df.select(&quot;name&quot;, &quot;age&quot;).write.save(&quot;namesAndAges.parquet&quot;, format=&quot;parquet&quot;)# Run SQL on files directlydf = spark.sql(&quot;SELECT * FROM parquet.`examples/src/main/resources/users.parquet`&quot;)# Loading Data ProgrammaticallypeopleDF = spark.read.json(&quot;examples/src/main/resources/people.json&quot;)# DataFrames can be saved as Parquet files, maintaining the schema information.peopleDF.write.parquet(&quot;people.parquet&quot;)# Read in the Parquet file created above.# Parquet files are self-describing so the schema is preserved.# The result of loading a parquet file is also a DataFrame.parquetFile = spark.read.parquet(&quot;people.parquet&quot;)# Parquet files can also be used to create a temporary view and then used in SQL statements.parquetFile.createOrReplaceTempView(&quot;parquetFile&quot;)teenagers = spark.sql(&quot;SELECT name FROM parquetFile WHERE age &gt;= 13 AND age &lt;= 19&quot;)teenagers.show()# +------+# |  name|# +------+# |Justin|# +------+</code></pre><ul><li>Metadata Refreshing</li></ul><pre><code class="python"># spark is an existing SparkSessionspark.catalog.refreshTable(&quot;my_table&quot;)</code></pre><h4 id="Hive-Tables"><a href="#Hive-Tables" class="headerlink" title="Hive Tables"></a>Hive Tables</h4><pre><code class="python">from os.path import expanduser, joinfrom pyspark.sql import SparkSessionfrom pyspark.sql import Row# warehouse_location points to the default location for managed databases and tableswarehouse_location = &#39;spark-warehouse&#39;spark = SparkSession \    .builder \    .appName(&quot;Python Spark SQL Hive integration example&quot;) \    .config(&quot;spark.sql.warehouse.dir&quot;, warehouse_location) \    .enableHiveSupport() \    .getOrCreate()# spark is an existing SparkSessionspark.sql(&quot;CREATE TABLE IF NOT EXISTS src (key INT, value STRING)&quot;)spark.sql(&quot;LOAD DATA LOCAL INPATH &#39;examples/src/main/resources/kv1.txt&#39; INTO TABLE src&quot;)# Queries are expressed in HiveQLspark.sql(&quot;SELECT * FROM src&quot;).show()# +---+-------+# |key|  value|# +---+-------+# |238|val_238|# | 86| val_86|# |311|val_311|# ...# Aggregation queries are also supported.spark.sql(&quot;SELECT COUNT(*) FROM src&quot;).show()# +--------+# |count(1)|# +--------+# |    500 |# +--------+# The results of SQL queries are themselves DataFrames and support all normal functions.sqlDF = spark.sql(&quot;SELECT key, value FROM src WHERE key &lt; 10 ORDER BY key&quot;)# The items in DaraFrames are of type Row, which allows you to access each column by ordinal.stringsDS = sqlDF.rdd.map(lambda row: &quot;Key: %d, Value: %s&quot; % (row.key, row.value))for record in stringsDS.collect():    print(record)# Key: 0, Value: val_0# Key: 0, Value: val_0# Key: 0, Value: val_0# ...# You can also use DataFrames to create temporary views within a SparkSession.Record = Row(&quot;key&quot;, &quot;value&quot;)recordsDF = spark.createDataFrame([Record(i, &quot;val_&quot; + str(i)) for i in range(1, 101)])recordsDF.createOrReplaceTempView(&quot;records&quot;)# Queries can then join DataFrame data with data stored in Hive.spark.sql(&quot;SELECT * FROM records r JOIN src s ON r.key = s.key&quot;).show()# +---+------+---+------+# |key| value|key| value|# +---+------+---+------+# |  2| val_2|  2| val_2|# |  4| val_4|  4| val_4|# |  5| val_5|  5| val_5|# ...</code></pre><h3 id="Unsupported-Hive-Functionality"><a href="#Unsupported-Hive-Functionality" class="headerlink" title="Unsupported Hive Functionality"></a>Unsupported Hive Functionality</h3><h4 id="Major-Hive-Features"><a href="#Major-Hive-Features" class="headerlink" title="Major Hive Features"></a>Major Hive Features</h4><ul><li>Tables with bucket</li></ul><h4 id="Esoteric-Hive-Features"><a href="#Esoteric-Hive-Features" class="headerlink" title="Esoteric Hive Features"></a>Esoteric Hive Features</h4><ul><li>UNION type</li><li>Unique join</li><li>Column statistics collecting: Spark SQL does not piggyback scans to collect column statistics at the moment and only supports populating the sizeInBytes field of the hive metastore.</li></ul><h4 id="Hive-Input-Output-Formats"><a href="#Hive-Input-Output-Formats" class="headerlink" title="Hive Input/Output Formats"></a>Hive Input/Output Formats</h4><ul><li>File format for CLI: For results showing back to the CLI, Spark SQL only supports TextOutputFormat.</li><li>Hadoop archive</li></ul><h4 id="Hive-Optimizations"><a href="#Hive-Optimizations" class="headerlink" title="Hive Optimizations"></a>Hive Optimizations</h4><p>A handful of Hive optimizations are not yet included in Spark.<br>Some of these (such as indexes) are less important due to Spark SQL’s in-memory computational model.<br>Others are slotted for future releases of Spark SQL.</p><ul><li>Block level bitmap indexes and virtual columns (used to build indexes)</li><li>Automatically determine the number of reducers for joins and groupbys: Currently in Spark SQL, you need to control the degree of parallelism post-shuffle using <code>SET spark.sql.shuffle.partitions=[num_tasks];</code>.</li><li>Meta-data only query: For queries that can be answered by using only meta data, Spark SQL still launches tasks to compute the result.</li><li>Skew data flag: Spark SQL does not follow the skew data flags in Hive.</li><li>STREAMTABLE hint in join: Spark SQL does not follow the STREAMTABLE hint.</li><li>Merge multiple small files for query results: if the result output contains multiple small files, Hive can optionally merge the small files into fewer large files to avoid overflowing the HDFS metadata. Spark SQL does not support that.</li></ul><h3 id="NaN-Semantics"><a href="#NaN-Semantics" class="headerlink" title="NaN Semantics"></a>NaN Semantics</h3><p>There is specially handling for not-a-number (NaN) when dealing with float or double types that does not exactly match standard floating point semantics. Specifically:</p><ul><li>NaN = NaN returns true.</li><li>In aggregations all NaN values are grouped together.</li><li>NaN is treated as a normal value in join keys.</li><li>NaN values go last when in ascending order, larger than any other numeric value.</li></ul><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li><a href="https://spark.apache.org/docs/2.1.0/sql-programming-guide.html" target="_blank" rel="external">Spark 2.1.0 Documentation, Spark SQL, DataFrames and Datasets Guide</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;SQL&quot;&gt;&lt;a href=&quot;#SQL&quot; class=&quot;headerlink&quot; title=&quot;SQL&quot;&gt;&lt;/a&gt;SQL&lt;/h3&gt;&lt;p&gt;One use of Spark SQL is to execute SQL queries. Spark SQL can also be used to read data from an existing Hive installation. &lt;/p&gt;
    
    </summary>
    
      <category term="Doing" scheme="http://TaoSama.com/categories/Doing/"/>
    
      <category term="Spark" scheme="http://TaoSama.com/categories/Doing/Spark/"/>
    
    
  </entry>
  
  <entry>
    <title>Notes, SpringBoot Guide</title>
    <link href="http://TaoSama.com/2018-03-09/springboot-guide-notes/"/>
    <id>http://TaoSama.com/2018-03-09/springboot-guide-notes/</id>
    <published>2018-03-09T09:01:00.000Z</published>
    <updated>2018-03-09T09:06:24.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h3><p>The <strong>Model</strong> encapsulates the application data and in general they will consist of POJO.</p><p>The <strong>View</strong> is responsible for rendering the model data and in general it generates HTML output that the client’s browser can interpret.</p><p>The <strong>Controller</strong> is responsible for processing user requests and building an appropriate model and passes it to the view for rendering.</p><a id="more"></a><ul><li>Original MVC</li></ul><p><img src="http://7xru22.com1.z0.glb.clouddn.com/18-3-9/69812105.jpg" alt=""></p><ul><li>Spring MVC</li></ul><p><img src="http://7xru22.com1.z0.glb.clouddn.com/18-3-9/74224334.jpg" alt=""></p><h3 id="Dependency-Injection-DI"><a href="#Dependency-Injection-DI" class="headerlink" title="Dependency Injection (DI)"></a>Dependency Injection (DI)</h3><p>The technology that Spring is most identified with is the Dependency Injection (DI) flavor of Inversion of Control.<br>The Inversion of Control (IoC) is a general concept, and it can be expressed in many different ways.<br>Dependency Injection is merely one concrete example of Inversion of Control.</p><p>What is dependency injection exactly? Let’s look at these two words separately. Here the dependency part translates into an association between two classes. For example, class A is dependent of class B. Now, let’s look at the second part, injection. All this means is, class B will get injected into class A by the IoC.</p><h3 id="Bean"><a href="#Bean" class="headerlink" title="Bean"></a>Bean</h3><h4 id="What-is-Bean"><a href="#What-is-Bean" class="headerlink" title="What is Bean"></a>What is Bean</h4><p>The objects that form the backbone of your application and that are managed by the Spring IoC container are called beans. A bean is an object that is instantiated, assembled, and otherwise managed by a Spring IoC container. These beans are created with the configuration metadata that you supply to the container.</p><h4 id="Dependency-Injection-Type-amp-Description"><a href="#Dependency-Injection-Type-amp-Description" class="headerlink" title="Dependency Injection Type &amp; Description"></a>Dependency Injection Type &amp; Description</h4><ol><li>Constructor-based dependency injection<br>Constructor-based DI is accomplished when the container invokes a class constructor with a number of arguments, each representing a dependency on the other class.</li><li>Setter-based dependency injection<br>Setter-based DI is accomplished by the container calling setter methods on your beans after invoking a no-argument constructor or no-argument static factory method to instantiate your bean.</li></ol><h4 id="Configuration-amp-Bean-Annotations"><a href="#Configuration-amp-Bean-Annotations" class="headerlink" title="@Configuration &amp; @Bean Annotations"></a>@Configuration &amp; @Bean Annotations</h4><p>Annotating <strong>a class</strong> with the @Configuration indicates that the class can be used by the Spring IoC container as a source of bean definitions.<br>The @Bean annotation tells Spring that <strong>a method</strong> annotated with @Bean will return an object that should be registered as a bean in the Spring application context. </p><h4 id="The-Import-Annotation-Optional"><a href="#The-Import-Annotation-Optional" class="headerlink" title="The @Import Annotation (Optional)"></a>The @Import Annotation (Optional)</h4><p>The @Import annotation allows for loading @Bean definitions from another configuration class. </p><h4 id="Specifying-Bean-Scope"><a href="#Specifying-Bean-Scope" class="headerlink" title="Specifying Bean Scope"></a>Specifying Bean Scope</h4><p>The default scope is singleton, but you can override this with the @Scope annotation.</p><h3 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h3><h4 id="What-is-AOP"><a href="#What-is-AOP" class="headerlink" title="What is AOP"></a>What is AOP</h4><p><strong>Aspect-Oriented Programming</strong> entails breaking down program logic into distinct parts called so-called concerns.<br>The functions that span multiple points of an application are called cross-cutting concerns and these <strong>cross-cutting concerns</strong> are conceptually separate from the application’s business logic.<br>There are various common <strong>good examples of aspects</strong> like <strong>logging, auditing, declarative transactions, security, caching, etc</strong>.</p><h4 id="Comparison-with-DI"><a href="#Comparison-with-DI" class="headerlink" title="Comparison with DI"></a>Comparison with DI</h4><p>The key unit of modularity in OOP is the class, whereas in AOP the unit of modularity is the aspect.<br>Dependency Injection helps you decouple your application objects from each other and AOP helps you decouple cross-cutting concerns from the objects that they affect.<br>AOP is like triggers in programming languages such as Perl, .NET, Java, and others.</p><p>Spring AOP module provides <strong>interceptors</strong> to intercept an application.<br>For example, when a method is executed, you can add extra functionality before or after the method execution.</p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li><a href="https://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/reference/" target="_blank" rel="external">Spring Boot Reference 1.5.9.RELEASE Guide</a></li><li><a href="https://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/api/" target="_blank" rel="external">Spring Boot Docs 1.5.9.RELEASE API</a></li><li><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/" target="_blank" rel="external">Spring Framework Documentation</a></li><li><a href="https://docs.spring.io/spring/docs/4.3.13.RELEASE/spring-framework-reference/htmlsingle/#mvc" target="_blank" rel="external">Spring Web MVC framework</a></li><li>某忘记名字的网站</li><li>知乎</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;MVC&quot;&gt;&lt;a href=&quot;#MVC&quot; class=&quot;headerlink&quot; title=&quot;MVC&quot;&gt;&lt;/a&gt;MVC&lt;/h3&gt;&lt;p&gt;The &lt;strong&gt;Model&lt;/strong&gt; encapsulates the application data and in general they will consist of POJO.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;View&lt;/strong&gt; is responsible for rendering the model data and in general it generates HTML output that the client’s browser can interpret.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;Controller&lt;/strong&gt; is responsible for processing user requests and building an appropriate model and passes it to the view for rendering.&lt;/p&gt;
    
    </summary>
    
      <category term="Doing" scheme="http://TaoSama.com/categories/Doing/"/>
    
      <category term="Spring" scheme="http://TaoSama.com/categories/Doing/Spring/"/>
    
    
  </entry>
  
  <entry>
    <title>Notes, 大型网站技术架构</title>
    <link href="http://TaoSama.com/2017-10-27/large-site-architecture-notes/"/>
    <id>http://TaoSama.com/2017-10-27/large-site-architecture-notes/</id>
    <published>2017-10-27T03:52:10.000Z</published>
    <updated>2018-01-27T10:44:15.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><h4 id="Evolution-of-Large-Site-Architecture"><a href="#Evolution-of-Large-Site-Architecture" class="headerlink" title="Evolution of Large Site Architecture"></a>Evolution of Large Site Architecture</h4><h5 id="Characteristics"><a href="#Characteristics" class="headerlink" title="Characteristics"></a>Characteristics</h5><ul><li>high concurrency, huge traffic</li><li>high availability</li><li>vast data</li><li>users from everywhere, complex situation of network</li><li>bad environment of security </li><li>quick demands changing, frequently releasing</li><li>progessive development</li></ul><a id="more"></a><h5 id="Development-Progress"><a href="#Development-Progress" class="headerlink" title="Development Progress"></a>Development Progress</h5><ul><li>begin<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-27/47885692.jpg" alt=""></li><li>separate application and data service</li><li>use cache</li><li>use application cluster</li><li>separate read and write of database</li><li>use reverse proxy and CDN<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/44949985.jpg" alt=""></li><li>use distributed file system and distributed database</li><li>use NoSQL and search engine<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/8148745.jpg" alt=""></li><li>separate bussiness</li><li>use distributed services<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/62668186.jpg" alt=""></li></ul><h5 id="Values"><a href="#Values" class="headerlink" title="Values"></a>Values</h5><ul><li>key is to be flexible to the bussiness</li><li>major pusher is bussiness developing</li></ul><h5 id="Wrong-Thinking"><a href="#Wrong-Thinking" class="headerlink" title="Wrong Thinking"></a>Wrong Thinking</h5><ul><li>follow solutions of the gaints blindly</li><li>be technical just for techniques</li><li>try to solve all problems with techniques</li></ul><h4 id="Models-of-Large-Site-Architecture"><a href="#Models-of-Large-Site-Architecture" class="headerlink" title="Models of Large Site Architecture"></a>Models of Large Site Architecture</h4><h5 id="Layer-horizontal"><a href="#Layer-horizontal" class="headerlink" title="Layer (horizontal)"></a>Layer (horizontal)</h5><ul><li>application layer: be responsible for specific bussiness and view showing (view, bussiness logic)</li><li>service layer: provide service for application layer (data interfaces, logic processing)</li><li>data layer: provide service data accessing and storage</li></ul><h5 id="Split-vertical"><a href="#Split-vertical" class="headerlink" title="Split (vertical)"></a>Split (vertical)</h5><p>split different functionalites and services into aggregated and decoupled modules.</p><h5 id="Distributed"><a href="#Distributed" class="headerlink" title="Distributed"></a>Distributed</h5><p>distributedly deploy the layered and splitted modules in different servers.</p><ul><li>distributed applications and services</li><li>distributed static resources</li><li>distributed data and storage</li><li>distributed computing</li><li>distributed configuration</li><li>distributed lock</li><li>distributed file system</li></ul><h5 id="Cluster"><a href="#Cluster" class="headerlink" title="Cluster"></a>Cluster</h5><p>cluster the independent deployed server, i.e., many servers deployed the same application consists of a cluster.</p><h5 id="Cache"><a href="#Cache" class="headerlink" title="Cache"></a>Cache</h5><ul><li>CDN</li><li>reverse proxy</li><li>local cache in application server</li><li>distributed cache</li></ul><h5 id="Asynchronization"><a href="#Asynchronization" class="headerlink" title="Asynchronization"></a>Asynchronization</h5><p><strong>distributed message queue</strong>, is a typical producer-consumer model</p><ul><li>improve system availability</li><li>speed up the response of website</li><li>reduce the peek of concurrent accessing</li></ul><h5 id="Redundancy"><a href="#Redundancy" class="headerlink" title="Redundancy"></a>Redundancy</h5><ul><li>cold backup: storage archived in fixed period</li><li>hot backup: separate read and write of database, real-time synchronization</li><li>disaster recovery data center</li></ul><h5 id="Automation"><a href="#Automation" class="headerlink" title="Automation"></a>Automation</h5><ul><li><p>automatic releasing</p><ul><li>automatic source control</li><li>automatic testing</li><li>automatic security dection</li><li>automatic deployment</li></ul></li><li><p>automatic monitoring</p></li><li>automatic alerting</li><li>automatic failure transferring</li><li>automatic failure recoverring</li><li>automatic downgrading</li><li>automatic resource allocating</li></ul><h5 id="Security"><a href="#Security" class="headerlink" title="Security"></a>Security</h5><ul><li>password</li><li>verification code</li><li>encryption</li><li>filtering</li><li>risk control</li></ul><h5 id="Architecture-Model-of-Weibo"><a href="#Architecture-Model-of-Weibo" class="headerlink" title="Architecture Model of Weibo"></a>Architecture Model of Weibo</h5><p><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/87294532.jpg" alt=""></p><h4 id="Keys-of-Large-Site-Architecture"><a href="#Keys-of-Large-Site-Architecture" class="headerlink" title="Keys of Large Site Architecture"></a>Keys of Large Site Architecture</h4><h5 id="Performance"><a href="#Performance" class="headerlink" title="Performance"></a>Performance</h5><ul><li>response time </li><li>throughput</li><li>system performance monitor (top)</li></ul><p><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/24638084.jpg" alt=""></p><h5 id="Availability"><a href="#Availability" class="headerlink" title="Availability"></a>Availability</h5><ul><li>available time (99.99%)</li><li>redundancy</li><li>pre-released verification</li><li>gray releasing</li></ul><h5 id="Scalability"><a href="#Scalability" class="headerlink" title="Scalability"></a>Scalability</h5><p>easy to add and remove servers in cluster</p><h5 id="Extensibility"><a href="#Extensibility" class="headerlink" title="Extensibility"></a>Extensibility</h5><ul><li>event driven architecture</li><li>distributed service</li></ul><h5 id="Security-1"><a href="#Security-1" class="headerlink" title="Security"></a>Security</h5><h3 id="Architecture"><a href="#Architecture" class="headerlink" title="Architecture"></a>Architecture</h3><h4 id="High-performance-Architecture"><a href="#High-performance-Architecture" class="headerlink" title="High-performance Architecture"></a>High-performance Architecture</h4><h5 id="Different-Views-of-Website-Performance"><a href="#Different-Views-of-Website-Performance" class="headerlink" title="Different Views of Website Performance"></a>Different Views of Website Performance</h5><ul><li><p>user<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/62774698.jpg" alt=""></p></li><li><p>developer<br>the performance of application itself and relevant subsystem.<br>response latency, system throughput, concurrency, and system stability</p></li><li><p>maintainer<br>infrastructure performance, resource utilization</p></li></ul><h5 id="Metrics-of-Performance"><a href="#Metrics-of-Performance" class="headerlink" title="Metrics of Performance"></a>Metrics of Performance</h5><ul><li><p>response time<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/34403316.jpg" alt=""></p></li><li><p>number of concurrency<br>number of total users &gt;&gt; number of online users &gt;&gt; number of concurrent users</p></li><li><p>throughput<br>TPS(transaction per second), QPS(query per second), HPS(HTTP request per second)</p></li><li><p>system performance monitor (top)<br>system load, number of objects and threads, memory and CPU used, disk and netword I/O<br>top: there floating number, recent 1min, 10mins, 15mins average running processes<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/42727590.jpg" alt=""></p></li></ul><h5 id="Ways-of-Profiling"><a href="#Ways-of-Profiling" class="headerlink" title="Ways of Profiling"></a>Ways of Profiling</h5><ul><li>performance testing</li><li>load testing</li><li>stress testing</li><li>stability testing</li></ul><p><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/43135395.jpg" alt=""></p><p><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/85052370.jpg" alt=""></p><ul><li>performance report<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/25395924.jpg" alt=""></li></ul><h5 id="Strategy-of-Performance-Optimization"><a href="#Strategy-of-Performance-Optimization" class="headerlink" title="Strategy of Performance Optimization"></a>Strategy of Performance Optimization</h5><ul><li>performance analysis</li><li>performance optimization</li></ul><h5 id="Web-Front-Performance-Optimization"><a href="#Web-Front-Performance-Optimization" class="headerlink" title="Web Front Performance Optimization"></a>Web Front Performance Optimization</h5><ul><li><p>browser</p><ul><li>reduce the number of HTTP requests</li><li>browser cache</li><li>enable compression</li><li>put CSS at the front of page, and JS at the bottom</li><li>reduce the transferring of Cookie</li></ul></li><li><p>CDN (Content Distribute Network)<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/71736041.jpg" alt=""></p></li><li><p>reverse proxy<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/43823166.jpg" alt=""></p></li></ul><h5 id="Application-Server-Performance-Optimization"><a href="#Application-Server-Performance-Optimization" class="headerlink" title="Application Server Performance Optimization"></a>Application Server Performance Optimization</h5><p><strong>distributed cache</strong></p><ul><li><p>cache principle (80%-20% law)<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/43534320.jpg" alt=""></p></li><li><p>use cache properly</p><ul><li>infrequently modified (read:write ≥ 2:1)</li><li>hot piece</li><li>set expired time</li></ul></li><li><p>cache availability</p><ul><li>cache warm up<br>preload the hot pieces</li><li>cache penetrating<br>situation that requires to nonexistent data in high concurrency, one way is to cache it (nonexistent-null)</li></ul></li></ul><p><strong>architecture of distributed cache</strong></p><p>JBoss Cache: update synchronously (enterprise use)<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/55001392.jpg" alt=""></p><p>Memcached: no communication between servers<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/4636924.jpg" alt=""></p><ul><li><p>communication protocol: TCP, UDP, HTTP<br>communication serializating protocol: text(XML, JSON), binary(Google Protobuffer)</p></li><li><p>memcached use TCP for communication protocol, and it defines its own text serializating protocol.</p></li><li><p>memcached’s server communication module is based on <code>Libevent</code>.</p></li><li><p>memory management</p><ul><li>chunk-based allocation<br>find a minimal chunk that can save the data</li><li>LRU<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/21995999.jpg" alt=""></li></ul></li></ul><p><strong>asynchronizaton</strong><br>use message queue to reduce the peek<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/94302977.jpg" alt=""></p><p><strong>cluster</strong></p><p><strong>code optimization</strong></p><ul><li>multi-thread<br>number of threads = $\frac{task execution time}{task execution time-IO waiting time}\times CPU cores$</li><li>thread-safe<br>stateless object, local object, lock</li><li>resource reusing<br>singleton, object pool</li><li>data structure<br>hashtable: originlal-<code>MD5</code>-&gt;info figureprint-<code>HASH</code>-&gt;hashcode</li><li>garbage collection<br>object created in Eden-<code>Young GC</code>-&gt;From-<code>Young GC</code>-&gt;To-<code>Young GC</code>-&gt;From-…<code>threshold times Young GC</code>-&gt;Old-&gt;<code>Full GC</code><br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/70621950.jpg" alt=""></li></ul><p><strong>storage performance optimization</strong></p><ul><li>mechanical hard disk vs. solid state hard drive</li><li><p>B+ tree vs. LSM tree<br>N-branch search tree: at most 3 level, (maybe 5 disk IOs to update, 3 to get the index, 1 to read, 1 to write)<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/64739055.jpg" alt=""><br>N-level mergeable search tree: write operations do in memory, and create a new record in the $C_0$ tree<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/65052291.jpg" alt=""></p></li><li><p>RAID vs. HDFS<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/86796256.jpg" alt=""><br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/41423906.jpg" alt=""></p></li></ul><h4 id="High-availability-Architecture"><a href="#High-availability-Architecture" class="headerlink" title="High-availability Architecture"></a>High-availability Architecture</h4><h5 id="Layered-Architecture"><a href="#Layered-Architecture" class="headerlink" title="Layered Architecture"></a>Layered Architecture</h5><p>application layer &lt;- service layer &lt;- data layer<br>more complicated:<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/25459489.jpg" alt=""></p><h5 id="High-availability-Application"><a href="#High-availability-Application" class="headerlink" title="High-availability Application"></a>High-availability Application</h5><ul><li>failure transferring through load balancing</li><li>session managemant<br>a session is a semi-permanent interactive information interchange, i.e., a dialogue<ul><li>session copy</li><li>session binding</li><li>use cookie to record session</li><li>session server<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/80821252.jpg" alt=""></li></ul></li></ul><h5 id="High-availability-Service"><a href="#High-availability-Service" class="headerlink" title="High-availability Service"></a>High-availability Service</h5><ul><li>managed in priority</li><li>time-out setting</li><li>asynchronous call</li><li>downgrade-abled service</li><li>idempotent design<br>i.e., repeated call can be handled properly.</li></ul><h5 id="High-availability-Data"><a href="#High-availability-Data" class="headerlink" title="High-availability Data"></a>High-availability Data</h5><h5 id="CAP-Principe"><a href="#CAP-Principe" class="headerlink" title="CAP Principe"></a>CAP Principe</h5><ul><li>consistency</li><li>availablity</li><li>partition tolerance<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/10107207.jpg" alt=""></li></ul><p><strong>consistency</strong></p><ul><li>data strong consistency<br>data is always consistent in all the physical copies</li><li>data user consistency<br>data may be not consistent in all the physical copies, but it<br>can be accessed as a consistent and right one for user through<br>error correction and verification.</li><li>data final consistency<br>data may be not consistent in all the physical copies, and it<br>may be not accessed consistently. but after some time, it can be<br>corrected to user consistency.</li></ul><h5 id="Data-Backup"><a href="#Data-Backup" class="headerlink" title="Data Backup"></a>Data Backup</h5><h5 id="Failure-Transferring"><a href="#Failure-Transferring" class="headerlink" title="Failure Transferring"></a>Failure Transferring</h5><ul><li>failure confirmation<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/56937621.jpg" alt=""></li><li>access transferring</li><li>data recovering</li></ul><h5 id="Quality-Insurance"><a href="#Quality-Insurance" class="headerlink" title="Quality Insurance"></a>Quality Insurance</h5><p><strong>automatic releasing</strong><br>(gray releasing)<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/67465635.jpg" alt=""></p><p><strong>automatic testing</strong></p><p><strong>pre-releasing verification</strong></p><p><strong>source control</strong></p><ul><li>master developing, branch releasing</li><li>master releasing, branch developing</li></ul><p><strong>website monitoring</strong></p><ul><li>user behavior log collection<br>tools based on <code>Storm</code> (real-time computing framework)</li><li>server performance monitoring</li><li>running data report</li></ul><p><strong>website monitoring control</strong></p><ul><li>system alerting</li><li>failure transferring</li><li>automatic downgrading</li></ul><h4 id="High-scalability-Architecture"><a href="#High-scalability-Architecture" class="headerlink" title="High-scalability Architecture"></a>High-scalability Architecture</h4><h5 id="Physical-Separation"><a href="#Physical-Separation" class="headerlink" title="Physical Separation"></a>Physical Separation</h5><p>（clustering)<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/61171750.jpg" alt=""></p><h5 id="Load-Balancing"><a href="#Load-Balancing" class="headerlink" title="Load Balancing"></a>Load Balancing</h5><ul><li>HTTP redirection protocol</li><li>DNS (domain name resolution)</li><li>reverse proxy</li><li>IP<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/91517327.jpg" alt=""></li><li>data link layer<br>LVS (Linux Virtual Server)<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/85037154.jpg" alt=""></li></ul><p><strong>load balancing algorithms</strong></p><ul><li>round robin</li><li>weighted round robin</li><li>random</li><li>least connections</li><li>source hashing</li></ul><h5 id="Distributed-Cache"><a href="#Distributed-Cache" class="headerlink" title="Distributed Cache"></a>Distributed Cache</h5><p><strong>memchached access model</strong><br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/40831863.jpg" alt=""></p><p>consistent hashing<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/34276778.jpg" alt=""></p><p>to solve the influence of cache load =&gt; <code>virtual nodes</code> (a server to 150 nodes)<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/28184219.jpg" alt=""></p><h5 id="Distributed-Database"><a href="#Distributed-Database" class="headerlink" title="Distributed Database"></a>Distributed Database</h5><p><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/59890444.jpg" alt=""></p><p><strong>spread tables into different database servers</strong><br><strong>put table into slices, then spread into different database servers</strong></p><p>database products of data slices: Amoeba, Cobar </p><p><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/80126287.jpg" alt=""><br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/18332945.jpg" alt=""></p><p><strong>NoSQL</strong></p><ul><li><p>abandon 2 basis of relation database:<br>SQL based on relation algebra,<br>and transaction consistency guarantee [atomicity, consistency, isolation, durability] (ACID)</p></li><li><p>strengthen characteristics that large site concerned:<br>high-availability, high-scalability</p></li></ul><p><strong>Apache HBase</strong></p><p><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/98641792.jpg" alt=""></p><p><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/23962985.jpg" alt=""></p><h4 id="High-extensibility-Architecture"><a href="#High-extensibility-Architecture" class="headerlink" title="High-extensibility Architecture"></a>High-extensibility Architecture</h4><ul><li>event driven architecture<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/9652231.jpg" alt=""></li><li>distributed message queue<br>Apache ActiveMQ<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/81090792.jpg" alt=""></li><li><p>distributed services</p></li><li><p>web service and enterprise distributed service<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/51015171.jpg" alt=""></p></li><li><p>distributed service framework<br>large site need simple and efficient distributed service<br>framework to build its service oriented architecture (SOA)<br>it is said that Facebook manages its distributed service based on<br><code>Thrift</code> (an opensource remote service call framework)<br><code>Alibaba-Dubbo</code><br> <img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/67509941.jpg" alt=""></p></li><li><p>extensible data structure<br>NoSQL <code>ColumnFamily</code> (first in Google Bigtable)<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/13082779.jpg" alt=""></p></li><li><p>open platform to build website ecosystem<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/78200842.jpg" alt=""></p></li></ul><h4 id="Security-Architecture"><a href="#Security-Architecture" class="headerlink" title="Security Architecture"></a>Security Architecture</h4><h5 id="Website-attack-and-defense"><a href="#Website-attack-and-defense" class="headerlink" title="Website attack and defense"></a>Website attack and defense</h5><p><strong>XSS(Cross Site Script) attack</strong></p><ul><li><p>reflective type<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/41046481.jpg" alt=""></p></li><li><p>persistent type<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/42341545.jpg" alt=""></p></li><li><p>solution: filter, HttpOnly</p></li></ul><p><strong>Injection attack</strong><br>SQL injection, OS injection</p><p>SQL injection: open source(table name is public), error echoed, blind injection<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/12246870.jpg" alt=""></p><p>solution: filter, parameter binding</p><p><strong>CSRF(Cross Site Request Forgety) attack</strong><br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-29/93927561.jpg" alt=""></p><p>solution: form token, verification code, referer check</p><p><strong>other attack</strong></p><ul><li>error echoed</li><li>HTML comment</li><li>file uploading</li><li>path traversal</li></ul><p><strong>web application firewall</strong><br>ModSecurity<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-30/97390520.jpg" alt=""></p><p><strong> website security scanning</strong></p><h5 id="Encryption-and-Key-Security-Management"><a href="#Encryption-and-Key-Security-Management" class="headerlink" title="Encryption and Key Security Management"></a>Encryption and Key Security Management</h5><ul><li><p>one-way hashing encryption<br>MD5, SHA<br>Rainbow Table to try to decrypt MD5<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-30/70087109.jpg" alt=""></p></li><li><p>symmetric encryption<br>DES, RC<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-30/72859252.jpg" alt=""></p></li><li><p>asymmetric encryption<br>RSA<br>information security transmission, digital signature<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-30/51192903.jpg" alt=""></p></li><li><p>key security management<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-30/44940270.jpg" alt=""></p></li></ul><h5 id="Infomation-filtering-and-Anti-spam"><a href="#Infomation-filtering-and-Anti-spam" class="headerlink" title="Infomation filtering and Anti-spam"></a>Infomation filtering and Anti-spam</h5><ul><li><p>text matching<br>double array trie, multi-level hashtable (simpler)<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-30/84675517.jpg" alt=""></p></li><li><p>classification algorithm<br>Native Bayes, TAN, Association Rule Clustering System (ARCS)<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-30/24237709.jpg" alt=""></p></li><li><p>blacklist<br>hashtable, bloomfilter<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-30/32301588.jpg" alt=""></p></li></ul><h5 id="Risk-Control"><a href="#Risk-Control" class="headerlink" title="Risk Control"></a>Risk Control</h5><ul><li>rule engine<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-30/25087873.jpg" alt=""></li><li>statistics model<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-30/76287040.jpg" alt=""></li></ul><h3 id="Cases"><a href="#Cases" class="headerlink" title="Cases"></a>Cases</h3><h4 id="Taobao"><a href="#Taobao" class="headerlink" title="Taobao"></a>Taobao</h4><p>At first, Ma Yun bought a <code>C2C</code> website, then <code>LAMP</code>:<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-30/37599252.jpg" alt=""></p><p>MVC: decouple view and bussiness logic<br>ORM (Object-relational mapping): decouple objects and relational database</p><p>Taobao didn’t use the hot <code>Struts</code> and <code>Hibernate</code>,<br>but choose to develop its own MVC frameword <code>Webx</code>, and to use <code>IBatis</code> for ORM.<br>Taobao also used <code>Weblogic</code> for application server, <code>Oracle</code> for database. They are commercial softwares.<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-30/959871.jpg" alt=""></p><p>Then, to use <code>Spring</code> instead of <code>EJB</code>, free <code>JBoss</code> instead of <code>Weblogic</code></p><p>At last, abandon <code>Oracle</code>, <code>IBM</code>, <code>EMC</code>, and back to open source <code>MySQL</code> and <code>NoSQL</code><br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-30/56259159.jpg" alt=""></p><h4 id="Wikipedia"><a href="#Wikipedia" class="headerlink" title="Wikipedia"></a>Wikipedia</h4><p><strong>based on</strong> <code>LAMP</code><br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-30/95474191.jpg" alt=""></p><p><strong>Wikipedia’s web front</strong><br>the key architecture of  is <code>Squid</code> cluster:<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-30/95191711.jpg" alt=""></p><p><strong>Wikipedia’s backend</strong></p><ul><li>cache the format that application can be used directly</li><li>cache servers store the session objects</li><li>memcached’s connection is cheap, and create one when needed</li><li>increase memory to improve <code>MySQL</code></li><li>use <code>RAIO0</code> to speed up disk accessing</li><li>set ACID of database at a some low level</li><li>if <code>Master</code> database sever crashed, switch to <code>Slave</code>,<br>the close the write service, i.e., close the edition of users.</li></ul><h4 id="Doris-enormous-distributed-KV-storage"><a href="#Doris-enormous-distributed-KV-storage" class="headerlink" title="Doris (enormous distributed KV storage)"></a>Doris (enormous distributed KV storage)</h4><p><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-30/90549351.jpg" alt=""><br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-30/91551116.jpg" alt=""><br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-30/33182040.jpg" alt=""><br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-30/47667517.jpg" alt=""><br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-30/2416629.jpg" alt=""><br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-30/96568966.jpg" alt=""><br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-30/15742744.jpg" alt=""><br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-30/91008989.jpg" alt=""><br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-30/14212433.jpg" alt=""></p><h4 id="Seckilling-System"><a href="#Seckilling-System" class="headerlink" title="Seckilling System"></a>Seckilling System</h4><h5 id="chanllenge"><a href="#chanllenge" class="headerlink" title="chanllenge"></a>chanllenge</h5><ul><li>strike for the current bussiness</li><li>high load of high concurrency</li><li>increasing bandwidth</li><li>the URL to place an order</li></ul><h5 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h5><ul><li>independently deploy seckilling system</li><li>static page for seckilling product</li><li>rent netword bandwidth for seckilling</li><li>dynamically generate random URL for placing order</li></ul><h5 id="architecture"><a href="#architecture" class="headerlink" title="architecture"></a>architecture</h5><p><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-30/33308473.jpg" alt=""><br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-30/54626461.jpg" alt=""><br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-30/87372762.jpg" alt=""></p><h4 id="Failure-Analysis"><a href="#Failure-Analysis" class="headerlink" title="Failure Analysis"></a>Failure Analysis</h4><h5 id="disk-space-increases-surprisingly"><a href="#disk-space-increases-surprisingly" class="headerlink" title="disk space increases surprisingly"></a>disk space increases surprisingly</h5><p>set log level to <code>DEBUG</code> by mistake.</p><h5 id="high-load-of-database"><a href="#high-load-of-database" class="headerlink" title="high load of database"></a>high load of database</h5><p>a SQL executes in the index page.</p><h5 id="timeout-failure-in-high-concurrency"><a href="#timeout-failure-in-high-concurrency" class="headerlink" title="timeout failure in high concurrency"></a>timeout failure in high concurrency</h5><p>a singleton object need the unique lock to execute for a long time.</p><h5 id="high-load-of-database-caused-by-cache"><a href="#high-load-of-database-caused-by-cache" class="headerlink" title="high load of database caused by cache"></a>high load of database caused by cache</h5><p>close the cache servers when releasing.</p><h5 id="application-start-out-of-synchronization"><a href="#application-start-out-of-synchronization" class="headerlink" title="application start out of synchronization"></a>application start out of synchronization</h5><p>Apache and JBoss start at the same time.<br>JBoss first, and <code>curl</code> to validate, then Apache.</p><h5 id="big-files-occupy-the-disk-IO"><a href="#big-files-occupy-the-disk-IO" class="headerlink" title="big files occupy the disk IO"></a>big files occupy the disk IO</h5><p>separate different sizes or types of files.</p><h5 id="abuse-of-releasing-environments"><a href="#abuse-of-releasing-environments" class="headerlink" title="abuse of releasing environments"></a>abuse of releasing environments</h5><p>someone did performance testing in releasing environments.</p><h5 id="non-standard-releasing-procedure"><a href="#non-standard-releasing-procedure" class="headerlink" title="non-standard releasing procedure"></a>non-standard releasing procedure</h5><p>forget to uncomment some codes.<br><strong>commit after diff checking</strong>.</p><h5 id="bad-programming-habits"><a href="#bad-programming-habits" class="headerlink" title="bad programming habits"></a>bad programming habits</h5><p><code>NullPointerException</code> throws.<br>forget to check whether the object is <code>null</code>.</p><h3 id="Postscript"><a href="#Postscript" class="headerlink" title="Postscript"></a>Postscript</h3><p><img src="http://7xru22.com1.z0.glb.clouddn.com/17-10-30/1691765.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Overview&quot;&gt;&lt;a href=&quot;#Overview&quot; class=&quot;headerlink&quot; title=&quot;Overview&quot;&gt;&lt;/a&gt;Overview&lt;/h3&gt;&lt;h4 id=&quot;Evolution-of-Large-Site-Architecture&quot;&gt;&lt;a href=&quot;#Evolution-of-Large-Site-Architecture&quot; class=&quot;headerlink&quot; title=&quot;Evolution of Large Site Architecture&quot;&gt;&lt;/a&gt;Evolution of Large Site Architecture&lt;/h4&gt;&lt;h5 id=&quot;Characteristics&quot;&gt;&lt;a href=&quot;#Characteristics&quot; class=&quot;headerlink&quot; title=&quot;Characteristics&quot;&gt;&lt;/a&gt;Characteristics&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;high concurrency, huge traffic&lt;/li&gt;
&lt;li&gt;high availability&lt;/li&gt;
&lt;li&gt;vast data&lt;/li&gt;
&lt;li&gt;users from everywhere, complex situation of network&lt;/li&gt;
&lt;li&gt;bad environment of security &lt;/li&gt;
&lt;li&gt;quick demands changing, frequently releasing&lt;/li&gt;
&lt;li&gt;progessive development&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Doing" scheme="http://TaoSama.com/categories/Doing/"/>
    
      <category term="Distributed" scheme="http://TaoSama.com/categories/Doing/Distributed/"/>
    
    
  </entry>
  
  <entry>
    <title>Miscellany and Summary, Notes(9), Effective C++</title>
    <link href="http://TaoSama.com/2017-10-17/effective-cpp-miscellany-and-summary/"/>
    <id>http://TaoSama.com/2017-10-17/effective-cpp-miscellany-and-summary/</id>
    <published>2017-10-17T02:17:00.000Z</published>
    <updated>2017-10-17T03:32:30.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Miscellany-and-Summary"><a href="#Miscellany-and-Summary" class="headerlink" title="Miscellany and Summary"></a>Miscellany and Summary</h2><p>(I read a Chinese version of the book, any translation problem plz point out. </p><a id="more"></a><h3 id="Pay-attention-to-compiler-warnings"><a href="#Pay-attention-to-compiler-warnings" class="headerlink" title="Pay attention to compiler warnings"></a>Pay attention to compiler warnings</h3><ul><li>be serious to compiler warnings.</li><li>but shouldn’t over rely on compiler warnings.</li></ul><h3 id="Familiarize-yourself-with-the-standard-library"><a href="#Familiarize-yourself-with-the-standard-library" class="headerlink" title="Familiarize yourself with the standard library"></a>Familiarize yourself with the standard library</h3><h3 id="Familiarize-yourself-with-Boost"><a href="#Familiarize-yourself-with-Boost" class="headerlink" title="Familiarize yourself with Boost"></a>Familiarize yourself with Boost</h3><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>It is about 4 months since I started to read the book.<br>I’m so sorrow that I can’t put the ways into practice, although it is quite fascinating.<br>What I’m eager to do is to write the beautiful code.<br>Keep patient, and what learned will settle.</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Miscellany-and-Summary&quot;&gt;&lt;a href=&quot;#Miscellany-and-Summary&quot; class=&quot;headerlink&quot; title=&quot;Miscellany and Summary&quot;&gt;&lt;/a&gt;Miscellany and Summary&lt;/h2&gt;&lt;p&gt;(I read a Chinese version of the book, any translation problem plz point out. &lt;/p&gt;
    
    </summary>
    
      <category term="Doing" scheme="http://TaoSama.com/categories/Doing/"/>
    
      <category term="CPP" scheme="http://TaoSama.com/categories/Doing/CPP/"/>
    
    
  </entry>
  
  <entry>
    <title>Customizing new and delete, Notes(8), Effective C++</title>
    <link href="http://TaoSama.com/2017-10-12/effective-cpp-customizing-new-and-delete/"/>
    <id>http://TaoSama.com/2017-10-12/effective-cpp-customizing-new-and-delete/</id>
    <published>2017-10-12T12:47:00.000Z</published>
    <updated>2017-10-16T12:01:02.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Customizing-new-and-delete"><a href="#Customizing-new-and-delete" class="headerlink" title="Customizing new and delete"></a>Customizing new and delete</h2><p>(I read a Chinese version of the book, any translation problem plz point out. </p><a id="more"></a><h3 id="Understand-the-behavior-of-the-new-handler"><a href="#Understand-the-behavior-of-the-new-handler" class="headerlink" title="Understand the behavior of the new-handler"></a>Understand the behavior of the new-handler</h3><p>well-designed <code>new-handler</code> should do:</p><ul><li>make more memory to be used, i.e., more likely to let the next <code>operator new</code> be successful.</li><li>install another <code>new-handler</code>, i.e., let <code>operator new</code> call <code>set_new_handler</code>.</li><li>uninstall <code>new-handler</code>, i.e., pass <code>nullptr</code> to <code>operator new</code>.</li><li>throw <code>bad_alloc</code> (or derived from <code>bad_alloc</code>) error.</li><li>no return (usually call <code>abort</code> or <code>exit</code>).</li></ul><p>implement the <code>new_handler</code> of class:</p><pre><code class="cpp">class Widget {public:    static std::new_handler set_new_handler(std::new_handler p) throw();    static void* operator new(std::size_t size) throw(std::bad_alloc);private:    static std::new_handler currentHandler;};std::new_handler Widget::currentHandler = 0;std::new_handler Widget::set_new_handler(std::new_handler p) throw() {    std::new_hanlder old = currentHandler;    currentHandler = p;    return old;}class NewHandlerHolder {public:    explicit NewHandlerHolder(std::new_handler nh)    : handler(nh) {}    ~NewHandlerHolder() { std::set_new_handler(handler); }private:    std::new_handler handler;    NewHandlerHolder(const NewHandlerHolder&amp;);    NewHandlerHolder&amp; operator=(const NewHandlerHolder&amp;);};void* Widget::operator new(std::size_t new) throw(std::bad_alloc) {    newhandlerholder h(std::set_new_handler(currenthandler));    return ::oeprator new(size);}</code></pre><p>reuse the code above due to the same implementation for different classes:</p><pre><code class="cpp">template&lt;typename T&gt;class NewHandlerSupport {public:    static std::new_handler set_new_handler(std::new_handler p) throw();    static void* operator new(std::size_t size) throw(std::bad_alloc);private:    static std::new_handler currentHandler;};template&lt;typename T&gt;std::new_handler NewHandlerSupport&lt;T&gt;::currentHandler = 0;template&lt;typename T&gt;std::new_handler NewHandlerSupport::set_new_handler(std::new_handler p) throw() {    std::new_hanlder old = currentHandler;    currentHandler = p;    return old;}template&lt;typename T&gt;void* NewHandlerSupport::operator new(std::size_t new) throw(std::bad_alloc) {    newhandlerholder h(std::set_new_handler(currenthandler));    return ::oeprator new(size);}// curiously recurring template pattern, &quot;mixin&quot; styleclass Widget: public NewHandlerSupport&lt;Widget&gt; {    // ...}</code></pre><p><code>nothrow new</code>:<br>it is limited, only <strong>adapted to memory allocated</strong>, and intermediate constructor called may throw exception.</p><pre><code class="cpp">Widget* pw1 = new Widget;  // if fails, throw bad_allocWidget* pw2 = new(std::nothrow) Widget; // if fails, return nullptr</code></pre><h3 id="Understand-when-it-makes-sense-to-replace-new-and-delete"><a href="#Understand-when-it-makes-sense-to-replace-new-and-delete" class="headerlink" title="Understand when it makes sense to replace new and delete"></a>Understand when it makes sense to replace new and delete</h3><ul><li>to check the wrong usage.</li><li>to improve the efficiency of allocation and deallocation.</li><li>to collect the log of usage.</li><li>to decrease the additional space cost caused by default memory manager.</li><li>to improve the suboptimal alignment.</li><li>to make related objects clustered.</li><li>to obtain non-traditional behaviors.</li></ul><h3 id="Adhere-to-convention-when-writing-new-and-delete"><a href="#Adhere-to-convention-when-writing-new-and-delete" class="headerlink" title="Adhere to convention when writing new and delete"></a>Adhere to convention when writing new and delete</h3><ul><li><code>operator new</code> should have an infinite loop which tries to allocate memory.</li></ul><pre><code class="cpp">void* operator new(std::size_t size) throw(std::bad_alloc) {    using namespace std;    if(size == 0) {        size = 1;     }    while(true) {        // Try to allocate &quot;size&quot; bytes         if(allocation is ok) return (a pointer to the memory allocated);        new_handler globalHandler = set_new_handler(0);        set_new_handler(globalHandler);         if(globalHandler) (*globalHandler)();          else throw bad_alloc();    }}</code></pre><ul><li><code>operator delete</code> should do nothing when passed by <code>nullptr</code>, “Class version” should<br> handle the “wrong apply that requires the bigger size than the true size”.</li></ul><pre><code class="cpp">class Base {public:    static void* operator new(std::size_t size) throw(std::bad_alloc);    static void operator delete(void* rawMemoty, std::size_t size) throw();};void* Base::operator new(std::size_t size) throw(std::bad_alloc) {    if(size != sizeof(Base)) return ::operator new(size);    // ...}void Base::operator delete(void* rawMemory, std::size_t size) throw() {    if(rawMemory == 0) return;    if(size != sizeof(Base)) {        ::operator delete(rawMemory);        return;    }    // ...}</code></pre><h3 id="Write-placement-delete-if-you-write-placement-new"><a href="#Write-placement-delete-if-you-write-placement-new" class="headerlink" title="Write placement delete if you write placement new"></a>Write placement delete if you write placement new</h3><ul><li>when write <code>Widget* pw = new Widget;</code>, two functions are called, one is <code>operator new</code>, one is Widget’s default construtor.<br>if the constructor throws, the memory allocated by the first one should be recovered, or it will be memory leak.<br>so the corresponding <code>operator delete</code> should be provided correctly.</li><li>when write a <code>placement operator new</code>, plz be sure to write a <code>placement operator delete</code>.</li></ul><pre><code class="cpp">void* operator new(std::size_t) throw(std::bad_alloc); // normal newvoid* operator new(std::size_t, void*) throw(); // placement newvoid* operator new(std::size_t, const std::nothrow_t&amp;) throw(); // nothrow new</code></pre><ul><li>when declaring <code>placement new</code> and <code>placement delete</code>, plz <strong>do not hide the normal version</strong> intendedly or unconsciously.</li></ul><pre><code class="cpp">class StandardNewDeleteForms {public:    // normal new/delete    static void* operator new(std::size_t size) throw std::bad_alloc) {        return ::operator new(size);    }    static void operator delete(void* pMemory) throw() {        ::operator delete(pMemory);    }    // placement new/delete    static void* operator new(std::size_t size, void* ptr) throw() {        ::operator new(size, ptr);    }    static void operator delete(void* pMemory, void* ptr) throw() {        ::operator delete(pMemory, ptr);    }    // nothrow new/delete    static void* operator new(std::size_t size, const std::nothrow_t&amp; nt) throw() {        return ::operator new(size, nt);    }    static void operator delete(void* pMemory, const std::nothrow_t&amp;) throw() {        ::operator delete(pMemory);    }};class Widget: public StandardNewDeleteForms {public:    // inherit normal new/delete    using StandardNewDeleteForms::operator new;    using StandardNetDeleteForms::operator delete;    // customized placement new/delete    static void* operator new(std::size_t size, std::ostream&amp; logStream) throw(std::bad_alloc);    static void operator delete(void* memory, std::ostream&amp; logStream) throw();};</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Customizing-new-and-delete&quot;&gt;&lt;a href=&quot;#Customizing-new-and-delete&quot; class=&quot;headerlink&quot; title=&quot;Customizing new and delete&quot;&gt;&lt;/a&gt;Customizing new and delete&lt;/h2&gt;&lt;p&gt;(I read a Chinese version of the book, any translation problem plz point out. &lt;/p&gt;
    
    </summary>
    
      <category term="Doing" scheme="http://TaoSama.com/categories/Doing/"/>
    
      <category term="CPP" scheme="http://TaoSama.com/categories/Doing/CPP/"/>
    
    
  </entry>
  
  <entry>
    <title>Templates and Generic Programming, Notes(7), Effective C++</title>
    <link href="http://TaoSama.com/2017-10-09/effective-cpp-templates-and-generic-programming/"/>
    <id>http://TaoSama.com/2017-10-09/effective-cpp-templates-and-generic-programming/</id>
    <published>2017-10-09T07:10:00.000Z</published>
    <updated>2017-10-16T12:05:42.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Templates-and-Generic-Programming"><a href="#Templates-and-Generic-Programming" class="headerlink" title="Templates and Generic Programming"></a>Templates and Generic Programming</h2><p>(I read a Chinese version of the book, any translation problem plz point out. </p><a id="more"></a><h3 id="Understand-implicit-interfaces-and-compile-time-polymorphism"><a href="#Understand-implicit-interfaces-and-compile-time-polymorphism" class="headerlink" title="Understand implicit interfaces and compile-time polymorphism"></a>Understand implicit interfaces and compile-time polymorphism</h3><ul><li>classes and templates both support interfaces and polymorphism.</li><li>as for classes, interfaces is explicit, based on function signatures,<br>and their polymorphism happen in run-time via virtual functions.</li><li>as for templates, interfaces is implicit, based on valid expressions,<br>and their polymorphism happen in compile-time via template instantiation and function overloading resolution.</li></ul><h3 id="Understand-the-two-meanings-of-typename"><a href="#Understand-the-two-meanings-of-typename" class="headerlink" title="Understand the two meanings of typename"></a>Understand the two meanings of typename</h3><p>dependent names: the names appeared in template and dependent on some template parameter.<br>nested dependent names: the dependent name nested in class.<br><code>C::const_iterator</code> is a <strong>nested dependent type name</strong>.</p><blockquote><p><code>C::const_iterator* x</code>, what if <code>const_iterator</code> is a static member variable and <code>x</code> is a global variable?</p></blockquote><ul><li>keyword <code>class</code> and <code>typename</code> are the same when declare template parameters.</li><li>use <code>typename</code> to indentify the <strong>nested dependent name</strong>,<br>but it mustn’t modify the base class in base class lists and member initialization lists.</li></ul><pre><code class="cpp">template&lt;typename T&gt;class Derived: public Base&lt;T&gt;::Nested {public:    explicit Derived(int x): Basee&lt;T&gt;::Nested(x) {        typename Base&lt;T&gt;::Nested tmp;     }};</code></pre><h3 id="Know-how-to-access-names-in-templatized-base-classes"><a href="#Know-how-to-access-names-in-templatized-base-classes" class="headerlink" title="Know how to access names in templatized base classes"></a>Know how to access names in templatized base classes</h3><ul><li>use <code>this-&gt;</code> to refer to the member names of base class templates in derived class templates.</li><li>use base class modifier, <code>Base::name</code></li></ul><h3 id="Factor-parameter-independent-code-out-of-templates"><a href="#Factor-parameter-independent-code-out-of-templates" class="headerlink" title="Factor parameter-independent code out of templates"></a>Factor parameter-independent code out of templates</h3><ul><li>templates can generate a couple of classes and functions,<br>so any template code should not be dependent on some template parameter which can cause code bloat.</li><li>code bloat caused by non-type template parameters can be removed via replacing them with<br>function parameter or using class member variable.</li><li>code bload caused by type parameters can be reduced via sharing the implementation<br>when the instantiation types are with completely same binary representations,<br>such as strongly typed pointers <code>(T*)</code> to untyped pointers <code>(void*)</code>.</li></ul><pre><code class="cpp">template&lt;typename T, std::size_t&gt;class SquareMatrix {public:    void invert();};/***************************************************/template&lt;typename T&gt;class SquareMatrixBase {protected:    SquareMatrixBase(std::size_t n, T* pMem)    : size(n), pData(pMem) {}    void setDataPtr(T* ptr) { pData = ptr; }    void invert() {} private:    std::size_t size;    T* pData;};template&lt;typename T, std::size_t n&gt;class SquareMatrix: private SquareMatrixBase&lt;T&gt; {public:    SquareMatrix()    : SquareMatrixBase&lt;T&gt;(n, 0), pData(new T[n * n]) {        this-&gt;setDataPtr(pData.get());    }    void invert() { SquareMatrixBase&lt;T&gt;::invert(); }private:    std::unique_ptr&lt;T[]&gt; pData;    // T data[n * n]; // maybe it is your choice};// in the first version, the matrix size is a compile-time constant, and// it can be optimized as immediate operand in generated instructions.// while the second version, resulting in smaller executable size, it can reduce // the size of working set of the program, and strengthen the locality of reference in cache.// well, only profiling matters!!!</code></pre><h3 id="Use-member-function-templates-to-accept-“all-compatible-types”"><a href="#Use-member-function-templates-to-accept-“all-compatible-types”" class="headerlink" title="Use member function templates to accept “all compatible types”"></a>Use member function templates to accept “all compatible types”</h3><ul><li>use member function templates to generate the functions which accept “all compatible types”.</li><li>you need to declare normal copy constructor and copy assignment operator when using<br> member function templates. or the compiler will generate one which may be not what<br> you want.</li></ul><pre><code class="cpp">template&lt;typename T&gt;class SmartPtr {public:    SmartPtr(const SmartPtr&amp; r);    template&lt;typename U&gt;    SmartPtr(const SmartPtr&lt;U&gt;&amp; other) // Make it more like a real pointer    : heldPtr(other.get()) {}    T* get() const { return heldPtr; }private:    T* heldPtr;};</code></pre><h3 id="Define-non-member-functions-inside-templates-when-type-conversions-are-desired"><a href="#Define-non-member-functions-inside-templates-when-type-conversions-are-desired" class="headerlink" title="Define non-member functions inside templates when type conversions are desired"></a>Define non-member functions inside templates when type conversions are desired</h3><pre><code class="cpp">template&lt;typename T&gt; class Rational;template&lt;typename T&gt;const Rational&lt;T&gt; doMutiply(const Rational&lt;T&gt;&amp; lhs, const Rational&lt;T&gt;&amp; rhs);template&lt;typename T&gt;class Rational {public:    // use a helper to avoid the affect of inlining     friend Rational&lt;T&gt; operator*(const Rational&lt;T&gt;&amp; lhs, const Rational&lt;T&gt;&amp; rhs) {        return doMultiply(lhs, rhs);     }};</code></pre><h3 id="Use-traits-classes-for-information-about-types"><a href="#Use-traits-classes-for-information-about-types" class="headerlink" title="Use traits classes for information about types"></a>Use traits classes for information about types</h3><ul><li>traits classes make “type-related information” be available in compile-time,<br>which is implemented by templates and template specializations.</li><li>traits classes can execute the <code>if...else</code> test in compile-time via overloading.</li></ul><pre><code class="cpp">struct input_iterator_tag {};struct output_iterator_tag {};struct forward_iterator_tag: public input_iterator_tag {};struct bidirectional_iterator_tag: public forward_iterator_tag {};struct random_access_iterator_tag: public bidirectional_iterator_tag {};template&lt;typename IterT, typename DistT&gt;void doAdvance(IterT&amp; iter, DistT d, std::random_access_iterator_tag) { iter += d; }template&lt;typename IterT, typename DistT&gt;void doAdvance(IterT&amp; iter, DistT d, std::bidirectional_iterator_tag) {    if(d &gt;= 0) { while(d--) ++iter; }    else { while(d++) --iter; }}// it can also accept forward_iterator_tagtemplate&lt;typename IterT, typename DistT&gt;void doAdvance(IterT&amp; iter, DistT d, std::input_iterator_tag) {    if(d &lt; 0) {        throw std::out_of_range(&quot;Negative distance&quot;);     }    while(d--) ++iter;}template&lt;typename T&gt;void advance(IterT&amp; iter, DistT d) {    doAdvance(iter, d, typename std::iterator_traits&lt;IterT&gt;::iterator_category());}</code></pre><h3 id="Be-aware-of-templatee-metaprogramming"><a href="#Be-aware-of-templatee-metaprogramming" class="headerlink" title="Be aware of templatee metaprogramming"></a>Be aware of templatee metaprogramming</h3><ul><li>TMP is Turing-complete, and TMP loops is recursive template instantiation.</li></ul><pre><code class="cpp">// It may be implemented by `enum hack` in lower version of cpp compiler.template&lt;std::size_t n&gt;struct factorial {    static const std::size_t value = n * factorial&lt;n - 1&gt;::value;    };template&lt;&gt;struct factorial&lt;0&gt; {    static const std::size_t value = 1;};</code></pre><ul><li>TMP can be used:<ul><li>validate type informations or some others.</li><li>optimize matrix operations, such as <a href="https://en.wikipedia.org/wiki/Expression_templates" target="_blank" rel="external">expression templates</a>.</li><li>generate custom design patterns for users. <strong>(TMP-based policy-based design) -&gt; generative programming</strong></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Templates-and-Generic-Programming&quot;&gt;&lt;a href=&quot;#Templates-and-Generic-Programming&quot; class=&quot;headerlink&quot; title=&quot;Templates and Generic Programming&quot;&gt;&lt;/a&gt;Templates and Generic Programming&lt;/h2&gt;&lt;p&gt;(I read a Chinese version of the book, any translation problem plz point out. &lt;/p&gt;
    
    </summary>
    
      <category term="Doing" scheme="http://TaoSama.com/categories/Doing/"/>
    
      <category term="CPP" scheme="http://TaoSama.com/categories/Doing/CPP/"/>
    
    
  </entry>
  
  <entry>
    <title>Inheritance and Object-Oriented Design, Notes(6), Effective C++</title>
    <link href="http://TaoSama.com/2017-09-11/effective-cpp-inheritance-and-object-oriented-design/"/>
    <id>http://TaoSama.com/2017-09-11/effective-cpp-inheritance-and-object-oriented-design/</id>
    <published>2017-09-11T09:22:00.000Z</published>
    <updated>2017-10-16T12:01:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Inheritance-and-Object-Oriented-Design"><a href="#Inheritance-and-Object-Oriented-Design" class="headerlink" title="Inheritance and Object-Oriented Design"></a>Inheritance and Object-Oriented Design</h2><p>(I read a Chinese version of the book, any translation problem plz point out. </p><a id="more"></a><h3 id="Make-sure-public-inheritance-models-“is-a”"><a href="#Make-sure-public-inheritance-models-“is-a”" class="headerlink" title="Make sure public inheritance models “is-a”"></a>Make sure public inheritance models “is-a”</h3><pre><code class="cpp">class Bird {    // ...};class FlyingBird: public Bird {public:    virtual void fly();    // ...};class Penguin: public Bird {    // ...};</code></pre><p>public inheritance means everything must be suitable for derived class if it is suitable for base class,<br>because every derived class object is a base class object.</p><p><strong>is a square a rectangle?</strong></p><h3 id="Avoid-hiding-inherited-names"><a href="#Avoid-hiding-inherited-names" class="headerlink" title="Avoid hiding inherited names"></a>Avoid hiding inherited names</h3><p>CPP name-hiding rules:<br>all the functions of base class with the same name as derived class will be hiden,<br>even if the parameter lists is different. it is both suitable for <strong>virtual and non-virtual functions</strong>.</p><p>CPP name-lookup rules:<br>local -&gt; derived -&gt; namespace of derived -&gt; base -&gt; namespace of base -&gt; global</p><p>but if you use public inheritance without inheriting the overloaded functions, it violates the “is-a” relation between base and derived class.</p><ul><li><code>using</code> declaration<br>introduce all the functions of specific name of base class to derived class,<br>it is ok for public inheritance.<br>```cpp<br>class Base {<br>private:<br>  int x;<br>public:<br>  virtual void mf1() = 0;<br>  virtual void mf1(int);<br>  virtual void mf2();<br>  void mf3();<br>  void mf3(double);<br>};</li></ul><p>class Derived: public Base {<br>public:<br>    using Base::mf1;<br>    using Base::mf3;<br>    virtual void mf1();<br>    void mf3();<br>    void mf4();<br>};</p><pre><code>what if for partially inheriting the functions?* forwarding function  use for private inheritance.```cppclass Base {public:    virtual void mf1() = 0;    virtual void mf1(int);};class Derived: private Base {public:    virtual void mf1() { // Forwarding function        Base::mf1();     // Implicitly inline    }};</code></pre><h3 id="Differentiate-between-inheritance-of-interface-and-inhertiace-of-implementation"><a href="#Differentiate-between-inheritance-of-interface-and-inhertiace-of-implementation" class="headerlink" title="Differentiate between inheritance of interface and inhertiace of implementation"></a>Differentiate between inheritance of interface and inhertiace of implementation</h3><ul><li>pure virtual functions: only inherit interface.</li><li>impure virtual functions: inherit interface and a default implementation.</li><li>non-virtual functons: inherit interface and a forced implementation. invariant far more than specialization.</li></ul><h3 id="Consider-alternatives-to-virtual-functions"><a href="#Consider-alternatives-to-virtual-functions" class="headerlink" title="Consider alternatives to virtual functions"></a>Consider alternatives to virtual functions</h3><ul><li>use <strong>Non-Virtual Interface</strong> to implement <strong>Template Method</strong> pattern.<br><strong>advantages</strong>: do something before and after the operation, like mutex, log entry, validation of constraints.<pre><code class="cpp">class GameCharacter {public:  // This non-virtual function is a wrapper for the virtual function.  int healthValue() const {       // ...      int retVal = doHealthValue();      // ...      return retVal;  }private:  virtual int doHealthValue() const {      // ...   }};</code></pre></li><li>use <strong>Function Pointers</strong> to implement <strong>Strategy</strong> pattern.<pre><code class="cpp">class GameCharacter;int defaultHealthCalc(const GameCharacter&amp; gc);class GameCharacter {public:  typedef int (*HealthCalcFunc)(const GameCharacter&amp;);  explicit GameCharacter(HealthCalcFunc hcf = defaultHealthCalc)                          : healthFunc(hcf) {}  int healthValue() const { return healthFunc(*this); }private:  HealthCalcFunc healthFunc;};</code></pre></li></ul><p><strong>advantages</strong>:<br>different entities of same type can have different function pointers.<br>function pointers can be changed in run-time.<br><strong>disadvantages</strong>:<br>once needing to access the non-public members, you have to weaken the encapsulation of class.</p><pre><code class="cpp">class EvilBadGuy: public GameCharacter {public:    explicit EvilBadGuy(HealthCalcFunc hcf = defaultHealthCalc)                            : healthFunc(hcf) {}};int loseHealthQuickly(const GameCharacter&amp;);int loseHealthSlowly(const GameCharacter&amp;);EvilBadGuy ebg1(loseHealthQuickly);EvilBadGuy ebg2(loseHealthSlowly);</code></pre><p>with <code>std::function</code>:<br>call accept all the callable entities <strong>compatible</strong> with target signature (<strong>implicit conversion</strong>).<br>with <code>std::bind</code>:<br>bind a member function with an object.</p><pre><code class="cpp">class GameCharacter;int defaultHealthCalc(const GameCharacter&amp; gc);class GameCharacter {public:    typedef std::function&lt;int (const GameCharacter&amp;)&gt; HealthCalcFunc;      explicit GameCharacter(HealthCalcFunc hcf = defaultHealthCalc)                            : healthFunc(hcf) {}    int healthValue() const { return healthFunc(*this); }private:    HealthCalcFunc healthFunc;};class EvilBadGuy: public GameCharacter {    // ...};short calcHealth(const GameCharacter&amp;);struct HealthCalculator {    int operator()(const GameCharacter&amp;）const {}};class GameLevel {public:    float health(const GameCharacter&amp;) const;};EvilBadGuy ebg1(calcHealth); // Function pointerEvilBadGuy ebg2(HealthCalculator()); // FunctorGameLevel currentLevel;EvilBadGuy ebg3(std::bind(&amp;GameLevel::health, currentLevel, std::placeholders::_1));</code></pre><ul><li>classical <strong>Strategy</strong> pattern (with virtual functions)<br>make <code>HealthCalcFunc</code> be a seperate hierarchy of inheritance.<br>```cpp<br>class GameCharacter;<br>class HealthCalcFunc {<br>public:<br>  virtual int calc(const GameCharacter&amp; gc) const { }<br>} defaultHealthCalc;</li></ul><p>class GameCharacter {<br>public:<br>    explicit GameCharacter(HealthCalcFunc_ phcf = &amp;defaultHealthCalc)<br>                            : pHealthFunc(phcf) {}<br>    int healthValue() const { return pHealthFun-&gt;(_this); }<br>private:<br>    HealthCalcFunc* pHealthFunc;<br>};</p><pre><code>### Never redefine an inherited non-virtual function### Never redefine a function&#39;s inherited default parameter value* virtual functions is dynamically bound, but default parameter values is statically bound.* static type is the type declared, and dynamic type is the type pointed to currently.* use **NVI (non-virtual interface)** to substitute it.```cppclass Shape {public:    enum ShapeColor { Red, Green, Blue };    void draw(ShapeColor color = Red) const {        doDraw(color);     }private:    virtual void doDraw(ShapeColor color) const = 0;};class Rectangle: public Shape {public:    // ...private:    virtual void doDraw(ShapeColor color) const;};</code></pre><h3 id="Model-“has-a”-or-“is-implemented-in-terms-of”-through-composition"><a href="#Model-“has-a”-or-“is-implemented-in-terms-of”-through-composition" class="headerlink" title="Model “has-a” or “is-implemented-in-terms-of” through composition"></a>Model “has-a” or “is-implemented-in-terms-of” through composition</h3><ul><li>composition has many <strong>synonyms</strong>: layering, containment, aggregation, embedding.</li><li>in application domain, composition means “has-a”, but in inplementation domain, it means “is-implemented-in-terms-of”.</li></ul><h3 id="Use-private-inheritance-judiciously"><a href="#Use-private-inheritance-judiciously" class="headerlink" title="Use private inheritance judiciously"></a>Use private inheritance judiciously</h3><ul><li>private inheritance is a technique of implementation.</li><li>private inheritance means only implementation is inherited and interfaces should be omitted.</li><li>private inheritance is ok, when you want to redefine the inherited virtual functions.  </li></ul><pre><code class="cpp">class Timer {public:    explicit Timer(int tickFrequency);    virtual void onTick() const;};// Althrough Widget reuse Timer, it exposes `onTick` to the userclass Widget: private Timer {private:    virtual void onTick() const;};// This one is kind of complicated, but it can prevent from using WidgetTimer// in the derived classes of Widget, (something like Java `final`, C# `sealed`)// Once changed to WidgetTimer*, it can also lower the compilation dependencyclass Widget {public:    class WidgetTimer: public Timer {    public:        virtual void onTick() const;    };    WidgetTimer timer;};</code></pre><ul><li>when facing space optimization, private inheritance may be the best choice.<br>empty class: with no non-static variables, no virtual functions and no virtual base classes.<br><strong>EBO (empty class optimization)</strong> will let your base class take no space.</li></ul><h3 id="Use-multiple-inheritance-judiciously"><a href="#Use-multiple-inheritance-judiciously" class="headerlink" title="Use multiple inheritance judiciously"></a>Use multiple inheritance judiciously</h3><pre><code class="cpp">class File { // ... };class InputFile: public File { // ... };class OutputFile: public File { // ... };class IOFile: public InputFile, public OutputFile { // ... };</code></pre><ul><li>MI will copy the data through each inheritance path (such as <code>File::name</code>).</li><li>once not, make the class with the data to be a virtual base class, and all the classes intermediately inherited <strong>virtual inherit</strong> it.</li></ul><pre><code class="cpp">class File { // ... };class InputFile: virtual public File { // ... };class OutputFile: virtual public File { // ... };class IOFile: public InputFile, public OutputFile { // ... };</code></pre><ul><li><strong>the initialization of virtual base class is granted to the most derived class</strong>.</li><li>virtual inheritance will increase the cost of size, speed, and initialization(assignment).<br>the virtual base classes with no data will be best-pratical situation.</li><li>MI has some usages: one is the combination of “public inheritance inherits some interface class” and “private inheritance inherits some helper class for implementation”.<br><code>class CPerson: public IPerson, private PersonInfo;</code></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Inheritance-and-Object-Oriented-Design&quot;&gt;&lt;a href=&quot;#Inheritance-and-Object-Oriented-Design&quot; class=&quot;headerlink&quot; title=&quot;Inheritance and Object-Oriented Design&quot;&gt;&lt;/a&gt;Inheritance and Object-Oriented Design&lt;/h2&gt;&lt;p&gt;(I read a Chinese version of the book, any translation problem plz point out. &lt;/p&gt;
    
    </summary>
    
      <category term="Doing" scheme="http://TaoSama.com/categories/Doing/"/>
    
      <category term="CPP" scheme="http://TaoSama.com/categories/Doing/CPP/"/>
    
    
  </entry>
  
  <entry>
    <title>Implementations, Notes(5), Effective C++</title>
    <link href="http://TaoSama.com/2017-09-05/effective-cpp-implementations/"/>
    <id>http://TaoSama.com/2017-09-05/effective-cpp-implementations/</id>
    <published>2017-09-05T10:16:00.000Z</published>
    <updated>2017-09-20T09:36:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Implementations"><a href="#Implementations" class="headerlink" title="Implementations"></a>Implementations</h2><p>(I read a Chinese version of the book, any translation problem plz point out. </p><a id="more"></a><h3 id="Postpone-variable-definitions-as-long-as-possible-until-initial-values-can-be-provided"><a href="#Postpone-variable-definitions-as-long-as-possible-until-initial-values-can-be-provided" class="headerlink" title="Postpone variable definitions as long as possible until initial values can be provided"></a>Postpone variable definitions as long as possible until initial values can be provided</h3><h3 id="Minimize-casting"><a href="#Minimize-casting" class="headerlink" title="Minimize casting"></a>Minimize casting</h3><ul><li>old-style casts<ul><li>C style cast: <code>(T)expression</code></li><li>function style cast: <code>T(expression)</code></li></ul></li><li>CPP style casts<ul><li>const_cast: cast away the constness.</li><li>dynamic_cast: safe downcasting, to decide which type a object belongs to in the inheritance hierarchy.</li><li>reinterpret_cast: low-level cast.</li><li>static_cast: force implicit conversions.</li></ul></li></ul><p><strong>tips:</strong></p><ul><li>dynamic_casts maybe implement based on the comparision on string names of classes.</li><li>try to hide the cast in a function, then provide to customers, once it is a must.</li><li>do use the CPP style cast.</li></ul><h3 id="Avoid-returning-“handles”-to-object-internals"><a href="#Avoid-returning-“handles”-to-object-internals" class="headerlink" title="Avoid returning “handles” to object internals"></a>Avoid returning “handles” to object internals</h3><p><strong>handles</strong>: references, pointers, iterators<br>try to use a copy</p><pre><code class="cpp">class GUIObject { ... };const Rectangle boundingBox(const GUIObject&amp; obj);GUIobject* pgo;// The temporary Point is destructed when the statement is over, // and the pUpperLeft is dangling.const Point* pUpperLeft = &amp;(boundingBox(*pgo).upperLeft());</code></pre><h3 id="Strive-for-exception-safe-code"><a href="#Strive-for-exception-safe-code" class="headerlink" title="Strive for exception-safe code"></a>Strive for exception-safe code</h3><h4 id="when-exception-throws-exception-safe-code-will-guarantee"><a href="#when-exception-throws-exception-safe-code-will-guarantee" class="headerlink" title="when exception throws, exception-safe code will guarantee:"></a>when exception throws, exception-safe code will guarantee:</h4><pre><code class="cpp">class PrettyMenu {public:    void changeBackground(std::istream&amp; imgSrc);private:    Mutex mutex;    Image* bgImage;    int imageChanges;};void PrettyMenu::changeBackground(std::istream&amp; imgSrc) {    lock(&amp;mutex);    delete bgImage;    ++imageChanges;    bgImage = newImage(imgSrc);    unlock(&amp;mutex);}</code></pre><ul><li>no resources leak.<br>if <code>new Image(imgSrc)</code> throws, <code>mutex</code> will never release.</li><li>no data break.<br>if <code>new Image(imgSrc)</code> throw, <code>bgImg</code> will point to a deleted object.<br>and the behavior of <code>imageChanges</code> will be weird, which it changed or not. </li></ul><h4 id="exception-safe-functions-provide-3-guarantees"><a href="#exception-safe-functions-provide-3-guarantees" class="headerlink" title="exception-safe functions provide 3 guarantees:"></a>exception-safe functions provide 3 guarantees:</h4><ul><li>basic promise.<br>when exception throws, everything is in a valid state, but the users can’t predict it.</li><li>strong guarantee.<br>when exception throws, the program remains unchanged.</li><li>nothrow guarantee<br><code>int doSomething() throw();</code><br>though the function throws nothing, it is not guaranteed. aka., if throws, it will be a fatal error, <code>unexpected</code> will be called (Google <code>set_unexpected</code> for detail).<br>all the properties of the functions is decided by implementation, not the declaration.</li></ul><h4 id="copy-and-swap"><a href="#copy-and-swap" class="headerlink" title="copy and swap"></a>copy and swap</h4><pre><code class="cpp">// pimpl idiomstruct PMImpl {    std::shared_ptr&lt;Image&gt; bgImage;    int imageChanges;};class PrettyMenu {private:    Mutex mutex;    std::shared_ptr&lt;PMImpl&gt; pImpl;}void PrettyMenu::changeBackground(std::istream&amp; imgSrc) {    using std::swap;    Lock m1(&amp;mutex); // Use resource-managing class to manipulate mutex    std::shared_ptr&lt;PMImpl&gt; pNew(new PMImpl(*pImpl)); // Copy    pNew-&gt;bgImage.reset(new Image(imgSrc)); // Update the copy    swap(pImpl, pNew); // Swap}</code></pre><ul><li>even if strong guarantee can be implemented by <code>copy and swap</code>, but it is not implementable to all the functions. <strong>and watch the cost of copy</strong>.</li><li>exception-safety is decided by the weakest one of all the functions.</li><li>once you have no choice but to set no any guarantee (when you call <code>the old code</code>), <strong>document it</strong>. </li></ul><h3 id="Understand-the-ins-and-outs-of-inlining"><a href="#Understand-the-ins-and-outs-of-inlining" class="headerlink" title="Understand the ins and outs of inlining"></a>Understand the ins and outs of inlining</h3><ul><li><code>inline</code> just applys for inling to compiler, not forcing to do so.</li><li><code>inline</code> the minimal, frequently called functions.</li><li><code>inline</code> functions usually put in headers. because inlining happens in compiling period, compiler needs to know what they look like.</li><li>the functions calls virtual functions will be never inlined, because virtual functions can only be known in run-time.</li><li>think over before inling construtors and destrutors. maybe there are complicated codes generated by compilers.</li></ul><h3 id="Minimize-compilation-dependencies-between-files"><a href="#Minimize-compilation-dependencies-between-files" class="headerlink" title="Minimize compilation dependencies between files"></a>Minimize compilation dependencies between files</h3><p>pimpl idiom -&gt; handle classes</p><pre><code class="cpp">// Person.h#include &lt;string&gt;#include &quot;datefwd.h&quot;#include &quot;addressfwd.h&quot;class Person {public:    Person(const std::string&amp; name, const Date&amp; birthday, const Address&amp; addr);    std::string name() const;    std::string birthDate() const;    std::string address() const;private:    std::shared_ptr&lt;PersonImpl&gt; pImpl;};// Person.cpp#include &quot;Person.h&quot;#include &quot;PersonImpl.h&quot;Person::Person(const std::string&amp; name, const Date&amp; birthday, const Address&amp; addr)                : pImpl(new PersonImpl(name, birthday, addr)) {}std::string Person::name() const {    return pImpl-&gt;name(); }</code></pre><p>abstract base class -&gt; interface class</p><pre><code class="cpp">class Person {public:    virtual ~Person();    virtual std::string name() const = 0;    virtual std::string birthDate() const = 0;    virtual std::string address() const = 0;    static std::shared_ptr&lt;Person&gt; create(const std::string&amp; name,                                             const Date&amp; birthday, const Address&amp; addr);};class RealPerson: public Person {public:    RealPerson(const std::string&amp; name, const Date&amp; birthday, const Address&amp; addr)                : name(name), birthday(birthday), addr(addr) {}    virtual ~RealPerson() {}    std::string name() const;    std::string birthDate() const;    std::string address() const;};std::shared_ptr&lt;Person&gt; create(const std::string&amp; name,                                 const Date&amp; birthday, const Address&amp; addr) {    return std::shared_ptr&lt;Person&gt;(new RealPerson(name, birthday, addr)); }</code></pre><ul><li>don’t use objects, if object references or object pointers achieves.</li><li>replace class definitions with class declarations as much as possible.</li><li>provide declaration and definition with different headers.</li></ul><p><strong>use handle classes and interface classes to minimize changes for users during the develpment of program.<br>but replace with concrete classes, when the great difference in speed or size compared to coupling between classes.</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Implementations&quot;&gt;&lt;a href=&quot;#Implementations&quot; class=&quot;headerlink&quot; title=&quot;Implementations&quot;&gt;&lt;/a&gt;Implementations&lt;/h2&gt;&lt;p&gt;(I read a Chinese version of the book, any translation problem plz point out. &lt;/p&gt;
    
    </summary>
    
      <category term="Doing" scheme="http://TaoSama.com/categories/Doing/"/>
    
      <category term="CPP" scheme="http://TaoSama.com/categories/Doing/CPP/"/>
    
    
  </entry>
  
  <entry>
    <title>Designs and Declarations, Notes(4), Effective C++</title>
    <link href="http://TaoSama.com/2017-09-04/effective-cpp-designs-and-declarations/"/>
    <id>http://TaoSama.com/2017-09-04/effective-cpp-designs-and-declarations/</id>
    <published>2017-09-04T05:19:00.000Z</published>
    <updated>2018-03-12T01:47:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Designs-and-Declarations"><a href="#Designs-and-Declarations" class="headerlink" title="Designs and Declarations"></a>Designs and Declarations</h2><p>(I read a Chinese version of the book, any translation problem plz point out. </p><a id="more"></a><h3 id="Make-interfaces-easy-to-use-correctly-and-hard-to-use-incorrectly"><a href="#Make-interfaces-easy-to-use-correctly-and-hard-to-use-incorrectly" class="headerlink" title="Make interfaces easy to use correctly and hard to use incorrectly"></a>Make interfaces easy to use correctly and hard to use incorrectly</h3><ul><li>introduce a new type.<br><code>Data d(Month(9), Day(4), Year(2017));</code></li><li>restrict some invalid operations on types.<br>add <code>const</code> is a useful way. </li></ul><pre><code class="cpp">if(a * b = c) // ...// It will avoid the problem above.const Type operator*(const Type&amp; a, const Type&amp; b);</code></pre><ul><li>predefine all the valid values, if we want type safety.<pre><code class="cpp">class Month {public:  static Month Jan() { return Month(1); }  static Month Feb() { return Month(2); }  // ...  static Month Dec() { return Month(12); }  // ...private:  explicit Month(int m);  // ...};</code></pre></li><li>make interfaces be compatible with built-in types, aka. providing the interfaces of consistent behaviors.</li><li>force users to use smart pointers. e.g., factory function returns a smart pointer.<br><code>std::shared_ptr&lt;Investment&gt; createInvestment();</code></li></ul><h3 id="Treat-class-design-as-type-design"><a href="#Treat-class-design-as-type-design" class="headerlink" title="Treat class design as type design"></a>Treat class design as type design</h3><p>Questions to think:</p><ul><li>create and destroy</li><li>initialize and assign</li><li>pass by value -&gt; copy constructor</li><li>valid values -&gt; invariants(约束) </li><li>inheritance</li><li>conversion</li><li>functions and operators</li><li>access specifiers</li><li>undeclared interface ???</li><li>generalization -&gt; templates</li><li>really need a new type? maybe some non-member functions or templates achieve the goal.</li></ul><h3 id="Prefer-pass-by-reference-to-const-to-pass-by-value"><a href="#Prefer-pass-by-reference-to-const-to-pass-by-value" class="headerlink" title="Prefer pass-by-reference-to-const to pass-by-value"></a>Prefer pass-by-reference-to-const to pass-by-value</h3><ul><li>avoid any construction and destructions, more efficient.</li><li>avoid the slicing problem brought by derived class upcast to base class.</li><li>pass-by-value is proper for built-in types, e.g., STL iterators and functors.</li></ul><h3 id="Don’t-try-to-return-a-reference-when-you-must-return-an-object"><a href="#Don’t-try-to-return-a-reference-when-you-must-return-an-object" class="headerlink" title="Don’t try to return a reference when you must return an object"></a>Don’t try to return a reference when you must return an object</h3><p>try the one that behave correctly, and throw the responsibility to the compilers.</p><h3 id="Prefer-non-member-non-friend-functions-to-member-functions"><a href="#Prefer-non-member-non-friend-functions-to-member-functions" class="headerlink" title="Prefer non-member, non-friend functions to member functions"></a>Prefer non-member, non-friend functions to member functions</h3><p>a natural way, let tool function be a non-member function and put inside the same namespace where the classes it operates is.<br>then, for future expansion of more tool functions, sperate them in new headers but in the same namespaces.<br><strong>increase encapsulation, packaging flexibility, and function expansibility.</strong></p><pre><code class="cpp">// webbrowser.h// Main functionalities of webbrowser.namespace WebBrowserStuff {    class WebBrowser {    public:        // ...        void clearCache();        void clearHistory();        void removeCookies();        // ...    };    void clearBrowser(WebBrowser&amp; wb) {        wb.clearCache();        wb.clearHistory();        wb.removeCookies();    }}// webbrowser_bookmarks.hnamespace WebBrowserStuff {    // Some tool functions related to bookmarks.     // ...}// webbrowser_cookies.hnamespace WebBrowserStuff {    // Some tool functions related to cookies.    // ...}</code></pre><h3 id="Declare-non-member-functions-when-type-conversions-should-apply-to-all-parameters"><a href="#Declare-non-member-functions-when-type-conversions-should-apply-to-all-parameters" class="headerlink" title="Declare non-member functions when type conversions should apply to all parameters"></a>Declare non-member functions when type conversions should apply to all parameters</h3><ul><li>The parameter can be a participant of implicit type conversion, only when the parameter is in parameter list.</li><li>friend should be avoided when it can be.<br><strong>Observation</strong>: non-member functions is the opposite of member ones, not the friend functions.</li></ul><h3 id="Consider-support-for-a-non-throwing-swap"><a href="#Consider-support-for-a-non-throwing-swap" class="headerlink" title="Consider support for a non-throwing swap"></a>Consider support for a non-throwing swap</h3><p>for pointer to implementation (pimpl), more efficient way is to do:</p><ul><li>provide a public member <code>swap</code> function, this function should never throw, because it is the insurance for exception safety.<br>moreover, the default swap is used for built-in types and the built-in types never throws, we should keep consistent.</li><li>provide a non-member <code>swap</code> which calls the member <code>swap</code> in the namespace where your class or template is. </li><li>provide a <code>std::swap</code> total template specilization, if you’re trying to design a class not a class template.<pre><code class="cpp">class Widget {public:  void swap(Widget&amp; other) {      using std::swap;      swap(pImpl, other.pImpl);  }};namespace std {  template&lt;&gt;                                // Total template specilization  void swap&lt;Widget&gt;(Widget&amp; a, Widget&amp; b) {       a.swap(b);   }}</code></pre></li><li>we are not allowed to change anything in namespace <code>std</code>, but we can create specialization.<br>it is a UB, if you insist on doing so.</li><li><p>CPP points out, we can only paritially specialized class templates, function templates is not allowed. so provide non-member <code>swap</code> for function templates.</p><pre><code class="cpp">namespace WidgetStuff {  template&lt;typename T&gt;  class Widget { ... };  template&lt;typename T&gt;                    // Non-member function  void swap(Widget&lt;T&gt;&amp; a, Widget&lt;T&gt;&amp; b) {      a.swap(b);   }}</code></pre></li><li>when calling <code>swap</code>, please ensure a <code>using std::swap</code>, then call <code>swap</code> directly without any namespace specifier.<br>let the compiler to find a proper one.<br><strong>CPP name lookup rules (argument-dependent lookup or Koenig lookup rule):</strong><br>try to find a specific <code>swap</code> of <code>T</code> in global scope or the namespace where <code>T</code> is, then the generic one (<code>std::swap</code>).<pre><code class="cpp">template&lt;typename T&gt;void doSomething(T&amp; obj1, T&amp; obj2) {  using std::swap;  // ...  swap(obj1, obj2);  // ...}</code></pre></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Designs-and-Declarations&quot;&gt;&lt;a href=&quot;#Designs-and-Declarations&quot; class=&quot;headerlink&quot; title=&quot;Designs and Declarations&quot;&gt;&lt;/a&gt;Designs and Declarations&lt;/h2&gt;&lt;p&gt;(I read a Chinese version of the book, any translation problem plz point out. &lt;/p&gt;
    
    </summary>
    
      <category term="Doing" scheme="http://TaoSama.com/categories/Doing/"/>
    
      <category term="CPP" scheme="http://TaoSama.com/categories/Doing/CPP/"/>
    
    
  </entry>
  
  <entry>
    <title>Resource Management, Notes(3), Effective C++</title>
    <link href="http://TaoSama.com/2017-08-31/effective-cpp-resource-management/"/>
    <id>http://TaoSama.com/2017-08-31/effective-cpp-resource-management/</id>
    <published>2017-08-31T03:26:00.000Z</published>
    <updated>2017-09-20T09:36:26.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Resource-Management"><a href="#Resource-Management" class="headerlink" title="Resource Management"></a>Resource Management</h2><p>(I read a Chinese version of the book, any translation problem plz point out. </p><a id="more"></a><h3 id="Use-objects-to-manage-resources"><a href="#Use-objects-to-manage-resources" class="headerlink" title="Use objects to manage resources"></a>Use objects to manage resources</h3><ul><li><p>Priciples</p><ul><li>put into managing object when acquired resources<br>(Resource Acquistion Is Initialization; RAII).</li><li>managing object uses destructor to ensure the resources is released.</li></ul></li><li><p>Methods</p><ul><li>auto_ptr<br>once be assigned, the right side one is null.<br>so the feature of abnormal assignment operator makes that it can’t be put into containers.</li><li>referencing-counting smart pointer (RCSP)<br>it can’t break cycles of references.<br>it seems they’re in the “used” status when 2 unused objects point to each other. </li></ul></li></ul><h3 id="Think-carefully-about-copying-behavior-in-resource-managing-classes"><a href="#Think-carefully-about-copying-behavior-in-resource-managing-classes" class="headerlink" title="Think carefully about copying behavior in resource-managing classes"></a>Think carefully about copying behavior in resource-managing classes</h3><ul><li>create a class to do this.</li><li>no copying. -&gt; <code>=delete or inherit from uncopyable</code></li><li>reference-count in the low-level resources (shared_ptr).<pre><code class="cpp">class Lock {public:  explicit Lock(Mutex* pm):      mutexPtr(pm, unlock) {          lock(mutexPtr.get());       }  }private:  std::shared_ptr&lt;Mutex&gt; mutexPtr;};</code></pre></li><li>deep copying.<br>copy wrapped resources when copying the resource-managing object.</li><li>transfer the ownership of low-level resources (auto_pr).</li></ul><h3 id="Provide-access-to-raw-resources-in-resource-managing-classes"><a href="#Provide-access-to-raw-resources-in-resource-managing-classes" class="headerlink" title="Provide access to raw resources in resource-managing classes"></a>Provide access to raw resources in resource-managing classes</h3><p>Sometimes we need to provide compatibility to C APIs.</p><ul><li>provide a <code>get()</code> to access the raw pointer, safer.<br>```cpp<br>// C APIs.<br>FontHandle getFont();<br>void releaseFont(FontHandle fh);</li></ul><p>Class Font {<br>public:<br>    explicit Font(FontHandle fh): f(fh) {}<br>    ~Font() { releaseFont(f); }<br>    // …<br>    FontHandle get() const { return f; }<br>    // …<br>private:<br>    FontHandle f;    // Raw font resources<br>};</p><pre><code>* provide implicit conversion function may offer convenience to customers. but the opportunities of unexpected error is increased.```cppclass Font {public:    // ...    operator FontHandle() const { return f; }     // ..}Font f1(getFont());// It is intended to copy a Font object// but f1 is copied after it is implicitly conversed to FontHandleFontHandle f2 = f1;</code></pre><ul><li>no contradiction with encapsulation, just to ensure resource releasing.</li></ul><h3 id="Use-the-same-form-in-corresponding-uses-of-new-and-delete"><a href="#Use-the-same-form-in-corresponding-uses-of-new-and-delete" class="headerlink" title="Use the same form in corresponding uses of new and delete"></a>Use the same form in corresponding uses of new and delete</h3><p><code>new-&gt;delete</code><br><code>new[]-&gt;delete[]</code></p><ul><li>Tips:<br>use containers to reduce the risk misusing <code>delete</code> when releasing memory of typedefined array.<pre><code class="cpp">typedef std::string stringArray[4];std::string* pal = new stringArray;delete pal;   // Undefined Behaviordelete pal[]; // Good</code></pre></li></ul><h3 id="Stored-newed-objects-in-smart-pointers-in-standalone-statements"><a href="#Stored-newed-objects-in-smart-pointers-in-standalone-statements" class="headerlink" title="Stored newed objects in smart pointers in standalone statements"></a>Stored newed objects in smart pointers in standalone statements</h3><ul><li>look at the code below:<br>```cpp<br>int priority();<br>void processWidget(std::shared_ptr<widget> pw, int priority);</widget></li></ul><p>processWidget(std::shared_ptr<widget>(new Widget), priority());</widget></p><pre><code>* it is free for the compiler to reorder the operations inside one statement, what if in this order:`new Widget -&gt; priority() -&gt; shared_ptr`* once `priority()` throws, the newed pointer will be lost and memory leak may happen.* the compiler can&#39;t reorder the operations between statements, so  the code below avoids the risk above.```cppstd::shared_ptr&lt;Widget&gt; pw(new Widget);processWidget(pw, priority());</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Resource-Management&quot;&gt;&lt;a href=&quot;#Resource-Management&quot; class=&quot;headerlink&quot; title=&quot;Resource Management&quot;&gt;&lt;/a&gt;Resource Management&lt;/h2&gt;&lt;p&gt;(I read a Chinese version of the book, any translation problem plz point out. &lt;/p&gt;
    
    </summary>
    
      <category term="Doing" scheme="http://TaoSama.com/categories/Doing/"/>
    
      <category term="CPP" scheme="http://TaoSama.com/categories/Doing/CPP/"/>
    
    
  </entry>
  
  <entry>
    <title>Notes, Hive Tutorial</title>
    <link href="http://TaoSama.com/2017-08-25/hive-tut-notes/"/>
    <id>http://TaoSama.com/2017-08-25/hive-tut-notes/</id>
    <published>2017-08-25T03:07:00.000Z</published>
    <updated>2017-10-30T04:45:01.000Z</updated>
    
    <content type="html"><![CDATA[<p><del>Last Modified: 2017-08-28 16:49:00</del></p><h3 id="Acknowledge"><a href="#Acknowledge" class="headerlink" title="Acknowledge"></a>Acknowledge</h3><ul><li><p>What is Hive?<br>Hive is a data warehouse infrastructure tool to process structured data in Hadoop. It resides on top of Hadoop to summarize Big Data, and makes querying and analyzing easy.  </p></li><li><p>Official Hive Tutorial<br><a href="https://cwiki.apache.org/confluence/display/Hive/Tutorial" target="_blank" rel="external">Tutorial</a></p></li></ul><a id="more"></a><h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p><a href="https://www.tutorialspoint.com/hive/hive_introduction.htm" target="_blank" rel="external">Hive - Introduction</a></p><h4 id="Big-Data"><a href="#Big-Data" class="headerlink" title="Big Data"></a>Big Data</h4><ul><li>Hadoop<ul><li>MapReduce</li><li>HDFS</li></ul></li><li><p>Tools</p><ul><li>Sqoop</li><li>Pig</li><li>Hive</li></ul></li><li><p>Hive<br><code>see the link above for details</code></p></li></ul><h4 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h4><p><code>Syntax is omitted, see the reference for details</code></p><ul><li>Views And Indexes<br><a href="https://stackoverflow.com/questions/24197856/what-is-difference-between-index-and-view-in-mysql" target="_blank" rel="external">Difference between view and index</a></li><li><p>Select Joins<br><a href="http://www.diffen.com/difference/Inner_Join_vs_Outer_Join" target="_blank" rel="external">Inner Join vs Outer Join</a><br><a href="https://stackoverflow.com/questions/8696383/difference-between-natural-join-and-inner-join" target="_blank" rel="external">Inner Join vs Natural Join</a>, <code>Natural Join</code> is just short syntax for a <strong>specific</strong> <code>Inner Join</code></p><ul><li>JOIN (same as INNER JOIN)<br>JOIN clause is used to combine and retrieve the records from multiple tables.<br>(It only shows the matched result)</li><li>LEFT OUTER JOIN<br>LEFT OUTER JOIN returns all the rows from the left table, even if there are no matches in the right table. This means, if the ON clause matches 0 (zero) records in the right table, the JOIN still returns a row in the result, but with NULL in each column from the right table.</li><li>RIGHT OUTER JOIN<br>RIGHT OUTER JOIN returns all the rows from the right table, even if there are no matches in the left table. If the ON clause matches 0 (zero) records in the left table, the JOIN still returns a row in the result, but with NULL in each column from the left table.</li><li>FULL OUTER JOIN<br>FULL OUTER JOIN <code>combines</code> the records of both <code>the left and the right outer tables</code> that fulfil the JOIN condition. The joined table contains either all the records from both the tables, or fills in NULL values for missing matches on either side.</li></ul></li></ul><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://www.tutorialspoint.com/hive/index.htm" target="_blank" rel="external">Learn Hive</a><br><a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual" target="_blank" rel="external">Hive Language Manual</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;del&gt;Last Modified: 2017-08-28 16:49:00&lt;/del&gt;&lt;/p&gt;
&lt;h3 id=&quot;Acknowledge&quot;&gt;&lt;a href=&quot;#Acknowledge&quot; class=&quot;headerlink&quot; title=&quot;Acknowledge&quot;&gt;&lt;/a&gt;Acknowledge&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;What is Hive?&lt;br&gt;Hive is a data warehouse infrastructure tool to process structured data in Hadoop. It resides on top of Hadoop to summarize Big Data, and makes querying and analyzing easy.  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Official Hive Tutorial&lt;br&gt;&lt;a href=&quot;https://cwiki.apache.org/confluence/display/Hive/Tutorial&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Tutorial&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Doing" scheme="http://TaoSama.com/categories/Doing/"/>
    
      <category term="Hive" scheme="http://TaoSama.com/categories/Doing/Hive/"/>
    
    
  </entry>
  
  <entry>
    <title>Notes, Most Useful Shell Command</title>
    <link href="http://TaoSama.com/2017-08-25/most-useful-shell-commands/"/>
    <id>http://TaoSama.com/2017-08-25/most-useful-shell-commands/</id>
    <published>2017-08-25T02:57:10.000Z</published>
    <updated>2017-09-20T09:38:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>Last Modified: 2017-08-25 10:57:10</p><p>TODO:</p><ul><li>grep</li><li>expect</li><li>awk</li><li>sed</li><li>xargs</li></ul><a id="more"></a><p><a href="http://xstarcd.github.io/wiki/shell/expect_handbook.html" target="_blank" rel="external">expect</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Last Modified: 2017-08-25 10:57:10&lt;/p&gt;
&lt;p&gt;TODO:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;grep&lt;/li&gt;
&lt;li&gt;expect&lt;/li&gt;
&lt;li&gt;awk&lt;/li&gt;
&lt;li&gt;sed&lt;/li&gt;
&lt;li&gt;xargs&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Doing" scheme="http://TaoSama.com/categories/Doing/"/>
    
      <category term="Shell" scheme="http://TaoSama.com/categories/Doing/Shell/"/>
    
    
  </entry>
  
  <entry>
    <title>Solutions, Leetcode Shell Problems</title>
    <link href="http://TaoSama.com/2017-08-07/leetcode-shell-problems-solution/"/>
    <id>http://TaoSama.com/2017-08-07/leetcode-shell-problems-solution/</id>
    <published>2017-08-07T10:06:10.000Z</published>
    <updated>2017-09-20T09:31:46.000Z</updated>
    
    <content type="html"><![CDATA[<p><del>Last Modified: 2017-08-25 10:53:10</del></p><ul><li>193. Valid Phone Numbers</li><li>195. Tenth Line</li><li>192. Word Frequency</li><li>194. Tranpose File</li></ul><a id="more"></a><h3 id="193-Valid-Phone-Numbers"><a href="#193-Valid-Phone-Numbers" class="headerlink" title="193. Valid Phone Numbers"></a>193. Valid Phone Numbers</h3><p>You may assume that a valid phone number must appear in one of the following two formats: <code>(xxx) xxx-xxxx or xxx-xxx-xxxx. (x means a digit)</code></p><pre><code class="shell"># Read from the file file.txt and output all valid phone numbers to stdout.grep -E &#39;^(([0-9]{3}-[0-9]{3}-[0-9]{4})|(\([0-9]{3}\) [0-9]{3}-[0-9]{4}))$&#39; file.txt</code></pre><h3 id="195-Tenth-Line"><a href="#195-Tenth-Line" class="headerlink" title="195. Tenth Line"></a>195. Tenth Line</h3><p>How would you print just the 10th line of a file?</p><pre><code class="shell"># Read from the file file.txt and output the tenth line to stdout.line_num=0while read line &amp;&amp; ((line_num &lt; 10)); do    line_num=$line_num+1    if ((line_num == 10)); then        echo $line        break    fidone &lt; file.txt</code></pre><h3 id="192-Word-Frequency"><a href="#192-Word-Frequency" class="headerlink" title="192. Word Frequency"></a>192. Word Frequency</h3><pre><code class="shell"># Read from the file words.txt and output the word frequency list to stdout.declare -A freqwhile read word; do    ((++freq[$word]))done &lt; &lt;(tr -s &quot; &quot; &quot;\n&quot; &lt; words.txt)# echo ${words[*]}for word in ${!freq[*]}; do    echo $word ${freq[$word]}done | sort -k 2nbr</code></pre><p><strong>it seems that there some problems with shell array…</strong></p><pre><code class="shell">➜  ~ a+=1➜  ~ a+=1➜  ~ echo ${a[*]}11➜  ~ for i in ${a[*]}; dofor&gt; echo $ifor&gt; done11➜  ~ for i in ${a[@]}; dofor&gt; echo $ifor&gt; done11➜  ~ for i in &quot;${a[@]}&quot;; dofor&gt; echo $ifor&gt; done11➜  ~ for i in &quot;${a[*]}&quot;; dofor&gt; echo $ifor&gt; done11➜  ~ echo ${a[1]}1➜  ~ echo ${a[2]}1➜  ~ echo &#39;num of elemets=&#39;${#a[*]}num of elemets=2# it looks rather werid... so avoid using it...</code></pre><h3 id="194-Tranpose-File"><a href="#194-Tranpose-File" class="headerlink" title="194. Tranpose File"></a>194. Tranpose File</h3><p>Given a text file <code>file.txt</code>, transpose its content.<br>You may assume that each row has the same number of columns and each field is separated by the <code>&#39; &#39;</code> character.<br>For example, if <code>file.txt</code> has the following content:</p><pre><code class="bash">name agealice 21ryan 30# Output the following:name alice ryanage 21 30</code></pre><pre><code class="bash"># Read from the file file.txt and print its transposed content to stdout.awk &#39;{    for(i = 1; i &lt;= NF; ++i) {        if(1 == NR) {            s[i] = $i;        }        else {            s[i] = s[i] &quot; &quot; $i         }    }}END {    for(i = 1; s[i] != &quot;&quot;; ++i) {        print s[i];    }}&#39; file.txt</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;del&gt;Last Modified: 2017-08-25 10:53:10&lt;/del&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;193. Valid Phone Numbers&lt;/li&gt;
&lt;li&gt;195. Tenth Line&lt;/li&gt;
&lt;li&gt;192. Word Frequency&lt;/li&gt;
&lt;li&gt;194. Tranpose File&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Doing" scheme="http://TaoSama.com/categories/Doing/"/>
    
      <category term="Shell" scheme="http://TaoSama.com/categories/Doing/Shell/"/>
    
    
  </entry>
  
  <entry>
    <title>Notes, Effective Go</title>
    <link href="http://TaoSama.com/2017-08-04/effective-go-notes/"/>
    <id>http://TaoSama.com/2017-08-04/effective-go-notes/</id>
    <published>2017-08-04T09:52:10.000Z</published>
    <updated>2018-03-11T12:24:43.000Z</updated>
    
    <content type="html"><![CDATA[<p><del>Last Modified: 2017-08-23 11:46:10</del></p><p><del>Hard to say, I finished Go, for about 20 days (except busy for 1 week and training for 1 week).</del></p><p><del>Such a long time, 1 week to learn a new language, having known a little about concurrency.</del></p><p><del>Not so bad.</del></p><h3 id="Acknowledge"><a href="#Acknowledge" class="headerlink" title="Acknowledge"></a>Acknowledge</h3><p>Go is a new language. Although it borrows ideas from existing languages, it has unusual properties that make effective Go programs different in character from programs written in its relatives.<br>The notes below was written from the view of <strong>a CPP programmer</strong>.</p><ul><li>and a hello world</li></ul><pre><code class="go">package mainimport &quot;fmt&quot;func main() {    fmt.Println(&quot;Hello, World&quot;)}</code></pre><a id="more"></a><h3 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h3><h4 id="Basics"><a href="#Basics" class="headerlink" title="Basics"></a>Basics</h4><ul><li>function</li></ul><pre><code class="go">func swap(x, y string) (string, string) {    return y, x}func split(sum int) (x, y int) {    x = sum * 4 / 9    y = sum - x    return}</code></pre><ul><li>variable</li></ul><pre><code class="go">var c, python, java boolvar i, j int = 1, 2var c, python, java = true, false, &quot;no!&quot;k := 3 // only can be used inside function</code></pre><ul><li>basic types</li></ul><pre><code class="go">boolstringint  int8  int16  int32  int64uint uint8 uint16 uint32 uint64 uintptrbyte // alias for uint8rune // alias for int32     // represents a Unicode code pointfloat32 float64complex64 complex128// The int, uint, and uintptr types are usually 32 bits wide on 32-bit systems and 64 bits wide on 64-bit systems.</code></pre><ul><li>var blocks</li></ul><pre><code class="go">var (    ToBe   bool       = false    MaxInt uint64     = 1&lt;&lt;64 - 1    z      complex128 = cmplx.Sqrt(-5 + 12i))</code></pre><ul><li><p>zero values<br>Variables declared without an explicit initial value are given their zero value.<br><code>0</code> for <code>numeric</code> types,<br><code>false</code> for the <code>boolean</code> type, and<br><code>&quot;&quot;</code> (the empty string) for <code>strings</code>.</p></li><li><p>type conversions</p></li></ul><pre><code class="go">var i int = 42var f float64 = float64(i)var u uint = uint(f)// more simplyi := 42f := float64(i)u := uint(f)</code></pre><ul><li>type inference</li></ul><pre><code class="go">var i intj := i // j is an int3i := 42           // intf := 3.142        // float64g := 0.867 + 0.5i // complex128</code></pre><ul><li>constants</li></ul><pre><code class="go">const Pi = 2.14const Truth bool = true// numeric constants are high-precision values.const (    Big = 1 &lt;&lt; 100    Small = Big &gt;&gt; 99)</code></pre><h4 id="Flow-control"><a href="#Flow-control" class="headerlink" title="Flow control"></a>Flow control</h4><ul><li>for </li></ul><pre><code class="go">for i := 0; i &lt; 10; i++ {    // do something}for ; i &lt; 10; {    // do something}// C&#39;s `while` is spelled `for` in Goi := 0for i &lt; 10 {    // do something}// loop foreverfor {    // do something}</code></pre><ul><li>if</li></ul><pre><code class="go">if i &lt; 10 {    // do something} else {    // do something}if i &lt; 10 {    // do something} else if i &lt; 100 {    // do something}// if with a short statement// variables declared by the statement are only in scope until the end of the if.if v := 1; v &lt; 10 {    // do something}</code></pre><ul><li>exercise-loops-and-functions.go</li></ul><pre><code class="go">package mainimport (    &quot;fmt&quot;    &quot;math&quot;)func Sqrt(x float64) float64 {    var cur float64 = x    for nxt := 0.0; math.Abs(nxt - cur) &gt; 1e-8;  {        t := cur - (cur * cur - x) / (2 * cur)        nxt = cur        cur = t    }    return cur}func main() {    fmt.Println(Sqrt(2))}</code></pre><ul><li>switch</li></ul><pre><code class="go">// a case body breaks automatically, unless it ends with a &#39;fallthrough&#39; statement.fmt.Print(&quot;Go runs on &quot;)switch os := runtime.GOOS; os {case &quot;darwin&quot;:    fmt.Println(&quot;OS X.&quot;)case &quot;linux&quot;:    fmt.Println(&quot;Linux.&quot;)default:    // freebsd, openbsd,    // plan9, windows...    fmt.Printf(&quot;%s.&quot;, os)}// switch with no conditiont := time.Now()switch {case t.Hour() &lt; 12:    fmt.Println(&quot;Good morning!&quot;)case t.Hour() &lt; 17:    fmt.Println(&quot;Good afternoon.&quot;)case t.Hour() &lt; 24:    fmt.Println(&quot;One more&quot;)    fallthroughdefault:    fmt.Println(&quot;Good evening.&quot;)}</code></pre><ul><li>defer</li></ul><pre><code class="go">// deferred function calls are pushed onto a stack. // when a function returns, its deferred calls are executed in last-in-first-out order.func main() {    fmt.Println(&quot;counting&quot;)    for i := 0; i &lt; 3; i++ {        defer fmt.Println(i)    }    fmt.Println(&quot;done&quot;)}/*countingdone210*/</code></pre><h4 id="More-types"><a href="#More-types" class="headerlink" title="More types"></a>More types</h4><ul><li>pointers</li></ul><pre><code class="go">// the type *T is a pointer to a T value.// its zero value is nil.var p *inti := 42p = &amp;ifmt.Println(*p) // read i through the pointer p*p = 21         // set i through the pointer p</code></pre><ul><li>struct</li></ul><pre><code class="cpp">type Vertex struct {    X int    Y int}var v Vertex = Vertex{2, 3}  // v := VertexP{2, 3}p := &amp;v  // pointer to structsv.x = 1e9p.X = 1e9 // implicit conversion ???// struct literalsvar (    v1 = Vertex{1, 2}  // has type Vertex    v2 = Vertex{X: 1}  // Y:0 is implicit    v3 = Vertex{}      // X:0 and Y:0    p  = &amp;Vertex{1, 2} // has type *Vertex)</code></pre><ul><li>array</li></ul><pre><code class="go">var prime [6]int = [6]int{2, 3, 5, 7, 11, 13}</code></pre><ul><li>slices</li></ul><pre><code class="go">// slices are like references to arraysvar s []int = primes[1:4]// array literal[3]bool{true, true, false}// slice literal[]bool{true, true, false}// slice defaults// the default is zero for the low bound and the length of the slice for the high bound.// these slice expressions are equivalent:a[0:10]a[:10]a[0:]a[:]// nil slices// A nil slice has a length and capacity of 0 and has no underlying array.var s []intfmt.Println(s, len(s), cap(s))if s == nil {    fmt.Println(&quot;nil!&quot;)}/*[] 0 0nil!*/</code></pre><ul><li>slice length and capacity</li></ul><pre><code class="go">package mainimport &quot;fmt&quot;func main() {    s := []int{2, 3, 5, 7, 11, 13}    printSlice(s)    // Slice the slice to give it zero length.    s = s[:0]    printSlice(s)    // Extend its length.    s = s[:4]    printSlice(s)    // Drop its first two values.    s = s[2:]    printSlice(s)}func printSlice(s []int) {    fmt.Printf(&quot;len=%d cap=%d %v\n&quot;, len(s), cap(s), s)}/*len=6 cap=6 [2 3 5 7 11 13]len=0 cap=6 []len=4 cap=6 [2 3 5 7]len=2 cap=4 [5 7]*/</code></pre><ul><li>creating a slice with make<br>slices can be created with the built-in make function;<br>this is how you create dynamically-sized arrays.</li></ul><pre><code class="go">b := make([]int, 0, 5) // len(b)=0, cap(b)=5</code></pre><ul><li>slices of slices</li></ul><pre><code class="go">board := [][]string{    []string{&quot;_&quot;, &quot;_&quot;, &quot;_&quot;},    []string{&quot;_&quot;, &quot;_&quot;, &quot;_&quot;},    []string{&quot;_&quot;, &quot;_&quot;, &quot;_&quot;},}for i := 0; i &lt; len(board); i++ {    fmt.Printf(&quot;%s\n&quot;, strings.Join(board[i], &quot; &quot;))}</code></pre><ul><li>apending to a slice</li></ul><pre><code class="go">// func append(s []T, vs ...T) []Tvar s []ints = append(s, 1)s = append(s, 2, 3, 4)// append slicex := []int{1,2,3}y := []int{4,5,6}x = append(x, y...)</code></pre><ul><li>range</li></ul><pre><code class="go">var pow = []int{1, 2, 4, 8, 16, 32, 64, 128}for i, v := range pow {    fmt.Printf(&quot;2**%d = %d\n&quot;, i, v)}// skip the index or valuepow := make([]int, 10)for i := range pow {    pow[i] = 1 &lt;&lt; uint(i) // == 2**i}for _, value := range pow {    fmt.Printf(&quot;%d\n&quot;, value)}</code></pre><ul><li>exercise-slices.go</li></ul><pre><code class="go">package mainimport &quot;golang.org/x/tour/pic&quot;func Pic(dx, dy int) [][]uint8 {    var pic [][]uint8 = make([][]uint8, dy)    for i := 0; i &lt; dy; i++ {        pic[i] = make([]uint8, dx)        for j := 0; j &lt; dx; j++ {            pic[i][j] = uint8(i ^ j);            }    }    return pic}func main() {    pic.Show(Pic)}</code></pre><ul><li>maps<br>The zero value of a map is nil. A nil map has no keys, nor can keys be added.</li></ul><pre><code class="go">type Vertex struct {    Lat, Long float64}var m map[string]Vertexm = make(map[string]Vertex)m[&quot;Bell Labs&quot;] = Vertex{    40.68433, -74.39967,}fmt.Println(m[&quot;Bell Labs&quot;])// map literalsvar m = map[string]Vertex{    &quot;Bell Labs&quot;: Vertex{        40.68433, -74.39967,    },    &quot;Google&quot;: Vertex{        37.42202, -122.08408,    },}// If the top-level type is just a type name, you can omit it from the elements of the literal.var m = map[string]Vertex{    &quot;Bell Labs&quot;: {40.68433, -74.39967},    &quot;Google&quot;:    {37.42202, -122.08408},}// mutating maps// insert or update an element in map m:m[key] = elem// retrieve an element:elem = m[key]// delete an element:delete(m, key)// test that a key is present with a two-value assignment:elem, ok = m[key]</code></pre><ul><li>exercise-maps.go</li></ul><pre><code class="go">package mainimport (    &quot;golang.org/x/tour/wc&quot;;    &quot;strings&quot;)func WordCount(s string) map[string]int {    word := strings.Split(s, &quot; &quot;)    var mp map[string]int = make(map[string]int)    for i := 0; i &lt; len(word); i++ {        mp[word[i]] += 1    }    return mp}func main() {    wc.Test(WordCount)}</code></pre><ul><li>funtion values</li></ul><pre><code class="go">func compute(fn func(float64, float64) float64) float64 {    return fn(3, 4)}func main() {    hypot := func(x, y float64) float64 {        return math.Sqrt(x*x + y*y)    }    fmt.Println(hypot(5, 12))    fmt.Println(compute(hypot))    fmt.Println(compute(math.Pow))}</code></pre><ul><li><p>closure</p><p>a closure is a function value that references variables from outside its body.<br>the function may access and assign to the referenced variables; in this sense the function is “bound” to the variables.</p></li></ul><pre><code class="go">// each closure is bound to its own sum variable.func adder() func(int) int {    sum := 0    return func(x int) int {        sum += x        return sum    }}func main() {    pos, neg := adder(), adder()    for i := 0; i &lt; 3; i++ {        fmt.Println(            pos(i),            neg(-2*i),        )    }}/*0 01 -23 -6*/</code></pre><ul><li>function-closures.go</li></ul><pre><code class="go">package mainimport &quot;fmt&quot;// fibonacci is a function that returns// a function that returns an int.func fibonacci() func() int {    var f0, f1 int = 0, 1    return func() int {        ret := f0        f0, f1 = f1, f0 + f1        return ret    }}func main() {    f := fibonacci()    for i := 0; i &lt; 10; i++ {        fmt.Println(f())    }}</code></pre><h3 id="Methods-and-interfaces"><a href="#Methods-and-interfaces" class="headerlink" title="Methods and interfaces"></a>Methods and interfaces</h3><h4 id="methods"><a href="#methods" class="headerlink" title="methods"></a>methods</h4><ul><li><strong>go does not have classes</strong>. However, you can define methods on types.</li><li>a method is a <strong>function</strong> with a <strong>special receiver argument</strong>.</li><li>the receiver appears in its own argument list <strong>between the func keyword and the method name</strong></li></ul><pre><code class="go">type Vertex struct {    X, Y float64}func (v Vertex) Abs() float64 {    return math.Sqrt(v.X*v.X + v.Y*v.Y)}</code></pre><ul><li>declare a method on non-struct types</li></ul><pre><code class="go">type Vertex struct {    X, Y float64}func (v Vertex) Abs() float64 {    return math.Sqrt(v.X*v.X + v.Y*v.Y)}func (v *Vertex) Scale(f float64) {    v.X = v.X * f    v.Y = v.Y * f}func main() {    v := Vertex{3, 4}    v.Scale(10)    fmt.Println(v.Abs())}</code></pre><ul><li>In general, all methods on a given type should have either value or pointer receivers, but not a mixture of both.</li></ul><h4 id="interfaces"><a href="#interfaces" class="headerlink" title="interfaces"></a>interfaces</h4><p>an interface type is defined as a set of method signatures.<br>a value of interface type can hold any value that implements those methods.</p><ul><li><p>interfaces are implemented implicitly<br>implicit interfaces <strong>decouple</strong> the definition of an interface from its implementation, which could then appear in any package without prearrangement.</p></li><li><p>interface values<br>an interface value holds a value of a specific underlying concrete type.<br>it can be thought of as a tuple of a value and a concrete type: <code>(value, type)</code></p></li><li><p>interface values can be with nil underlying values.</p></li></ul><pre><code class="go">type I interface {    M()}type T struct {    S string}// This method means type T implements the interface I,// but we don&#39;t need to explicitly declare that it does so.func (t T) M() {    if t == nil {          fmt.Println(&quot;&lt;nil&gt;&quot;)        return    }    fmt.Println(t.S)}func describe(i I) {    fmt.Printf(&quot;(%v, %T)\n&quot;, i, i)}func main() {    var i I    describe(i)   // nil interface value -&gt; run-time error    var t *T    i = t    describe(i)  // nil receiver -&gt; OK    i.M()    i = &amp;T{&quot;hello&quot;}    describe(i)    i.M()}</code></pre><ul><li><p>empty interface<br>an empty interface may hold values of any type. (every type implements at least zero methods.)<br>empty interfaces are used by code that handles values of unknown type.</p><pre><code class="go">var i interface{}i = 42i = &quot;hello&quot;</code></pre></li><li><p>type assertions</p></li></ul><pre><code class="go">// if i does not hold a type T, the statement will trigger a panic.t := i.(T)// if i does not hold a type T, ok will be false // and t will be the zero value of type T, and no panic occurs.t, ok := i.(T)</code></pre><ul><li>type switches</li></ul><pre><code class="go">package mainimport &quot;fmt&quot;func do(i interface{}) {    switch v := i.(type) {    case int:        fmt.Printf(&quot;Twice %v is %v\n&quot;, v, v*2)    case string:        fmt.Printf(&quot;%q is %v bytes long\n&quot;, v, len(v))    default:        fmt.Printf(&quot;I don&#39;t know about type %T!\n&quot;, v)    }}func main() {    do(21)    do(&quot;hello&quot;)    do(true)}</code></pre><ul><li>Stringers and error</li></ul><pre><code class="go">// a Stringer is a type that can describe itself as a string.type Stringer interface {    String() string}// the error type is a built-in interface similar to fmt.Stringertype error interface {    Error() string}// for example, fmt.Println will call the two interfaces</code></pre><ul><li>exercise-stringer.go</li></ul><pre><code class="go">package mainimport &quot;fmt&quot;type IPAddr [4]byte// TODO: Add a &quot;String() string&quot; method to IPAddr.func (t *IPAddr) String() string {    return fmt.Sprintf(&quot;%v.%v.%v.%v&quot;, t[0], t[1], t[2], t[3])    }func main() {    hosts := map[string]IPAddr{        &quot;loopback&quot;:  {127, 0, 0, 1},        &quot;googleDNS&quot;: {8, 8, 8, 8},    }    for name, ip := range hosts {        fmt.Println(ip.String())        fmt.Printf(&quot;%v: %v\n&quot;, name, ip)    }}</code></pre><ul><li>exercise-errors.go</li></ul><pre><code class="go">package mainimport (    &quot;fmt&quot;)type ErrNegativeSqrt float64func (e ErrNegativeSqrt) Error() string {    return fmt.Sprintf(&quot;cannot Sqrt negative number: %v&quot;, float64(e))    }func Sqrt(x float64) (float64, error) {    if x &lt; 0 {        return 0, ErrNegativeSqrt(x)        }    z := 1.0    for i := 0; i &lt; 10; i++ {        z = z - (z * z - x) / (2 * z), y    }    return z, nil}func main() {    fmt.Println(Sqrt(2))    fmt.Println(Sqrt(-2))}</code></pre><ul><li>readers<br>interface <code>io.Reader::Read</code><pre><code class="go">func (T) Read(b []byte) (n int, err error)</code></pre></li><li>exercise-reader.go</li></ul><pre><code class="go">package mainimport &quot;golang.org/x/tour/reader&quot;type MyReader struct{}// TODO: Add a Read([]byte) (int, error) method to MyReader.func (t MyReader) Read(b []byte) (int, error) {    for i := 0; i &lt; len(b); i++ {        b[i] = &#39;A&#39;        }    return len(b), nil}func main() {    reader.Validate(MyReader{})}</code></pre><ul><li>exercise-rot-reader.go</li></ul><pre><code class="go">package mainimport (    &quot;io&quot;    &quot;os&quot;    &quot;strings&quot;)type rot13Reader struct {    r io.Reader}func (r rot13Reader) Read(b []byte) (n int, err error) {    insideR := r.r    if n, err = insideR.Read(b); err != nil {        return        }    for i := 0; i &lt; n; i++ {        if b[i] &gt;= &#39;a&#39; &amp;&amp; b[i] &lt;= &#39;z&#39; {            b[i] = (b[i] - &#39;a&#39; + 13) % 26 + &#39;a&#39;            } else if b[i] &gt;= &#39;A&#39; &amp;&amp; b[i] &lt;= &#39;Z&#39; {            b[i] = (b[i] - &#39;A&#39; + 13) % 26 + &#39;A&#39;            }    }    return}func main() {    s := strings.NewReader(&quot;Lbh penpxrq gur pbqr!&quot;)    r := rot13Reader{s}    io.Copy(os.Stdout, &amp;r)}</code></pre><ul><li>exercise-images.go</li></ul><pre><code class="go">package mainimport (    &quot;golang.org/x/tour/pic&quot;    &quot;image&quot;    &quot;image/color&quot;)/*type Image interface {    ColorModel() color.Model    Bounds() Rectangle    At(x, y int) color.Color}*/type Image struct{    Width, Height int}func (img Image) ColorModel() color.Model {    return color.RGBAModel    }func (img Image) Bounds() image.Rectangle {    return image.Rect(0, 0, img.Width, img.Height)}func (img Image) At(x, y int) color.Color {    return color.RGBA{uint8(x * y), uint8((x + y) / 2), 100, 255}    }func main() {    m := Image{100, 100}    pic.ShowImage(m)}</code></pre><h3 id="Concurrency"><a href="#Concurrency" class="headerlink" title="Concurrency"></a>Concurrency</h3><h4 id="goroutines"><a href="#goroutines" class="headerlink" title="goroutines"></a>goroutines</h4><p>A goroutine is a lightweight thread managed by the Go runtime.<br><code>go f(x, y, z)</code> starts a new goroutine running <code>f(x, y, z)</code>.<br>The <strong>evaluation</strong> of <code>f, x, y, and z</code> happens in the <strong>current goroutine</strong> and the <strong>execution</strong> of <code>f</code> happens in the <strong>new goroutine</strong>.<br>Goroutines run in the <strong>same address space</strong>, so access to shared memory must be synchronized. </p><h4 id="channels"><a href="#channels" class="headerlink" title="channels"></a>channels</h4><p>Channels are a typed conduit(pipe) through which you can send and receive values with the channel operator, <code>&lt;-</code>.<br>By default, <strong>sends and receives block until the other side is ready</strong>. This allows goroutines to <strong>synchronize without explicit locks or condition variables</strong>.</p><pre><code class="go">// (The data flows in the direction of the arrow.)// Like maps and slices, channels must be created before use:ch := make(chan int)ch &lt;- v    // Send v to channel ch.v := &lt;-ch  // Receive from ch, and           // assign value to v.</code></pre><h4 id="buffered-Channels"><a href="#buffered-Channels" class="headerlink" title="buffered Channels"></a>buffered Channels</h4><p>Channels can be buffered. Provide the buffer length as the second argument to make to initialize a buffered channel:<br><code>ch := make(chan int, 100)</code><br><strong>Sends</strong> to a buffered channel <strong>block</strong> only when the buffer is <strong>full</strong>. <strong>Receives</strong> <strong>block</strong> when the buffer is <strong>empty</strong>.</p><h4 id="range-and-close"><a href="#range-and-close" class="headerlink" title="range and close"></a>range and close</h4><p><code>v, ok := &lt;-ch</code><br>ok is false if there are no more values to receive and the channel is closed.<br>The loop <code>for i := range c</code> <strong>receives values</strong> from the channel repeatedly <strong>until</strong> it is <strong>closed</strong>.</p><p><strong>Note</strong>: Only the sender should close a channel, never the receiver. Sending on a closed channel will cause a panic.</p><p><strong>Another note</strong>: Channels aren’t like files; you don’t usually need to close them.<br><strong>Closing</strong> is only necessary when the receiver must be told there are <strong>no more values coming</strong>, such as to <strong>terminate</strong> a <code>range</code> <strong>loop</strong>.</p><pre><code class="go">func fibonacci(n int, c chan int) {    x, y := 0, 1    for i := 0; i &lt; n; i++ {        c &lt;- x        x, y = y, x+y    }    close(c)}func main() {    c := make(chan int, 10)    go fibonacci(cap(c), c)    for i := range c {        fmt.Println(i)    }}</code></pre><h4 id="select"><a href="#select" class="headerlink" title="select"></a>select</h4><p>The <code>select</code> statement lets a goroutine wait on multiple communication operations.<br>A <code>select</code> blocks until one of its cases can run, then it executes that case.<br><strong>It chooses one at random if multiple are ready</strong>.</p><p>Use a <code>default</code> case to try a send or receive without blocking:</p><pre><code class="go">func fibonacci(c, quit chan int) {    x, y := 0, 1    for {        select {        case c &lt;- x:            x, y = y, x+y        case &lt;-quit:            fmt.Println(&quot;quit&quot;)            return        }        default:            // receiving from c would block    }}func main() {    c := make(chan int)    quit := make(chan int)    go func() {        for i := 0; i &lt; 10; i++ {            fmt.Println(&lt;-c)        }        quit &lt;- 0    }()    fibonacci(c, quit)}</code></pre><h4 id="sync-Mutex"><a href="#sync-Mutex" class="headerlink" title="sync.Mutex"></a>sync.Mutex</h4><p>We’ve seen how <strong>channels</strong> are great for <strong>communication among goroutines</strong>.<br>But what if we don’t need communication? What if we just want to make sure only one goroutine can access a variable at a time to avoid conflicts?<br>This concept is called <strong>mutual exclusion</strong>, and the conventional name for the data structure that provides it is <strong>mutex</strong>.<br>Go’s standard library provides mutual exclusion with <code>sync.Mutex</code> and its two methods:<br><code>Lock, Unlock</code></p><pre><code class="go">type SafeCounter struct {    v   map[string]int    mux sync.Mutex}// Inc increments the counter for the given key.func (c *SafeCounter) Inc(key string) {    c.mux.Lock()    // Lock so only one goroutine at a time can access the map c.v.    c.v[key]++    c.mux.Unlock()}// Value returns the current value of the counter for the given key.func (c *SafeCounter) Value(key string) int {    c.mux.Lock()    // Lock so only one goroutine at a time can access the map c.v.    defer c.mux.Unlock()    return c.v[key]}</code></pre><ul><li>exercise-equivalent-binary-trees.go</li></ul><pre><code class="go">package mainimport (    &quot;golang.org/x/tour/tree&quot;    &quot;fmt&quot;)// Walk walks the tree t sending all values// from the tree to the channel ch.func Walk(t *tree.Tree, ch chan int) {    defer close(ch)    var walker func(t *tree.Tree)    walker = func(t *tree.Tree) {        if t == nil {            return        }        walker(t.Left)        ch &lt;- t.Value        walker(t.Right)    }    walker(t)}// Same determines whether the trees// t1 and t2 contain the same values.func Same(t1, t2 *tree.Tree) bool {    ch1 := make(chan int)    ch2 := make(chan int)    go Walk(t1, ch1)    go Walk(t2, ch2)    for x1 := range ch1 {        x2, ok2 := &lt;-ch2        if !ok2 || x1 != x2 {            return false        }    }    return true}func main() {    fmt.Println(Same(tree.New(1), tree.New(1)))    fmt.Println(Same(tree.New(1), tree.New(2)))}</code></pre><ul><li>exercise-web-crawler.go</li></ul><pre><code class="go">package mainimport (    &quot;fmt&quot;    &quot;sync&quot;)type Fetcher interface {    // Fetch returns the body of URL and    // a slice of URLs found on that page.    Fetch(url string) (body string, urls []string, err error)}type Cache struct {    visited map[string]bool        mtx sync.Mutex}type Response struct {    url string    body string    }// Crawl uses fetcher to recursively crawl// pages starting with url, to a maximum of depth.func Crawl(url string, depth int, fetcher Fetcher, result chan Response, cache Cache) {    // TODO: Fetch URLs in parallel.    // TODO: Don&#39;t fetch the same URL twice.    // This implementation doesn&#39;t do either:    defer close(result)    if depth &lt;= 0 {        return    }    cache.mtx.Lock()    if cache.visited[url] {        cache.mtx.Unlock()        return    }    cache.visited[url] = true    cache.mtx.Unlock()    body, urls, err := fetcher.Fetch(url)    if err != nil {        fmt.Println(err)        return    }    result &lt;- Response{url, body}    // fmt.Printf(&quot;found: %s %q\n&quot;, url, body)    for _, u := range urls {        tempResult := make(chan Response)        go Crawl(u, depth-1, fetcher, tempResult, cache)        for re := range tempResult {            result &lt;- re        }    }    return}func main() {    result := make(chan Response)    go Crawl(&quot;http://golang.org/&quot;, 4, fetcher, result, Cache{visited:make(map[string]bool)})    for re := range result {        fmt.Printf(&quot;found: %s %q\n&quot;, re.url, re.body)    }}// fakeFetcher is Fetcher that returns canned results.type fakeFetcher map[string]*fakeResulttype fakeResult struct {    body string    urls []string}func (f fakeFetcher) Fetch(url string) (string, []string, error) {    if res, ok := f[url]; ok {        return res.body, res.urls, nil    }    return &quot;&quot;, nil, fmt.Errorf(&quot;not found: %s&quot;, url)}// fetcher is a populated fakeFetcher.var fetcher = fakeFetcher{    &quot;http://golang.org/&quot;: &amp;fakeResult{        &quot;The Go Programming Language&quot;,        []string{            &quot;http://golang.org/pkg/&quot;,            &quot;http://golang.org/cmd/&quot;,        },    },    &quot;http://golang.org/pkg/&quot;: &amp;fakeResult{        &quot;Packages&quot;,        []string{            &quot;http://golang.org/&quot;,            &quot;http://golang.org/cmd/&quot;,            &quot;http://golang.org/pkg/fmt/&quot;,            &quot;http://golang.org/pkg/os/&quot;,        },    },    &quot;http://golang.org/pkg/fmt/&quot;: &amp;fakeResult{        &quot;Package fmt&quot;,        []string{            &quot;http://golang.org/&quot;,            &quot;http://golang.org/pkg/&quot;,        },    },    &quot;http://golang.org/pkg/os/&quot;: &amp;fakeResult{        &quot;Package os&quot;,        []string{            &quot;http://golang.org/&quot;,            &quot;http://golang.org/pkg/&quot;,        },    },}</code></pre><h3 id="Language-specification"><a href="#Language-specification" class="headerlink" title="Language specification"></a>Language specification</h3><h4 id="Formatting"><a href="#Formatting" class="headerlink" title="Formatting"></a>Formatting</h4><ul><li>gofmt ?</li><li>Indentation<br>We use tabs for indentation and gofmt emits them by default. Use spaces only if you must.</li><li>Line length<br>Go has no line length limit. Don’t worry about overflowing a punched card. If a line feels too long, wrap it and indent with an extra tab.</li><li>Parentheses<br>Go needs fewer parentheses than C and Java: control structures (if, for, switch) do not have parentheses in their syntax. Also, the operator precedence hierarchy is shorter and clearer, so <code>x&lt;&lt;8 + y&lt;&lt;16</code> means what the spacing implies, unlike in the other languages.</li></ul><h4 id="Commentary"><a href="#Commentary" class="headerlink" title="Commentary"></a>Commentary</h4><ul><li>Go provides C-style <code>/* */</code> block comments and C++-style <code>//</code> line comments. </li><li>Line comments are the norm; </li><li><p>Block comments appear mostly as package comments, but are useful within an expression or to disable large swaths of code.</p></li><li><p><strong>Every exported (capitalized) name in a program should have a doc comment</strong>.</p></li><li>Doc comments work best as complete sentences, which allow a wide variety of automated presentations. </li><li>The first sentence should be a <strong>one-sentence summary</strong> that <strong>starts with the name being declared</strong>.</li></ul><h4 id="Names"><a href="#Names" class="headerlink" title="Names"></a>Names</h4><ul><li>Package names<br>By convention, packages are given lower case, single-word names; there should be no need for underscores or mixedCaps. For example, the package in <code>src/encoding/base64</code> is imported as <code>&quot;encoding/base64&quot;</code> but has name base64, not <code>encoding_base64</code> and not <code>encodingBase64</code>.</li><li>Clear and Concise Name<br>ring.New<br>once.Do</li><li>Getters and Setters<br>If you have a field called owner (lower case, unexported), the getter method should be called Owner (upper case, exported), not GetOwner.<pre><code class="go">owner := obj.Owner()if owner != user {  obj.SetOwner(user)}</code></pre></li><li>Interface names<br>By convention, one-method interfaces are named by the method name plus an -er suffix or similar modification to construct an agent noun: Reader, Writer, Formatter, CloseNotifier etc.</li><li>MixedCaps<br>Finally, the convention in Go is to use MixedCaps or mixedCaps rather than underscores to write multiword names.</li></ul><h4 id="Semicolons"><a href="#Semicolons" class="headerlink" title="Semicolons"></a>Semicolons</h4><ul><li>Like C, Go’s formal grammar uses semicolons to terminate statements, but unlike in C, those semicolons do not appear in the source.</li><li>If the last token before a newline is an identifier, the lexer always inserts a semicolon after the token. This could be summarized as, “if the newline comes after a token that could end a statement, insert a semicolon”.</li></ul><pre><code class="go">// identifiersbreak continue fallthrough return ++ -- ) }</code></pre><ul><li>One consequence of the semicolon insertion rules is that you <strong>cannot</strong> put the <strong>opening brace</strong> of a control structure (if, for, switch, or select) <strong>on the next line</strong>.<br>If you do, a semicolon will be inserted before the brace, which could cause unwanted effects.</li></ul><pre><code class="go">// rightif i &lt; f() {    g()}// wrongif i &lt; f() {    g()}</code></pre><h4 id="Redeclaration-and-reassignment"><a href="#Redeclaration-and-reassignment" class="headerlink" title="Redeclaration and reassignment"></a>Redeclaration and reassignment</h4><p>In a <code>:=</code> declaration a variable <code>v</code> may appear even if it has already been declared, provided:</p><ul><li>this declaration is in the same scope as the existing declaration of v (if v is already declared in an outer scope, the declaration will create a new variable),</li><li>the corresponding value in the initialization is assignable to v, and</li><li>there is at least one other variable in the declaration that is being declared a new.</li></ul><pre><code class="go">f, err := os.Open(name)d, err := f.Stat()</code></pre><h4 id="Data"><a href="#Data" class="headerlink" title="Data"></a>Data</h4><ul><li>Allocation with new<br><code>new(T)</code> returns a pointer to a newly allocated zero value of type <code>T</code>.</li><li>Allocation with make<br><code>make(T, args)</code> serves a purpose different from <code>new(T)</code>.<br>It creates slices, maps, and channels only, and it returns an <strong>initialized (not zeroed)</strong> value of type <code>T</code> (not <code>*T</code>).<br>The reason for the distinction is that these three types represent, under the covers, references to data structures that must be initialized before use.</li></ul><h4 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h4><p>There are major differences between the ways arrays work in Go and C. In Go,</p><ul><li>Arrays are values. Assigning one array to another copies all the elements.</li><li>In particular, if you pass an array to a function, it will receive a copy of the array, not a pointer to it.</li><li>The size of an array is part of its type. The types <code>[10]int</code> and <code>[20]int</code> are distinct.</li></ul><p>The value property can be useful but also expensive;<br>If you want C-like behavior and efficiency, you can <strong>pass a pointer to the array</strong>.<br><strong>But even this style isn’t idiomatic Go. Use slices instead.</strong></p><h4 id="The-blank-identifier"><a href="#The-blank-identifier" class="headerlink" title="The blank identifier"></a>The blank identifier</h4><p>The blank identifier can be assigned or declared with any value of any type, with the value discarded harmlessly.</p><ul><li>Unused imports and variables</li></ul><pre><code class="go">import (    &quot;fmt&quot;    &quot;io&quot;    &quot;log&quot;    &quot;os&quot;)var _ = fmt.Printf // For debugging; delete when done. var _ io.Reader    // For debugging; delete when done. func main() {    fd, err := os.Open(&quot;test.go&quot;)    if err != nil {        log.Fatal(err)    }    // TODO: use fd.    _ = fd}</code></pre><ul><li><p>Import for side effect<br><code>import _ &quot;net/http/pprof&quot;</code><br>This form of import makes clear that the package is being imported for its side effects, because there is no other possible use of the package: in this file, it doesn’t have a name. (If it did, and we didn’t use that name, the compiler would reject the program.)</p></li><li><p>Interface checks<br>If it’s necessary only to ask whether a type implements an interface, without actually using the interface itself, perhaps as part of an error check, use the blank identifier to ignore the type-asserted value:</p><pre><code class="go">if _, ok := val.(json.Marshaler); ok {  fmt.Printf(&quot;value %v of type %T implements json.Marshaler\n&quot;, val, val)}</code></pre></li></ul><p>One place this situation arises is when it is necessary to guarantee within the package implementing the type that it actually satisfies the interface.<br>If a type—for example, <code>json.RawMessage</code> needs a custom JSON representation, it should implement json.Marshaler, but there are no static conversions that would cause the compiler to verify this automatically.<br>If the type inadvertently fails to satisfy the interface, the JSON encoder will still work, but will not use the custom implementation.<br>To guarantee that the implementation is correct, a global declaration using the blank identifier can be used in the package:</p><pre><code class="go">var _ json.Marshaler = (*RawMessage)(nil)</code></pre><h4 id="Concurrency-1"><a href="#Concurrency-1" class="headerlink" title="Concurrency"></a>Concurrency</h4><p>concurrency: structuring a program as independently executing components.<br>parallelism: executing calculations in parallel for efficiency on multiple CPUs. </p><ul><li><p>Channels of channels<br>// TODO</p></li><li><p>Parallelization<br>Either run your job with environment variable <code>GOMAXPROCS</code> set to the number of cores to use or import the <code>runtime</code> package and call <code>runtime.GOMAXPROCS(NCPU)</code>.<br>A helpful value might be <code>runtime.NumCPU()</code>, which reports the number of logical CPUs on the local machine.</p></li><li><p>A leaky buffer<br>// TODO</p></li></ul><h4 id="Errors"><a href="#Errors" class="headerlink" title="Errors"></a>Errors</h4><ul><li>Panic<br>Panic that in effect creates a run-time error that will stop the program.<br>It’s always better to let things continue to run rather than taking down the whole program. One possible counterexample is during initialization: if the library truly cannot set itself up, it might be reasonable to panic, so to speak.</li></ul><pre><code class="go">var user = os.Getenv(&quot;USER&quot;)func init() {    if user == &quot;&quot; {        panic(&quot;no value for $USER&quot;)    }}</code></pre><ul><li>Recover<br>When panic is called, including implicitly for run-time errors such as indexing a slice out of bounds or failing a type assertion, it immediately stops execution of the current function and begins unwinding the stack of the goroutine, running any deferred functions along the way.<br>If that unwinding reaches the top of the goroutine’s stack, the program dies. However, it is possible to use the built-in function <strong>recover to regain control of the goroutine and resume normal execution</strong>.<br>One application of recover is to shut down a failing goroutine inside a server without killing the other executing goroutines.</li></ul><pre><code class="go">func server(workChan &lt;-chan *Work) {    for work := range workChan {        go safelyDo(work)    }}func safelyDo(work *Work) {    defer func() {        if err := recover(); err != nil {            log.Println(&quot;work failed:&quot;, err)        }    }()    do(work)}</code></pre><p>// TODO: the rest of contents…</p><h4 id="A-web-server"><a href="#A-web-server" class="headerlink" title="A web server"></a>A web server</h4><p>Let’s finish with a complete Go program, a web server.<br>This one is actually a kind of web re-server. Google provides a service at <a href="http://chart.apis.google.com" target="_blank" rel="external">http://chart.apis.google.com</a> that does automatic formatting of data into charts and graphs.<br>It’s hard to use interactively, though, because you need to put the data into the URL as a query.<br>The program here provides a nicer interface to one form of data: given a short piece of text, it calls on the chart server to produce a QR code, a matrix of boxes that encode the text. That image can be grabbed with your cell phone’s camera and interpreted as, for instance, a URL, saving you typing the URL into the phone’s tiny keyboard.<br>Here’s the complete program. </p><pre><code class="go">package mainimport (    &quot;flag&quot;    &quot;html/template&quot;    &quot;log&quot;    &quot;net/http&quot;)var addr = flag.String(&quot;addr&quot;, &quot;:1718&quot;, &quot;http service address&quot;) // Q=17, R=18var templ = template.Must(template.New(&quot;qr&quot;).Parse(templateStr))func main() {    flag.Parse()    http.Handle(&quot;/&quot;, http.HandlerFunc(QR))    err := http.ListenAndServe(*addr, nil)    if err != nil {        log.Fatal(&quot;ListenAndServe:&quot;, err)    }}func QR(w http.ResponseWriter, req *http.Request) {    templ.Execute(w, req.FormValue(&quot;s&quot;))}const templateStr = `&lt;html&gt;&lt;head&gt;&lt;title&gt;QR Link Generator&lt;/title&gt;&lt;/head&gt;&lt;body&gt;{{if .}}&lt;img src=&quot;http://chart.apis.google.com/chart?chs=300x300&amp;cht=qr&amp;choe=UTF-8&amp;chl={{.}}&quot; /&gt;&lt;br&gt;{{.}}&lt;br&gt;&lt;br&gt;{{end}}&lt;form action=&quot;/&quot; name=f method=&quot;GET&quot;&gt;&lt;input maxLength=1024 size=70name=s value=&quot;&quot; title=&quot;Text to QR Encode&quot;&gt;&lt;input type=submitvalue=&quot;Show QR&quot; name=qr&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt;`</code></pre><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://golang.org/" target="_blank" rel="external">Go Official Site</a><br><a href="https://tour.golang.org/" target="_blank" rel="external">A Tour of Go</a><br><a href="https://www.gitbook.com/book/bingohuang/effective-go-zh-en/details" target="_blank" rel="external">Effective Go</a><br><a href="https://golang.org/ref/spec" target="_blank" rel="external">The Go Programming Language Specification</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;del&gt;Last Modified: 2017-08-23 11:46:10&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;&lt;del&gt;Hard to say, I finished Go, for about 20 days (except busy for 1 week and training for 1 week).&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;&lt;del&gt;Such a long time, 1 week to learn a new language, having known a little about concurrency.&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;&lt;del&gt;Not so bad.&lt;/del&gt;&lt;/p&gt;
&lt;h3 id=&quot;Acknowledge&quot;&gt;&lt;a href=&quot;#Acknowledge&quot; class=&quot;headerlink&quot; title=&quot;Acknowledge&quot;&gt;&lt;/a&gt;Acknowledge&lt;/h3&gt;&lt;p&gt;Go is a new language. Although it borrows ideas from existing languages, it has unusual properties that make effective Go programs different in character from programs written in its relatives.&lt;br&gt;The notes below was written from the view of &lt;strong&gt;a CPP programmer&lt;/strong&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;and a hello world&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;go&quot;&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {
    fmt.Println(&amp;quot;Hello, World&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Doing" scheme="http://TaoSama.com/categories/Doing/"/>
    
      <category term="Go" scheme="http://TaoSama.com/categories/Doing/Go/"/>
    
    
  </entry>
  
  <entry>
    <title>Notes, Shell Script</title>
    <link href="http://TaoSama.com/2017-07-31/shell-script-notes/"/>
    <id>http://TaoSama.com/2017-07-31/shell-script-notes/</id>
    <published>2017-07-31T03:20:00.000Z</published>
    <updated>2018-01-27T11:10:30.000Z</updated>
    
    <content type="html"><![CDATA[<p><del>Last Modified: 2017-08-11 11:18:00</del></p><h3 id="Acknowledge"><a href="#Acknowledge" class="headerlink" title="Acknowledge"></a>Acknowledge</h3><ul><li>What is shell script?<br>A shell script is a file containing a series of commands.</li></ul><h3 id="The-first-shell-script"><a href="#The-first-shell-script" class="headerlink" title="The first shell script"></a>The first shell script</h3><p><code>hello_world.sh</code></p><pre><code class="shell">#!/bin/bash# The line above is called a shebang.# Every shell script should include this as its first line.# This is our first script.echo &#39;Hello World!&#39;</code></pre><ul><li>make it executable<br>```shell<br>ls -l hello_world<br>-rw-r–r– 1  me    me      63  2009-03-07 10:10 hello_world<br>chmod 755 hello_world<br>ls -l hello_world<br>-rwxr-xr-x 1  me    me      63  2009-03-07 10:10 hello_world</li></ul><p>./hello_word<br>Hello World!</p><pre><code>&lt;!--- more ---&gt;### Build a program```shell#!/bin/bash# Program to output a system information pageTITLE=&quot;System Information Report For $HOSTNAME&quot;CURRENT_TIME=$(date +&quot;%x %r %Z&quot;)TIME_STAMP=&quot;Generated $CURRENT_TIME, by $USER&quot;echo &quot;&lt;HTML&gt;        &lt;HEAD&gt;                &lt;TITLE&gt;$TITLE&lt;/TITLE&gt;        &lt;/HEAD&gt;        &lt;BODY&gt;                &lt;H1&gt;$TITLE&lt;/H1&gt;                &lt;P&gt;$TIME_STAMP&lt;/P&gt;        &lt;/BODY&gt;&lt;/HTML&gt;&quot;</code></pre><h4 id="here-documents"><a href="#here-documents" class="headerlink" title="here documents"></a>here documents</h4><pre><code class="shell">command &lt;&lt; tokentexttoken</code></pre><ul><li>By default, <strong>single and double quotes</strong> within here documents <strong>lose their special meaning</strong> to the shell.</li><li>If we change the redirection operator from <strong>“&lt;&lt;” to “&lt;&lt;-“</strong>, the shell will <strong>ignore leading tab characters</strong> in the here document. This allows a here document to be indented, which can improve readability.<pre><code class="shell">#!/bin/bash# Program to output a system information pageTITLE=&quot;System Information Report For $HOSTNAME&quot;CURRENT_TIME=$(date +&quot;%x %r %Z&quot;)TIME_STAMP=&quot;Generated $CURRENT_TIME, by $USER&quot;cat &lt;&lt; _EOF_&lt;HTML&gt;       &lt;HEAD&gt;              &lt;TITLE&gt;$TITLE&lt;/TITLE&gt;       &lt;/HEAD&gt;       &lt;BODY&gt;              &lt;H1&gt;$TITLE&lt;/H1&gt;              &lt;P&gt;$TIME_STAMP&lt;/P&gt;       &lt;/BODY&gt;&lt;/HTML&gt;_EOF_</code></pre></li></ul><h3 id="Top-down-design"><a href="#Top-down-design" class="headerlink" title="Top-down design"></a>Top-down design</h3><h4 id="shell-function"><a href="#shell-function" class="headerlink" title="shell function"></a>shell function</h4><pre><code class="shell">function name {    commands    return}andname () {    commands    return}</code></pre><h4 id="local-variable"><a href="#local-variable" class="headerlink" title="local variable"></a>local variable</h4><pre><code class="shell">#!/bin/bashi=0function hello {    local i=1    echo &#39;local i = &#39;$i    echo &#39;Hello World&#39;}helloecho &#39;global i = &#39;$i</code></pre><h4 id="keep-program-runnable"><a href="#keep-program-runnable" class="headerlink" title="keep program runnable"></a>keep program runnable</h4><pre><code class="shell">#!/bin/bash# Program to output a system information pageTITLE=&quot;System Information Report For $HOSTNAME&quot;CURRENT_TIME=$(date +&quot;%x %r %Z&quot;)TIME_STAMP=&quot;Generated $CURRENT_TIME, by $USER&quot;report_uptime () {  echo &quot;Function report_uptime executed.&quot;  return}report_disk_space () {  echo &quot;Function report_disk_space executed.&quot;  return}report_home_space () {  echo &quot;Function report_home_space executed.&quot;  return}cat &lt;&lt; _EOF_&lt;HTML&gt;    &lt;HEAD&gt;        &lt;TITLE&gt;$TITLE&lt;/TITLE&gt;    &lt;/HEAD&gt;    &lt;BODY&gt;        &lt;H1&gt;$TITLE&lt;/H1&gt;        &lt;P&gt;$TIME_STAMP&lt;/P&gt;        $(report_uptime)        $(report_disk_space)        $(report_home_space)    &lt;/BODY&gt;&lt;/HTML&gt;_EOF_############################################./sys_info_page&lt;HTML&gt;&lt;HEAD&gt;&lt;TITLE&gt;System Information Report For linuxbox&lt;/TITLE&gt;&lt;/HEAD&gt;&lt;BODY&gt;&lt;H1&gt;System Information Report For linuxbox&lt;/H1&gt;&lt;P&gt;Generated 03/20/2009 05:17:26 AM EDT, by me&lt;/P&gt;Function report_uptime executed.Function report_disk_space executed.Function report_home_space executed.&lt;/BODY&gt;&lt;/HTML&gt;</code></pre><h3 id="control-if-branching"><a href="#control-if-branching" class="headerlink" title="control: if branching"></a>control: if branching</h3><h4 id="if-statement"><a href="#if-statement" class="headerlink" title="if statement"></a>if statement</h4><pre><code class="shell">if commands; then     commands[elif commands; then     commands...][else     commands]fi</code></pre><h4 id="exit-status"><a href="#exit-status" class="headerlink" title="exit status"></a>exit status</h4><pre><code class="shell">ls -d /usr/bin/usr/binecho $?0ls -d /bin/usrls: cannot access /bin/usr: No such file or directoryecho $?2</code></pre><h4 id="test-expression"><a href="#test-expression" class="headerlink" title="test expression"></a>test expression</h4><p>The test command returns an <strong>exit status</strong> of <strong>zero</strong> when the <strong>expression is true</strong> and a status of <strong>one</strong> when the <strong>expression is false</strong>.</p><pre><code class="shell">test expression# the more popular one:[ expression ]</code></pre><h4 id="test-file-expression"><a href="#test-file-expression" class="headerlink" title="test file expression"></a>test file expression</h4><pre><code class="shell">test_file () {    # test-file: Evaluate the status of a file    FILE=~/.bashrc    if [ -e &quot;$FILE&quot; ]; then        if [ -f &quot;$FILE&quot; ]; then            echo &quot;$FILE is a regular file.&quot;        fi        if [ -d &quot;$FILE&quot; ]; then            echo &quot;$FILE is a directory.&quot;        fi        if [ -r &quot;$FILE&quot; ]; then            echo &quot;$FILE is readable.&quot;        fi        if [ -w &quot;$FILE&quot; ]; then            echo &quot;$FILE is writable.&quot;        fi        if [ -x &quot;$FILE&quot; ]; then            echo &quot;$FILE is executable/searchable.&quot;        fi    else        echo &quot;$FILE does not exist&quot;        return 1    fi}</code></pre><h4 id="test-string-expression"><a href="#test-string-expression" class="headerlink" title="test string expression"></a>test string expression</h4><table><thead><tr><th style="text-align:center">Expression</th><th style="text-align:left">Is Ture If…</th></tr></thead><tbody><tr><td style="text-align:center">string</td><td style="text-align:left">string is not null.</td></tr><tr><td style="text-align:center">-n string</td><td style="text-align:left">The length of string is greater than zero.</td></tr><tr><td style="text-align:center">-z string</td><td style="text-align:left">The length of string is zero.</td></tr><tr><td style="text-align:center">string1 = string2 or string1 == string2</td><td style="text-align:left">string1 and string2 are equal. Single or double equal signs may be used, but the use of double equal signs is greatly preferred.</td></tr><tr><td style="text-align:center">string1 != string2</td><td style="text-align:left">string1 and string2 are not equal.</td></tr><tr><td style="text-align:center">string1 &gt; string2</td><td style="text-align:left">sting1 sorts after string2.</td></tr><tr><td style="text-align:center">string1 &lt; string2</td><td style="text-align:left">string1 sorts before string2.</td></tr></tbody></table><h4 id="test-integer-expression"><a href="#test-integer-expression" class="headerlink" title="test integer expression"></a>test integer expression</h4><table><thead><tr><th style="text-align:center">Expression</th><th style="text-align:left">Is Ture If…</th></tr></thead><tbody><tr><td style="text-align:center">integer1 -eq integer2</td><td style="text-align:left">integer1 is equal to integer2.</td></tr><tr><td style="text-align:center">integer1 -ne integer2</td><td style="text-align:left">integer1 is not equal to integer2.</td></tr><tr><td style="text-align:center">integer1 -le integer2</td><td style="text-align:left">integer1 is less than or equal to integer2.</td></tr><tr><td style="text-align:center">integer1 -lt integer2</td><td style="text-align:left">integer1 is less than integer2.</td></tr><tr><td style="text-align:center">integer1 -ge integer2</td><td style="text-align:left">integer1 is greater than or equal to integer2.</td></tr><tr><td style="text-align:center">integer1 -gt integer2</td><td style="text-align:left">integer1 is greater than integer2.</td></tr></tbody></table><h4 id="compound-command-enhanced-test-expression"><a href="#compound-command-enhanced-test-expression" class="headerlink" title="compound command, enhanced test expression"></a>compound command, enhanced test expression</h4><p><code>[[ expression ]]</code>: it is similar to test and it supports all of its expressions.</p><pre><code class="shell"># but add a new string expression# which returns true if string is matched by the extended regular expression regexstring =~ regex</code></pre><pre><code class="shell">#!/bin/bash# test-integer2: evaluate the value of an integer.INT=-5if [[ &quot;$INT&quot; =~ ^-?[0-9]+$ ]]; then    if [ $INT -eq 0 ]; then        echo &quot;INT is zero.&quot;    else        if [ $INT -lt 0 ]; then            echo &quot;INT is negative.&quot;        else            echo &quot;INT is positive.&quot;        fi        if [ $((INT % 2)) -eq 0 ]; then            echo &quot;INT is even.&quot;        else            echo &quot;INT is odd.&quot;        fi    fielse    echo &quot;INT is not an integer.&quot; &gt;&amp;2    exit 1fi</code></pre><p>Another added feature of <code>[[ ]]</code> is that the == operator supports pattern matching the same way pathname expansion does. For example:</p><pre><code class="shell">FILE=foo.barif [[ $FILE == foo.* ]]; then&gt; echo &quot;$FILE matches pattern &#39;foo.*&#39;&quot;&gt; fifoo.bar matches pattern &#39;foo.*&#39;</code></pre><p><code>(( arithmetic expression ))</code>: it is used to perform arithmetic truth tests.</p><pre><code class="shell">#!/bin/bash# test-integer2a: evaluate the value of an integer.INT=-5if [[ &quot;$INT&quot; =~ ^-?[0-9]+$ ]]; then    if ((INT == 0)); then        echo &quot;INT is zero.&quot;    else        if ((INT &lt; 0)); then            echo &quot;INT is negative.&quot;        else            echo &quot;INT is positive.&quot;        fi        if (( ((INT % 2)) == 0)); then            echo &quot;INT is even.&quot;        else            echo &quot;INT is odd.&quot;        fi    fielse    echo &quot;INT is not an integer.&quot; &gt;&amp;2    exit 1fi</code></pre><h4 id="combine-expressions"><a href="#combine-expressions" class="headerlink" title="combine expressions"></a>combine expressions</h4><p>Logical Operators</p><table><thead><tr><th style="text-align:center">Operation</th><th style="text-align:center">test</th><th style="text-align:center">[[ ]] and (( ))</th></tr></thead><tbody><tr><td style="text-align:center">AND</td><td style="text-align:center">-a</td><td style="text-align:center"><code>&amp;&amp;</code></td></tr><tr><td style="text-align:center">OR</td><td style="text-align:center">-o</td><td style="text-align:center"><code>&#124;&#124;</code></td></tr><tr><td style="text-align:center">NOT</td><td style="text-align:center">!</td><td style="text-align:center">!</td></tr></tbody></table><pre><code class="shell">#!/bin/bash# test-integer3: determine if an integer is within a# specified range of values.MIN_VAL=1MAX_VAL=100INT=50if [[ &quot;$INT&quot; =~ ^-?[0-9]+$ ]]; then    if [[ INT -ge MIN_VAL &amp;&amp; INT -le MAX_VAL ]]; then        echo &quot;$INT is within $MIN_VAL to $MAX_VAL.&quot;    else        echo &quot;$INT is out of range.&quot;    fielse    echo &quot;INT is not an integer.&quot; &gt;&amp;2    exit 1fi</code></pre><p>We also include parentheses around the expression, for grouping</p><pre><code class="shell">if [ ! \( $INT -ge $MIN_VAL -a $INT -le $MAX_VAL \) ]; then    echo &quot;$INT is outside $MIN_VAL to $MAX_VAL.&quot;else    echo &quot;$INT is in range.&quot;fi</code></pre><h4 id="two-control-operators-can-perform-branching"><a href="#two-control-operators-can-perform-branching" class="headerlink" title="two control operators, can perform branching"></a>two control operators, can perform branching</h4><p><code>command1 &amp;&amp; command2</code><br><code>command1 || command2</code></p><pre><code class="shell">mkdir temp &amp;&amp; cd temp[ -d temp ] || mkdir temp[ -d temp ] || exit 1</code></pre><h4 id="detect-permission-with-if"><a href="#detect-permission-with-if" class="headerlink" title="detect permission with if"></a>detect permission with if</h4><pre><code class="shell">report_home_space () {    if [[ $(id -u) -eq 0 ]]; then        cat &lt;&lt;- _EOF_        &lt;H2&gt;Home Space Utilization (All Users)&lt;/H2&gt;        &lt;PRE&gt;$(du -sh /home/*)&lt;/PRE&gt;_EOF_    else        cat &lt;&lt;- _EOF_        &lt;H2&gt;Home Space Utilization ($USER)&lt;/H2&gt;        &lt;PRE&gt;$(du -sh $HOME)&lt;/PRE&gt;_EOF_    fi    return}</code></pre><h3 id="Keyboard-input"><a href="#Keyboard-input" class="headerlink" title="Keyboard input"></a>Keyboard input</h3><pre><code class="shell">read [-options] [variable...]</code></pre><ul><li>If read receives <strong>fewer</strong> than the expected number, the <strong>extra variables are empty</strong>.</li><li>If read receives <strong>more</strong> than the expected number, the <strong>final variable</strong> will contain <strong>all of the extra input</strong>. </li><li>If no variables are listed after the read command, a shell variable, <code>REPLY</code>, will be assigned all the input.</li></ul><pre><code class="shell">#!/bin/bash# read-secret: input a secret pass phraseif read -t 10 -sp &quot;Enter secret pass phrase &gt; &quot; secret_pass; then    echo &quot;\nSecret pass phrase = &#39;$secret_pass&#39;&quot;else    echo &quot;\nInput timed out&quot; &gt;&amp;2    exit 1fi</code></pre><h4 id="IFS-Internal-Field-Separator"><a href="#IFS-Internal-Field-Separator" class="headerlink" title="IFS (Internal Field Separator)"></a>IFS (Internal Field Separator)</h4><p>The shell allows one or more variable assignments to take place immediately before a command.<br>These assignments alter the environment for the command that follows.<br><strong>The effect of the assignment is temporary</strong>; only changing the environment for the duration of the command.<br>In our case, the value of IFS is changed to a colon character. </p><pre><code class="shell">#!/bin/bash# read-ifs: read fields from a fileFILE=/etc/passwdread -p &quot;Enter a user name &gt; &quot; user_namefile_info=$(grep &quot;^$user_name:&quot; $FILE)if [ -n &quot;$file_info&quot; ]; then    IFS=&quot;:&quot; read user pw uid gid name home shell &lt;&lt;&lt; &quot;$file_info&quot;    echo &quot;User = &#39;$user&#39;&quot;    echo &quot;UID = &#39;$uid&#39;&quot;    echo &quot;GID = &#39;$gid&#39;&quot;    echo &quot;Full Name = &#39;$name&#39;&quot;    echo &quot;Home Dir. = &#39;$home&#39;&quot;    echo &quot;Shell = &#39;$shell&#39;&quot;else    echo &quot;No such user &#39;$user_name&#39;&quot; &gt;&amp;2    exit 1fi</code></pre><p>The <code>&lt;&lt;&lt;</code> operator indicates <strong>a here string</strong>.<br>A here string is like a here document, only shorter, consisting of a single string.<br>We might wonder why this <strong>rather oblique method</strong> was chosen rather than:</p><pre><code class="shell">echo &quot;$file_info&quot; | IFS=&quot;:&quot; read user pw uid gid name home shell</code></pre><p><strong>You Can’t Pipe read</strong><br>The explanation has to do with the way the <strong>shell handles pipelines</strong>.<br>In bash (and other shells such as sh), <strong>pipelines create subshells</strong> (subshells is the subprocesses).<br>Subshells in Unix-like systems create copies of the environment for the processes to use while they execute.<br>When the command exits, the subshell and its environment are destroyed.<br>This means that a subshell can never alter the environment of its parent process.<br><strong>Then the effect of the assignment is lost</strong>.</p><h4 id="validating-input"><a href="#validating-input" class="headerlink" title="validating input"></a>validating input</h4><pre><code class="shell">    echo &quot;Invalid input &#39;$REPLY&#39;&quot; &gt;&amp;2    exit 1}read -p &quot;Enter a single item &gt; &quot;# input is empty (invalid)[[ -z $REPLY ]] &amp;&amp; invalid_input# input is multiple items (invalid)(( $(echo $REPLY | wc -w) &gt; 1 )) &amp;&amp; invalid_input# is input a valid filename?if [[ $REPLY =~ ^[-[:alnum:]\._]+$ ]]; then    echo &quot;&#39;$REPLY&#39; is a valid filename.&quot;    if [[ -e $REPLY ]]; then        echo &quot;And file &#39;$REPLY&#39; exists.&quot;    else        echo &quot;However, file &#39;$REPLY&#39; does not exist.&quot;    fi    # is input a floating point number?    if [[ $REPLY =~ ^-?[[:digit:]]*\.[[:digit:]]+$ ]]; then        echo &quot;&#39;$REPLY&#39; is a floating point number.&quot;    else        echo &quot;&#39;$REPLY&#39; is not a floating point number.&quot;    fi    # is input an integer?    if [[ $REPLY =~ ^-?[[:digit:]]+$ ]]; then        echo &quot;&#39;$REPLY&#39; is an integer.&quot;    else        echo &quot;&#39;$REPLY&#39; is not an integer.&quot;    fielse    echo &quot;The string &#39;$REPLY&#39; is not a valid filename.&quot;fi</code></pre><h4 id="menu"><a href="#menu" class="headerlink" title="menu"></a>menu</h4><pre><code class="shell">#!/bin/bash# read-menu: a menu driven system information programclearecho &quot;Please Select:    1. Display System Information    2. Display Disk Space    3. Display Home Space Utilization    0. Quit&quot;read -p &quot;Enter selection [0-3] &gt; &quot;if [[ $REPLY =~ ^[0-3]$ ]]; then    if [[ $REPLY == 0 ]]; then        echo &quot;Program terminated.&quot;        exit    fi    if [[ $REPLY == 1 ]]; then        echo &quot;Hostname: $HOSTNAME&quot;        uptime        exit    fi    if [[ $REPLY == 2 ]]; then        df -h        exit    fi    if [[ $REPLY == 3 ]]; then        if [[ $(id -u) -eq 0 ]]; then            echo &quot;Home Space Utilization (All Users)&quot;            du -sh /home/*        else            echo &quot;Home Space Utilization ($USER)&quot;            du -sh $HOME        fi        exit    fielse    echo &quot;Invalid entry.&quot; &gt;&amp;2    exit 1fi</code></pre><h3 id="Flow-control-while-until-loop"><a href="#Flow-control-while-until-loop" class="headerlink" title="Flow control: while/until loop"></a>Flow control: while/until loop</h3><h4 id="while"><a href="#while" class="headerlink" title="while"></a>while</h4><pre><code class="shell">while commands; do commands; done</code></pre><p><code>break</code> and <code>continue</code></p><pre><code class="shell">#!/bin/bash# while-menu2: a menu driven system information programDELAY=3 # Number of seconds to display resultswhile true; do    clear    cat &lt;&lt;- _EOF_        Please Select:        1. Display System Information        2. Display Disk Space        3. Display Home Space Utilization        0. Quit    _EOF_    read -p &quot;Enter selection [0-3] &gt; &quot;    if [[ $REPLY =~ ^[0-3]$ ]]; then        if [[ $REPLY == 1 ]]; then            echo &quot;Hostname: $HOSTNAME&quot;            uptime            sleep $DELAY            continue        fi        if [[ $REPLY == 2 ]]; then            df -h            sleep $DELAY            continue        fi        if [[ $REPLY == 3 ]]; then            if [[ $(id -u) -eq 0 ]]; then                echo &quot;Home Space Utilization (All Users)&quot;                du -sh /home/*            else                echo &quot;Home Space Utilization ($USER)&quot;                du -sh $HOME            fi            sleep $DELAY            continue        fi        if [[ $REPLY == 0 ]]; then            break        fi    else        echo &quot;Invalid entry.&quot;        sleep $DELAY    fidoneecho &quot;Program terminated.&quot;</code></pre><h4 id="until"><a href="#until" class="headerlink" title="until"></a>until</h4><pre><code class="shell">#!/bin/bash# until-count: display a series of numberscount=1until [ $count -gt 5 ]; do    echo $count    count=$((count + 1))doneecho &quot;Finished.&quot;</code></pre><h4 id="process-files-with-while-or-until-loop"><a href="#process-files-with-while-or-until-loop" class="headerlink" title="process files with while or until loop"></a>process files with while or until loop</h4><ul><li>redirection<pre><code class="shell">#!/bin/bash# while-read: read lines from a filewhile read distro version release; do  printf &quot;Distro: %s\tVersion: %s\tReleased: %s\n&quot; \      $distro \      $version \      $releasedone &lt; distros.txt</code></pre></li><li>pipe<pre><code class="shell">#!/bin/bash# while-read2: read lines from a filesort -k 1,1 -k 2n distros.txt | while read distro version release; do  printf &quot;Distro: %s\tVersion: %s\tReleased: %s\n&quot; \      $distro \      $version \      $releasedone</code></pre></li></ul><h3 id="Stay-out-of-trouble"><a href="#Stay-out-of-trouble" class="headerlink" title="Stay out of trouble"></a>Stay out of trouble</h3><h4 id="syntactic-errors"><a href="#syntactic-errors" class="headerlink" title="syntactic errors"></a>syntactic errors</h4><pre><code class="shell">if [ $number = 1 ]; then echo &quot;Number is equal to 1.&quot;# add double quotes to prevent unexpected expansionif [ &quot;$number = 1]; the echo &quot;Number is equal to 1.&quot;</code></pre><h4 id="logical-errors"><a href="#logical-errors" class="headerlink" title="logical errors"></a>logical errors</h4><ul><li>incorrect conditional expressions. </li><li>“Off by one” errors. </li><li>Unanticipated situations.</li></ul><h4 id="testing"><a href="#testing" class="headerlink" title="testing"></a>testing</h4><pre><code class="shell"># use &#39;echo&#39; to show the expanded parametersecho rm *  # TESTING</code></pre><h4 id="debugging"><a href="#debugging" class="headerlink" title="debugging"></a>debugging</h4><ul><li>isolate the area related to problem<br><strong>commenting out</strong> the code sections the code</li><li>tracing<ul><li>echo more messages</li><li>a method of tracing of bash<br>```shell<br>#!/bin/bash -x<h1 id="trouble-script-to-demonstrate-common-errors"><a href="#trouble-script-to-demonstrate-common-errors" class="headerlink" title="trouble: script to demonstrate common errors"></a>trouble: script to demonstrate common errors</h1></li></ul></li></ul><h1 id="to-activate-tracing-for-the-entire-script-by-adding-the-x-option-to-the-first-line"><a href="#to-activate-tracing-for-the-entire-script-by-adding-the-x-option-to-the-first-line" class="headerlink" title="to activate tracing for the entire script by adding the -x option to the first line"></a>to activate tracing for the entire script by adding the -x option to the first line</h1><p>number=1<br>if [ $number = 1 ]; then<br>    echo “Number is equal to 1.”<br>else<br>    echo “Number is not equal to 1.”<br>fi</p><p>##############################################<br>export PS4=’$LINENO + ‘<br>trouble<br>5 + number=1<br>7 + ‘[‘ 1 = 1 ‘]’<br>8 + echo ‘Number is equal to 1.’<br>Number is equal to 1.</p><pre><code>```shell#!/bin/bash# trouble: script to demonstrate common errors# to perform a trace on a selected portion of a script# we can use the set command with the -x option:number=1set -x # Turn on tracingif [ $number = 1 ]; then    echo &quot;Number is equal to 1.&quot;else    echo &quot;Number is not equal to 1.&quot;fiset +x # Turn off tracing</code></pre><h3 id="Flow-control-case-branching"><a href="#Flow-control-case-branching" class="headerlink" title="Flow control: case branching"></a>Flow control: case branching</h3><pre><code class="shell">case word in    [pattern [| pattern]...) commands ;;]...esac</code></pre><p>The patterns used by case are the same as those used by pathname expansion. Here are some valid patterns:<br><code>a)</code>:    Matches if word equals “a”.<br><code>[[:alpha:]])</code>:    Matches if word is a single alphabetic character.<br><code>???)</code>:    Matches if word is exactly three characters long.<br><code>*.txt)</code>:    Matches if word ends with the characters “.txt”.<br><code>*)</code>:    Matches any value of word. It is good practice to include this as the last pattern in a case command; that is, to catch any possible invalid values.</p><pre><code class="shell">#!/bin/bash# case-menu: a menu driven system information programclearecho &quot;Please Select:1. Display System Information2. Display Disk Space3. Display Home Space Utilization0. Quit&quot;read -p &quot;Enter selection [0-3] &gt; &quot;case $REPLY in    0)  echo &quot;Program terminated.&quot;        exit        ;;    1)  echo &quot;Hostname: $HOSTNAME&quot;        uptime        ;;    2)  df -h        ;;    3)  if [[ $(id -u) -eq 0 ]]; then            echo &quot;Home Space Utilization (All Users)&quot;            du -sh /home/*        else            echo &quot;Home Space Utilization ($USER)&quot;            du -sh $HOME        fi        ;;    *)  echo &quot;Invalid entry&quot; &gt;&amp;2        exit 1        ;;esac</code></pre><h4 id="match-more-the-one-test"><a href="#match-more-the-one-test" class="headerlink" title="match more the one test"></a>match more the one test</h4><p>In bash <strong>prior to version 4.0</strong> there was <strong>no way</strong> for case to match more than one test.<br>Modern versions of bash, add the <code>;;&amp;</code> notation to terminate each action, we can do this:</p><pre><code class="shell">#!/bin/bash# case4-2: test a characterread -n 1 -p &quot;Type a character &gt; &quot;echocase $REPLY in    [[:upper:]])    echo &quot;&#39;$REPLY&#39; is upper case.&quot; ;;&amp;    [[:lower:]])    echo &quot;&#39;$REPLY&#39; is lower case.&quot; ;;&amp;    [[:alpha:]])    echo &quot;&#39;$REPLY&#39; is alphabetic.&quot; ;;&amp;    [[:digit:]])    echo &quot;&#39;$REPLY&#39; is a digit.&quot; ;;&amp;    [[:graph:]])    echo &quot;&#39;$REPLY&#39; is a visible character.&quot; ;;&amp;    [[:punct:]])    echo &quot;&#39;$REPLY&#39; is a punctuation symbol.&quot; ;;&amp;    [[:space:]])    echo &quot;&#39;$REPLY&#39; is a whitespace character.&quot; ;;&amp;    [[:xdigit:]])   echo &quot;&#39;$REPLY&#39; is a hexadecimal digit.&quot; ;;&amp;esac#####################################################################case4-2Type a character &gt; a&#39;a&#39; is lower case.&#39;a&#39; is alphabetic.&#39;a&#39; is a visible character.&#39;a&#39; is a hexadecimal digit.</code></pre><h3 id="Positional-parameters"><a href="#Positional-parameters" class="headerlink" title="Positional parameters"></a>Positional parameters</h3><h4 id="access-to-the-contents-of-the-command-line"><a href="#access-to-the-contents-of-the-command-line" class="headerlink" title="access to the contents of the command line"></a>access to the contents of the command line</h4><pre><code class="shell">#!/bin/bash# posit-param: script to view command line parametersecho &quot;Number of arguments: $#\$0 = $0\$1 = $1\$2 = $2&quot;#####################################################posit-paramNumber of arguments: 0$0 = /home/me/bin/posit-param$1 =$2 =#####################################################Number of arguments: 2posit-param a b$0 = /home/me/bin/posit-param$1 = a$2 = b</code></pre><h4 id="shift-access-to-a-large-number-of-arguments"><a href="#shift-access-to-a-large-number-of-arguments" class="headerlink" title="shift, access to a large number of arguments"></a>shift, access to a large number of arguments</h4><p>Each time shift is executed, the value of <code>$2</code> is moved to <code>$1</code>, the value of <code>$3</code> is moved to <code>$2</code> and so on.<br>The value of <code>$#</code> is also <strong>reduced by one</strong>.<br>In addition to <code>$0</code>, which <strong>never changes</strong>.</p><pre><code class="shell">#!/bin/bash# posit-param2: script to display all argumentscount=1while [[ $# -gt 0 ]]; do    echo &quot;Argument $count = $1&quot;    count=$((count + 1))    shiftdone#####################################################posit-param2 a b c dArgument 1 = aArgument 2 = bArgument 3 = cArgument 4 = d</code></pre><h4 id="group-positional-parameters"><a href="#group-positional-parameters" class="headerlink" title="group positional parameters"></a>group positional parameters</h4><p><code>“$@”</code> is by far the most useful for most situations, because it preserves the integrity of each positional parameter.</p><pre><code class="shell">#!/bin/bash# posit-params3 : script to demonstrate $* and $@print_params () {    echo &quot;\$1 = $1&quot;    echo &quot;\$2 = $2&quot;    echo &quot;\$3 = $3&quot;    echo &quot;\$4 = $4&quot;}pass_params () {    echo -e &quot;\n&quot; &#39;$* :&#39;;      print_params   $*    echo -e &quot;\n&quot; &#39;&quot;$*&quot; :&#39;;    print_params   &quot;$*&quot;    echo -e &quot;\n&quot; &#39;$@ :&#39;;      print_params   $@    echo -e &quot;\n&quot; &#39;&quot;$@&quot; :&#39;;    print_params   &quot;$@&quot;}pass_params &quot;word&quot; &quot;words with spaces&quot;#####################################################posit-param3 $* :$1 = word$2 = words$3 = with$4 = spaces &quot;$*&quot; :$1 = word words with spaces$2 =$3 =$4 = $@ :$1 = word$2 = words$3 = with$4 = spaces &quot;$@&quot; :$1 = word$2 = words with spaces$3 =$4 =</code></pre><pre><code class="shell"># with our argumentsboth $* and $@ produce a four word result:     word words with spaces&quot;$*&quot; produces a one word result:    &quot;word words with spaces&quot;&quot;$@&quot; produces a two word result:    &quot;word&quot; &quot;words with spaces&quot;</code></pre><h4 id="a-complicated-application"><a href="#a-complicated-application" class="headerlink" title="a complicated application"></a>a complicated application</h4><ul><li>Output file <code>-f or --file</code></li><li>Interactive mode <code>-i or --interactive</code></li><li>Help <code>-h or --help</code><pre><code class="shell">#!/bin/bash# sys_info_page: program to output a system information pagePROGNAME=$(basename $0)TITLE=&quot;System Information Report For $HOSTNAME&quot;CURRENT_TIME=$(date +&quot;%x %r %Z&quot;)TIMESTAMP=&quot;Generated $CURRENT_TIME, by $USER&quot;report_uptime () {  cat &lt;&lt;- _EOF_      &lt;H2&gt;System Uptime&lt;/H2&gt;      &lt;PRE&gt;$(uptime)&lt;/PRE&gt;  _EOF_  return}report_disk_space () {  cat &lt;&lt;- _EOF_      &lt;H2&gt;Disk Space Utilization&lt;/H2&gt;      &lt;PRE&gt;$(df -h)&lt;/PRE&gt;  _EOF_  return}report_home_space () {  if [[ $(id -u) -eq 0 ]]; then      cat &lt;&lt;- _EOF_          &lt;H2&gt;Home Space Utilization (All Users)&lt;/H2&gt;          &lt;PRE&gt;$(du -sh /home/*)&lt;/PRE&gt;      _EOF_  else      cat &lt;&lt;- _EOF_          &lt;H2&gt;Home Space Utilization ($USER)&lt;/H2&gt;          &lt;PRE&gt;$(du -sh $HOME)&lt;/PRE&gt;      _EOF_  fi  return}usage () {  echo &quot;$PROGNAME: usage: $PROGNAME [-f file | -i]&quot;  return}write_html_page () {  cat &lt;&lt;- _EOF_      &lt;HTML&gt;          &lt;HEAD&gt;              &lt;TITLE&gt;$TITLE&lt;/TITLE&gt;          &lt;/HEAD&gt;          &lt;BODY&gt;              &lt;H1&gt;$TITLE&lt;/H1&gt;              &lt;P&gt;$TIMESTAMP&lt;/P&gt;              $(report_uptime)              $(report_disk_space)              $(report_home_space)          &lt;/BODY&gt;      &lt;/HTML&gt;  _EOF_  return}# process command line optionsinteractive=filename=while [[ -n $1 ]]; do  case $1 in      -f | --file)          shift                            filename=$1                            ;;      -i | --interactive)   interactive=1                            ;;      -h | --help)          usage                            exit                            ;;      *)                    usage &gt;&amp;2                            exit 1                            ;;  esac  shiftdone# interactive modeif [[ -n $interactive ]]; then  while true; do      read -p &quot;Enter name of output file: &quot; filename      if [[ -e $filename ]]; then          read -p &quot;&#39;$filename&#39; exists. Overwrite? [y/n/q] &gt; &quot;          case $REPLY in              Y|y)    break                      ;;              Q|q)    echo &quot;Program terminated.&quot;                      exit                      ;;              *)      continue                      ;;          esac      fi  donefi# output html pageif [[ -n $filename ]]; then  if touch $filename &amp;&amp; [[ -f $filename ]]; then      write_html_page &gt; $filename  else      echo &quot;$PROGNAME: Cannot write file &#39;$filename&#39;&quot; &gt;&amp;2      exit 1  fielse  write_html_pagefi</code></pre></li></ul><h3 id="control-for-loop"><a href="#control-for-loop" class="headerlink" title="control: for loop"></a>control: for loop</h3><h4 id="the-original-for-command’s-syntax"><a href="#the-original-for-command’s-syntax" class="headerlink" title="the original for command’s syntax"></a>the original for command’s syntax</h4><pre><code class="shell">for variable [in words]; do    commandsdone</code></pre><pre><code class="shell">#!/bin/bash# longest-word : find longest string in a filewhile [[ -n $1 ]]; do    if [[ -r $1 ]]; then        max_word=        max_len=0        for i in $(strings $1); do            len=$(echo $i | wc -c)            if (( len &gt; max_len )); then                max_len=$len                max_word=$i            fi        done        echo &quot;$1: &#39;$max_word&#39; ($max_len characters)&quot;    fi    shiftdone</code></pre><p>If the optional in words portion of the for command is omitted, for defaults to processing the <strong>positional parameters</strong>.</p><pre><code class="shell"># test.sh #!/bin/bashfor i; do    echo $idone####################test 1 2 3123</code></pre><h4 id="C-style"><a href="#C-style" class="headerlink" title="C style"></a>C style</h4><pre><code class="shell">for (( expression1; expression2; expression3 )); do    commandsdone</code></pre><pre><code class="shell">#!/bin/bash# simple_counter : demo of C style for commandfor (( i=0; i&lt;5; i=i+1 )); do    echo $idone################################################simple_counter01234</code></pre><h3 id="Strings-and-numbers"><a href="#Strings-and-numbers" class="headerlink" title="Strings and numbers"></a>Strings and numbers</h3><p><code>omitted</code><br><a href="http://billie66.github.io/TLCL/book/chap35.html" target="_blank" rel="external">Strings and number</a></p><h3 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h3><ul><li>shell arrays is <code>0-based</code>.</li><li>one way to create an array<pre><code class="shell">declare -a a</code></pre></li><li><p>usually in the following way</p><pre><code class="shell">name[subscript]=valuename=(value1 value2 ...)days=(Sun Mon Tue Wed Thu Fri Sat)days=([0]=Sun [1]=Mon [2]=Tue [3]=Wed [4]=Thu [5]=Fri [6]=Sat)</code></pre></li><li><p>output the whole array<br><strong>(a small mistake in the book, corrected)</strong></p><pre><code class="shell">$ animals=(&quot;a dog&quot; &quot;a cat&quot; &quot;a fish&quot;)for i in ${animals[*]}; do echo $i; donea doga cata fishfor i in ${animals[@]}; do echo $i; donea doga cata fishfor i in &quot;${animals[*]}&quot;; do echo $i; donea dog a cat a fishfor i in &quot;${animals[@]}&quot;; do echo $i; donea doga cata fish</code></pre></li><li><p>determine the number of elements</p><pre><code class="shell">a[100]=fooecho ${#a[@]} # number of array elements1echo ${#a[100]} # length of element 1003</code></pre></li><li><p>find the index of array used</p><pre><code class="shell">foo=([2]=a [4]=b [6]=c)for i in &quot;${foo[@]}&quot;; do echo $i; doneabcfor i in &quot;${!foo[@]}&quot;; do echo $i; done246</code></pre></li><li><p>sort the array</p><pre><code class="shell">#!/bin/bash# array-sort : Sort an arraya=(f e d c b a)echo &quot;Original array: ${a[@]}&quot;a_sorted=($(for i in &quot;${a[@]}&quot;; do echo $i; done | sort))echo &quot;Sorted array: ${a_sorted[@]}&quot;</code></pre></li><li><p>delete an array</p><pre><code class="shell">$ foo=(a b c d e f)$ echo ${foo[@]}a b c d e f$ unset foo$ echo ${foo[@]}$##################################$ foo=(a b c d e f)$ echo ${foo[@]}a b c d e f$ unset &#39;foo[2]&#39;$ echo ${foo[@]}a b d e f</code></pre></li><li><p>any reference to an array variable without a subscript refers to <strong>element zero</strong> of the array</p><pre><code class="shell">$ foo=(a b c d e f)$ echo ${foo[@]}a b c d e f$ foo=A$ echo ${foo[@]}A b c d e f</code></pre></li><li><p>associative array<br>associative arrays can <strong>only</strong> be created with the <code>declare</code> command using the new <code>-A</code> option</p><pre><code class="shell">declare -A colorscolors[&quot;red&quot;]=&quot;#ff0000&quot;colors[&quot;green&quot;]=&quot;#00ff00&quot;colors[&quot;blue&quot;]=&quot;#0000ff&quot;echo ${colors[&quot;blue&quot;]}</code></pre><h3 id="Odds-and-ends"><a href="#Odds-and-ends" class="headerlink" title="Odds and ends"></a>Odds and ends</h3></li><li><p>group command or subshell<br>```shell</p><h1 id="group-command"><a href="#group-command" class="headerlink" title="group command"></a>group command</h1><h1 id="the-braces-must-be-separated-from-the-commands-by-a-space"><a href="#the-braces-must-be-separated-from-the-commands-by-a-space" class="headerlink" title="the braces must be separated from the commands by a space"></a>the braces must be separated from the commands by a space</h1><h1 id="the-last-command-must-be-terminated-with-either-a-semicolon-or-a-newline-prior-to-the-closing-brace"><a href="#the-last-command-must-be-terminated-with-either-a-semicolon-or-a-newline-prior-to-the-closing-brace" class="headerlink" title="the last command must be terminated with either a semicolon or a newline prior to the closing brace."></a>the last command must be terminated with either a semicolon or a newline prior to the closing brace.</h1><p>{ command1; command2; [command3; …] }</p></li></ul><h1 id="subshell"><a href="#subshell" class="headerlink" title="subshell"></a>subshell</h1><p>(command1; command2; [command3;…])</p><pre><code>```shellls -l &gt; output.txtecho &quot;Listing of foo.txt&quot; &gt;&gt; output.txtcat foo.txt &gt;&gt; output.txt###################################################################{ ls -l; echo &quot;Listing of foo.txt&quot;; cat foo.txt; } &gt; output.txt(ls -l; echo &quot;Listing of foo.txt&quot;; cat foo.txt) &gt; output.txt</code></pre><ul><li>process substitution<br>```shell<h1 id="for-processes-that-produce-standard-output"><a href="#for-processes-that-produce-standard-output" class="headerlink" title="for processes that produce standard output:"></a>for processes that produce standard output:</h1>&lt;(a list of commands)</li></ul><h1 id="for-processes-that-intake-standard-input"><a href="#for-processes-that-intake-standard-input" class="headerlink" title="for processes that intake standard input:"></a>for processes that intake standard input:</h1><blockquote><p>(a list of commands)<br>```</p></blockquote><pre><code class="shell"># to solve the problem brought by subshell, we can employ process substitution like this:read &lt; &lt;(echo &quot;foo&quot;)echo $REPLY</code></pre><ul><li>trap<pre><code class="shell">trap argument signal [signal...]</code></pre></li></ul><pre><code class="shell">#!/bin/bash# trap-demo2 : simple signal handling demoexit_on_signal_SIGINT () {    echo &quot;Script interrupted.&quot; 2&gt;&amp;1    exit 0}exit_on_signal_SIGTERM () {    echo &quot;Script terminated.&quot; 2&gt;&amp;1    exit 0}trap exit_on_signal_SIGINT SIGINTtrap exit_on_signal_SIGTERM SIGTERMfor i in {1..5}; do    echo &quot;Iteration $i of 5&quot;    sleep 5done</code></pre><ul><li><p>temp file<br><code>mktemp</code></p><pre><code class="shell">tempfile=$(mktemp /tmp/foobar.$$.XXXXXXXXXX)echo $tempfile/tmp/foobar.6593.UOZuvM6654</code></pre></li><li><p>asynchronous execution<br><code>wait</code></p></li></ul><pre><code class="shell">#!/bin/bash# async-parent : Asynchronous execution demo (parent)echo &quot;Parent: starting...&quot;echo &quot;Parent: launching child script...&quot;async-child &amp;pid=$!echo &quot;Parent: child (PID= $pid) launched.&quot;echo &quot;Parent: continuing...&quot;sleep 2echo &quot;Parent: pausing to wait for child to finish...&quot;wait $pidecho &quot;Parent: child is finished. Continuing...&quot;echo &quot;Parent: parent is done. Exiting.&quot;</code></pre><pre><code class="shell">#!/bin/bash# async-child : Asynchronous execution demo (child)echo &quot;Child: child is running...&quot;sleep 5echo &quot;Child: child is done. Exiting.&quot;</code></pre><pre><code class="shell">async-parentParent: starting...Parent: launching child script...Parent: child (PID= 6741) launched.Parent: continuing...Child: child is running...Parent: pausing to wait for child to finish...Child: child is done. Exiting.Parent: child is finished. Continuing...Parent: parent is done. Exiting.</code></pre><ul><li>named pipe<pre><code class="shell"># it works as `process1 | process2`process1 &gt; named_pipeprocess2 &lt; named_pipe</code></pre></li></ul><p><code>mkfifo</code></p><pre><code class="shell">mkfifo pipe1# process1ls -l &gt; pipe1# process2cat &lt; pipe1</code></pre><h3 id="Summay"><a href="#Summay" class="headerlink" title="Summay"></a>Summay</h3><p>Well, we have completed our journey. The only thing left to do now is <strong>practice, practice, practice</strong>. Even though we covered a lot of ground in our trek, we barely <strong>scratched the surface</strong> as far as the command line goes. There are still thousands of command line programs left to be discovered and enjoyed. Start digging around in <code>/usr/bin</code> and you’ll see!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;del&gt;Last Modified: 2017-08-11 11:18:00&lt;/del&gt;&lt;/p&gt;
&lt;h3 id=&quot;Acknowledge&quot;&gt;&lt;a href=&quot;#Acknowledge&quot; class=&quot;headerlink&quot; title=&quot;Acknowledge&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
      <category term="Doing" scheme="http://TaoSama.com/categories/Doing/"/>
    
      <category term="Shell" scheme="http://TaoSama.com/categories/Doing/Shell/"/>
    
    
  </entry>
  
  <entry>
    <title>Notes, Shell</title>
    <link href="http://TaoSama.com/2017-07-01/shell-notes/"/>
    <id>http://TaoSama.com/2017-07-01/shell-notes/</id>
    <published>2017-07-01T02:13:10.000Z</published>
    <updated>2017-09-20T09:28:09.000Z</updated>
    
    <content type="html"><![CDATA[<p><del>Last Modified: 2017-07-31 11:18:00</del></p><h3 id="Acknowledge"><a href="#Acknowledge" class="headerlink" title="Acknowledge"></a>Acknowledge</h3><ul><li>What is shell?<ul><li>The shell is a program that takes keyboard commands and passes them to the operating system to carry out.</li><li>Almost all Linux distributions supply a shell program from the GNU Project called <strong>bash</strong>.</li><li><strong>Bash</strong> is an enhanced replacement for <strong>sh</strong>, the original Unix shell program written by Steve Bourne.</li></ul></li><li>What is terminal emulator?<ul><li>We use a terminal emulator to interact with the shell when using a GUI.</li><li>KDE uses <strong>konsole</strong> and GNOME uses <strong>gnome-terminal</strong>, though it’s likely called simply <strong>“terminal”</strong> on our menu.</li></ul></li><li>Shell prompt<pre><code class="shell">[me@linuxbox ~]$</code></pre></li><li>Some Simple Commands<ul><li>date - Display the current time and date.</li><li>cal - Display a calendar of the current month.</li><li>df - Display the current amount of free space on your disk drives.</li><li>free - Display the amount of free memory.</li><li>exit - End the terminal session.</li></ul></li></ul><a id="more"></a><h2 id="Navigate-the-file-system"><a href="#Navigate-the-file-system" class="headerlink" title="Navigate the file system"></a>Navigate the file system</h2><ul><li>pwd - Print name of current working directory</li><li>cd - Change directory</li><li>ls - List directory contents</li><li>file – Determine file type</li><li>less – View file contents</li></ul><h4 id="important-facts-about-filenames"><a href="#important-facts-about-filenames" class="headerlink" title="important facts about filenames"></a>important facts about filenames</h4><ul><li>Filenames that <strong>begin with</strong> a <strong>period character(.)</strong> are hidden.<br><code>ls -a</code> can display them, <code>ll -a</code> can display the detailed lists.</li><li><strong>Filenames and commands</strong> in Linux, like Unix, are <strong>case sensitive</strong>. The filenames “File1” and “file1” refer to different files.</li><li>If you want to <strong>represent spaces</strong> between words in a filename, use <strong>underscore characters(_)</strong>. Though Linux supports long filenames which may contain embedded spaces and punctuation characters: period(.), dash(-), underscore(_).</li></ul><h3 id="Manipulate-files-and-directories"><a href="#Manipulate-files-and-directories" class="headerlink" title="Manipulate files and directories"></a>Manipulate files and directories</h3><ul><li>cp – Copy files and directories</li><li>mv – Move/rename files and directories</li><li>mkdir – Create directories</li><li>rm – Remove files and directories</li><li>ln – Create hard and symbolic links</li></ul><p><strong>Here is a useful tip.</strong> Whenever you use wildcards with <code>rm</code> (besides carefully checking your typing!), test the wildcard first with <code>ls</code>.<br>|Wildcard|Meaning|<br>|:——:|:——|<br>|*|    Matches any characters|<br>|?|    Matches any single character|<br>|[characters]|    Matches any character that is a member of the set characters|<br>|[!characters]|    Matches any character that is not a member of the set characters|<br>|[[:class:]]|    Matches any character that is a member of the specified class|</p><table><thead><tr><th style="text-align:center">Character</th><th style="text-align:left">Class Meaning</th></tr></thead><tbody><tr><td style="text-align:center">[:alnum:]</td><td style="text-align:left">Matches any alphanumeric character</td></tr><tr><td style="text-align:center">[:alpha:]</td><td style="text-align:left">Matches any alphabetic character</td></tr><tr><td style="text-align:center">[:digit:]</td><td style="text-align:left">Matches any numeral</td></tr><tr><td style="text-align:center">[:lower:]</td><td style="text-align:left">Matches any lowercase letter</td></tr><tr><td style="text-align:center">[:upper:]</td><td style="text-align:left">Matches any uppercase letter</td></tr></tbody></table><h4 id="ln-—-Create-links"><a href="#ln-—-Create-links" class="headerlink" title="ln — Create links"></a>ln — Create links</h4><h5 id="create-hard-links"><a href="#create-hard-links" class="headerlink" title="create hard links"></a>create hard links</h5><pre><code class="shell">ln file link</code></pre><ul><li>a hard link may not reference a file that is not on the same disk partition as the link itself.</li><li>a hard link may not reference a directory.</li><li>a hard link is <strong>indistinguishable</strong> from the file itself when listed with <code>ls</code>. </li><li>when a hard link is deleted, the link is removed but the contents of the file itself continue to exist (that is, its space is not deallocated) until all links to the file are deleted.</li></ul><h5 id="create-symbolic-links"><a href="#create-symbolic-links" class="headerlink" title="create symbolic links"></a>create symbolic links</h5><pre><code class="shell">ln -s item link</code></pre><ul><li>a file pointed to by a symbolic link is <strong>also written</strong>, if you write some something to the symbolic link.</li><li>however when you delete a symbolic link, <strong>only the link is deleted</strong>, not the file itself.</li></ul><h3 id="Use-commands"><a href="#Use-commands" class="headerlink" title="Use commands"></a>Use commands</h3><ul><li>type – Indicate how a command name is interpreted</li><li>which – Display which executable program will be executed</li><li>man – Display a command’s manual page</li><li>apropos – Display a list of appropriate commands</li><li>info – Display a command’s info entry</li><li>whatis – Display a very brief description of a command</li><li>whereis - Display the path of the executable program of a command</li><li>alias – Create an alias for a command</li></ul><pre><code class="shell"># append a new line of aliasecho &#39;alias foo=&quot;cd /usr; ls; cd -&quot;&#39; &gt;&gt; .bashrc# force bash to re-read the modified .bashrc filesource .bashrc</code></pre><h3 id="I-O-redirection"><a href="#I-O-redirection" class="headerlink" title="I/O redirection"></a>I/O redirection</h3><ul><li>cat - Concatenate files</li><li>sort - Sort lines of text</li><li>uniq - Report or omit repeated lines</li><li>grep - Print lines matching a pattern</li><li>wc - Print newline, word, and byte counts for each file</li><li>head - Output the first part of a file</li><li>tail - Output the last part of a file</li><li><p>tee - Read from standard input and write to standard output and files</p></li><li><p><code>&lt;</code> operator redirects the standard input, <code>&gt;</code> operator redirects the standard output.<br><code>&gt;&gt;</code> means to append instead of overwriting.<br>file streams as standard <strong>input, output and error</strong>, the shell references them internally as <strong>file descriptors zero, one and two</strong>, respectively<br>```shell</p><h1 id="redirect-to-standard-error"><a href="#redirect-to-standard-error" class="headerlink" title="redirect to standard error"></a>redirect to standard error</h1><p>ls -l /bin/usr 2&gt; ls-error.txt</p></li></ul><h1 id="redirect-standard-output-and-error-to-same-file"><a href="#redirect-standard-output-and-error-to-same-file" class="headerlink" title="redirect standard output and error to same file"></a>redirect standard output and error to same file</h1><h1 id="the-redirection-of-standard-error-must-always-occur-after"><a href="#the-redirection-of-standard-error-must-always-occur-after" class="headerlink" title="the redirection of standard error must always occur after"></a>the redirection of standard error must always occur after</h1><h1 id="redirecting-standard-output-or-it-doesn’t-work"><a href="#redirecting-standard-output-or-it-doesn’t-work" class="headerlink" title="redirecting standard output or it doesn’t work"></a>redirecting standard output or it doesn’t work</h1><p>ls -l /bin/usr &gt; ls-output.txt 2&gt;&amp;1  # old version<br>ls -l /bin/usr &amp;&gt; ls-output.txt      # new version</p><pre><code>* to suppress error messages from a command, a special file called `/dev/null`, and it is a system device called a **bit bucket** which accepts input and does nothing with it.```shellls -l /bin/usr 2&gt; /dev/null</code></pre><ul><li>the <strong>pipe</strong> operator <code>|</code> (vertical bar), the standard output of one command can be piped into the standard input of another.<br>usually assisted with filters.<br>```shell<h1 id="sort-and-unique-files-then-show"><a href="#sort-and-unique-files-then-show" class="headerlink" title="sort and unique files then show"></a>sort and unique files then show</h1>ls /bin /usr/bin | sort | uniq | less<h1 id="report-the-duplicate-files-with-d"><a href="#report-the-duplicate-files-with-d" class="headerlink" title="report the duplicate files with -d"></a>report the duplicate files with -d</h1>ls /bin /usr/bin | sort | uniq -d | less</li></ul><h1 id="add-wc-to-pipelines-to-count-things"><a href="#add-wc-to-pipelines-to-count-things" class="headerlink" title="add wc to pipelines to count things"></a>add wc to pipelines to count things</h1><p>ls /bin /usr/bin | sort | uniq | wc -l</p><pre><code>* **grep** is a powerful program used to find text patterns within files.```shellls /bin /usr/bin | sort | uniq | grep zip</code></pre><p><code>-i</code> to ignore case, <code>-v</code> to print the lines that do not match the pattern, <code>-n</code> to show the line numbers.</p><ul><li><p><strong>head</strong> prints the <strong>first ten lines</strong> of a file and the <strong>tail</strong> command prints <strong>the last ten lines</strong> by default.</p><pre><code class="shell"># -n to adjust the number of lines to showhead -n 5 ls-output.txt# -f to allow tail to view files in real-timetail -f /var/log/messages</code></pre></li><li><p><strong>tee</strong> reads standard input and copies it <strong>to both standard output</strong> (allowing the data to continue down the pipeline) and <strong>to one or more files</strong>.</p><pre><code class="shell">ls /usr/bin | tee ls.txt | grep zip</code></pre></li></ul><h3 id="Expansion"><a href="#Expansion" class="headerlink" title="Expansion"></a>Expansion</h3><ul><li>pathname expansion<pre><code class="shell">echo D*Desktop  Documents</code></pre></li><li>arithmetic expansion<pre><code class="shell"># / is just integer division, ** is exponentiationecho $((2+2-2*2/3%10+2**2))7</code></pre></li><li>brace expansion<br>```shell<br>echo Front-{A,B,C}-Back<br>Front-A-Back Front-B-Back Front-C-Back</li></ul><p>echo Number_{1..5}<br>Number_1  Number_2  Number_3  Number_4  Number_5</p><p>echo a{A{1,2},B{3,4}}b<br>aA1b aA2b aB3b aB4b</p><pre><code>* parameter expansion```shellecho $USERme# to see a list of available variablesprintenv | less</code></pre><ul><li>command substitution<br>```shell<br>echo $(ls)<br>Desktop Documents ls-output.txt Music Pictures Public Templates</li></ul><p>ls -l $(which cp)<br>-rwxr-xr-x 1 root root 71516 2007-12-05 08:58 /bin/cp</p><p>file $(ls /usr/bin/* | grep zip)<br>/usr/bin/bunzip2:     symbolic link to `bzip2’</p><pre><code>```shell# use back-quotes instead of the dollar sign and parentheses# in older version of bashls -l `which cp`-rwxr-xr-x 1 root root 71516 2007-12-05 08:58 /bin/cp</code></pre><h4 id="to-control-expansion"><a href="#to-control-expansion" class="headerlink" title="to control expansion"></a>to control expansion</h4><ul><li>double quotes<br>If you place text inside double quotes, all the special characters used by the shell lose their special meaning and are treated as ordinary characters.<br>The <strong>exceptions</strong> are <code>$</code>, <code>\ (backslash)</code>, and <code>` (back-quote)</code>.</li><li>single quotes<br>All expansions lose their special meaning.</li><li>escape character<br>You can precede a character with a <code>\ (backslash)</code> to selectively prevent an expansion.<pre><code class="shell">echo text ~/*.txt {a,b} $(echo foo) $((2+2)) $USERtext /home/me/ls-output.txt a b foo 4 me</code></pre><pre><code class="shell">echo &quot;text ~/*.txt {a,b} $(echo foo) $((2+2)) $USER&quot;text ~/*.txt   {a,b} foo 4 me</code></pre><pre><code class="shell">echo &#39;text ~/*.txt {a,b} $(echo foo) $((2+2)) $USER&#39;text ~/*.txt  {a,b} $(echo foo) $((2+2)) $USER</code></pre></li></ul><h3 id="Keyboard-operating-techniques"><a href="#Keyboard-operating-techniques" class="headerlink" title="Keyboard operating techniques"></a>Keyboard operating techniques</h3><ul><li>clear - Clear the screen</li><li>history - Display the contents of the history list</li></ul><h4 id="cursor-movement-shortcuts"><a href="#cursor-movement-shortcuts" class="headerlink" title="cursor movement shortcuts"></a>cursor movement shortcuts</h4><table><thead><tr><th style="text-align:center">Key</th><th style="text-align:left">Action</th></tr></thead><tbody><tr><td style="text-align:center">Ctrl-a</td><td style="text-align:left">Move cursor to the beginning of the line.</td></tr><tr><td style="text-align:center">Ctrl-e</td><td style="text-align:left">Move cursor to the end of the line.</td></tr><tr><td style="text-align:center">Ctrl-f</td><td style="text-align:left">Move cursor forward one character; same as the right arrow key.</td></tr><tr><td style="text-align:center">Ctrl-b</td><td style="text-align:left">Move cursor backward one character; same as the left arrow key.</td></tr><tr><td style="text-align:center">Alt-f</td><td style="text-align:left">Move cursor forward one word.</td></tr><tr><td style="text-align:center">Alt-b</td><td style="text-align:left">Move cursor backward one word.</td></tr></tbody></table><h4 id="text-editing-shortcuts"><a href="#text-editing-shortcuts" class="headerlink" title="text editing shortcuts"></a>text editing shortcuts</h4><table><thead><tr><th style="text-align:center">Key</th><th style="text-align:left">Action</th></tr></thead><tbody><tr><td style="text-align:center">Ctrl-d</td><td style="text-align:left">Delete the character at the cursor location.</td></tr><tr><td style="text-align:center">Ctrl-t</td><td style="text-align:left">Transpose(exchange)the character at the cursor location with the one preceding it.</td></tr><tr><td style="text-align:center">Alt-t</td><td style="text-align:left">Transpose the word at the cursor location with the one preceding it.</td></tr><tr><td style="text-align:center">Alt-l</td><td style="text-align:left">Convert the characters from the cursor location to the end of the word to lowercase.</td></tr><tr><td style="text-align:center">Alt-u</td><td style="text-align:left">Convert the characters from the cursor location to the end of the word to uppercase.</td></tr></tbody></table><h4 id="cut-and-paste-shortcuts"><a href="#cut-and-paste-shortcuts" class="headerlink" title="cut and paste shortcuts"></a>cut and paste shortcuts</h4><table><thead><tr><th style="text-align:center">Key</th><th style="text-align:left">Action</th></tr></thead><tbody><tr><td style="text-align:center">Ctrl-k</td><td style="text-align:left">Kill text from the cursor location to the end of line.</td></tr><tr><td style="text-align:center">Ctrl-u</td><td style="text-align:left">Kill text from the cursor location to the beginning of the line.</td></tr><tr><td style="text-align:center">Alt-d</td><td style="text-align:left">Kill text from the cursor location to the end of the current word.</td></tr><tr><td style="text-align:center">Alt-Backspace</td><td style="text-align:left">Kill text from the cursor location to the beginning of the word. If the cursor is at the beginning of a word, kill the previous word.</td></tr><tr><td style="text-align:center">Ctrl-y</td><td style="text-align:left">Yank text from the kill-ring and insert it at the cursor location.</td></tr></tbody></table><h4 id="history-expansion-and-shortcuts"><a href="#history-expansion-and-shortcuts" class="headerlink" title="history expansion and shortcuts"></a>history expansion and shortcuts</h4><pre><code class="shell">history | grep /usr/bin# 88  ls -l /usr/bin &gt; ls-output.txt# to expand the command of history of 88th line!88# to expand the last command of history!!</code></pre><table><thead><tr><th style="text-align:center">Key</th><th style="text-align:left">Action</th></tr></thead><tbody><tr><td style="text-align:center">Ctrl-p</td><td style="text-align:left">Move to the previous history entry. Same action as the up arrow.</td></tr><tr><td style="text-align:center">Ctrl-n</td><td style="text-align:left">Move to the next history entry. Same action as the down arrow.</td></tr><tr><td style="text-align:center">Ctrl-r</td><td style="text-align:left">Reverse incremental search. Searches incrementally from the current command line up the history list.</td></tr><tr><td style="text-align:center">Ctrl-o</td><td style="text-align:left">Execute the current item in the history list and advance to the next one. This is handy if you are trying to re-execute a sequence of commands in the history list.</td></tr></tbody></table><h3 id="Permission"><a href="#Permission" class="headerlink" title="Permission"></a>Permission</h3><ul><li>id – Display user identity</li><li>chmod – Change a file’s mode</li><li>umask – Set the default file permissions</li><li>su – Run a shell as another user</li><li>sudo – Execute a command as another user</li><li>chown – Change a file’s owner</li><li>chgrp – Change a file’s group ownership</li><li>passwd – Change a user’s password</li></ul><h4 id="access-rights-read-write-execution"><a href="#access-rights-read-write-execution" class="headerlink" title="access rights, read, write, execution"></a>access rights, read, write, execution</h4><pre><code class="shell">ls -l foo.txt-rw-rw-r-- 1 me   me   0 2008-03-06 14:52 foo.txt# the first one is file type, and the left nine is file mode.</code></pre><h5 id="file-types"><a href="#file-types" class="headerlink" title="file types"></a>file types</h5><table><thead><tr><th style="text-align:center">Attribute</th><th style="text-align:left">File Type</th></tr></thead><tbody><tr><td style="text-align:center">-</td><td style="text-align:left">a regular file</td></tr><tr><td style="text-align:center">d</td><td style="text-align:left">A directory</td></tr><tr><td style="text-align:center">l</td><td style="text-align:left">A symbolic link. Notice that with symbolic links, the remainning file attributes are always “rwxrwxrwx” and are dummy values. The real file attributes are those of the file the symbolic link points to.</td></tr><tr><td style="text-align:center">c</td><td style="text-align:left">A character special file. This file type refers to a device that handles data as a stream of bytes, such as a terminal or modem.</td></tr><tr><td style="text-align:center">b</td><td style="text-align:left">A block special file. This file type refers to a device that handles data in blocks, such as a hard drive or CD-ROM drive.</td></tr></tbody></table><h5 id="file-mode"><a href="#file-mode" class="headerlink" title="file mode"></a>file mode</h5><p><img src="http://7xru22.com1.z0.glb.clouddn.com/101.png" alt=""><br>|Attribute|    Files|    Directories|<br>|:-:|:-|<br>|r|    Allows a file to be opened and read.|    Allows a directory’s contents to be listed if the execute attribute is also set.|<br>|w|    Allows a file to be written to or truncated, however this attribute does not allow files to be renamed or deleted. The ability to delete or rename files is determined by directory attributes.|    Allows files within a directory to be created, deleted, and renamed if the execute attribute is also set.|<br>|x|    Allows a file to be treated as a program and executed. Program files written in scripting languages must also be set as readable to be executed.|    Allows a directory to be entered, e.g., cd directory.|</p><h4 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a>chmod</h4><pre><code class="shell">chmod 600 foo.txtls -l foo.txt-rw------- 1 me    me    0  2008-03-06 14:52 foo.txt</code></pre><p>a few common ones: 7 (rwx), 6 (rw-), 5 (r-x), 4 (r–), and 0 (—).</p><h5 id="chmod-Symbolic-Notation"><a href="#chmod-Symbolic-Notation" class="headerlink" title="chmod Symbolic Notation"></a>chmod Symbolic Notation</h5><table><thead><tr><th style="text-align:center">Notation</th><th style="text-align:left">Meaning</th></tr></thead><tbody><tr><td style="text-align:center">u</td><td style="text-align:left">Short for “user”, but means the file or directory owner.</td></tr><tr><td style="text-align:center">g</td><td style="text-align:left">Group owner.</td></tr><tr><td style="text-align:center">o</td><td style="text-align:left">Short for “others”, but means world.</td></tr><tr><td style="text-align:center">a</td><td style="text-align:left">Short for “all”, the combination of “u”, “g”, and “o”.</td></tr></tbody></table><h5 id="chmod-Symbolic-Notation-Examples"><a href="#chmod-Symbolic-Notation-Examples" class="headerlink" title="chmod Symbolic Notation Examples"></a>chmod Symbolic Notation Examples</h5><table><thead><tr><th style="text-align:center">Example</th><th style="text-align:left">Meaning</th></tr></thead><tbody><tr><td style="text-align:center">u+x</td><td style="text-align:left">Add execute permission for the owner.</td></tr><tr><td style="text-align:center">u-x</td><td style="text-align:left">Remove execute permission from the owner.</td></tr><tr><td style="text-align:center">+x</td><td style="text-align:left">Add execute permission for the owner, group, and world. Equivalent to a+x.</td></tr><tr><td style="text-align:center">o-rw</td><td style="text-align:left">Remove the read and write permission from anyone besides the owner and group owner.</td></tr><tr><td style="text-align:center">u+x,go=rw</td><td style="text-align:left">Add execute permission for the owner and set the permissions for the group and others to read and execute. Multiple specifications may be separated by commas.</td></tr></tbody></table><h4 id="umask"><a href="#umask" class="headerlink" title="umask"></a>umask</h4><p>The umask command controls the default permissions given to a file when it is created. It uses octal notation to express a mask of bits <strong>to be removed</strong> from a file’s mode attributes.</p><pre><code class="shell">umask 0022</code></pre><h4 id="others"><a href="#others" class="headerlink" title="others"></a>others</h4><ul><li><p>The <strong>su</strong> command is used to start a shell as another user. </p><pre><code class="shell">su [-[l]] [user]</code></pre></li><li><p>The <strong>sudo</strong> command is used to execute commands as a different user (usually the superuser) in a very controlled way.</p></li><li><p>The <strong>chown</strong> command is used to change the owner and group owner of a file or directory. Superuser privileges are required to use this command. </p><pre><code class="shell">chown [owner][:[group]] file...</code></pre></li><li><p>In older versions of Unix, the chown command only changed file ownership, not group ownership. For that purpose, a separate command, <strong>chgrp</strong> was used. It works much the same way as chown, except for being more limited.</p></li><li><p>The <strong>passwd</strong> command is used to set passwords for <strong>yourself</strong> (and for other users if you have access to superuser privileges). </p><pre><code class="shell">passwd [user]</code></pre></li><li><p>more infos, … <code>adduser, useradd, groupadd</code></p></li></ul><h3 id="Process"><a href="#Process" class="headerlink" title="Process"></a>Process</h3><ul><li>ps – Report a snapshot of current processes</li><li>top – Display tasks</li><li>jobs – List active jobs</li><li>bg – Place a job in the background</li><li>fg – Place a job in the foreground</li><li>kill – Send a signal to a process</li><li>killall – Kill processes by name</li><li>shutdown – Shutdown or reboot the system</li></ul><h4 id="Process-States"><a href="#Process-States" class="headerlink" title="Process States"></a>Process States</h4><table><thead><tr><th style="text-align:center">State</th><th style="text-align:left">Meaning</th></tr></thead><tbody><tr><td style="text-align:center">R</td><td style="text-align:left">Running. This means that the process is running or ready to run.</td></tr><tr><td style="text-align:center">S</td><td style="text-align:left">Sleeping. A process is not running; rather, it is waiting for an event, such as a keystroke or network packet.</td></tr><tr><td style="text-align:center">D</td><td style="text-align:left">Uninterruptible Sleep. Process is waiting for I/O such as a disk drive.</td></tr><tr><td style="text-align:center">T</td><td style="text-align:left">Stopped. Process has been instructed to stop. More on this later.</td></tr><tr><td style="text-align:center">Z</td><td style="text-align:left">A defunct or “zombie” process. This is a child process that has terminated, but has not been cleaned up by its parent.</td></tr><tr><td style="text-align:center">&lt;</td><td style="text-align:left">A high priority process. It’s possible to grant more importance to a process, giving it more time on the CPU. This property of a process is called niceness. A process with high priority is said to be less nice because it’s taking more of the CPU’s time, which leaves less for everybody else.</td></tr><tr><td style="text-align:center">N</td><td style="text-align:left">A low priority process. A process with low priority (a “nice” process) will only get processor time after other processes with higher priority have been serviced.</td></tr></tbody></table><h4 id="Signals"><a href="#Signals" class="headerlink" title="Signals"></a>Signals</h4><p>In the case of <strong>Ctrl-c</strong>, a signal called <strong>INT</strong> (Interrupt) is sent; with <strong>Ctrl-z</strong>, a signal called <strong>TSTP</strong> (Terminal Stop.) </p><pre><code class="shell">kill [-Number] PIDkill [-SIG&lt;Name&gt;] PID</code></pre><table><thead><tr><th style="text-align:center">Number</th><th style="text-align:center">Name</th><th style="text-align:left">Meaning</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">HUP</td><td style="text-align:left">Hangup.</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">INT</td><td style="text-align:left">Interrupt. Performs the same function as the Ctrl-c key sent from the terminal. It will usually terminate a program.</td></tr><tr><td style="text-align:center">9</td><td style="text-align:center">KILL</td><td style="text-align:left">Kill.</td></tr><tr><td style="text-align:center">15</td><td style="text-align:center">TERM</td><td style="text-align:left">Terminate. This is the default signal sent by the kill command. If a program is still “alive” enough to receive signals, it will terminate.</td></tr><tr><td style="text-align:center">18</td><td style="text-align:center">CONT</td><td style="text-align:left">Continue. This will restore a process after a STOP signal.</td></tr><tr><td style="text-align:center">19</td><td style="text-align:center">STOP</td><td style="text-align:left">Stop. This signal causes a process to pause without terminating. Like the KILL signal, it is not sent to the target process, and thus it cannot be ignored.</td></tr></tbody></table><h3 id="Shell-environment"><a href="#Shell-environment" class="headerlink" title="Shell environment"></a>Shell environment</h3><ul><li>printenv – Print part or all of the environment</li><li>set – Set shell options</li><li>export – Export environment to subsequently executed programs</li><li>alias – Create an alias for a command</li></ul><pre><code class="shell">printenv USER # print environment variable USERecho $USER    # a same way as above# export added PATHPATH=$PATH:$HOME/binexport PATH</code></pre><h3 id="Basic-usage-of-vi"><a href="#Basic-usage-of-vi" class="headerlink" title="Basic usage of vi"></a>Basic usage of vi</h3><p><code>to do</code></p><h3 id="Customize-shell-prompt"><a href="#Customize-shell-prompt" class="headerlink" title="Customize shell prompt"></a>Customize shell prompt</h3><p><code>omitted</code></p><h3 id="Package-control"><a href="#Package-control" class="headerlink" title="Package control"></a>Package control</h3><table><thead><tr><th style="text-align:center">-</th><th style="text-align:center">Debian Style (.deb)</th><th style="text-align:center">Red Hat Style (.rpm)</th></tr></thead><tbody><tr><td style="text-align:center">Distributions (Partial Listing)</td><td style="text-align:center">Debian, Ubuntu, Xandros, Linspire</td><td style="text-align:center">Fedora, CentOS, Red Hat Enterprise Linux, OpenSUSE, Mandriva, PCLinuxOS</td></tr><tr><td style="text-align:center">Low-Level Tools</td><td style="text-align:center">dpkg</td><td style="text-align:center">apt-get, aptitude</td></tr><tr><td style="text-align:center">High-Level Tools</td><td style="text-align:center">rpm</td><td style="text-align:center">yum</td></tr><tr><td style="text-align:center">Package Search Commands</td><td style="text-align:center">apt-get update; apt-cache search search_string</td><td style="text-align:center">yum search search_string</td></tr><tr><td style="text-align:center">Package Installation Commands</td><td style="text-align:center">apt-get update; apt-get install package_name</td><td style="text-align:center">yum install package_name</td></tr><tr><td style="text-align:center">Low-Level Package Installation Commands</td><td style="text-align:center">dpkg –install package_file</td><td style="text-align:center">rpm -i package_file</td></tr><tr><td style="text-align:center">Package Removal Commands</td><td style="text-align:center">apt-get remove package_name</td><td style="text-align:center">yum erase package_name</td></tr><tr><td style="text-align:center">Package Update Commands</td><td style="text-align:center">apt-get update; apt-get upgrade</td><td style="text-align:center">yum update</td></tr><tr><td style="text-align:center">Low-Level Package Upgrade Commands</td><td style="text-align:center">dpkg –install package_file</td><td style="text-align:center">rpm -U package_file</td></tr><tr><td style="text-align:center">Package Listing Commands</td><td style="text-align:center">dpkg –list</td><td style="text-align:center">rpm -qa</td></tr><tr><td style="text-align:center">Package Status Commands</td><td style="text-align:center">dpkg –status package_name</td><td style="text-align:center">rpm -q package_name</td></tr><tr><td style="text-align:center">Package Information Commands</td><td style="text-align:center">apt-cache show package_name</td><td style="text-align:center">yum info package_name</td></tr><tr><td style="text-align:center">Package File Identification Commands</td><td style="text-align:center">dpkg –search file_name</td><td style="text-align:center">rpm -qf file_name</td></tr></tbody></table><h3 id="Storage-devices"><a href="#Storage-devices" class="headerlink" title="Storage devices"></a>Storage devices</h3><ul><li>mount – Mount a file system</li><li>umount – Unmount a file system</li><li>fsck – Check and repair a file system</li><li>fdisk – Partition table manipulator</li><li>mkfs – Create a file system</li><li>fdformat – Format a floppy disk</li><li>dd – Write block oriented data directly to a device</li><li>genisoimage (mkisofs) – Create an ISO 9660 image file</li><li>wodim (cdrecord) – Write data to optical storage media</li><li>md5sum – Calculate an MD5 checksum</li></ul><p><code>omitted</code></p><h3 id="Networking"><a href="#Networking" class="headerlink" title="Networking"></a>Networking</h3><ul><li>ping - Send an ICMP ECHO_REQUEST to network hosts</li><li>traceroute - Print the route packets trace to a network host</li><li>netstat - Print network connections, routing tables, interface statistics, masquerade connections, and multicast memberships</li><li>ftp - Internet file transfer program</li><li>wget - Non-interactive network downloader</li><li>ssh - OpenSSH SSH client (remote login program)</li></ul><h3 id="Find-files"><a href="#Find-files" class="headerlink" title="Find files"></a>Find files</h3><ul><li>locate – Find files by name</li><li>find – Search for files in a directory hierarchy</li></ul><p>We will also look at a command that is often used with file search commands to process the resulting list of files:</p><ul><li>xargs – Build and execute command lines from standard input</li></ul><p>In addition, we will introduce a couple of commands to assist us in or exploration:</p><ul><li>touch – Change file times</li><li>stat – Display file or file system status</li></ul><h3 id="Archive-and-backup"><a href="#Archive-and-backup" class="headerlink" title="Archive and backup"></a>Archive and backup</h3><ul><li>gzip – Compress or expand files</li><li>bzip2 – A block sorting file compressor</li><li>tar – Tape archiving utility</li><li>zip – Package and compress files</li><li>rsync – Remote file and directory synchronization</li></ul><h3 id="Regex"><a href="#Regex" class="headerlink" title="Regex"></a>Regex</h3><p>grep: global regular expression print<br><code>-n</code>: Prefix each matching line with the number of the line within the file. May also be specified –line-number.<br><code>-r</code>: Recursively search subdirectories listed.</p><h4 id="metacharacters"><a href="#metacharacters" class="headerlink" title="metacharacters"></a>metacharacters</h4><p>Regular expression metacharacters consist of the following:</p><pre><code>^ $ . [ ] { } - ? * + ( ) | \</code></pre><h5 id="any-character"><a href="#any-character" class="headerlink" title="any character"></a>any character</h5><p>The dot or period(.) character is used to match any character. </p><h5 id="anchors"><a href="#anchors" class="headerlink" title="anchors"></a>anchors</h5><p>The caret <code>(^)</code> and dollar <code>($)</code> sign characters are treated as anchors. This means that they cause the match to occur only if the regular expression is found <strong>at the beginning of the line</strong> or <strong>at the end of the line</strong>.</p><pre><code class="shell"># crossword puzzlesgrep -i &#39;^..j.r$&#39; /usr/share/dict/wordsGujarKajarMajormajor</code></pre><h5 id="bracket-expressions"><a href="#bracket-expressions" class="headerlink" title="bracket expressions"></a>bracket expressions</h5><p>Bracket expressions is used to match a single character from a specified set of characters.</p><pre><code class="shell">grep -h &#39;[bg]zip&#39; dirlist*.txtbzip2bzip2recovergzip</code></pre><p>Metacharacters lose their special meaning when placed within brackets. However, <strong>two cases</strong> have different meanings.<br>The first is the caret <code>(^)</code>, which is used to indicate <strong>negation</strong>; the second is the dash <code>(-)</code>, which is used to indicate a <strong>character range</strong>.</p><pre><code class="shell">grep -h &#39;[^bg]zip&#39; dirlist*.txtbunzip2gunzip# it will match all filenames starting with letters and numbers:grep -h &#39;^[A-Za-z0-9]&#39; dirlist*.txt# to include a dash, making it the first character in the expression# it will match every filename containing a dash, or a upper case “A” or an uppercase “Z”.grep -h &#39;[-AZ]&#39; dirlist*.txt</code></pre><h4 id="POSIX-Character-Classes"><a href="#POSIX-Character-Classes" class="headerlink" title="POSIX Character Classes"></a>POSIX Character Classes</h4><table><thead><tr><th style="text-align:center">Character Class</th><th style="text-align:left">Description</th></tr></thead><tbody><tr><td style="text-align:center">[:alnum:]</td><td style="text-align:left">The alphanumeric characters. In ASCII, equivalent to: [A-Za-z0-9]</td></tr><tr><td style="text-align:center">[:word:]</td><td style="text-align:left">The same as [:alnum:], with the addition of the underscore (_) character.</td></tr><tr><td style="text-align:center">[:alpha:]</td><td style="text-align:left">The alphabetic characters. In ASCII, equivalent to: [A-Za-z]</td></tr><tr><td style="text-align:center">[:digit:]</td><td style="text-align:left">The numerals zero through nine.</td></tr><tr><td style="text-align:center">[:lower:]</td><td style="text-align:left">The lowercase letters.</td></tr><tr><td style="text-align:center">[:space:]</td><td style="text-align:left">The whitespace characters including space, tab, carriage return, newline, vertical tab, and form feed. In ASCII, equivalent to: [ \t\r\n\v\f]</td></tr><tr><td style="text-align:center">[:upper:]</td><td style="text-align:left">The upper case characters.</td></tr><tr><td style="text-align:center">[:xdigit:]</td><td style="text-align:left">Characters used to express hexadecimal numbers. In ASCII, equivalent to: [0-9A-Fa-f]</td></tr></tbody></table><h4 id="basic-regular-expressions-BRE-and-extended-regular-expressions-ERE"><a href="#basic-regular-expressions-BRE-and-extended-regular-expressions-ERE" class="headerlink" title="basic regular expressions (BRE) and extended regular expressions (ERE)"></a>basic regular expressions (BRE) and extended regular expressions (ERE)</h4><p>What’s the difference between BRE and ERE?<br>It’s a matter of metacharacters.<br>With BRE, the following metacharacters are recognized:</p><pre><code>^ $ . [ ] *</code></pre><p>All other characters are considered literals.</p><p>With ERE, the following metacharacters (and their associated functions) are added:</p><pre><code>( ) { } ? + |</code></pre><h4 id="alternation"><a href="#alternation" class="headerlink" title="alternation"></a>alternation</h4><pre><code class="shell"># it will match the filenames in our lists that start with either “bz”, “gz”, or “zipgrep -Eh &#39;^(bz|gz|zip)&#39; dirlist*.txt# it changes to match any filename that begins with “bz” or contains “gz” or contains “zip”grep -Eh &#39;^bz|gz|zip&#39; dirlist*.txt</code></pre><h4 id="quantifier"><a href="#quantifier" class="headerlink" title="quantifier"></a>quantifier</h4><p>The question mark <code>(?)</code> means <strong>making the preceding element optional (matching 0 or 1 element)</strong>.</p><pre><code class="shell"># to valid if it matched either of these two forms:# (nnn) nnn-nnnn# nnn nnn-nnnnecho &quot;(555) 123-4567&quot; | grep -E &#39;^\(?[0-9][0-9][0-9]\)? [0-9][0-9][0-9]-[0-9][0-9][0-9][0-9]$&#39;(555) 123-4567echo &quot;555 123-4567&quot; | grep -E &#39;^\(?[0-9][0-9][0-9]\)? [0-9][0-9][0-9]-[0-9][0-9][0-9][0-9]$&#39;555 123-4567</code></pre><p>The asterisk <code>(*)</code> means <strong>making the preceding element optional (matching 0 or any number of times elements)</strong>.</p><pre><code class="shell"># to see if a string was a sentence# it starts with an uppercase letter# then contains any number of upper and lowercase letters and spaces# and ends with a period. echo &quot;This works.&quot; | grep -E &#39;[[:upper:]][[:upper:][:lower:] ]*\.&#39;This works.echo &quot;this does not&quot; | grep -E &#39;[[:upper:]][[:upper:][:lower:] ]*\.&#39;</code></pre><p>The plus mark <code>(+)</code> means <strong>making the preceding element optional (matching 1 or any number of times elements)</strong>.</p><pre><code class="shell"># it will match lines consisting of groups of one or more alphabetic characters separated by single spacesecho &quot;This that&quot; | grep -E &#39;^([[:alpha:]]+ ?)+$&#39;This thatecho &quot;a b c&quot; | grep -E &#39;^([[:alpha:]]+ ?)+$&#39;a b c</code></pre><p>The <code>{</code> and <code>}</code> metacharacters are used to <strong>express minimum and maximum numbers of required matches</strong>. They may be specified in four possible ways:<br>|Specifier|    Meaning|<br>|:-:|:-|<br>|{n}|    Match the preceding element if it occurs exactly n times.<br>|{n,m}|    Match the preceding element if it occurs at least n times, but no more than m times.|<br>|{n,}|    Match the preceding element if it occurs n or more times.|<br>|{,m}|    Match the preceding element if it occurs no more than m times.|</p><pre><code class="shell">echo &quot;(555) 123-4567&quot; | grep -E &#39;^\(?[0-9]{3}\)? [0-9]{3}-[0-9]{4}$&#39;(555) 123-4567</code></pre><h4 id="find-files"><a href="#find-files" class="headerlink" title="find files"></a>find files</h4><pre><code class="shell"># it will reveal pathnames that contain embedded spaces and other potentially offensive charactersfind . -regex &#39;.*[^-\_./0-9a-zA-Z].*&#39;</code></pre><h4 id="less-and-vim"><a href="#less-and-vim" class="headerlink" title="less and vim"></a>less and vim</h4><p>They support basic regular expressions.<br>Pressing the <code>/</code> key followed by <strong>a regular expression</strong> will perform a search.</p><h3 id="Manipulate-text"><a href="#Manipulate-text" class="headerlink" title="Manipulate text"></a>Manipulate text</h3><ul><li>cat – Concatenate files and print on the standard output</li><li>sort – Sort lines of text files</li><li>uniq – Report or omit repeated lines</li><li>cut – Remove sections from each line of files</li><li>paste – Merge lines of files</li><li>join – Join lines of two files on a common field</li><li>comm – Compare two sorted files line by line</li><li>diff – Compare files line by line</li><li>patch – Apply a diff file to an original</li><li>tr – Translate or delete characters</li><li>sed – Stream editor for filtering and transforming text</li><li>aspell – Interactive spell checker</li></ul><h4 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h4><p><code>-A</code>: display non- printing characters in the text.<br><code>-n</code>: show line numbers.<br><code>-s</code>: suppress the output of multiple blank lines.</p><h4 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h4><p><code>-n</code>: perform sorting based on the numeric evaluation of a string rather than alphabetical value.<br><code>-r</code>: sort in reverse order. results are in descending rather than ascending order.<br><code>-b</code>: ignore leading blanks.<br><code>-k field1[,field2]</code>: sort based on a key field located from field1 to field2 rather than the entire line.</p><pre><code class="shell"># by specifying -k 3.7 we instruct sort to # use a sort key that begins at the seventh character within the third fieldsort -k 3.7nbr -k 3.1nbr -k 3.4nbr distros.txtFedora         10    11/25/2008Ubuntu         8.10  10/30/2008SUSE           11.0  06/19/2008...</code></pre><h4 id="unique"><a href="#unique" class="headerlink" title="unique"></a>unique</h4><p><code>-u</code>: remove duplicates from the sorted output.<br><code>-d</code>: only output duplicated lines, rather than unique lines.</p><h4 id="cut"><a href="#cut" class="headerlink" title="cut"></a>cut</h4><p><code>-f filed_list</code>, <code>-c char_list</code>, <code>-d delimiter_char</code></p><pre><code class="shell">cut -f 3 distros.txt12/07/200611/25/2008cut -f 3 distros.txt | cut -c 7-1020062008# default delimiter is tab# what if we wanted a file fully manipulated with cut by characters, rather than fieldsexpand distros.txt | cut -c 23-# set delimiter to &#39;:&#39;cut -d &#39;:&#39; -f 1 /etc/passwd | head</code></pre><h4 id="paste"><a href="#paste" class="headerlink" title="paste"></a>paste</h4><p>The paste command does the opposite of cut. Rather than extracting a column of text from a file, it adds one or more columns of text to a file.</p><h4 id="join"><a href="#join" class="headerlink" title="join"></a>join</h4><p>A join is an operation usually associated with relational databases where data from multiple tables with a shared key field is combined to form a desired result.</p><h4 id="comm-and-diff"><a href="#comm-and-diff" class="headerlink" title="comm and diff"></a>comm and diff</h4><ul><li>comm<br>The comm program compares two text files and displays the lines that are unique to each one and the lines they have in common.</li><li>diff<br><code>-c</code>: <strong>contex format</strong><br>```shell<br>diff -c file1.txt file2.txt<br>_*_ file1.txt    2008-12-23 06:40:13.000000000 -0500<br>— file2.txt   2008-12-23 06:40:34.000000000 -0500</li></ul><hr><p><strong>_ 1,4 *_</strong></p><ul><li>a<br>b<br>c<br>d<br>— 1,4 —-<br>b<br>c<br>d<ul><li>e<pre><code>`-u`: **unified format**```shelldiff -u file1.txt file2.txt--- file1.txt 2008-12-23 06:40:13.000000000 -0500+++ file2.txt 2008-12-23 06:40:34.000000000 -0500@@ -1,4 +1,4 @@-abcd+e</code></pre></li></ul></li></ul><h4 id="patch"><a href="#patch" class="headerlink" title="patch"></a>patch</h4><p>To prepare a diff file for use with patch, the GNU documentation (see Further Reading below) suggests using diff as follows:</p><pre><code class="shell">diff -Naur old_file new_file &gt; diff_file</code></pre><p>Once the diff file has been created, we can apply it to patch the old file into the new file:</p><pre><code class="shell">patch &lt; diff_file</code></pre><h4 id="tr"><a href="#tr" class="headerlink" title="tr"></a>tr</h4><p>The tr program is used to transliterate characters.</p><pre><code class="shell"># transliterate charactersecho &quot;lowercase letters&quot; | tr a-z A-ZLOWERCASE LETTERSecho &quot;lowercase letters&quot; | tr [:lower:] AAAAAAAAAA AAAAAAA# delete &#39;\r&#39; in dos filestr -d &#39;\r&#39; &lt; dos_file &gt; unix_file# “squeeze” (delete) repeated instances of a characterecho &quot;aaabbbccc&quot; | tr -s ababccc</code></pre><h4 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h4><p><code>-n</code>: no auto-print;</p><p>sed Address Notation<br>|Address|    Description|<br>|:-:|:-|<br>|n|    A line number where n is a positive integer.|<br>|$|    The last line.|<br>|/regexp/|    Lines matching a POSIX basic regular expression. Note that the regular expression is delimited by slash characters. Optionally, the regular expression may be delimited by an alternate character, by specifying the expression with \cregexpc, where c is the alternate character.|<br>|addr1,addr2|    A range of lines from addr1 to addr2, inclusive. Addresses may be any of the single address forms above.|<br>|first~step|    Match the line represented by the number first, then each subsequent line at step intervals. For example 1~2 refers to each odd numbered line, 5~5 refers to the fifth line and every fifth line thereafter.|<br>|addr1,+n|    Match addr1 and the following n lines.|<br>|addr!|    Match all lines except addr, which may be any of the forms above.|</p><pre><code class="shell">sed -n &#39;1,5p&#39; distros.txtSUSE           10.2     12/07/2006Fedora         10       11/25/2008SUSE           11.0     06/19/2008Ubuntu         8.04     04/24/2008Fedora         8        11/08/2007sed -n &#39;/SUSE/p&#39; distros.txtSUSE         10.2     12/07/2006SUSE         11.0     06/19/2008sed -n &#39;/SUSE/!p&#39; distros.txtFedora         10       11/25/2008Ubuntu         8.04     04/24/2008</code></pre><p>sed Basic Editing Commands<br>|Command|    Description|<br>|:-:|:-|<br>|=|    Output current line number.|<br>|a|    Append text after the current line.|<br>|d|    Delete the current line.|<br>|i|    Insert text in front of the current line.|<br>|p|    Print the current line. By default, sed prints every line and only edits lines that match a specified address within the file. The default behavior can be overridden by specifying the -n option.|<br>|q|    Exit sed without processing any more lines. If the -n option is not specified, output the current line.|<br>|Q|    Exit sed without processing any more lines.|<br>|s/regexp/replacement/|    Substitute the contents of replacement wherever regexp is found. replacement may include the special character &amp;, which is equivalent to the text matched by regexp. In addition, replacement may include the sequences \1 through \9, which are the contents of the corresponding subexpressions in regexp. For more about this, see the discussion of back references below. After the trailing slash following replacement, an optional flag may be specified to modify the s command’s behavior.|<br>|y/set1/set2|    Perform transliteration by converting characters from set1 to the corresponding characters in set2. Note that unlike tr, sed requires that both sets be of the same length.|</p><pre><code class="shell"># &#39;s/([0-9]{2})/([0-9]{2})/([0-9]{4})$/\3-\1-\2/&#39;sed &#39;s/\([0-9]\{2\}\)\/\([0-9]\{2\}\)\/\([0-9]\{4\}\)$/\3-\1-\2/&#39; distros.txtSUSE           10.2     2006-12-07echo &quot;aaabbbccc&quot; | sed &#39;s/b/B/&#39;aaaBbbcccecho &quot;aaabbbccc&quot; | sed &#39;s/b/B/g&#39;aaaBBBccc</code></pre><h4 id="aspell"><a href="#aspell" class="headerlink" title="aspell"></a>aspell</h4><p>an interactive spelling checker. </p><pre><code class="shell">aspell check textfile</code></pre><h3 id="Format-text-output"><a href="#Format-text-output" class="headerlink" title="Format text output"></a>Format text output</h3><p><code>omitted</code></p><h3 id="Printer"><a href="#Printer" class="headerlink" title="Printer"></a>Printer</h3><p><code>ommited</code></p><h3 id="Compile-source-code"><a href="#Compile-source-code" class="headerlink" title="Compile source code"></a>Compile source code</h3><p>Why compile software? There are two reasons:</p><ol><li>Availability. Despite the number of precompiled programs in distribution repositories, some distributions may not include all the desired applications. In this case, the only way to get the desired program is to compile it from source.</li><li>Timeliness. While some distributions specialize in cutting edge versions of programs, many do not. This means that in order to have the very latest version of a program, compiling is necessary.</li></ol><pre><code class="shell">[~]$ mkdir src[~]$ cd srcftp ftp.gnu.organonymousftp&gt; cd gnu/dictionftp&gt; ls150 Here comes the directory listing.-rw-r--r-- 1 1003 65534 68940 Aug 28 1998 diction-0.7.tar.gz-rw-r--r-- 1 1003 65534 90957 Mar 04 2002 diction-1.02.tar.gz-rw-r--r-- 1 1003 65534 141062 Sep 17 2007 diction-1.11.tar.gzftp&gt; get diction-1.11.tar.gz226 File send OK.ftp&gt; bye[src]$ lsdiction-1.11.tar.gz# unpack[src]$ tar -xzf diction-1.11.tar.gz[src]$ cd diction-1.11# configure, compile and install[diction-1.11]$ ./configure[diction-1.11]$ make[diction-1.11]$ make install</code></pre><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="http://billie66.github.io/TLCL/book/index.html" target="_blank" rel="external">快乐的 Linux 命令行</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;del&gt;Last Modified: 2017-07-31 11:18:00&lt;/del&gt;&lt;/p&gt;
&lt;h3 id=&quot;Acknowledge&quot;&gt;&lt;a href=&quot;#Acknowledge&quot; class=&quot;headerlink&quot; title=&quot;Acknowledge&quot;&gt;&lt;/a&gt;Acknowledge&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;What is shell?&lt;ul&gt;
&lt;li&gt;The shell is a program that takes keyboard commands and passes them to the operating system to carry out.&lt;/li&gt;
&lt;li&gt;Almost all Linux distributions supply a shell program from the GNU Project called &lt;strong&gt;bash&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Bash&lt;/strong&gt; is an enhanced replacement for &lt;strong&gt;sh&lt;/strong&gt;, the original Unix shell program written by Steve Bourne.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What is terminal emulator?&lt;ul&gt;
&lt;li&gt;We use a terminal emulator to interact with the shell when using a GUI.&lt;/li&gt;
&lt;li&gt;KDE uses &lt;strong&gt;konsole&lt;/strong&gt; and GNOME uses &lt;strong&gt;gnome-terminal&lt;/strong&gt;, though it’s likely called simply &lt;strong&gt;“terminal”&lt;/strong&gt; on our menu.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Shell prompt&lt;pre&gt;&lt;code class=&quot;shell&quot;&gt;[me@linuxbox ~]$
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;Some Simple Commands&lt;ul&gt;
&lt;li&gt;date - Display the current time and date.&lt;/li&gt;
&lt;li&gt;cal - Display a calendar of the current month.&lt;/li&gt;
&lt;li&gt;df - Display the current amount of free space on your disk drives.&lt;/li&gt;
&lt;li&gt;free - Display the amount of free memory.&lt;/li&gt;
&lt;li&gt;exit - End the terminal session.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Doing" scheme="http://TaoSama.com/categories/Doing/"/>
    
      <category term="Shell" scheme="http://TaoSama.com/categories/Doing/Shell/"/>
    
    
  </entry>
  
  <entry>
    <title>Constructors, Destrustors and Assignment Operators, Notes(2), Effective C++</title>
    <link href="http://TaoSama.com/2017-06-15/effective-cpp-constructors-destructors-and-assignment-operators/"/>
    <id>http://TaoSama.com/2017-06-15/effective-cpp-constructors-destructors-and-assignment-operators/</id>
    <published>2017-06-15T13:20:10.000Z</published>
    <updated>2017-09-19T14:48:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>(I read a Chinese version of the book, any translation problem plz point out. </p><a id="more"></a><h2 id="Constructors-Destructors-and-Assignment-Operator"><a href="#Constructors-Destructors-and-Assignment-Operator" class="headerlink" title="Constructors, Destructors and Assignment Operator"></a>Constructors, Destructors and Assignment Operator</h2><h3 id="Know-what-functions-CPP-silently-writes-and-calls"><a href="#Know-what-functions-CPP-silently-writes-and-calls" class="headerlink" title="Know what functions CPP silently writes and calls"></a>Know what functions CPP silently writes and calls</h3><p>For empty class, the complier will declare a copy constructor, a copy assignment operator, a destructor, <strong>if no any constructor is declared, one more default constructor is declared by compiler</strong>.<br>They are all public and inlined, and <strong>when called, they will be created (during compiling period)</strong>.</p><h3 id="Explicitly-disallow-the-use-of-compiler-generated-functions-you-do-not-want"><a href="#Explicitly-disallow-the-use-of-compiler-generated-functions-you-do-not-want" class="headerlink" title="Explicitly disallow the use of compiler-generated functions you do not want"></a>Explicitly disallow the use of compiler-generated functions you do not want</h3><ul><li><p>declare as private with no definition.<br>when member function or friend function calls, <strong>a linkage error</strong> will be reported.</p><pre><code class="cpp">class HomeForSale {public:  // ...private:  HomeForSale(const HomeForSale&amp;);  HomeForSale&amp; operator=(const HomeForSale&amp;);};</code></pre></li><li><p><strong>earlier? -&gt; compiling period</strong><br>```cpp<br>class Uncopyable {<br>protected:<br>  Uncopyable() {}<br>  ~Uncopyable() {}<br>private:<br>  Uncopyable(const Uncopyable&amp;);<br>  Uncopyable&amp; operator=(const Uncopyable&amp;);<br>};</p></li></ul><p>class HomeForSale: private Uncopyable {<br>    // …<br>};</p><pre><code>**why?**anyone tries to copy `HomeForSale`, the compiler will try to generate a copy constructor and a copy assignment operator, then &quot;compiler-generated version&quot; tries to call the ones in base classes respectively, and it will be refused due to the privateness of copying functions in base classes.* Boost have one class `noncopyable` similarly that mentioned above.* CPP11 new feature, `=delete` ### Declare vitual destructors in polymorphic base classes.* CPP points out specificly, it is a **undefined behavior** when a object of derived class is deleted by a pointer of base class, which has a non-virtual destructor.* Any class that has a virtual function should have a virtual destructor.* A class with no virtual destructor mustn&#39;t be used as a base class, such as STL containers. In other words, **if some class is not designed for using as a base class, it shouldn&#39;t declare a virtual destructor**.* Declare a pure virtual destrutor when creating an abstract class without any other pure virtual functions.```cppclass AWOV {public:    virtual ~AWOV() = 0;};AWOV::~AWOV() {}</code></pre><h3 id="Prevent-exceptions-from-leaving-destructors"><a href="#Prevent-exceptions-from-leaving-destructors" class="headerlink" title="Prevent exceptions from leaving destructors"></a>Prevent exceptions from leaving destructors</h3><p><strong>When 2 exceptions exist at the same time, the program either aborts or results in a undefined behavior</strong>.</p><p><strong>double insurance</strong><br>if customer need to response to the exceptions which was thrown by the run-time of some function, the class should provide a normal function (other than handled in the destructor).</p><pre><code class="cpp">class DBConn {public:    void close() {        db.close();        closed = true;    }    ~DBConn() {        if(!closed) {            try {                db.close();            }            catch (...) {                // log, then abort or swallow the exception            }        }    }private:    DBConnection db;    bool closed;};</code></pre><h3 id="Never-call-virtual-functions-during-construction-or-destruction"><a href="#Never-call-virtual-functions-during-construction-or-destruction" class="headerlink" title="Never call virtual functions during construction or destruction"></a>Never call virtual functions during construction or destruction</h3><ul><li>virtual functions never downcast to derived classes, when base classed is constructing.</li><li>once called, it is a <strong>undefined behavior</strong> because the members haven’t been initialized yet.</li><li><strong>if needed, declare as non-virtual</strong><br>constructors of derived classes passes the parameters to the ones of base classes (static functions will also avoid the problem).<br>```cpp<br>class Transaction {<br>public:<br>  explicit Transaction(const std::string&amp; logInfo);<br>  void logTransaction(const std::string&amp; logInfo) const; // non-virtual<br>};<br>Transaction::Transaction(const std::string&amp; logInfo) {<br>  logTransaction(logInfo);<br>}</li></ul><p>class BuyTransaction: public Transaction {<br>public:<br>    BuyTransaction( … )<br>        : Transaction(createLogString( … ))<br>    {}<br>private:<br>    static std::string createLogString( …);<br>);</p><pre><code>### Assignment operator* Have assignment operators return a reference to `*this`* Handle assignment to self  **copy and swap** technique```cppWidget&amp; Widget::operator=(const Widget&amp; rhs) {    Widget temp(rhs);    swap(*this, temp);    return *this;}</code></pre><h3 id="Copy-all-parts-of-an-object"><a href="#Copy-all-parts-of-an-object" class="headerlink" title="Copy all parts of an object"></a>Copy all parts of an object</h3><ul><li>compiler may generate no warnings or errors when you implement your own copy constructors or copy assignment operators<br>```cpp<br>class Customer {<br>public:<br>  Customer(const Customer&amp; rhs);<br>  Customer&amp; operator=(const Customer&amp; rhs);<br>private:<br>  std::string name;<br>};</li></ul><p>class PriorityCustomer: public Customer {<br>public:<br>    PriorityCustomer(const PriorityCustomer&amp; rhs);<br>    PriorityCustomer&amp; operator=(const PriorityCustomer&amp; rhs);<br>private:<br>    int priority;<br>};</p><p>PriorityCustomer::PriorityCustomer(const PriorityCustomer&amp; rhs)<br>    : Customer(rhs),<br>      priority(rhs.priority) {}</p><p>PriorityCustomer&amp; PriorityCustomer::operator=(const PriorityCustomer&amp; rhs) {<br>    Customer::operator=(rhs);<br>    priority = rhs.priority;<br>    return *this;<br>}<br>```</p><ul><li><strong>Do not try to use some copying function to implement another one</strong>.<br>If you wanna avoid code duplicate, try to introduce a new function, maybe called <code>init()</code> to be called by the two copying functions.</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;(I read a Chinese version of the book, any translation problem plz point out. &lt;/p&gt;
    
    </summary>
    
      <category term="Doing" scheme="http://TaoSama.com/categories/Doing/"/>
    
      <category term="CPP" scheme="http://TaoSama.com/categories/Doing/CPP/"/>
    
    
  </entry>
  
  <entry>
    <title>Accustoming to CPP, Notes(1), Effective C++</title>
    <link href="http://TaoSama.com/2017-06-11/effective-cpp-accustoming-to-cpp/"/>
    <id>http://TaoSama.com/2017-06-11/effective-cpp-accustoming-to-cpp/</id>
    <published>2017-06-11T03:20:10.000Z</published>
    <updated>2017-09-19T14:48:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>(I read a Chinese version of the book, any translation problem plz point out. </p><a id="more"></a><h3 id="View-CPP-as-a-federation-of-languages"><a href="#View-CPP-as-a-federation-of-languages" class="headerlink" title="View CPP as a federation of languages"></a>View CPP as a federation of languages</h3><ul><li><p>a multiparadigm programming language</p><ul><li>procedural</li><li>object-oriented programming (OOP)</li><li>functional programming (FP)</li><li>generic</li><li>template metaprogramming (TMP)</li></ul></li><li><p>tips</p><ul><li>pass-by-value is more efficient for built-in types (C-like types)</li><li>pass-by-reference-to-const is better for user-defined types</li><li>pass-by-value is better for STL iterators and functors (both implemented based on C-pointers)</li></ul></li></ul><h3 id="Prefer-compliers-to-preprocessors"><a href="#Prefer-compliers-to-preprocessors" class="headerlink" title="Prefer compliers to preprocessors"></a>Prefer compliers to preprocessors</h3><h4 id="Use-consts-for-constants"><a href="#Use-consts-for-constants" class="headerlink" title="Use consts for constants"></a>Use consts for constants</h4><ul><li><p>consts can be in the symbol table and will be seen by compliers</p><pre><code class="cpp">const char* const authorName = &quot;Scott Meyers&quot;;//std::string is better than char*-based stringconst std::string authorName(&quot;Scott Meyers&quot;);</code></pre></li><li><p>consts in class for scope</p><pre><code class="cpp">// Well, it is a declaration not a definition. Normally CPP requires a definition for anything you use.// But static consts in class with integral types(ints, chars, bools) need to be treated specially.class GamePlayer {private:  static const int NumTurns = 5; //declaration  int scores[NumTurns];  // ...};</code></pre><p><strong>No need to provide definitions when their addresses are never taken.</strong><br><strong>Some compliers may wrongly require a definition, then it will look like:</strong></p><pre><code class="cpp">// definiton, no more initialization due to done in declarationconst int GamePlayer::NumTurns;</code></pre></li><li><p>#defines have no scope<br>once a macro is defined, it is taken into effect during all the later process of compiling(unless #undef is done).<br><strong>no encapsulation</strong></p></li><li><p>enum hack</p><pre><code class="cpp">// some like #defines// consts can be taken the addresses while enums cannotclass GamePlayer {private:  enum { NumTurns = 5 };  int scores[NumTurns];  // ...};</code></pre><p><strong>For acquaintance, enum hack is basic technique in TMP</strong></p></li></ul><h4 id="Use-template-inlines-for-mini-functions"><a href="#Use-template-inlines-for-mini-functions" class="headerlink" title="Use template inlines for mini functions"></a>Use template inlines for mini functions</h4><pre><code class="cpp">// disgusting#define CALL_WITH_MAX(a, b) f((a) &gt; (b) ? (a) : (b))template&lt;typename T&gt;inline void callWithMAX(const T&amp; a, const T&amp; b) {    f(a &gt; b ? a : b);}</code></pre><h3 id="Use-consts-whenever-possible"><a href="#Use-consts-whenever-possible" class="headerlink" title="Use consts whenever possible"></a>Use consts whenever possible</h3><pre><code class="cpp">char greeting[] = &quot;Hello&quot;;char* p = greeting;              // non-const pointer, non-const dataconst char* p = greeting;        // non-const pointer, const datachar* const p = greeting;        // const pointer, non-const dataconst char* const p = greeting;  // const pointer, const data</code></pre><ul><li>STL iterator<br>iterator acts like a T_ pointer.<br>```cpp<br>std::vector<int> vec;<br>// iter acts like T_ const<br>const std::vector<int>::iterator iter = vec.begin();<br>*iter = 10;  // ok<br>++iter;      // CE</int></int></li></ul><p>// cIter acts like const T_<br>std::vector<int>::const_iterator cIter = vec.begin();<br>++iter;      // ok_iter = 10;  // CE</int></p><pre><code>* return const value```cppclass Rational { // ... };const Rational operator* (const Rational&amp; lhs, const Rational&amp; rhs);Rational a, b, c;if(a * b = c) {} // CE, without const it will be ok</code></pre><p><strong>CPP returns object by value, so the assignment is never legal, for only changing a copy.</strong></p><ul><li>const member function<br><strong>two member functions can be overloaded even if they are only different in constness.</strong><br><strong>in real, const member function is overloaded when const objects are used in passed by pointer-to-const or passed by reference-to-const.</strong><br>```cpp<br>class TextBlock {<br>public:<br>  const char&amp; operator<a href="std::size_t position" target="_blank" rel="external"></a> const {<pre><code>  // ...  return text[position];</code></pre>  }<br>  char&amp; operator<a href="std::size_t position" target="_blank" rel="external"></a> {<pre><code>  return const_cast&lt;char&amp;&gt;(      static_cast&lt;const TextBlock&amp;&gt;(*this)[position]  );</code></pre>  }<br>};</li></ul><p>void print(const TextBlock&amp; ctb) {<br>    std::cout &lt;&lt; ctb[0];<br>}</p><pre><code>**non-const overloaded function can be implemented by calling the const version is safe, otherwise it is not.*** bitwise constness or logical constness**bitwist constness is the definition of CPP&#39;s constness, so the const member funcion cannot change any non-static member variable.**use keyword `mutable` to release the constraint of CPP&#39;s bitwise constness.**write codes by using logical constness.**```cppclass CTextBlock {    public:         std::size_t length() const;    private:        char* pText;        mutable std::size_t textLength;        mutable bool lengthIsValid;};std::size_t CTextBlock::length() const {    if(!lengthIsValid) {        textLength = std::strlen(pText); // can be changed        lengthIsValid = true;            // same as above    }    return textLength;}</code></pre><h3 id="Make-sure-that-objects-are-initialized-before-used"><a href="#Make-sure-that-objects-are-initialized-before-used" class="headerlink" title="Make sure that objects are initialized before used"></a>Make sure that objects are initialized before used</h3><ul><li>objects will be initialized when declared in heap while they won’t when declared in stack.</li><li>it is not easy to memorize it, whatever, keep initialization always.</li><li>do not mix assignment and initialization.</li><li><strong>for user-defined types, always use the member initialization list and always list all the member variables in the member initialization list.</strong></li><li>sometimes, a class may have many constructors, and to avoid duplication, we can move the invitializatin of the variables that have same efficiency between assignment and initialization to some private function. (well, this ‘pseudo-intialization’ is not advocated, try member initialization list as much as possible)</li><li>The order of initialization:<ul><li>base classes is initialized earlier than derived classes.</li><li>member variables is initialized as the order of that they are declared even if the order of the appearance in member initialization list is different.</li></ul></li><li>non-local static objects<ul><li>static objects: global objects, objects defined in namespace, static objects in classes, functions, file scopes.</li><li>local static objects: static objects in functions.</li><li>no specific initialization order for non-local static objects in different translation unit.</li><li>Singleton:<br><strong>use local static objects to replace the non-local ones.</strong><pre><code class="cpp">class FileSystem { // ... };FileSystem&amp; tfs() {static FileSystem fs;return fs;}class Directory { // ... };Directory::Directory( params ) {// ...std::size_t disks = tfs().numDisks();}Directory&amp; tempDir() {static Directory td;return td;}</code></pre></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;(I read a Chinese version of the book, any translation problem plz point out. &lt;/p&gt;
    
    </summary>
    
      <category term="Doing" scheme="http://TaoSama.com/categories/Doing/"/>
    
      <category term="CPP" scheme="http://TaoSama.com/categories/Doing/CPP/"/>
    
    
  </entry>
  
  <entry>
    <title>Address Collecting</title>
    <link href="http://TaoSama.com/2017-05-18/Address-Collecting/"/>
    <id>http://TaoSama.com/2017-05-18/Address-Collecting/</id>
    <published>2017-05-18T10:30:10.000Z</published>
    <updated>2017-09-19T14:48:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>这里留地址吧，具体时间就截止到多说关闭(6.1)吧，到时候我就换Disqus了<br>喔，到时候收到了转给我打印费和邮费就好了。<br>(某ACMer卖模版月入百万！才不会说我是骗手机号的呢</p><a id="more"></a><p>那啥地址就按照这个格式留吧：</p><p>收件地址： 重庆市重庆大学A区中门11舍<br>收件人：老顽童<br>收件人号码：13123333333</p><p>嗨呀，以后就只能自己玩啦~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里留地址吧，具体时间就截止到多说关闭(6.1)吧，到时候我就换Disqus了&lt;br&gt;喔，到时候收到了转给我打印费和邮费就好了。&lt;br&gt;(某ACMer卖模版月入百万！才不会说我是骗手机号的呢&lt;/p&gt;
    
    </summary>
    
      <category term="Doing" scheme="http://TaoSama.com/categories/Doing/"/>
    
      <category term="Life" scheme="http://TaoSama.com/categories/Doing/Life/"/>
    
    
  </entry>
  
  <entry>
    <title>Backthoughts during These Days</title>
    <link href="http://TaoSama.com/2017-04-28/Backthoughts-during-These-Days/"/>
    <id>http://TaoSama.com/2017-04-28/Backthoughts-during-These-Days/</id>
    <published>2017-04-28T09:30:10.000Z</published>
    <updated>2017-09-19T14:48:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>“I’m sorry that you are not the person we choose”<br>“I’m sorry …”</p><a id="more"></a><p>Yeah, I gotta some problems myself, mainly from the ICPC regionals’ results…<br>I managed to avoid that, yet I can’t control the inner hints myself…</p><p>During the toutiao interview, the first two was OK.<br>The third one crashed..</p><p>Last year, a new team formed, and I became the vice coder instead of<br>the major coder…<br>Less and less onsite coding, makes me lose the judgement of coding time of a problem..</p><p>WAPS online Interview, anxiety made me … couldn’t think straightly..<br>Unexpectedly, onsite interview, I did a great job.. even I was not matched at last.<br>Anyway, it doesn’t matter.. Life is not all about money and comfort,<br>and I’d love to have some challenges which hard mode of life will be more exciting.</p><p>Well, going back to the third one of toutiao’ interview.<br>So bad! I AM the one who can code a complicated data structure problem,<br>and a complicated implementation problem too…<br>Calm down, and 30 minutes is OK.. Do believe myself…<br>Failure won’t take anything.<br>Results can’t be changed, more world later on.</p><p>2 times I failed at the third interview of toutiao.<br>I don’t believe the fate, just lack of some luck.<br>More details, see this link, <a href="/2017/04/28/Backthoughts-about-the-Failure-of-the-Autumn-and-Spring-Campus-Recruiting-of-Toutiao/">click me</a></p><p>Be better and More progress！<br>More effort on the hard mode chosed！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;“I’m sorry that you are not the person we choose”&lt;br&gt;“I’m sorry …”&lt;/p&gt;
    
    </summary>
    
      <category term="Doing" scheme="http://TaoSama.com/categories/Doing/"/>
    
      <category term="Life" scheme="http://TaoSama.com/categories/Doing/Life/"/>
    
    
  </entry>
  
</feed>
