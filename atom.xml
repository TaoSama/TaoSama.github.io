<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>TaoSama&#39;s Blog</title>
  
  <subtitle>Reborn and Be Together</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://TaoSama.github.io/"/>
  <updated>2017-10-17T03:27:52.000Z</updated>
  <id>http://TaoSama.github.io/</id>
  
  <author>
    <name>TaoSama</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Miscellany and Summary, Notes(9), Effective C++</title>
    <link href="http://TaoSama.github.io/2017/10/17/effective-cpp-miscellany-and-summary/"/>
    <id>http://TaoSama.github.io/2017/10/17/effective-cpp-miscellany-and-summary/</id>
    <published>2017-10-17T02:17:00.000Z</published>
    <updated>2017-10-17T03:27:52.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Miscellany-and-Summary"><a href="#Miscellany-and-Summary" class="headerlink" title="Miscellany and Summary"></a>Miscellany and Summary</h2><p>(I read a Chinese version of the book, any translation problem plz point out. </p><a id="more"></a><h3 id="Pay-attention-to-compiler-warnings"><a href="#Pay-attention-to-compiler-warnings" class="headerlink" title="Pay attention to compiler warnings"></a>Pay attention to compiler warnings</h3><ul><li>be serious to compiler warnings.</li><li>but shouldn’t over rely on compiler warnings.</li></ul><h3 id="Familiarize-yourself-with-the-standard-library"><a href="#Familiarize-yourself-with-the-standard-library" class="headerlink" title="Familiarize yourself with the standard library"></a>Familiarize yourself with the standard library</h3><h3 id="Familiarize-yourself-with-Boost"><a href="#Familiarize-yourself-with-Boost" class="headerlink" title="Familiarize yourself with Boost"></a>Familiarize yourself with Boost</h3><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>It is about 4 months since I started to read the book.<br>I’m so painful that I can’t put the ways into pratice, although it is quite fascinating.<br>What I’m eager to do is to write the beautiful code.<br>Keep patient, and what learned will settle.</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Miscellany-and-Summary&quot;&gt;&lt;a href=&quot;#Miscellany-and-Summary&quot; class=&quot;headerlink&quot; title=&quot;Miscellany and Summary&quot;&gt;&lt;/a&gt;Miscellany and Summary&lt;/h2&gt;&lt;p&gt;(I read a Chinese version of the book, any translation problem plz point out. &lt;/p&gt;
    
    </summary>
    
      <category term="Doing" scheme="http://TaoSama.github.io/categories/Doing/"/>
    
      <category term="CPP" scheme="http://TaoSama.github.io/categories/Doing/CPP/"/>
    
    
  </entry>
  
  <entry>
    <title>Customizing new and delete, Notes(8), Effective C++</title>
    <link href="http://TaoSama.github.io/2017/10/12/effective-cpp-customizing-new-and-delete/"/>
    <id>http://TaoSama.github.io/2017/10/12/effective-cpp-customizing-new-and-delete/</id>
    <published>2017-10-12T12:47:00.000Z</published>
    <updated>2017-10-16T12:01:02.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Customizing-new-and-delete"><a href="#Customizing-new-and-delete" class="headerlink" title="Customizing new and delete"></a>Customizing new and delete</h2><p>(I read a Chinese version of the book, any translation problem plz point out. </p><a id="more"></a><h3 id="Understand-the-behavior-of-the-new-handler"><a href="#Understand-the-behavior-of-the-new-handler" class="headerlink" title="Understand the behavior of the new-handler"></a>Understand the behavior of the new-handler</h3><p>well-designed <code>new-handler</code> should do:</p><ul><li>make more memory to be used, i.e., more likely to let the next <code>operator new</code> be successful.</li><li>install another <code>new-handler</code>, i.e., let <code>operator new</code> call <code>set_new_handler</code>.</li><li>uninstall <code>new-handler</code>, i.e., pass <code>nullptr</code> to <code>operator new</code>.</li><li>throw <code>bad_alloc</code> (or derived from <code>bad_alloc</code>) error.</li><li>no return (usually call <code>abort</code> or <code>exit</code>).</li></ul><p>implement the <code>new_handler</code> of class:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Widget</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="keyword">static</span> <span class="built_in">std</span>::<span class="function">new_handler <span class="title">set_new_handler</span><span class="params">(<span class="built_in">std</span>::new_handler p)</span> <span class="title">throw</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span>* <span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="built_in">std</span>::<span class="keyword">size_t</span> size)</span> <span class="title">throw</span><span class="params">(<span class="built_in">std</span>::bad_alloc)</span></span>;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="keyword">static</span> <span class="built_in">std</span>::new_handler currentHandler;</div><div class="line">&#125;;</div><div class="line"><span class="built_in">std</span>::new_handler Widget::currentHandler = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="built_in">std</span>::new_handler Widget::set_new_handler(<span class="built_in">std</span>::new_handler p) <span class="keyword">throw</span>() &#123;</div><div class="line">    <span class="built_in">std</span>::new_hanlder old = currentHandler;</div><div class="line">    currentHandler = p;</div><div class="line">    <span class="keyword">return</span> old;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewHandlerHolder</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">NewHandlerHolder</span><span class="params">(<span class="built_in">std</span>::new_handler nh)</span></span></div><div class="line">    : handler(nh) &#123;&#125;</div><div class="line">    ~NewHandlerHolder() &#123; <span class="built_in">std</span>::set_new_handler(handler); &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="built_in">std</span>::new_handler handler;</div><div class="line">    NewHandlerHolder(<span class="keyword">const</span> NewHandlerHolder&amp;);</div><div class="line">    NewHandlerHolder&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> NewHandlerHolder&amp;);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">void</span>* Widget::<span class="function"><span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="built_in">std</span>::<span class="keyword">size_t</span> <span class="keyword">new</span>)</span> <span class="title">throw</span><span class="params">(<span class="built_in">std</span>::bad_alloc)</span> </span>&#123;</div><div class="line">    newhandlerholder h(std::set_new_handler(currenthandler));</div><div class="line">    <span class="keyword">return</span> ::oeprator <span class="keyword">new</span>(size);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>reuse the code above due to the same implementation for different classes:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewHandlerSupport</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="keyword">static</span> <span class="built_in">std</span>::<span class="function">new_handler <span class="title">set_new_handler</span><span class="params">(<span class="built_in">std</span>::new_handler p)</span> <span class="title">throw</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span>* <span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="built_in">std</span>::<span class="keyword">size_t</span> size)</span> <span class="title">throw</span><span class="params">(<span class="built_in">std</span>::bad_alloc)</span></span>;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="keyword">static</span> <span class="built_in">std</span>::new_handler currentHandler;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><span class="built_in">std</span>::new_handler NewHandlerSupport&lt;T&gt;::currentHandler = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><span class="built_in">std</span>::new_handler NewHandlerSupport::set_new_handler(<span class="built_in">std</span>::new_handler p) <span class="keyword">throw</span>() &#123;</div><div class="line">    <span class="built_in">std</span>::new_hanlder old = currentHandler;</div><div class="line">    currentHandler = p;</div><div class="line">    <span class="keyword">return</span> old;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><span class="keyword">void</span>* NewHandlerSupport::<span class="function"><span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="built_in">std</span>::<span class="keyword">size_t</span> <span class="keyword">new</span>)</span> <span class="title">throw</span><span class="params">(<span class="built_in">std</span>::bad_alloc)</span> </span>&#123;</div><div class="line">    newhandlerholder h(std::set_new_handler(currenthandler));</div><div class="line">    <span class="keyword">return</span> ::oeprator <span class="keyword">new</span>(size);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// curiously recurring template pattern, "mixin" style</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Widget</span>:</span> <span class="keyword">public</span> NewHandlerSupport&lt;Widget&gt; &#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><code>nothrow new</code>:<br>it is limited, only <strong>adapted to memory allocated</strong>, and intermediate constructor called may throw exception.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Widget* pw1 = <span class="keyword">new</span> Widget;  <span class="comment">// if fails, throw bad_alloc</span></div><div class="line">Widget* pw2 = <span class="keyword">new</span>(<span class="built_in">std</span>::nothrow) Widget; <span class="comment">// if fails, return nullptr</span></div></pre></td></tr></table></figure><h3 id="Understand-when-it-makes-sense-to-replace-new-and-delete"><a href="#Understand-when-it-makes-sense-to-replace-new-and-delete" class="headerlink" title="Understand when it makes sense to replace new and delete"></a>Understand when it makes sense to replace new and delete</h3><ul><li>to check the wrong usage.</li><li>to improve the efficiency of allocation and deallocation.</li><li>to collect the log of usage.</li><li>to decrease the additional space cost caused by default memory manager.</li><li>to improve the suboptimal alignment.</li><li>to make related objects clustered.</li><li>to obtain non-traditional behaviors.</li></ul><h3 id="Adhere-to-convention-when-writing-new-and-delete"><a href="#Adhere-to-convention-when-writing-new-and-delete" class="headerlink" title="Adhere to convention when writing new and delete"></a>Adhere to convention when writing new and delete</h3><ul><li><code>operator new</code> should have an infinite loop which tries to allocate memory.</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span>* <span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="built_in">std</span>::<span class="keyword">size_t</span> size)</span> <span class="title">throw</span><span class="params">(<span class="built_in">std</span>::bad_alloc)</span> </span>&#123;</div><div class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line">    <span class="keyword">if</span>(size == <span class="number">0</span>) &#123;</div><div class="line">        size = <span class="number">1</span>; </div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</div><div class="line">        <span class="comment">// Try to allocate "size" bytes </span></div><div class="line">        <span class="keyword">if</span>(allocation is ok) <span class="keyword">return</span> (a pointer to the memory allocated);</div><div class="line">        </div><div class="line">        new_handler globalHandler = set_new_handler(<span class="number">0</span>);</div><div class="line">        set_new_handler(globalHandler); </div><div class="line">        </div><div class="line">        <span class="keyword">if</span>(globalHandler) (*globalHandler)();  </div><div class="line">        <span class="keyword">else</span> <span class="keyword">throw</span> bad_alloc();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li><code>operator delete</code> should do nothing when passed by <code>nullptr</code>, “Class version” should<br> handle the “wrong apply that requires the bigger size than the true size”.</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span>* <span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="built_in">std</span>::<span class="keyword">size_t</span> size)</span> <span class="title">throw</span><span class="params">(<span class="built_in">std</span>::bad_alloc)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="keyword">operator</span> <span class="title">delete</span><span class="params">(<span class="keyword">void</span>* rawMemoty, <span class="built_in">std</span>::<span class="keyword">size_t</span> size)</span> <span class="title">throw</span><span class="params">()</span></span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">void</span>* Base::<span class="function"><span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="built_in">std</span>::<span class="keyword">size_t</span> size)</span> <span class="title">throw</span><span class="params">(<span class="built_in">std</span>::bad_alloc)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(size != <span class="keyword">sizeof</span>(Base)) <span class="keyword">return</span> ::<span class="keyword">operator</span> <span class="keyword">new</span>(size);</div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> Base::<span class="function"><span class="keyword">operator</span> <span class="title">delete</span><span class="params">(<span class="keyword">void</span>* rawMemory, <span class="built_in">std</span>::<span class="keyword">size_t</span> size)</span> <span class="title">throw</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(rawMemory == <span class="number">0</span>) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">if</span>(size != <span class="keyword">sizeof</span>(Base)) &#123;</div><div class="line">        ::<span class="function"><span class="keyword">operator</span> <span class="title">delete</span><span class="params">(rawMemory)</span></span>;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="Write-placement-delete-if-you-write-placement-new"><a href="#Write-placement-delete-if-you-write-placement-new" class="headerlink" title="Write placement delete if you write placement new"></a>Write placement delete if you write placement new</h3><ul><li>when write <code>Widget* pw = new Widget;</code>, two functions are called, one is <code>operator new</code>, one is Widget’s default construtor.<br>if the constructor throws, the memory allocated by the first one should be recovered, or it will be memory leak.<br>so the corresponding <code>operator delete</code> should be provided correctly.</li><li>when write a <code>placement operator new</code>, plz be sure to write a <code>placement operator delete</code>.</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span>* <span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="built_in">std</span>::<span class="keyword">size_t</span>)</span> <span class="title">throw</span><span class="params">(<span class="built_in">std</span>::bad_alloc)</span></span>; <span class="comment">// normal new</span></div><div class="line"><span class="function"><span class="keyword">void</span>* <span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="built_in">std</span>::<span class="keyword">size_t</span>, <span class="keyword">void</span>*)</span> <span class="title">throw</span><span class="params">()</span></span>; <span class="comment">// placement new</span></div><div class="line"><span class="function"><span class="keyword">void</span>* <span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="built_in">std</span>::<span class="keyword">size_t</span>, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="keyword">nothrow_t</span>&amp;)</span> <span class="title">throw</span><span class="params">()</span></span>; <span class="comment">// nothrow new</span></div></pre></td></tr></table></figure><ul><li>when declaring <code>placement new</code> and <code>placement delete</code>, plz <strong>do not hide the normal version</strong> intendedly or unconsciously.</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">StandardNewDeleteForms</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="comment">// normal new/delete</span></div><div class="line">    static void* operator new(std::size_t size) throw std::bad_alloc) &#123;</div><div class="line">        <span class="keyword">return</span> ::<span class="keyword">operator</span> <span class="keyword">new</span>(size);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="keyword">operator</span> <span class="title">delete</span><span class="params">(<span class="keyword">void</span>* pMemory)</span> <span class="title">throw</span><span class="params">()</span> </span>&#123;</div><div class="line">        ::<span class="function"><span class="keyword">operator</span> <span class="title">delete</span><span class="params">(pMemory)</span></span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// placement new/delete</span></div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span>* <span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="built_in">std</span>::<span class="keyword">size_t</span> size, <span class="keyword">void</span>* ptr)</span> <span class="title">throw</span><span class="params">()</span> </span>&#123;</div><div class="line">        ::<span class="function"><span class="keyword">operator</span> <span class="title">new</span><span class="params">(size, ptr)</span></span>;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="keyword">operator</span> <span class="title">delete</span><span class="params">(<span class="keyword">void</span>* pMemory, <span class="keyword">void</span>* ptr)</span> <span class="title">throw</span><span class="params">()</span> </span>&#123;</div><div class="line">        ::<span class="function"><span class="keyword">operator</span> <span class="title">delete</span><span class="params">(pMemory, ptr)</span></span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// nothrow new/delete</span></div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span>* <span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="built_in">std</span>::<span class="keyword">size_t</span> size, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="keyword">nothrow_t</span>&amp; nt)</span> <span class="title">throw</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> ::<span class="keyword">operator</span> <span class="keyword">new</span>(size, nt);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="keyword">operator</span> <span class="title">delete</span><span class="params">(<span class="keyword">void</span>* pMemory, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="keyword">nothrow_t</span>&amp;)</span> <span class="title">throw</span><span class="params">()</span> </span>&#123;</div><div class="line">        ::<span class="function"><span class="keyword">operator</span> <span class="title">delete</span><span class="params">(pMemory)</span></span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Widget</span>:</span> <span class="keyword">public</span> StandardNewDeleteForms &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="comment">// inherit normal new/delete</span></div><div class="line">    <span class="keyword">using</span> StandardNewDeleteForms::<span class="keyword">operator</span> <span class="keyword">new</span>;</div><div class="line">    <span class="keyword">using</span> StandardNetDeleteForms::<span class="keyword">operator</span> <span class="keyword">delete</span>;</div><div class="line">    </div><div class="line">    <span class="comment">// customized placement new/delete</span></div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span>* <span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="built_in">std</span>::<span class="keyword">size_t</span> size, <span class="built_in">std</span>::ostream&amp; logStream)</span> <span class="title">throw</span><span class="params">(<span class="built_in">std</span>::bad_alloc)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="keyword">operator</span> <span class="title">delete</span><span class="params">(<span class="keyword">void</span>* memory, <span class="built_in">std</span>::ostream&amp; logStream)</span> <span class="title">throw</span><span class="params">()</span></span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Customizing-new-and-delete&quot;&gt;&lt;a href=&quot;#Customizing-new-and-delete&quot; class=&quot;headerlink&quot; title=&quot;Customizing new and delete&quot;&gt;&lt;/a&gt;Customizing new and delete&lt;/h2&gt;&lt;p&gt;(I read a Chinese version of the book, any translation problem plz point out. &lt;/p&gt;
    
    </summary>
    
      <category term="Doing" scheme="http://TaoSama.github.io/categories/Doing/"/>
    
      <category term="CPP" scheme="http://TaoSama.github.io/categories/Doing/CPP/"/>
    
    
  </entry>
  
  <entry>
    <title>Templates and Generic Programming, Notes(7), Effective C++</title>
    <link href="http://TaoSama.github.io/2017/10/09/effective-cpp-templates-and-generic-programming/"/>
    <id>http://TaoSama.github.io/2017/10/09/effective-cpp-templates-and-generic-programming/</id>
    <published>2017-10-09T07:10:00.000Z</published>
    <updated>2017-10-16T12:05:42.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Templates-and-Generic-Programming"><a href="#Templates-and-Generic-Programming" class="headerlink" title="Templates and Generic Programming"></a>Templates and Generic Programming</h2><p>(I read a Chinese version of the book, any translation problem plz point out. </p><a id="more"></a><h3 id="Understand-implicit-interfaces-and-compile-time-polymorphism"><a href="#Understand-implicit-interfaces-and-compile-time-polymorphism" class="headerlink" title="Understand implicit interfaces and compile-time polymorphism"></a>Understand implicit interfaces and compile-time polymorphism</h3><ul><li>classes and templates both support interfaces and polymorphism.</li><li>as for classes, interfaces is explicit, based on function signatures,<br>and their polymorphism happen in run-time via virtual functions.</li><li>as for templates, interfaces is implicit, based on valid expressions,<br>and their polymorphism happen in compile-time via template instantiation and function overloading resolution.</li></ul><h3 id="Understand-the-two-meanings-of-typename"><a href="#Understand-the-two-meanings-of-typename" class="headerlink" title="Understand the two meanings of typename"></a>Understand the two meanings of typename</h3><p>dependent names: the names appeared in template and dependent on some template parameter.<br>nested dependent names: the dependent name nested in class.<br><code>C::const_iterator</code> is a <strong>nested dependent type name</strong>.</p><blockquote><p><code>C::const_iterator* x</code>, what if <code>const_iterator</code> is a static member variable and <code>x</code> is a global variable?</p></blockquote><ul><li>keyword <code>class</code> and <code>typename</code> are the same when declare template parameters.</li><li>use <code>typename</code> to indentify the <strong>nested dependent name</strong>,<br>but it mustn’t modify the base class in base class lists and member initialization lists.</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived</span>:</span> <span class="keyword">public</span> Base&lt;T&gt;::Nested &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    explicit Derived(int x): Basee&lt;T&gt;::Nested(x) &#123;</div><div class="line">        <span class="keyword">typename</span> Base&lt;T&gt;::Nested tmp; </div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h3 id="Know-how-to-access-names-in-templatized-base-classes"><a href="#Know-how-to-access-names-in-templatized-base-classes" class="headerlink" title="Know how to access names in templatized base classes"></a>Know how to access names in templatized base classes</h3><ul><li>use <code>this-&gt;</code> to refer to the member names of base class templates in derived class templates.</li><li>use base class modifier, <code>Base::name</code></li></ul><h3 id="Factor-parameter-independent-code-out-of-templates"><a href="#Factor-parameter-independent-code-out-of-templates" class="headerlink" title="Factor parameter-independent code out of templates"></a>Factor parameter-independent code out of templates</h3><ul><li>templates can generate a couple of classes and functions,<br>so any template code should not be dependent on some template parameter which can cause code bloat.</li><li>code bloat caused by non-type template parameters can be removed via replacing them with<br>function parameter or using class member variable.</li><li>code bload caused by type parameters can be reduced via sharing the implementation<br>when the instantiation types are with completely same binary representations,<br>such as strongly typed pointers <code>(T*)</code> to untyped pointers <code>(void*)</code>.</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="built_in">std</span>::<span class="keyword">size_t</span>&gt;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SquareMatrix</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">invert</span><span class="params">()</span></span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">/***************************************************/</span></div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SquareMatrixBase</span> &#123;</span></div><div class="line"><span class="keyword">protected</span>:</div><div class="line">    SquareMatrixBase(<span class="built_in">std</span>::<span class="keyword">size_t</span> n, T* pMem)</div><div class="line">    : size(n), pData(pMem) &#123;&#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setDataPtr</span><span class="params">(T* ptr)</span> </span>&#123; pData = ptr; &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">invert</span><span class="params">()</span> </span>&#123;&#125; </div><div class="line"></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="built_in">std</span>::<span class="keyword">size_t</span> size;</div><div class="line">    T* pData;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="built_in">std</span>::<span class="keyword">size_t</span> n&gt;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SquareMatrix</span>:</span> <span class="keyword">private</span> SquareMatrixBase&lt;T&gt; &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    SquareMatrix()</div><div class="line">    : SquareMatrixBase&lt;T&gt;(n, <span class="number">0</span>), pData(<span class="keyword">new</span> T[n * n]) &#123;</div><div class="line">        <span class="keyword">this</span>-&gt;setDataPtr(pData.get());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">invert</span><span class="params">()</span> </span>&#123; SquareMatrixBase&lt;T&gt;::invert(); &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;T[]&gt; pData;</div><div class="line">    <span class="comment">// T data[n * n]; // maybe it is your choice</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// in the first version, the matrix size is a compile-time constant, and</span></div><div class="line"><span class="comment">// it can be optimized as immediate operand in generated instructions.</span></div><div class="line"><span class="comment">// while the second version, resulting in smaller executable size, it can reduce </span></div><div class="line"><span class="comment">// the size of working set of the program, and strengthen the locality of reference in cache.</span></div><div class="line"><span class="comment">// well, only profiling matters!!!</span></div></pre></td></tr></table></figure><h3 id="Use-member-function-templates-to-accept-“all-compatible-types”"><a href="#Use-member-function-templates-to-accept-“all-compatible-types”" class="headerlink" title="Use member function templates to accept “all compatible types”"></a>Use member function templates to accept “all compatible types”</h3><ul><li>use member function templates to generate the functions which accept “all compatible types”.</li><li>you need to declare normal copy constructor and copy assignment operator when using<br> member function templates. or the compiler will generate one which may be not what<br> you want.</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SmartPtr</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    SmartPtr(<span class="keyword">const</span> SmartPtr&amp; r);</div><div class="line">    </div><div class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> U&gt;</div><div class="line">    SmartPtr(<span class="keyword">const</span> SmartPtr&lt;U&gt;&amp; other) <span class="comment">// Make it more like a real pointer</span></div><div class="line">    : heldPtr(other.get()) &#123;&#125;</div><div class="line">    <span class="function">T* <span class="title">get</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> heldPtr; &#125;</div><div class="line">    </div><div class="line"><span class="keyword">private</span>:</div><div class="line">    T* heldPtr;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h3 id="Define-non-member-functions-inside-templates-when-type-conversions-are-desired"><a href="#Define-non-member-functions-inside-templates-when-type-conversions-are-desired" class="headerlink" title="Define non-member functions inside templates when type conversions are desired"></a>Define non-member functions inside templates when type conversions are desired</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="class"><span class="keyword">class</span> <span class="title">Rational</span>;</span></div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><span class="keyword">const</span> Rational&lt;T&gt; doMutiply(<span class="keyword">const</span> Rational&lt;T&gt;&amp; lhs, <span class="keyword">const</span> Rational&lt;T&gt;&amp; rhs);</div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rational</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="comment">// use a helper to avoid the affect of inlining </span></div><div class="line">    <span class="keyword">friend</span> Rational&lt;T&gt; <span class="keyword">operator</span>*(<span class="keyword">const</span> Rational&lt;T&gt;&amp; lhs, <span class="keyword">const</span> Rational&lt;T&gt;&amp; rhs) &#123;</div><div class="line">        <span class="keyword">return</span> doMultiply(lhs, rhs); </div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h3 id="Use-traits-classes-for-information-about-types"><a href="#Use-traits-classes-for-information-about-types" class="headerlink" title="Use traits classes for information about types"></a>Use traits classes for information about types</h3><ul><li>traits classes make “type-related information” be available in compile-time,<br>which is implemented by templates and template specializations.</li><li>traits classes can execute the <code>if...else</code> test in compile-time via overloading.</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">input_iterator_tag</span> &#123;</span>&#125;;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">output_iterator_tag</span> &#123;</span>&#125;;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">forward_iterator_tag</span>:</span> <span class="keyword">public</span> input_iterator_tag &#123;&#125;;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bidirectional_iterator_tag</span>:</span> <span class="keyword">public</span> forward_iterator_tag &#123;&#125;;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">random_access_iterator_tag</span>:</span> <span class="keyword">public</span> bidirectional_iterator_tag &#123;&#125;;</div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> IterT, <span class="keyword">typename</span> DistT&gt;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">doAdvance</span><span class="params">(IterT&amp; iter, DistT d, <span class="built_in">std</span>::random_access_iterator_tag)</span> </span>&#123; iter += d; &#125;</div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> IterT, <span class="keyword">typename</span> DistT&gt;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">doAdvance</span><span class="params">(IterT&amp; iter, DistT d, <span class="built_in">std</span>::bidirectional_iterator_tag)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(d &gt;= <span class="number">0</span>) &#123; <span class="keyword">while</span>(d--) ++iter; &#125;</div><div class="line">    <span class="keyword">else</span> &#123; <span class="keyword">while</span>(d++) --iter; &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// it can also accept forward_iterator_tag</span></div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> IterT, <span class="keyword">typename</span> DistT&gt;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">doAdvance</span><span class="params">(IterT&amp; iter, DistT d, <span class="built_in">std</span>::input_iterator_tag)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(d &lt; <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="built_in">std</span>::out_of_range(<span class="string">"Negative distance"</span>); </div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span>(d--) ++iter;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">advance</span><span class="params">(IterT&amp; iter, DistT d)</span> </span>&#123;</div><div class="line">    doAdvance(iter, d, <span class="keyword">typename</span> <span class="built_in">std</span>::iterator_traits&lt;IterT&gt;::iterator_category());</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="Be-aware-of-templatee-metaprogramming"><a href="#Be-aware-of-templatee-metaprogramming" class="headerlink" title="Be aware of templatee metaprogramming"></a>Be aware of templatee metaprogramming</h3><ul><li>TMP is Turing-complete, and TMP loops is recursive template instantiation.</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// It may be implemented by `enum hack` in lower version of cpp compiler.</span></div><div class="line"><span class="keyword">template</span>&lt;<span class="built_in">std</span>::<span class="keyword">size_t</span> n&gt;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">factorial</span> &#123;</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="built_in">std</span>::<span class="keyword">size_t</span> value = n * factorial&lt;n - <span class="number">1</span>&gt;::value;    </div><div class="line">&#125;;</div><div class="line"><span class="keyword">template</span>&lt;&gt;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">factorial</span>&lt;0&gt; &#123;</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="built_in">std</span>::<span class="keyword">size_t</span> value = <span class="number">1</span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><ul><li>TMP can be used:<ul><li>validate type informations or some others.</li><li>optimize matrix operations, such as <a href="https://en.wikipedia.org/wiki/Expression_templates" target="_blank" rel="external">expression templates</a>.</li><li>generate custom design patterns for users. <strong>(TMP-based policy-based design) -&gt; generative programming</strong></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Templates-and-Generic-Programming&quot;&gt;&lt;a href=&quot;#Templates-and-Generic-Programming&quot; class=&quot;headerlink&quot; title=&quot;Templates and Generic Programming&quot;&gt;&lt;/a&gt;Templates and Generic Programming&lt;/h2&gt;&lt;p&gt;(I read a Chinese version of the book, any translation problem plz point out. &lt;/p&gt;
    
    </summary>
    
      <category term="Doing" scheme="http://TaoSama.github.io/categories/Doing/"/>
    
      <category term="CPP" scheme="http://TaoSama.github.io/categories/Doing/CPP/"/>
    
    
  </entry>
  
  <entry>
    <title>Inheritance and Object-Oriented Design, Notes(6), Effective C++</title>
    <link href="http://TaoSama.github.io/2017/09/11/effective-cpp-inheritance-and-object-oriented-design/"/>
    <id>http://TaoSama.github.io/2017/09/11/effective-cpp-inheritance-and-object-oriented-design/</id>
    <published>2017-09-11T09:22:00.000Z</published>
    <updated>2017-10-16T12:01:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Inheritance-and-Object-Oriented-Design"><a href="#Inheritance-and-Object-Oriented-Design" class="headerlink" title="Inheritance and Object-Oriented Design"></a>Inheritance and Object-Oriented Design</h2><p>(I read a Chinese version of the book, any translation problem plz point out. </p><a id="more"></a><h3 id="Make-sure-public-inheritance-models-“is-a”"><a href="#Make-sure-public-inheritance-models-“is-a”" class="headerlink" title="Make sure public inheritance models “is-a”"></a>Make sure public inheritance models “is-a”</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bird</span> &#123;</span></div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FlyingBird</span>:</span> <span class="keyword">public</span> Bird &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Penguin</span>:</span> <span class="keyword">public</span> Bird &#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>public inheritance means everything must be suitable for derived class if it is suitable for base class,<br>because every derived class object is a base class object.</p><p><strong>is a square a rectangle?</strong></p><h3 id="Avoid-hiding-inherited-names"><a href="#Avoid-hiding-inherited-names" class="headerlink" title="Avoid hiding inherited names"></a>Avoid hiding inherited names</h3><p>CPP name-hiding rules:<br>all the functions of base class with the same name as derived class will be hiden,<br>even if the parameter lists is different. it is both suitable for <strong>virtual and non-virtual functions</strong>.</p><p>CPP name-lookup rules:<br>local -&gt; derived -&gt; namespace of derived -&gt; base -&gt; namespace of base -&gt; global</p><p>but if you use public inheritance without inheriting the overloaded functions, it violates the “is-a” relation between base and derived class.</p><ul><li><code>using</code> declaration<br>introduce all the functions of specific name of base class to derived class,<br>it is ok for public inheritance.<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> &#123;</span></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="keyword">int</span> x;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">mf1</span><span class="params">()</span> </span>= <span class="number">0</span>;</div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">mf1</span><span class="params">(<span class="keyword">int</span>)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">mf2</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">mf3</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">mf3</span><span class="params">(<span class="keyword">double</span>)</span></span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived</span>:</span> <span class="keyword">public</span> Base &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="keyword">using</span> Base::mf1;</div><div class="line">    <span class="keyword">using</span> Base::mf3;</div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">mf1</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">mf3</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">mf4</span><span class="params">()</span></span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></li></ul><p>what if for partially inheriting the functions?</p><ul><li>forwarding function<br>use for private inheritance.<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">mf1</span><span class="params">()</span> </span>= <span class="number">0</span>;</div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">mf1</span><span class="params">(<span class="keyword">int</span>)</span></span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived</span>:</span> <span class="keyword">private</span> Base &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">mf1</span><span class="params">()</span> </span>&#123; <span class="comment">// Forwarding function</span></div><div class="line">        Base::mf1();     <span class="comment">// Implicitly inline</span></div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></li></ul><h3 id="Differentiate-between-inheritance-of-interface-and-inhertiace-of-implementation"><a href="#Differentiate-between-inheritance-of-interface-and-inhertiace-of-implementation" class="headerlink" title="Differentiate between inheritance of interface and inhertiace of implementation"></a>Differentiate between inheritance of interface and inhertiace of implementation</h3><ul><li>pure virtual functions: only inherit interface.</li><li>impure virtual functions: inherit interface and a default implementation.</li><li>non-virtual functons: inherit interface and a forced implementation. invariant far more than specialization.</li></ul><h3 id="Consider-alternatives-to-virtual-functions"><a href="#Consider-alternatives-to-virtual-functions" class="headerlink" title="Consider alternatives to virtual functions"></a>Consider alternatives to virtual functions</h3><ul><li><p>use <strong>Non-Virtual Interface</strong> to implement <strong>Template Method</strong> pattern.<br><strong>advantages</strong>: do something before and after the operation, like mutex, log entry, validation of constraints.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GameCharacter</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="comment">// This non-virtual function is a wrapper for the virtual function.</span></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">healthValue</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; </div><div class="line">        <span class="comment">// ...</span></div><div class="line">        <span class="keyword">int</span> retVal = doHealthValue();</div><div class="line">        <span class="comment">// ...</span></div><div class="line">        <span class="keyword">return</span> retVal;</div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">doHealthValue</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</div><div class="line">        <span class="comment">// ... </span></div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></li><li><p>use <strong>Function Pointers</strong> to implement <strong>Strategy</strong> pattern.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GameCharacter</span>;</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">defaultHealthCalc</span><span class="params">(<span class="keyword">const</span> GameCharacter&amp; gc)</span></span>;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GameCharacter</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(*HealthCalcFunc)</span><span class="params">(<span class="keyword">const</span> GameCharacter&amp;)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">GameCharacter</span><span class="params">(HealthCalcFunc hcf = defaultHealthCalc)</span></span></div><div class="line">                            : healthFunc(hcf) &#123;&#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">healthValue</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> healthFunc(*<span class="keyword">this</span>); &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    HealthCalcFunc healthFunc;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></li></ul><p><strong>advantages</strong>:<br>different entities of same type can have different function pointers.<br>function pointers can be changed in run-time.<br><strong>disadvantages</strong>:<br>once needing to access the non-public members, you have to weaken the encapsulation of class.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">EvilBadGuy</span>:</span> <span class="keyword">public</span> GameCharacter &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">EvilBadGuy</span><span class="params">(HealthCalcFunc hcf = defaultHealthCalc)</span></span></div><div class="line">                            : healthFunc(hcf) &#123;&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">loseHealthQuickly</span><span class="params">(<span class="keyword">const</span> GameCharacter&amp;)</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">loseHealthSlowly</span><span class="params">(<span class="keyword">const</span> GameCharacter&amp;)</span></span>;</div><div class="line"></div><div class="line"><span class="function">EvilBadGuy <span class="title">ebg1</span><span class="params">(loseHealthQuickly)</span></span>;</div><div class="line"><span class="function">EvilBadGuy <span class="title">ebg2</span><span class="params">(loseHealthSlowly)</span></span>;</div></pre></td></tr></table></figure></p><p>with <code>std::function</code>:<br>call accept all the callable entities <strong>compatible</strong> with target signature (<strong>implicit conversion</strong>).<br>with <code>std::bind</code>:<br>bind a member function with an object.</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GameCharacter</span>;</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">defaultHealthCalc</span><span class="params">(<span class="keyword">const</span> GameCharacter&amp; gc)</span></span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GameCharacter</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="keyword">typedef</span> <span class="built_in">std</span>::function&lt;<span class="keyword">int</span> (<span class="keyword">const</span> GameCharacter&amp;)&gt; HealthCalcFunc;  </div><div class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">GameCharacter</span><span class="params">(HealthCalcFunc hcf = defaultHealthCalc)</span></span></div><div class="line">                            : healthFunc(hcf) &#123;&#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">healthValue</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> healthFunc(*<span class="keyword">this</span>); &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    HealthCalcFunc healthFunc;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">EvilBadGuy</span>:</span> <span class="keyword">public</span> GameCharacter &#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">short</span> <span class="title">calcHealth</span><span class="params">(<span class="keyword">const</span> GameCharacter&amp;)</span></span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">HealthCalculator</span> &#123;</span></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> GameCharacter&amp;）<span class="keyword">const</span> &#123;&#125;</span></span></div><div class="line"><span class="function"><span class="params">&#125;;</span></span></div><div class="line"><span class="function"><span class="params">class GameLevel &#123;</span></span></div><div class="line"><span class="function"><span class="params"><span class="keyword">public</span>:</span></span></div><div class="line"><span class="function"><span class="params">    <span class="keyword">float</span> health(<span class="keyword">const</span> GameCharacter&amp;)</span> <span class="keyword">const</span></span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function">EvilBadGuy <span class="title">ebg1</span><span class="params">(calcHealth)</span></span>; <span class="comment">// Function pointer</span></div><div class="line">EvilBadGuy ebg2(HealthCalculator()); // Functor</div><div class="line"></div><div class="line">GameLevel currentLevel;</div><div class="line">EvilBadGuy ebg3(std::bind(&amp;GameLevel::health, currentLevel, std::placeholders::_1));</div></pre></td></tr></table></figure><ul><li>classical <strong>Strategy</strong> pattern (with virtual functions)<br>make <code>HealthCalcFunc</code> be a seperate hierarchy of inheritance.<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GameCharacter</span>;</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HealthCalcFunc</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">const</span> GameCharacter&amp; gc)</span> <span class="keyword">const</span> </span>&#123; &#125;</div><div class="line">&#125; defaultHealthCalc;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GameCharacter</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">GameCharacter</span><span class="params">(HealthCalcFunc* phcf = &amp;defaultHealthCalc)</span></span></div><div class="line">                            : pHealthFunc(phcf) &#123;&#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">healthValue</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> pHealthFun-&gt;(*<span class="keyword">this</span>); &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    HealthCalcFunc* pHealthFunc;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></li></ul><h3 id="Never-redefine-an-inherited-non-virtual-function"><a href="#Never-redefine-an-inherited-non-virtual-function" class="headerlink" title="Never redefine an inherited non-virtual function"></a>Never redefine an inherited non-virtual function</h3><h3 id="Never-redefine-a-function’s-inherited-default-parameter-value"><a href="#Never-redefine-a-function’s-inherited-default-parameter-value" class="headerlink" title="Never redefine a function’s inherited default parameter value"></a>Never redefine a function’s inherited default parameter value</h3><ul><li>virtual functions is dynamically bound, but default parameter values is statically bound.</li><li>static type is the type declared, and dynamic type is the type pointed to currently.</li><li>use <strong>NVI (non-virtual interface)</strong> to substitute it.</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shape</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="keyword">enum</span> ShapeColor &#123; Red, Green, Blue &#125;;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">(ShapeColor color = Red)</span> <span class="keyword">const</span> </span>&#123;</div><div class="line">        doDraw(color); </div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">doDraw</span><span class="params">(ShapeColor color)</span> <span class="keyword">const</span> </span>= <span class="number">0</span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span>:</span> <span class="keyword">public</span> Shape &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="comment">// ...</span></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">doDraw</span><span class="params">(ShapeColor color)</span> <span class="keyword">const</span></span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h3 id="Model-“has-a”-or-“is-implemented-in-terms-of”-through-composition"><a href="#Model-“has-a”-or-“is-implemented-in-terms-of”-through-composition" class="headerlink" title="Model “has-a” or “is-implemented-in-terms-of” through composition"></a>Model “has-a” or “is-implemented-in-terms-of” through composition</h3><ul><li>composition has many <strong>synonyms</strong>: layering, containment, aggregation, embedding.</li><li>in application domain, composition means “has-a”, but in inplementation domain, it means “is-implemented-in-terms-of”.</li></ul><h3 id="Use-private-inheritance-judiciously"><a href="#Use-private-inheritance-judiciously" class="headerlink" title="Use private inheritance judiciously"></a>Use private inheritance judiciously</h3><ul><li>private inheritance is a technique of implementation.</li><li>private inheritance means only implementation is inherited and interfaces should be omitted.</li><li>private inheritance is ok, when you want to redefine the inherited virtual functions.  </li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Timer</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">Timer</span><span class="params">(<span class="keyword">int</span> tickFrequency)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">onTick</span><span class="params">()</span> <span class="keyword">const</span></span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// Althrough Widget reuse Timer, it exposes `onTick` to the user</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Widget</span>:</span> <span class="keyword">private</span> Timer &#123;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">onTick</span><span class="params">()</span> <span class="keyword">const</span></span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// This one is kind of complicated, but it can prevent from using WidgetTimer</span></div><div class="line"><span class="comment">// in the derived classes of Widget, (something like Java `final`, C# `sealed`)</span></div><div class="line"><span class="comment">// Once changed to WidgetTimer*, it can also lower the compilation dependency</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Widget</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">WidgetTimer</span>:</span> <span class="keyword">public</span> Timer &#123;</div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">onTick</span><span class="params">()</span> <span class="keyword">const</span></span>;</div><div class="line">    &#125;;</div><div class="line">    </div><div class="line">    WidgetTimer timer;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><ul><li>when facing space optimization, private inheritance may be the best choice.<br>empty class: with no non-static variables, no virtual functions and no virtual base classes.<br><strong>EBO (empty class optimization)</strong> will let your base class take no space.</li></ul><h3 id="Use-multiple-inheritance-judiciously"><a href="#Use-multiple-inheritance-judiciously" class="headerlink" title="Use multiple inheritance judiciously"></a>Use multiple inheritance judiciously</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">File</span> &#123;</span> <span class="comment">// ... &#125;;</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">InputFile</span>:</span> <span class="keyword">public</span> File &#123; <span class="comment">// ... &#125;;</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">OutputFile</span>:</span> <span class="keyword">public</span> File &#123; <span class="comment">// ... &#125;;</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">IOFile</span>:</span> <span class="keyword">public</span> InputFile, <span class="keyword">public</span> OutputFile &#123; <span class="comment">// ... &#125;;</span></div></pre></td></tr></table></figure><ul><li>MI will copy the data through each inheritance path (such as <code>File::name</code>).</li><li>once not, make the class with the data to be a virtual base class, and all the classes intermediately inherited <strong>virtual inherit</strong> it.</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">File</span> &#123;</span> <span class="comment">// ... &#125;;</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">InputFile</span>:</span> <span class="keyword">virtual</span> <span class="keyword">public</span> File &#123; <span class="comment">// ... &#125;;</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">OutputFile</span>:</span> <span class="keyword">virtual</span> <span class="keyword">public</span> File &#123; <span class="comment">// ... &#125;;</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">IOFile</span>:</span> <span class="keyword">public</span> InputFile, <span class="keyword">public</span> OutputFile &#123; <span class="comment">// ... &#125;;</span></div></pre></td></tr></table></figure><ul><li><strong>the initialization of virtual base class is granted to the most derived class</strong>.</li><li>virtual inheritance will increase the cost of size, speed, and initialization(assignment).<br>the virtual base classes with no data will be best-pratical situation.</li><li>MI has some usages: one is the combination of “public inheritance inherits some interface class” and “private inheritance inherits some helper class for implementation”.<br><code>class CPerson: public IPerson, private PersonInfo;</code></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Inheritance-and-Object-Oriented-Design&quot;&gt;&lt;a href=&quot;#Inheritance-and-Object-Oriented-Design&quot; class=&quot;headerlink&quot; title=&quot;Inheritance and Object-Oriented Design&quot;&gt;&lt;/a&gt;Inheritance and Object-Oriented Design&lt;/h2&gt;&lt;p&gt;(I read a Chinese version of the book, any translation problem plz point out. &lt;/p&gt;
    
    </summary>
    
      <category term="Doing" scheme="http://TaoSama.github.io/categories/Doing/"/>
    
      <category term="CPP" scheme="http://TaoSama.github.io/categories/Doing/CPP/"/>
    
    
  </entry>
  
  <entry>
    <title>Implementations, Notes(5), Effective C++</title>
    <link href="http://TaoSama.github.io/2017/09/05/effective-cpp-implementations/"/>
    <id>http://TaoSama.github.io/2017/09/05/effective-cpp-implementations/</id>
    <published>2017-09-05T10:16:00.000Z</published>
    <updated>2017-09-20T09:36:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Implementations"><a href="#Implementations" class="headerlink" title="Implementations"></a>Implementations</h2><p>(I read a Chinese version of the book, any translation problem plz point out. </p><a id="more"></a><h3 id="Postpone-variable-definitions-as-long-as-possible-until-initial-values-can-be-provided"><a href="#Postpone-variable-definitions-as-long-as-possible-until-initial-values-can-be-provided" class="headerlink" title="Postpone variable definitions as long as possible until initial values can be provided"></a>Postpone variable definitions as long as possible until initial values can be provided</h3><h3 id="Minimize-casting"><a href="#Minimize-casting" class="headerlink" title="Minimize casting"></a>Minimize casting</h3><ul><li>old-style casts<ul><li>C style cast: <code>(T)expression</code></li><li>function style cast: <code>T(expression)</code></li></ul></li><li>CPP style casts<ul><li>const_cast: cast away the constness.</li><li>dynamic_cast: safe downcasting, to decide which type a object belongs to in the inheritance hierarchy.</li><li>reinterpret_cast: low-level cast.</li><li>static_cast: force implicit conversions.</li></ul></li></ul><p><strong>tips:</strong></p><ul><li>dynamic_casts maybe implement based on the comparision on string names of classes.</li><li>try to hide the cast in a function, then provide to customers, once it is a must.</li><li>do use the CPP style cast.</li></ul><h3 id="Avoid-returning-“handles”-to-object-internals"><a href="#Avoid-returning-“handles”-to-object-internals" class="headerlink" title="Avoid returning “handles” to object internals"></a>Avoid returning “handles” to object internals</h3><p><strong>handles</strong>: references, pointers, iterators<br>try to use a copy</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GUIObject</span> &#123;</span> ... &#125;;</div><div class="line"><span class="function"><span class="keyword">const</span> Rectangle <span class="title">boundingBox</span><span class="params">(<span class="keyword">const</span> GUIObject&amp; obj)</span></span>;</div><div class="line"></div><div class="line">GUIobject* pgo;</div><div class="line"></div><div class="line"><span class="comment">// The temporary Point is destructed when the statement is over, </span></div><div class="line"><span class="comment">// and the pUpperLeft is dangling.</span></div><div class="line"><span class="keyword">const</span> Point* pUpperLeft = &amp;(boundingBox(*pgo).upperLeft());</div></pre></td></tr></table></figure><h3 id="Strive-for-exception-safe-code"><a href="#Strive-for-exception-safe-code" class="headerlink" title="Strive for exception-safe code"></a>Strive for exception-safe code</h3><h4 id="when-exception-throws-exception-safe-code-will-guarantee"><a href="#when-exception-throws-exception-safe-code-will-guarantee" class="headerlink" title="when exception throws, exception-safe code will guarantee:"></a>when exception throws, exception-safe code will guarantee:</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrettyMenu</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">changeBackground</span><span class="params">(<span class="built_in">std</span>::istream&amp; imgSrc)</span></span>;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    Mutex mutex;</div><div class="line">    Image* bgImage;</div><div class="line">    <span class="keyword">int</span> imageChanges;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">void</span> PrettyMenu::changeBackground(<span class="built_in">std</span>::istream&amp; imgSrc) &#123;</div><div class="line">    lock(&amp;mutex);</div><div class="line">    <span class="keyword">delete</span> bgImage;</div><div class="line">    ++imageChanges;</div><div class="line">    bgImage = newImage(imgSrc);</div><div class="line">    unlock(&amp;mutex);</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>no resources leak.<br>if <code>new Image(imgSrc)</code> throws, <code>mutex</code> will never release.</li><li>no data break.<br>if <code>new Image(imgSrc)</code> throw, <code>bgImg</code> will point to a deleted object.<br>and the behavior of <code>imageChanges</code> will be weird, which it changed or not. </li></ul><h4 id="exception-safe-functions-provide-3-guarantees"><a href="#exception-safe-functions-provide-3-guarantees" class="headerlink" title="exception-safe functions provide 3 guarantees:"></a>exception-safe functions provide 3 guarantees:</h4><ul><li>basic promise.<br>when exception throws, everything is in a valid state, but the users can’t predict it.</li><li>strong guarantee.<br>when exception throws, the program remains unchanged.</li><li>nothrow guarantee<br><code>int doSomething() throw();</code><br>though the function throws nothing, it is not guaranteed. aka., if throws, it will be a fatal error, <code>unexpected</code> will be called (Google <code>set_unexpected</code> for detail).<br>all the properties of the functions is decided by implementation, not the declaration.</li></ul><h4 id="copy-and-swap"><a href="#copy-and-swap" class="headerlink" title="copy and swap"></a>copy and swap</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// pimpl idiom</span></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PMImpl</span> &#123;</span></div><div class="line">    <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;Image&gt; bgImage;</div><div class="line">    <span class="keyword">int</span> imageChanges;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrettyMenu</span> &#123;</span></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    Mutex mutex;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;PMImpl&gt; pImpl;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> PrettyMenu::changeBackground(<span class="built_in">std</span>::istream&amp; imgSrc) &#123;</div><div class="line">    <span class="keyword">using</span> <span class="built_in">std</span>::swap;</div><div class="line">    <span class="function">Lock <span class="title">m1</span><span class="params">(&amp;mutex)</span></span>; <span class="comment">// Use resource-managing class to manipulate mutex</span></div><div class="line">    <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;PMImpl&gt; pNew(<span class="keyword">new</span> PMImpl(*pImpl)); <span class="comment">// Copy</span></div><div class="line">    pNew-&gt;bgImage.reset(<span class="keyword">new</span> Image(imgSrc)); <span class="comment">// Update the copy</span></div><div class="line">    swap(pImpl, pNew); <span class="comment">// Swap</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>even if strong guarantee can be implemented by <code>copy and swap</code>, but it is not implementable to all the functions. <strong>and watch the cost of copy</strong>.</li><li>exception-safety is decided by the weakest one of all the functions.</li><li>once you have no choice but to set no any guarantee (when you call <code>the old code</code>), <strong>document it</strong>. </li></ul><h3 id="Understand-the-ins-and-outs-of-inlining"><a href="#Understand-the-ins-and-outs-of-inlining" class="headerlink" title="Understand the ins and outs of inlining"></a>Understand the ins and outs of inlining</h3><ul><li><code>inline</code> just applys for inling to compiler, not forcing to do so.</li><li><code>inline</code> the minimal, frequently called functions.</li><li><code>inline</code> functions usually put in headers. because inlining happens in compiling period, compiler needs to know what they look like.</li><li>the functions calls virtual functions will be never inlined, because virtual functions can only be known in run-time.</li><li>think over before inling construtors and destrutors. maybe there are complicated codes generated by compilers.</li></ul><h3 id="Minimize-compilation-dependencies-between-files"><a href="#Minimize-compilation-dependencies-between-files" class="headerlink" title="Minimize compilation dependencies between files"></a>Minimize compilation dependencies between files</h3><p>pimpl idiom -&gt; handle classes</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Person.h</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"datefwd.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"addressfwd.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    Person(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; name, <span class="keyword">const</span> Date&amp; birthday, <span class="keyword">const</span> Address&amp; addr);</div><div class="line">    <span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">name</span><span class="params">()</span> <span class="keyword">const</span></span>;</div><div class="line">    <span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">birthDate</span><span class="params">()</span> <span class="keyword">const</span></span>;</div><div class="line">    <span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">address</span><span class="params">()</span> <span class="keyword">const</span></span>;</div><div class="line"></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;PersonImpl&gt; pImpl;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// Person.cpp</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Person.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"PersonImpl.h"</span></span></div><div class="line"></div><div class="line">Person::Person(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; name, <span class="keyword">const</span> Date&amp; birthday, <span class="keyword">const</span> Address&amp; addr)</div><div class="line">                : pImpl(<span class="keyword">new</span> PersonImpl(name, birthday, addr)) &#123;&#125;</div><div class="line"></div><div class="line"><span class="built_in">std</span>::<span class="built_in">string</span> Person::name() <span class="keyword">const</span> &#123;</div><div class="line">    <span class="keyword">return</span> pImpl-&gt;name(); </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>abstract base class -&gt; interface class<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="keyword">virtual</span> ~Person();</div><div class="line">    <span class="keyword">virtual</span> <span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">name</span><span class="params">()</span> <span class="keyword">const</span> </span>= <span class="number">0</span>;</div><div class="line">    <span class="keyword">virtual</span> <span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">birthDate</span><span class="params">()</span> <span class="keyword">const</span> </span>= <span class="number">0</span>;</div><div class="line">    <span class="keyword">virtual</span> <span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">address</span><span class="params">()</span> <span class="keyword">const</span> </span>= <span class="number">0</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">static</span> <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;Person&gt; create(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; name, </div><div class="line">                                            <span class="keyword">const</span> Date&amp; birthday, <span class="keyword">const</span> Address&amp; addr);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">RealPerson</span>:</span> <span class="keyword">public</span> Person &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    RealPerson(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; name, <span class="keyword">const</span> Date&amp; birthday, <span class="keyword">const</span> Address&amp; addr)</div><div class="line">                : name(name), birthday(birthday), addr(addr) &#123;&#125;</div><div class="line">    <span class="keyword">virtual</span> ~RealPerson() &#123;&#125;</div><div class="line">    <span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">name</span><span class="params">()</span> <span class="keyword">const</span></span>;</div><div class="line">    <span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">birthDate</span><span class="params">()</span> <span class="keyword">const</span></span>;</div><div class="line">    <span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">address</span><span class="params">()</span> <span class="keyword">const</span></span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;Person&gt; create(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; name, </div><div class="line">                                <span class="keyword">const</span> Date&amp; birthday, <span class="keyword">const</span> Address&amp; addr) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;Person&gt;(<span class="keyword">new</span> RealPerson(name, birthday, addr)); </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><ul><li>don’t use objects, if object references or object pointers achieves.</li><li>replace class definitions with class declarations as much as possible.</li><li>provide declaration and definition with different headers.</li></ul><p><strong>use handle classes and interface classes to minimize changes for users during the develpment of program.<br>but replace with concrete classes, when the great difference in speed or size compared to coupling between classes.</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Implementations&quot;&gt;&lt;a href=&quot;#Implementations&quot; class=&quot;headerlink&quot; title=&quot;Implementations&quot;&gt;&lt;/a&gt;Implementations&lt;/h2&gt;&lt;p&gt;(I read a Chinese version of the book, any translation problem plz point out. &lt;/p&gt;
    
    </summary>
    
      <category term="Doing" scheme="http://TaoSama.github.io/categories/Doing/"/>
    
      <category term="CPP" scheme="http://TaoSama.github.io/categories/Doing/CPP/"/>
    
    
  </entry>
  
  <entry>
    <title>Designs and Declarations, Notes(4), Effective C++</title>
    <link href="http://TaoSama.github.io/2017/09/04/effective-cpp-designs-and-declarations/"/>
    <id>http://TaoSama.github.io/2017/09/04/effective-cpp-designs-and-declarations/</id>
    <published>2017-09-04T05:19:00.000Z</published>
    <updated>2017-09-20T09:36:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Designs-and-Declarations"><a href="#Designs-and-Declarations" class="headerlink" title="Designs and Declarations"></a>Designs and Declarations</h2><p>(I read a Chinese version of the book, any translation problem plz point out. </p><a id="more"></a><h3 id="Make-interfaces-easy-to-use-correctly-and-hard-to-use-incorrectly"><a href="#Make-interfaces-easy-to-use-correctly-and-hard-to-use-incorrectly" class="headerlink" title="Make interfaces easy to use correctly and hard to use incorrectly"></a>Make interfaces easy to use correctly and hard to use incorrectly</h3><ul><li>introduce a new type.<br><code>Data d(Month(9), Day(4), Year(2017));</code></li><li><p>restrict some invalid operations on types.<br>add <code>const</code> is a useful way. </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(a * b = c) <span class="comment">// ...</span></div><div class="line"></div><div class="line"><span class="comment">// It will avoid the problem above.</span></div><div class="line"><span class="keyword">const</span> Type <span class="keyword">operator</span>*(<span class="keyword">const</span> Type&amp; a, <span class="keyword">const</span> Type&amp; b);</div></pre></td></tr></table></figure></li><li><p>predefine all the valid values, if we want type safety.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Month</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">static</span> Month <span class="title">Jan</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> Month(<span class="number">1</span>); &#125;</div><div class="line">    <span class="function"><span class="keyword">static</span> Month <span class="title">Feb</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> Month(<span class="number">2</span>); &#125;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">    <span class="function"><span class="keyword">static</span> Month <span class="title">Dec</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> Month(<span class="number">12</span>); &#125;</div><div class="line">    <span class="comment">// ...</span></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">Month</span><span class="params">(<span class="keyword">int</span> m)</span></span>;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure></li><li><p>make interfaces be compatible with built-in types, aka. providing the interfaces of consistent behaviors.</p></li><li>force users to use smart pointers. e.g., factory function returns a smart pointer.<br><code>std::shared_ptr&lt;Investment&gt; createInvestment();</code></li></ul><h3 id="Treat-class-design-as-type-design"><a href="#Treat-class-design-as-type-design" class="headerlink" title="Treat class design as type design"></a>Treat class design as type design</h3><p>Questions to think:</p><ul><li>create and destroy</li><li>initialize and assign</li><li>pass by value -&gt; copy constructor</li><li>valid values -&gt; invariants(约束) </li><li>inheritance</li><li>conversion</li><li>functions and operators</li><li>access specifiers</li><li>undeclared interface ???</li><li>generalization -&gt; templates</li><li>really need a new type? maybe some non-member functions or templates achieve the goal.</li></ul><h3 id="Prefer-pass-by-reference-to-const-to-pass-by-value"><a href="#Prefer-pass-by-reference-to-const-to-pass-by-value" class="headerlink" title="Prefer pass-by-reference-to-const to pass-by-value"></a>Prefer pass-by-reference-to-const to pass-by-value</h3><ul><li>avoid any construction and destructions, more efficient.</li><li>avoid the slicing problem brought by derived class upcast to base class.</li><li>pass-by-value is proper for built-in types, e.g., STL iterators and functors.</li></ul><h3 id="Don’t-try-to-return-a-reference-when-you-must-return-an-object"><a href="#Don’t-try-to-return-a-reference-when-you-must-return-an-object" class="headerlink" title="Don’t try to return a reference when you must return an object"></a>Don’t try to return a reference when you must return an object</h3><p>try the one that behave correctly, and throw the responsibility to the compilers.</p><h3 id="Prefer-non-member-non-friend-functions-to-member-functions"><a href="#Prefer-non-member-non-friend-functions-to-member-functions" class="headerlink" title="Prefer non-member, non-friend functions to member functions"></a>Prefer non-member, non-friend functions to member functions</h3><p>a natural way, let tool function be a non-member function and put inside the same namespace where the classes it operates is.<br>then, for future expansion of more tool functions, sperate them in new headers but in the same namespaces.<br><strong>increase encapsulation, packaging flexibility, and function expansibility.</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// webbrowser.h</span></div><div class="line"><span class="comment">// Main functionalities of webbrowser.</span></div><div class="line"><span class="keyword">namespace</span> WebBrowserStuff &#123;</div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">WebBrowser</span> &#123;</span></div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        <span class="comment">// ...</span></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">clearCache</span><span class="params">()</span></span>;</div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">clearHistory</span><span class="params">()</span></span>;</div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">removeCookies</span><span class="params">()</span></span>;</div><div class="line">        <span class="comment">// ...</span></div><div class="line">    &#125;;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clearBrowser</span><span class="params">(WebBrowser&amp; wb)</span> </span>&#123;</div><div class="line">        wb.clearCache();</div><div class="line">        wb.clearHistory();</div><div class="line">        wb.removeCookies();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// webbrowser_bookmarks.h</span></div><div class="line"><span class="keyword">namespace</span> WebBrowserStuff &#123;</div><div class="line">    <span class="comment">// Some tool functions related to bookmarks. </span></div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// webbrowser_cookies.h</span></div><div class="line"><span class="keyword">namespace</span> WebBrowserStuff &#123;</div><div class="line">    <span class="comment">// Some tool functions related to cookies.</span></div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="Declare-non-member-functions-when-type-conversions-should-apply-to-all-parameters"><a href="#Declare-non-member-functions-when-type-conversions-should-apply-to-all-parameters" class="headerlink" title="Declare non-member functions when type conversions should apply to all parameters"></a>Declare non-member functions when type conversions should apply to all parameters</h3><ul><li>The parameter can be a participant of implicit type conversion, only when the parameter is in parameter list.</li><li>friend should be avoided when it can be.<br><strong>Observation</strong>: non-member functions is the opposite of member ones, not the friend functions.</li></ul><h3 id="Consider-support-for-a-non-throwing-swap"><a href="#Consider-support-for-a-non-throwing-swap" class="headerlink" title="Consider support for a non-throwing swap"></a>Consider support for a non-throwing swap</h3><p>for pointer to implementation (pimpl), more efficient way is to do:</p><ul><li>provide a public member <code>swap</code> function, this function should never throw, because it is the insurance for exception safety.<br>moreover, the default swap is used for built-in types and the built-in types never throws, we should keep consistent.</li><li>provide a non-member <code>swap</code> which calls the member <code>swap</code> in the namespace where your class or template is. </li><li><p>provide a <code>std::swap</code> total template specilization, if you’re trying to design a class not a class template.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Widget</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(Widget&amp; other)</span> </span>&#123;</div><div class="line">        <span class="keyword">using</span> <span class="built_in">std</span>::swap;</div><div class="line">        swap(pImpl, other.pImpl);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">namespace</span> <span class="built_in">std</span> &#123;</div><div class="line">    <span class="keyword">template</span>&lt;&gt;                                <span class="comment">// Total template specilization</span></div><div class="line">    <span class="keyword">void</span> swap&lt;Widget&gt;(Widget&amp; a, Widget&amp; b) &#123; </div><div class="line">        a.swap(b); </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>we are not allowed to change anything in namespace <code>std</code>, but we can create specialization.<br>it is a UB, if you insist on doing so.</p></li><li><p>CPP points out, we can only paritially specialized class templates, function templates is not allowed. so provide non-member <code>swap</code> for function templates.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">namespace</span> WidgetStuff &#123;</div><div class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Widget</span> &#123;</span> ... &#125;;</div><div class="line">    </div><div class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;                    <span class="comment">// Non-member function</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(Widget&lt;T&gt;&amp; a, Widget&lt;T&gt;&amp; b)</span> </span>&#123;</div><div class="line">        a.swap(b); </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>when calling <code>swap</code>, please ensure a <code>using std::swap</code>, then call <code>swap</code> directly without any namespace specifier.<br>let the compiler to find a proper one.<br><strong>CPP name lookup rules (argument-dependent lookup or Koenig lookup rule):</strong><br>try to find a specific <code>swap</code> of <code>T</code> in global scope or the namespace where <code>T</code> is, then the generic one (<code>std::swap</code>).</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">doSomething</span><span class="params">(T&amp; obj1, T&amp; obj2)</span> </span>&#123;</div><div class="line">    <span class="keyword">using</span> <span class="built_in">std</span>::swap;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">    swap(obj1, obj2);</div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Designs-and-Declarations&quot;&gt;&lt;a href=&quot;#Designs-and-Declarations&quot; class=&quot;headerlink&quot; title=&quot;Designs and Declarations&quot;&gt;&lt;/a&gt;Designs and Declarations&lt;/h2&gt;&lt;p&gt;(I read a Chinese version of the book, any translation problem plz point out. &lt;/p&gt;
    
    </summary>
    
      <category term="Doing" scheme="http://TaoSama.github.io/categories/Doing/"/>
    
      <category term="CPP" scheme="http://TaoSama.github.io/categories/Doing/CPP/"/>
    
    
  </entry>
  
  <entry>
    <title>Resource Management, Notes(3), Effective C++</title>
    <link href="http://TaoSama.github.io/2017/08/31/effective-cpp-resource-management/"/>
    <id>http://TaoSama.github.io/2017/08/31/effective-cpp-resource-management/</id>
    <published>2017-08-31T03:26:00.000Z</published>
    <updated>2017-09-20T09:36:26.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Resource-Management"><a href="#Resource-Management" class="headerlink" title="Resource Management"></a>Resource Management</h2><p>(I read a Chinese version of the book, any translation problem plz point out. </p><a id="more"></a><h3 id="Use-objects-to-manage-resources"><a href="#Use-objects-to-manage-resources" class="headerlink" title="Use objects to manage resources"></a>Use objects to manage resources</h3><ul><li><p>Priciples</p><ul><li>put into managing object when acquired resources<br>(Resource Acquistion Is Initialization; RAII).</li><li>managing object uses destructor to ensure the resources is released.</li></ul></li><li><p>Methods</p><ul><li>auto_ptr<br>once be assigned, the right side one is null.<br>so the feature of abnormal assignment operator makes that it can’t be put into containers.</li><li>referencing-counting smart pointer (RCSP)<br>it can’t break cycles of references.<br>it seems they’re in the “used” status when 2 unused objects point to each other. </li></ul></li></ul><h3 id="Think-carefully-about-copying-behavior-in-resource-managing-classes"><a href="#Think-carefully-about-copying-behavior-in-resource-managing-classes" class="headerlink" title="Think carefully about copying behavior in resource-managing classes"></a>Think carefully about copying behavior in resource-managing classes</h3><ul><li>create a class to do this.</li><li>no copying. -&gt; <code>=delete or inherit from uncopyable</code></li><li><p>reference-count in the low-level resources (shared_ptr).</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lock</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    explicit Lock(Mutex* pm):</div><div class="line">        mutexPtr(pm, unlock) &#123;</div><div class="line">            lock(mutexPtr.get()); </div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;Mutex&gt; mutexPtr;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></li><li><p>deep copying.<br>copy wrapped resources when copying the resource-managing object.</p></li><li>transfer the ownership of low-level resources (auto_pr).</li></ul><h3 id="Provide-access-to-raw-resources-in-resource-managing-classes"><a href="#Provide-access-to-raw-resources-in-resource-managing-classes" class="headerlink" title="Provide access to raw resources in resource-managing classes"></a>Provide access to raw resources in resource-managing classes</h3><p>Sometimes we need to provide compatibility to C APIs.</p><ul><li><p>provide a <code>get()</code> to access the raw pointer, safer.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// C APIs.</span></div><div class="line"><span class="function">FontHandle <span class="title">getFont</span><span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">releaseFont</span><span class="params">(FontHandle fh)</span></span>;</div><div class="line"></div><div class="line">Class Font &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    explicit Font(FontHandle fh): f(fh) &#123;&#125;</div><div class="line">    ~Font() &#123; releaseFont(f); &#125;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">    <span class="function">FontHandle <span class="title">get</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> f; &#125; </div><div class="line">    <span class="comment">// ...</span></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    FontHandle f;    <span class="comment">// Raw font resources</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure></li><li><p>provide implicit conversion function may offer convenience to customers. but the opportunities of unexpected error is increased.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Font</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="comment">// ...</span></div><div class="line">    <span class="function"><span class="keyword">operator</span> <span class="title">FontHandle</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> f; &#125; </div><div class="line">    <span class="comment">// ..</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">Font f1(getFont());</div><div class="line"><span class="comment">// It is intended to copy a Font object</span></div><div class="line"><span class="comment">// but f1 is copied after it is implicitly conversed to FontHandle</span></div><div class="line">FontHandle f2 = f1;</div></pre></td></tr></table></figure></li><li><p>no contradiction with encapsulation, just to ensure resource releasing.</p></li></ul><h3 id="Use-the-same-form-in-corresponding-uses-of-new-and-delete"><a href="#Use-the-same-form-in-corresponding-uses-of-new-and-delete" class="headerlink" title="Use the same form in corresponding uses of new and delete"></a>Use the same form in corresponding uses of new and delete</h3><p><code>new-&gt;delete</code><br><code>new[]-&gt;delete[]</code></p><ul><li>Tips:<br>use containers to reduce the risk misusing <code>delete</code> when releasing memory of typedefined array.<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="built_in">std</span>::<span class="built_in">string</span> stringArray[<span class="number">4</span>];</div><div class="line"><span class="built_in">std</span>::<span class="built_in">string</span>* pal = <span class="keyword">new</span> stringArray;</div><div class="line"><span class="keyword">delete</span> pal;   <span class="comment">// Undefined Behavior</span></div><div class="line"><span class="keyword">delete</span> pal[]; <span class="comment">// Good</span></div></pre></td></tr></table></figure></li></ul><h3 id="Stored-newed-objects-in-smart-pointers-in-standalone-statements"><a href="#Stored-newed-objects-in-smart-pointers-in-standalone-statements" class="headerlink" title="Stored newed objects in smart pointers in standalone statements"></a>Stored newed objects in smart pointers in standalone statements</h3><ul><li><p>look at the code below:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">priority</span><span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">processWidget</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;Widget&gt; pw, <span class="keyword">int</span> priority)</span></span>;</div><div class="line"></div><div class="line">processWidget(<span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;Widget&gt;(<span class="keyword">new</span> Widget), priority());</div></pre></td></tr></table></figure></li><li><p>it is free for the compiler to reorder the operations inside one statement, what if in this order:<br><code>new Widget -&gt; priority() -&gt; shared_ptr</code></p></li><li>once <code>priority()</code> throws, the newed pointer will be lost and memory leak may happen.</li><li>the compiler can’t reorder the operations between statements, so<br>the code below avoids the risk above.<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;Widget&gt; pw(<span class="keyword">new</span> Widget);</div><div class="line">processWidget(pw, priority());</div></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Resource-Management&quot;&gt;&lt;a href=&quot;#Resource-Management&quot; class=&quot;headerlink&quot; title=&quot;Resource Management&quot;&gt;&lt;/a&gt;Resource Management&lt;/h2&gt;&lt;p&gt;(I read a Chinese version of the book, any translation problem plz point out. &lt;/p&gt;
    
    </summary>
    
      <category term="Doing" scheme="http://TaoSama.github.io/categories/Doing/"/>
    
      <category term="CPP" scheme="http://TaoSama.github.io/categories/Doing/CPP/"/>
    
    
  </entry>
  
  <entry>
    <title>Notes, Hive Tutorial</title>
    <link href="http://TaoSama.github.io/2017/08/25/hive-tut-notes/"/>
    <id>http://TaoSama.github.io/2017/08/25/hive-tut-notes/</id>
    <published>2017-08-25T03:07:00.000Z</published>
    <updated>2017-09-20T09:32:58.000Z</updated>
    
    <content type="html"><![CDATA[<p><del>Last Modified: 2017-08-28 16:49:00</del></p><h3 id="Acknowledge"><a href="#Acknowledge" class="headerlink" title="Acknowledge"></a>Acknowledge</h3><ul><li><p>What is Hive?<br>Hive is a data warehouse infrastructure tool to process structured data in Hadoop. It resides on top of Hadoop to summarize Big Data, and makes querying and analyzing easy.  </p></li><li><p>Official Hive Tutorial<br><a href="https://cwiki.apache.org/confluence/display/Hive/Tutorial" target="_blank" rel="external">Tutorial</a></p></li></ul><a id="more"></a><h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p><a href="https://www.tutorialspoint.com/hive/hive_introduction.htm" target="_blank" rel="external">Hive - Introduction</a></p><h4 id="Big-Data"><a href="#Big-Data" class="headerlink" title="Big Data"></a>Big Data</h4><ul><li>Hadoop<ul><li>MapReduce</li><li>HDFS</li></ul></li><li><p>Tools</p><ul><li>Sqoop</li><li>Pig</li><li>Hive</li></ul></li><li><p>Hive<br><code>see the link above for details</code></p></li></ul><h4 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h4><p><code>Syntax is omitted, see the reference for details</code></p><ul><li>Views And Indexes<br><a href="https://stackoverflow.com/questions/24197856/what-is-difference-between-index-and-view-in-mysql" target="_blank" rel="external">Difference between view and index</a></li><li><p>Select Joins<br><a href="http://www.diffen.com/difference/Inner_Join_vs_Outer_Join" target="_blank" rel="external">Inner Join vs Outer Join</a><br><a href="https://stackoverflow.com/questions/8696383/difference-between-natural-join-and-inner-join" target="_blank" rel="external">Inner Join vs Natural Join</a>, <code>Natural Join</code> is just short syntax for a <strong>specific</strong> <code>Inner Join</code></p><ul><li>JOIN (same as INNER JOIN)<br>JOIN clause is used to combine and retrieve the records from multiple tables.<br>(It only shows the matched result)</li><li>LEFT OUTER JOIN<br>LEFT OUTER JOIN returns all the rows from the left table, even if there are no matches in the right table. This means, if the ON clause matches 0 (zero) records in the right table, the JOIN still returns a row in the result, but with NULL in each column from the right table.</li><li>RIGHT OUTER JOIN<br>RIGHT OUTER JOIN returns all the rows from the right table, even if there are no matches in the left table. If the ON clause matches 0 (zero) records in the left table, the JOIN still returns a row in the result, but with NULL in each column from the left table.</li><li>FULL OUTER JOIN<br>FULL OUTER JOIN <code>combines</code> the records of both <code>the left and the right outer tables</code> that fulfil the JOIN condition. The joined table contains either all the records from both the tables, or fills in NULL values for missing matches on either side.</li></ul></li></ul><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://www.tutorialspoint.com/hive/index.htm" target="_blank" rel="external">Learn Hive</a><br><a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual" target="_blank" rel="external">Hive Language Manual</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;del&gt;Last Modified: 2017-08-28 16:49:00&lt;/del&gt;&lt;/p&gt;
&lt;h3 id=&quot;Acknowledge&quot;&gt;&lt;a href=&quot;#Acknowledge&quot; class=&quot;headerlink&quot; title=&quot;Acknowledge&quot;&gt;&lt;/a&gt;Acknowledge&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;What is Hive?&lt;br&gt;Hive is a data warehouse infrastructure tool to process structured data in Hadoop. It resides on top of Hadoop to summarize Big Data, and makes querying and analyzing easy.  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Official Hive Tutorial&lt;br&gt;&lt;a href=&quot;https://cwiki.apache.org/confluence/display/Hive/Tutorial&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Tutorial&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Doing" scheme="http://TaoSama.github.io/categories/Doing/"/>
    
      <category term="Hive" scheme="http://TaoSama.github.io/categories/Doing/Hive/"/>
    
    
  </entry>
  
  <entry>
    <title>Notes, Most Useful Shell Command</title>
    <link href="http://TaoSama.github.io/2017/08/25/most-useful-shell-commands/"/>
    <id>http://TaoSama.github.io/2017/08/25/most-useful-shell-commands/</id>
    <published>2017-08-25T02:57:10.000Z</published>
    <updated>2017-09-20T09:38:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>Last Modified: 2017-08-25 10:57:10</p><p>TODO:</p><ul><li>grep</li><li>expect</li><li>awk</li><li>sed</li><li>xargs</li></ul><a id="more"></a><p><a href="http://xstarcd.github.io/wiki/shell/expect_handbook.html" target="_blank" rel="external">expect</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Last Modified: 2017-08-25 10:57:10&lt;/p&gt;
&lt;p&gt;TODO:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;grep&lt;/li&gt;
&lt;li&gt;expect&lt;/li&gt;
&lt;li&gt;awk&lt;/li&gt;
&lt;li&gt;sed&lt;/li&gt;
&lt;li&gt;xargs&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Doing" scheme="http://TaoSama.github.io/categories/Doing/"/>
    
      <category term="Shell" scheme="http://TaoSama.github.io/categories/Doing/Shell/"/>
    
    
  </entry>
  
  <entry>
    <title>Solutions, Leetcode Shell Problems</title>
    <link href="http://TaoSama.github.io/2017/08/07/leetcode-shell-problems-solution/"/>
    <id>http://TaoSama.github.io/2017/08/07/leetcode-shell-problems-solution/</id>
    <published>2017-08-07T10:06:10.000Z</published>
    <updated>2017-09-20T09:31:46.000Z</updated>
    
    <content type="html"><![CDATA[<p><del>Last Modified: 2017-08-25 10:53:10</del></p><ul><li>193. Valid Phone Numbers</li><li>195. Tenth Line</li><li>192. Word Frequency</li><li>194. Tranpose File</li></ul><a id="more"></a><h3 id="193-Valid-Phone-Numbers"><a href="#193-Valid-Phone-Numbers" class="headerlink" title="193. Valid Phone Numbers"></a>193. Valid Phone Numbers</h3><p>You may assume that a valid phone number must appear in one of the following two formats: <code>(xxx) xxx-xxxx or xxx-xxx-xxxx. (x means a digit)</code><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> Read from the file file.txt and output all valid phone numbers to stdout.</div><div class="line">grep -E '^(([0-9]&#123;3&#125;-[0-9]&#123;3&#125;-[0-9]&#123;4&#125;)|(\([0-9]&#123;3&#125;\) [0-9]&#123;3&#125;-[0-9]&#123;4&#125;))$' file.txt</div></pre></td></tr></table></figure></p><h3 id="195-Tenth-Line"><a href="#195-Tenth-Line" class="headerlink" title="195. Tenth Line"></a>195. Tenth Line</h3><p>How would you print just the 10th line of a file?<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> Read from the file file.txt and output the tenth line to stdout.</div><div class="line">line_num=0</div><div class="line">while read line &amp;&amp; ((line_num &lt; 10)); do</div><div class="line">    line_num=$line_num+1</div><div class="line">    if ((line_num == 10)); then</div><div class="line">        echo $line</div><div class="line">        break</div><div class="line">    fi</div><div class="line">done &lt; file.txt</div></pre></td></tr></table></figure></p><h3 id="192-Word-Frequency"><a href="#192-Word-Frequency" class="headerlink" title="192. Word Frequency"></a>192. Word Frequency</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> Read from the file words.txt and output the word frequency list to stdout.</div><div class="line">declare -A freq</div><div class="line">while read word; do</div><div class="line">    ((++freq[$word]))</div><div class="line">done &lt; &lt;(tr -s " " "\n" &lt; words.txt)</div><div class="line"><span class="meta">#</span> echo $&#123;words[*]&#125;</div><div class="line">for word in $&#123;!freq[*]&#125;; do</div><div class="line">    echo $word $&#123;freq[$word]&#125;</div><div class="line">done | sort -k 2nbr</div></pre></td></tr></table></figure><p><strong>it seems that there some problems with shell array…</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">➜  ~ a+=1</div><div class="line">➜  ~ a+=1</div><div class="line">➜  ~ echo $&#123;a[*]&#125;</div><div class="line">11</div><div class="line">➜  ~ for i in $&#123;a[*]&#125;; do</div><div class="line"><span class="meta">for&gt;</span> echo $i</div><div class="line"><span class="meta">for&gt;</span> done</div><div class="line">11</div><div class="line">➜  ~ for i in $&#123;a[@]&#125;; do</div><div class="line"><span class="meta">for&gt;</span> echo $i</div><div class="line"><span class="meta">for&gt;</span> done</div><div class="line">11</div><div class="line">➜  ~ for i in "$&#123;a[@]&#125;"; do</div><div class="line"><span class="meta">for&gt;</span> echo $i</div><div class="line"><span class="meta">for&gt;</span> done</div><div class="line">11</div><div class="line">➜  ~ for i in "$&#123;a[*]&#125;"; do</div><div class="line"><span class="meta">for&gt;</span> echo $i</div><div class="line"><span class="meta">for&gt;</span> done</div><div class="line">11</div><div class="line">➜  ~ echo $&#123;a[1]&#125;</div><div class="line">1</div><div class="line">➜  ~ echo $&#123;a[2]&#125;</div><div class="line">1</div><div class="line">➜  ~ echo 'num of elemets='$&#123;#a[*]&#125;</div><div class="line">num of elemets=2</div><div class="line"></div><div class="line"><span class="meta">#</span> it looks rather werid... so avoid using it...</div></pre></td></tr></table></figure></p><h3 id="194-Tranpose-File"><a href="#194-Tranpose-File" class="headerlink" title="194. Tranpose File"></a>194. Tranpose File</h3><p>Given a text file <code>file.txt</code>, transpose its content.<br>You may assume that each row has the same number of columns and each field is separated by the <code>&#39; &#39;</code> character.<br>For example, if <code>file.txt</code> has the following content:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">name age</div><div class="line">alice 21</div><div class="line">ryan 30</div><div class="line"></div><div class="line"><span class="comment"># Output the following:</span></div><div class="line">name alice ryan</div><div class="line">age 21 30</div></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Read from the file file.txt and print its transposed content to stdout.</span></div><div class="line">awk <span class="string">'</span></div><div class="line"><span class="string">&#123;</span></div><div class="line"><span class="string">    for(i = 1; i &lt;= NF; ++i) &#123;</span></div><div class="line"><span class="string">        if(1 == NR) &#123;</span></div><div class="line"><span class="string">            s[i] = $i;</span></div><div class="line"><span class="string">        &#125;</span></div><div class="line"><span class="string">        else &#123;</span></div><div class="line"><span class="string">            s[i] = s[i] " " $i </span></div><div class="line"><span class="string">        &#125;</span></div><div class="line"><span class="string">    &#125;</span></div><div class="line"><span class="string">&#125;</span></div><div class="line"><span class="string">END &#123;</span></div><div class="line"><span class="string">    for(i = 1; s[i] != ""; ++i) &#123;</span></div><div class="line"><span class="string">        print s[i];</span></div><div class="line"><span class="string">    &#125;</span></div><div class="line"><span class="string">&#125;'</span> file.txt</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;del&gt;Last Modified: 2017-08-25 10:53:10&lt;/del&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;193. Valid Phone Numbers&lt;/li&gt;
&lt;li&gt;195. Tenth Line&lt;/li&gt;
&lt;li&gt;192. Word Frequency&lt;/li&gt;
&lt;li&gt;194. Tranpose File&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Doing" scheme="http://TaoSama.github.io/categories/Doing/"/>
    
      <category term="Shell" scheme="http://TaoSama.github.io/categories/Doing/Shell/"/>
    
    
  </entry>
  
  <entry>
    <title>Notes, Effective Go</title>
    <link href="http://TaoSama.github.io/2017/08/04/effective-go-notes/"/>
    <id>http://TaoSama.github.io/2017/08/04/effective-go-notes/</id>
    <published>2017-08-04T09:52:10.000Z</published>
    <updated>2017-09-20T09:35:48.000Z</updated>
    
    <content type="html"><![CDATA[<p><del>Last Modified: 2017-08-23 11:46:10</del></p><p><del>Hard to say, I finished Go, for about 20 days (except busy for 1 week and training for 1 week).</del></p><p><del>Such a long time, 1 week to learn a new language, having known a little about concurrency.</del></p><p><del>Not so bad.</del></p><h3 id="Acknowledge"><a href="#Acknowledge" class="headerlink" title="Acknowledge"></a>Acknowledge</h3><p>Go is a new language. Although it borrows ideas from existing languages, it has unusual properties that make effective Go programs different in character from programs written in its relatives.<br>The notes below was written from the view of <strong>a CPP programmer</strong>.</p><ul><li>and a hello world<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">fmt.Println(<span class="string">"Hello, World"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><a id="more"></a><h3 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h3><h4 id="Basics"><a href="#Basics" class="headerlink" title="Basics"></a>Basics</h4><ul><li><p>function</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">swap</span><span class="params">(x, y <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">string</span>, <span class="keyword">string</span>)</span></span> &#123;</div><div class="line"><span class="keyword">return</span> y, x</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">split</span><span class="params">(sum <span class="keyword">int</span>)</span> <span class="params">(x, y <span class="keyword">int</span>)</span></span> &#123;</div><div class="line">x = sum * <span class="number">4</span> / <span class="number">9</span></div><div class="line">y = sum - x</div><div class="line"><span class="keyword">return</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>variable</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> c, python, java <span class="keyword">bool</span></div><div class="line"><span class="keyword">var</span> i, j <span class="keyword">int</span> = <span class="number">1</span>, <span class="number">2</span></div><div class="line"><span class="keyword">var</span> c, python, java = <span class="literal">true</span>, <span class="literal">false</span>, <span class="string">"no!"</span></div><div class="line"></div><div class="line">k := <span class="number">3</span> <span class="comment">// only can be used inside function</span></div></pre></td></tr></table></figure></li><li><p>basic types</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">bool</span></div><div class="line"></div><div class="line"><span class="keyword">string</span></div><div class="line"></div><div class="line"><span class="keyword">int</span>  <span class="keyword">int8</span>  <span class="keyword">int16</span>  <span class="keyword">int32</span>  <span class="keyword">int64</span></div><div class="line"><span class="keyword">uint</span> <span class="keyword">uint8</span> <span class="keyword">uint16</span> <span class="keyword">uint32</span> <span class="keyword">uint64</span> <span class="keyword">uintptr</span></div><div class="line"></div><div class="line"><span class="keyword">byte</span> <span class="comment">// alias for uint8</span></div><div class="line"></div><div class="line"><span class="keyword">rune</span> <span class="comment">// alias for int32</span></div><div class="line">     <span class="comment">// represents a Unicode code point</span></div><div class="line"></div><div class="line"><span class="keyword">float32</span> <span class="keyword">float64</span></div><div class="line"></div><div class="line"><span class="keyword">complex64</span> <span class="keyword">complex128</span></div><div class="line"></div><div class="line"><span class="comment">// The int, uint, and uintptr types are usually 32 bits wide on 32-bit systems and 64 bits wide on 64-bit systems.</span></div></pre></td></tr></table></figure></li><li><p>var blocks</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> (</div><div class="line">ToBe   <span class="keyword">bool</span>       = <span class="literal">false</span></div><div class="line">MaxInt <span class="keyword">uint64</span>     = <span class="number">1</span>&lt;&lt;<span class="number">64</span> - <span class="number">1</span></div><div class="line">z      <span class="keyword">complex128</span> = cmplx.Sqrt(<span class="number">-5</span> + <span class="number">12i</span>)</div><div class="line">)</div></pre></td></tr></table></figure></li><li><p>zero values<br>Variables declared without an explicit initial value are given their zero value.<br><code>0</code> for <code>numeric</code> types,<br><code>false</code> for the <code>boolean</code> type, and<br><code>&quot;&quot;</code> (the empty string) for <code>strings</code>.</p></li><li><p>type conversions</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> i <span class="keyword">int</span> = <span class="number">42</span></div><div class="line"><span class="keyword">var</span> f <span class="keyword">float64</span> = <span class="keyword">float64</span>(i)</div><div class="line"><span class="keyword">var</span> u <span class="keyword">uint</span> = <span class="keyword">uint</span>(f)</div><div class="line"><span class="comment">// more simply</span></div><div class="line">i := <span class="number">42</span></div><div class="line">f := <span class="keyword">float64</span>(i)</div><div class="line">u := <span class="keyword">uint</span>(f)</div></pre></td></tr></table></figure></li><li><p>type inference</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> i <span class="keyword">int</span></div><div class="line">j := i <span class="comment">// j is an int</span></div><div class="line"><span class="number">3</span></div><div class="line">i := <span class="number">42</span>           <span class="comment">// int</span></div><div class="line">f := <span class="number">3.142</span>        <span class="comment">// float64</span></div><div class="line">g := <span class="number">0.867</span> + <span class="number">0.5i</span> <span class="comment">// complex128</span></div></pre></td></tr></table></figure></li><li><p>constants</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> Pi = <span class="number">2.14</span></div><div class="line"><span class="keyword">const</span> Truth <span class="keyword">bool</span> = <span class="literal">true</span></div><div class="line"></div><div class="line"><span class="comment">// numeric constants are high-precision values.</span></div><div class="line"><span class="keyword">const</span> (</div><div class="line">Big = <span class="number">1</span> &lt;&lt; <span class="number">100</span></div><div class="line">Small = Big &gt;&gt; <span class="number">99</span></div><div class="line">)</div></pre></td></tr></table></figure></li></ul><h4 id="Flow-control"><a href="#Flow-control" class="headerlink" title="Flow control"></a>Flow control</h4><ul><li><p>for </p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</div><div class="line">    <span class="comment">// do something</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span> ; i &lt; <span class="number">10</span>; &#123;</div><div class="line">    <span class="comment">// do something</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// C's `while` is spelled `for` in Go</span></div><div class="line">i := <span class="number">0</span></div><div class="line"><span class="keyword">for</span> i &lt; <span class="number">10</span> &#123;</div><div class="line">    <span class="comment">// do something</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// loop forever</span></div><div class="line"><span class="keyword">for</span> &#123;</div><div class="line">    <span class="comment">// do something</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>if</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> i &lt; <span class="number">10</span> &#123;</div><div class="line">    <span class="comment">// do something</span></div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="comment">// do something</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> i &lt; <span class="number">10</span> &#123;</div><div class="line">    <span class="comment">// do something</span></div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> i &lt; <span class="number">100</span> &#123;</div><div class="line">    <span class="comment">// do something</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// if with a short statement</span></div><div class="line"><span class="comment">// variables declared by the statement are only in scope until the end of the if.</span></div><div class="line"><span class="keyword">if</span> v := <span class="number">1</span>; v &lt; <span class="number">10</span> &#123;</div><div class="line">    <span class="comment">// do something</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>exercise-loops-and-functions.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line"><span class="string">"math"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">Sqrt</span><span class="params">(x <span class="keyword">float64</span>)</span> <span class="title">float64</span></span> &#123;</div><div class="line"><span class="keyword">var</span> cur <span class="keyword">float64</span> = x</div><div class="line"><span class="keyword">for</span> nxt := <span class="number">0.0</span>; math.Abs(nxt - cur) &gt; <span class="number">1e-8</span>;  &#123;</div><div class="line">t := cur - (cur * cur - x) / (<span class="number">2</span> * cur)</div><div class="line">nxt = cur</div><div class="line">cur = t</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> cur</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">fmt.Println(Sqrt(<span class="number">2</span>))</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>switch</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// a case body breaks automatically, unless it ends with a 'fallthrough' statement.</span></div><div class="line">fmt.Print(<span class="string">"Go runs on "</span>)</div><div class="line"><span class="keyword">switch</span> os := runtime.GOOS; os &#123;</div><div class="line"><span class="keyword">case</span> <span class="string">"darwin"</span>:</div><div class="line">fmt.Println(<span class="string">"OS X."</span>)</div><div class="line"><span class="keyword">case</span> <span class="string">"linux"</span>:</div><div class="line">fmt.Println(<span class="string">"Linux."</span>)</div><div class="line"><span class="keyword">default</span>:</div><div class="line"><span class="comment">// freebsd, openbsd,</span></div><div class="line"><span class="comment">// plan9, windows...</span></div><div class="line">fmt.Printf(<span class="string">"%s."</span>, os)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// switch with no condition</span></div><div class="line">t := time.Now()</div><div class="line"><span class="keyword">switch</span> &#123;</div><div class="line"><span class="keyword">case</span> t.Hour() &lt; <span class="number">12</span>:</div><div class="line">fmt.Println(<span class="string">"Good morning!"</span>)</div><div class="line"><span class="keyword">case</span> t.Hour() &lt; <span class="number">17</span>:</div><div class="line">fmt.Println(<span class="string">"Good afternoon."</span>)</div><div class="line"><span class="keyword">case</span> t.Hour() &lt; <span class="number">24</span>:</div><div class="line">fmt.Println(<span class="string">"One more"</span>)</div><div class="line"><span class="keyword">fallthrough</span></div><div class="line"><span class="keyword">default</span>:</div><div class="line">fmt.Println(<span class="string">"Good evening."</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>defer</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// deferred function calls are pushed onto a stack. </span></div><div class="line"><span class="comment">// when a function returns, its deferred calls are executed in last-in-first-out order.</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">fmt.Println(<span class="string">"counting"</span>)</div><div class="line"></div><div class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">3</span>; i++ &#123;</div><div class="line"><span class="keyword">defer</span> fmt.Println(i)</div><div class="line">&#125;</div><div class="line"></div><div class="line">fmt.Println(<span class="string">"done"</span>)</div><div class="line">&#125;</div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">counting</span></div><div class="line"><span class="comment">done</span></div><div class="line"><span class="comment">2</span></div><div class="line"><span class="comment">1</span></div><div class="line"><span class="comment">0</span></div><div class="line"><span class="comment">*/</span></div></pre></td></tr></table></figure></li></ul><h4 id="More-types"><a href="#More-types" class="headerlink" title="More types"></a>More types</h4><ul><li><p>pointers</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// the type *T is a pointer to a T value.</span></div><div class="line"><span class="comment">// its zero value is nil.</span></div><div class="line"><span class="keyword">var</span> p *<span class="keyword">int</span></div><div class="line"></div><div class="line">i := <span class="number">42</span></div><div class="line">p = &amp;i</div><div class="line"></div><div class="line">fmt.Println(*p) <span class="comment">// read i through the pointer p</span></div><div class="line">*p = <span class="number">21</span>         <span class="comment">// set i through the pointer p</span></div></pre></td></tr></table></figure></li><li><p>struct</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">type Vertex <span class="class"><span class="keyword">struct</span> &#123;</span></div><div class="line">X <span class="keyword">int</span></div><div class="line">Y <span class="keyword">int</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">var v Vertex = Vertex&#123;<span class="number">2</span>, <span class="number">3</span>&#125;  <span class="comment">// v := VertexP&#123;2, 3&#125;</span></div><div class="line">p := &amp;v  <span class="comment">// pointer to structs</span></div><div class="line">v.x = <span class="number">1e9</span></div><div class="line">p.X = <span class="number">1e9</span> <span class="comment">// implicit conversion ???</span></div><div class="line"></div><div class="line"><span class="comment">// struct literals</span></div><div class="line">var (</div><div class="line">v1 = Vertex&#123;<span class="number">1</span>, <span class="number">2</span>&#125;  <span class="comment">// has type Vertex</span></div><div class="line">v2 = Vertex&#123;X: <span class="number">1</span>&#125;  <span class="comment">// Y:0 is implicit</span></div><div class="line">v3 = Vertex&#123;&#125;      <span class="comment">// X:0 and Y:0</span></div><div class="line">p  = &amp;Vertex&#123;<span class="number">1</span>, <span class="number">2</span>&#125; <span class="comment">// has type *Vertex</span></div><div class="line">)</div></pre></td></tr></table></figure></li><li><p>array</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> prime [<span class="number">6</span>]<span class="keyword">int</span> = [<span class="number">6</span>]<span class="keyword">int</span>&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>&#125;</div></pre></td></tr></table></figure></li><li><p>slices</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// slices are like references to arrays</span></div><div class="line"><span class="keyword">var</span> s []<span class="keyword">int</span> = primes[<span class="number">1</span>:<span class="number">4</span>]</div><div class="line"></div><div class="line"><span class="comment">// array literal</span></div><div class="line">[<span class="number">3</span>]<span class="keyword">bool</span>&#123;<span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">false</span>&#125;</div><div class="line"><span class="comment">// slice literal</span></div><div class="line">[]<span class="keyword">bool</span>&#123;<span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">false</span>&#125;</div><div class="line"></div><div class="line"><span class="comment">// slice defaults</span></div><div class="line"><span class="comment">// the default is zero for the low bound and the length of the slice for the high bound.</span></div><div class="line"><span class="comment">// these slice expressions are equivalent:</span></div><div class="line">a[<span class="number">0</span>:<span class="number">10</span>]</div><div class="line">a[:<span class="number">10</span>]</div><div class="line">a[<span class="number">0</span>:]</div><div class="line">a[:]</div><div class="line"></div><div class="line"><span class="comment">// nil slices</span></div><div class="line"><span class="comment">// A nil slice has a length and capacity of 0 and has no underlying array.</span></div><div class="line"><span class="keyword">var</span> s []<span class="keyword">int</span></div><div class="line">fmt.Println(s, <span class="built_in">len</span>(s), <span class="built_in">cap</span>(s))</div><div class="line"><span class="keyword">if</span> s == <span class="literal">nil</span> &#123;</div><div class="line">fmt.Println(<span class="string">"nil!"</span>)</div><div class="line">&#125;</div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">[] 0 0</span></div><div class="line"><span class="comment">nil!</span></div><div class="line"><span class="comment">*/</span></div></pre></td></tr></table></figure></li><li><p>slice length and capacity</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">s := []<span class="keyword">int</span>&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>&#125;</div><div class="line">printSlice(s)</div><div class="line"></div><div class="line"><span class="comment">// Slice the slice to give it zero length.</span></div><div class="line">s = s[:<span class="number">0</span>]</div><div class="line">printSlice(s)</div><div class="line"></div><div class="line"><span class="comment">// Extend its length.</span></div><div class="line">s = s[:<span class="number">4</span>]</div><div class="line">printSlice(s)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// Drop its first two values.</span></div><div class="line">s = s[<span class="number">2</span>:]</div><div class="line">printSlice(s)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">printSlice</span><span class="params">(s []<span class="keyword">int</span>)</span></span> &#123;</div><div class="line">fmt.Printf(<span class="string">"len=%d cap=%d %v\n"</span>, <span class="built_in">len</span>(s), <span class="built_in">cap</span>(s), s)</div><div class="line">&#125;</div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">len=6 cap=6 [2 3 5 7 11 13]</span></div><div class="line"><span class="comment">len=0 cap=6 []</span></div><div class="line"><span class="comment">len=4 cap=6 [2 3 5 7]</span></div><div class="line"><span class="comment">len=2 cap=4 [5 7]</span></div><div class="line"><span class="comment">*/</span></div></pre></td></tr></table></figure></li><li><p>creating a slice with make<br>slices can be created with the built-in make function;<br>this is how you create dynamically-sized arrays.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">b := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">0</span>, <span class="number">5</span>) <span class="comment">// len(b)=0, cap(b)=5</span></div></pre></td></tr></table></figure></li><li><p>slices of slices</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">board := [][]<span class="keyword">string</span>&#123;</div><div class="line">[]<span class="keyword">string</span>&#123;<span class="string">"_"</span>, <span class="string">"_"</span>, <span class="string">"_"</span>&#125;,</div><div class="line">[]<span class="keyword">string</span>&#123;<span class="string">"_"</span>, <span class="string">"_"</span>, <span class="string">"_"</span>&#125;,</div><div class="line">[]<span class="keyword">string</span>&#123;<span class="string">"_"</span>, <span class="string">"_"</span>, <span class="string">"_"</span>&#125;,</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(board); i++ &#123;</div><div class="line">fmt.Printf(<span class="string">"%s\n"</span>, strings.Join(board[i], <span class="string">" "</span>))</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>apending to a slice</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// func append(s []T, vs ...T) []T</span></div><div class="line"><span class="keyword">var</span> s []<span class="keyword">int</span></div><div class="line">s = <span class="built_in">append</span>(s, <span class="number">1</span>)</div><div class="line">s = <span class="built_in">append</span>(s, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</div><div class="line"></div><div class="line"><span class="comment">// append slice</span></div><div class="line">x := []<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</div><div class="line">y := []<span class="keyword">int</span>&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;</div><div class="line">x = <span class="built_in">append</span>(x, y...)</div></pre></td></tr></table></figure></li><li><p>range</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> pow = []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">16</span>, <span class="number">32</span>, <span class="number">64</span>, <span class="number">128</span>&#125;</div><div class="line"><span class="keyword">for</span> i, v := <span class="keyword">range</span> pow &#123;</div><div class="line">fmt.Printf(<span class="string">"2**%d = %d\n"</span>, i, v)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// skip the index or value</span></div><div class="line">pow := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">10</span>)</div><div class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> pow &#123;</div><div class="line">pow[i] = <span class="number">1</span> &lt;&lt; <span class="keyword">uint</span>(i) <span class="comment">// == 2**i</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span> _, value := <span class="keyword">range</span> pow &#123;</div><div class="line">fmt.Printf(<span class="string">"%d\n"</span>, value)</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>exercise-slices.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"golang.org/x/tour/pic"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">Pic</span><span class="params">(dx, dy <span class="keyword">int</span>)</span> [][]<span class="title">uint8</span></span> &#123;</div><div class="line"><span class="keyword">var</span> pic [][]<span class="keyword">uint8</span> = <span class="built_in">make</span>([][]<span class="keyword">uint8</span>, dy)</div><div class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; dy; i++ &#123;</div><div class="line">pic[i] = <span class="built_in">make</span>([]<span class="keyword">uint8</span>, dx)</div><div class="line"><span class="keyword">for</span> j := <span class="number">0</span>; j &lt; dx; j++ &#123;</div><div class="line">pic[i][j] = <span class="keyword">uint8</span>(i ^ j);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> pic</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">pic.Show(Pic)</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>maps<br>The zero value of a map is nil. A nil map has no keys, nor can keys be added.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> Vertex <span class="keyword">struct</span> &#123;</div><div class="line">Lat, Long <span class="keyword">float64</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> m <span class="keyword">map</span>[<span class="keyword">string</span>]Vertex</div><div class="line">m = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]Vertex)</div><div class="line">m[<span class="string">"Bell Labs"</span>] = Vertex&#123;</div><div class="line"><span class="number">40.68433</span>, <span class="number">-74.39967</span>,</div><div class="line">&#125;</div><div class="line">fmt.Println(m[<span class="string">"Bell Labs"</span>])</div><div class="line"></div><div class="line"><span class="comment">// map literals</span></div><div class="line"><span class="keyword">var</span> m = <span class="keyword">map</span>[<span class="keyword">string</span>]Vertex&#123;</div><div class="line"><span class="string">"Bell Labs"</span>: Vertex&#123;</div><div class="line"><span class="number">40.68433</span>, <span class="number">-74.39967</span>,</div><div class="line">&#125;,</div><div class="line"><span class="string">"Google"</span>: Vertex&#123;</div><div class="line"><span class="number">37.42202</span>, <span class="number">-122.08408</span>,</div><div class="line">&#125;,</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// If the top-level type is just a type name, you can omit it from the elements of the literal.</span></div><div class="line"><span class="keyword">var</span> m = <span class="keyword">map</span>[<span class="keyword">string</span>]Vertex&#123;</div><div class="line"><span class="string">"Bell Labs"</span>: &#123;<span class="number">40.68433</span>, <span class="number">-74.39967</span>&#125;,</div><div class="line"><span class="string">"Google"</span>:    &#123;<span class="number">37.42202</span>, <span class="number">-122.08408</span>&#125;,</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// mutating maps</span></div><div class="line"><span class="comment">// insert or update an element in map m:</span></div><div class="line">m[key] = elem</div><div class="line"><span class="comment">// retrieve an element:</span></div><div class="line">elem = m[key]</div><div class="line"><span class="comment">// delete an element:</span></div><div class="line"><span class="built_in">delete</span>(m, key)</div><div class="line"><span class="comment">// test that a key is present with a two-value assignment:</span></div><div class="line">elem, ok = m[key]</div></pre></td></tr></table></figure></li><li><p>exercise-maps.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"golang.org/x/tour/wc"</span>;</div><div class="line"><span class="string">"strings"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">WordCount</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">map</span>[<span class="title">string</span>]<span class="title">int</span></span> &#123;</div><div class="line">word := strings.Split(s, <span class="string">" "</span>)</div><div class="line"><span class="keyword">var</span> mp <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span> = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>)</div><div class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(word); i++ &#123;</div><div class="line">mp[word[i]] += <span class="number">1</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> mp</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">wc.Test(WordCount)</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>funtion values</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">compute</span><span class="params">(fn <span class="keyword">func</span>(<span class="keyword">float64</span>, <span class="keyword">float64</span>)</span> <span class="title">float64</span>) <span class="title">float64</span></span> &#123;</div><div class="line"><span class="keyword">return</span> fn(<span class="number">3</span>, <span class="number">4</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">hypot := <span class="function"><span class="keyword">func</span><span class="params">(x, y <span class="keyword">float64</span>)</span> <span class="title">float64</span></span> &#123;</div><div class="line"><span class="keyword">return</span> math.Sqrt(x*x + y*y)</div><div class="line">&#125;</div><div class="line">fmt.Println(hypot(<span class="number">5</span>, <span class="number">12</span>))</div><div class="line"></div><div class="line">fmt.Println(compute(hypot))</div><div class="line">fmt.Println(compute(math.Pow))</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>closure<br>a closure is a function value that references variables from outside its body.<br>the function may access and assign to the referenced variables; in this sense the function is “bound” to the variables.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// each closure is bound to its own sum variable.</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">adder</span><span class="params">()</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</div><div class="line">sum := <span class="number">0</span></div><div class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(x <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</div><div class="line">sum += x</div><div class="line"><span class="keyword">return</span> sum</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">pos, neg := adder(), adder()</div><div class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">3</span>; i++ &#123;</div><div class="line">fmt.Println(</div><div class="line">pos(i),</div><div class="line">neg(<span class="number">-2</span>*i),</div><div class="line">)</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">0 0</span></div><div class="line"><span class="comment">1 -2</span></div><div class="line"><span class="comment">3 -6</span></div><div class="line"><span class="comment">*/</span></div></pre></td></tr></table></figure></li><li><p>function-closures.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="comment">// fibonacci is a function that returns</span></div><div class="line"><span class="comment">// a function that returns an int.</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">fibonacci</span><span class="params">()</span> <span class="title">func</span><span class="params">()</span> <span class="title">int</span></span> &#123;</div><div class="line"><span class="keyword">var</span> f0, f1 <span class="keyword">int</span> = <span class="number">0</span>, <span class="number">1</span></div><div class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">int</span></span> &#123;</div><div class="line">ret := f0</div><div class="line">f0, f1 = f1, f0 + f1</div><div class="line"><span class="keyword">return</span> ret</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">f := fibonacci()</div><div class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</div><div class="line">fmt.Println(f())</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h3 id="Methods-and-interfaces"><a href="#Methods-and-interfaces" class="headerlink" title="Methods and interfaces"></a>Methods and interfaces</h3><h4 id="methods"><a href="#methods" class="headerlink" title="methods"></a>methods</h4><ul><li><strong>go does not have classes</strong>. However, you can define methods on types.</li><li>a method is a <strong>function</strong> with a <strong>special receiver argument</strong>.</li><li>the receiver appears in its own argument list <strong>between the func keyword and the method name</strong></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> Vertex <span class="keyword">struct</span> &#123;</div><div class="line">X, Y <span class="keyword">float64</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v Vertex)</span> <span class="title">Abs</span><span class="params">()</span> <span class="title">float64</span></span> &#123;</div><div class="line"><span class="keyword">return</span> math.Sqrt(v.X*v.X + v.Y*v.Y)</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li><p>declare a method on non-struct types</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> Vertex <span class="keyword">struct</span> &#123;</div><div class="line">X, Y <span class="keyword">float64</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v Vertex)</span> <span class="title">Abs</span><span class="params">()</span> <span class="title">float64</span></span> &#123;</div><div class="line"><span class="keyword">return</span> math.Sqrt(v.X*v.X + v.Y*v.Y)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v *Vertex)</span> <span class="title">Scale</span><span class="params">(f <span class="keyword">float64</span>)</span></span> &#123;</div><div class="line">v.X = v.X * f</div><div class="line">v.Y = v.Y * f</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">v := Vertex&#123;<span class="number">3</span>, <span class="number">4</span>&#125;</div><div class="line">v.Scale(<span class="number">10</span>)</div><div class="line">fmt.Println(v.Abs())</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>In general, all methods on a given type should have either value or pointer receivers, but not a mixture of both.</p></li></ul><h4 id="interfaces"><a href="#interfaces" class="headerlink" title="interfaces"></a>interfaces</h4><p>an interface type is defined as a set of method signatures.<br>a value of interface type can hold any value that implements those methods.</p><ul><li><p>interfaces are implemented implicitly<br>implicit interfaces <strong>decouple</strong> the definition of an interface from its implementation, which could then appear in any package without prearrangement.</p></li><li><p>interface values<br>an interface value holds a value of a specific underlying concrete type.<br>it can be thought of as a tuple of a value and a concrete type: <code>(value, type)</code></p></li><li><p>interface values can be with nil underlying values.</p></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> I <span class="keyword">interface</span> &#123;</div><div class="line">M()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">type</span> T <span class="keyword">struct</span> &#123;</div><div class="line">S <span class="keyword">string</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// This method means type T implements the interface I,</span></div><div class="line"><span class="comment">// but we don't need to explicitly declare that it does so.</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t T)</span> <span class="title">M</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">if</span> t == <span class="literal">nil</span> &#123;  </div><div class="line">fmt.Println(<span class="string">"&lt;nil&gt;"</span>)</div><div class="line"><span class="keyword">return</span></div><div class="line">&#125;</div><div class="line">fmt.Println(t.S)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">describe</span><span class="params">(i I)</span></span> &#123;</div><div class="line">fmt.Printf(<span class="string">"(%v, %T)\n"</span>, i, i)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="keyword">var</span> i I</div><div class="line">describe(i)   <span class="comment">// nil interface value -&gt; run-time error</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> t *T</div><div class="line">i = t</div><div class="line">describe(i)  <span class="comment">// nil receiver -&gt; OK</span></div><div class="line">i.M()</div><div class="line"></div><div class="line">i = &amp;T&#123;<span class="string">"hello"</span>&#125;</div><div class="line">describe(i)</div><div class="line">i.M()</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li><p>empty interface<br>an empty interface may hold values of any type. (every type implements at least zero methods.)<br>empty interfaces are used by code that handles values of unknown type.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> i <span class="keyword">interface</span>&#123;&#125;</div><div class="line">i = <span class="number">42</span></div><div class="line">i = <span class="string">"hello"</span></div></pre></td></tr></table></figure></li><li><p>type assertions</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// if i does not hold a type T, the statement will trigger a panic.</span></div><div class="line">t := i.(T)</div><div class="line"></div><div class="line"><span class="comment">// if i does not hold a type T, ok will be false </span></div><div class="line"><span class="comment">// and t will be the zero value of type T, and no panic occurs.</span></div><div class="line">t, ok := i.(T)</div></pre></td></tr></table></figure></li><li><p>type switches</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">do</span><span class="params">(i <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</div><div class="line"><span class="keyword">switch</span> v := i.(<span class="keyword">type</span>) &#123;</div><div class="line"><span class="keyword">case</span> <span class="keyword">int</span>:</div><div class="line">fmt.Printf(<span class="string">"Twice %v is %v\n"</span>, v, v*<span class="number">2</span>)</div><div class="line"><span class="keyword">case</span> <span class="keyword">string</span>:</div><div class="line">fmt.Printf(<span class="string">"%q is %v bytes long\n"</span>, v, <span class="built_in">len</span>(v))</div><div class="line"><span class="keyword">default</span>:</div><div class="line">fmt.Printf(<span class="string">"I don't know about type %T!\n"</span>, v)</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">do(<span class="number">21</span>)</div><div class="line">do(<span class="string">"hello"</span>)</div><div class="line">do(<span class="literal">true</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>Stringers and error</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// a Stringer is a type that can describe itself as a string.</span></div><div class="line"><span class="keyword">type</span> Stringer <span class="keyword">interface</span> &#123;</div><div class="line">    String() <span class="keyword">string</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// the error type is a built-in interface similar to fmt.Stringer</span></div><div class="line"><span class="keyword">type</span> error <span class="keyword">interface</span> &#123;</div><div class="line">    Error() <span class="keyword">string</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// for example, fmt.Println will call the two interfaces</span></div></pre></td></tr></table></figure></li><li><p>exercise-stringer.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="keyword">type</span> IPAddr [<span class="number">4</span>]<span class="keyword">byte</span></div><div class="line"></div><div class="line"><span class="comment">// <span class="doctag">TODO:</span> Add a "String() string" method to IPAddr.</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *IPAddr)</span> <span class="title">String</span><span class="params">()</span> <span class="title">string</span></span> &#123;</div><div class="line"><span class="keyword">return</span> fmt.Sprintf(<span class="string">"%v.%v.%v.%v"</span>, t[<span class="number">0</span>], t[<span class="number">1</span>], t[<span class="number">2</span>], t[<span class="number">3</span>])</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">hosts := <span class="keyword">map</span>[<span class="keyword">string</span>]IPAddr&#123;</div><div class="line"><span class="string">"loopback"</span>:  &#123;<span class="number">127</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>&#125;,</div><div class="line"><span class="string">"googleDNS"</span>: &#123;<span class="number">8</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">8</span>&#125;,</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span> name, ip := <span class="keyword">range</span> hosts &#123;</div><div class="line">fmt.Println(ip.String())</div><div class="line">fmt.Printf(<span class="string">"%v: %v\n"</span>, name, ip)</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>exercise-errors.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">type</span> ErrNegativeSqrt <span class="keyword">float64</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e ErrNegativeSqrt)</span> <span class="title">Error</span><span class="params">()</span> <span class="title">string</span></span> &#123;</div><div class="line"><span class="keyword">return</span> fmt.Sprintf(<span class="string">"cannot Sqrt negative number: %v"</span>, <span class="keyword">float64</span>(e))</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">Sqrt</span><span class="params">(x <span class="keyword">float64</span>)</span> <span class="params">(<span class="keyword">float64</span>, error)</span></span> &#123;</div><div class="line"><span class="keyword">if</span> x &lt; <span class="number">0</span> &#123;</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>, ErrNegativeSqrt(x)</div><div class="line">&#125;</div><div class="line">z := <span class="number">1.0</span></div><div class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</div><div class="line">z = z - (z * z - x) / (<span class="number">2</span> * z), y</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> z, <span class="literal">nil</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">fmt.Println(Sqrt(<span class="number">2</span>))</div><div class="line">fmt.Println(Sqrt(<span class="number">-2</span>))</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>readers<br>interface <code>io.Reader::Read</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(T)</span> <span class="title">Read</span><span class="params">(b []<span class="keyword">byte</span>)</span> <span class="params">(n <span class="keyword">int</span>, err error)</span></span></div></pre></td></tr></table></figure></li><li><p>exercise-reader.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"golang.org/x/tour/reader"</span></div><div class="line"></div><div class="line"><span class="keyword">type</span> MyReader <span class="keyword">struct</span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="comment">// <span class="doctag">TODO:</span> Add a Read([]byte) (int, error) method to MyReader.</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t MyReader)</span> <span class="title">Read</span><span class="params">(b []<span class="keyword">byte</span>)</span> <span class="params">(<span class="keyword">int</span>, error)</span></span> &#123;</div><div class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(b); i++ &#123;</div><div class="line">b[i] = <span class="string">'A'</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="built_in">len</span>(b), <span class="literal">nil</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">reader.Validate(MyReader&#123;&#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>exercise-rot-reader.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"io"</span></div><div class="line"><span class="string">"os"</span></div><div class="line"><span class="string">"strings"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">type</span> rot13Reader <span class="keyword">struct</span> &#123;</div><div class="line">r io.Reader</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r rot13Reader)</span> <span class="title">Read</span><span class="params">(b []<span class="keyword">byte</span>)</span> <span class="params">(n <span class="keyword">int</span>, err error)</span></span> &#123;</div><div class="line">insideR := r.r</div><div class="line"><span class="keyword">if</span> n, err = insideR.Read(b); err != <span class="literal">nil</span> &#123;</div><div class="line"><span class="keyword">return</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</div><div class="line"><span class="keyword">if</span> b[i] &gt;= <span class="string">'a'</span> &amp;&amp; b[i] &lt;= <span class="string">'z'</span> &#123;</div><div class="line">b[i] = (b[i] - <span class="string">'a'</span> + <span class="number">13</span>) % <span class="number">26</span> + <span class="string">'a'</span></div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> b[i] &gt;= <span class="string">'A'</span> &amp;&amp; b[i] &lt;= <span class="string">'Z'</span> &#123;</div><div class="line">b[i] = (b[i] - <span class="string">'A'</span> + <span class="number">13</span>) % <span class="number">26</span> + <span class="string">'A'</span></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">s := strings.NewReader(<span class="string">"Lbh penpxrq gur pbqr!"</span>)</div><div class="line">r := rot13Reader&#123;s&#125;</div><div class="line">io.Copy(os.Stdout, &amp;r)</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>exercise-images.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"golang.org/x/tour/pic"</span></div><div class="line"><span class="string">"image"</span></div><div class="line"><span class="string">"image/color"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">type Image interface &#123;</span></div><div class="line"><span class="comment">    ColorModel() color.Model</span></div><div class="line"><span class="comment">    Bounds() Rectangle</span></div><div class="line"><span class="comment">    At(x, y int) color.Color</span></div><div class="line"><span class="comment">&#125;</span></div><div class="line"><span class="comment">*/</span></div><div class="line"></div><div class="line"><span class="keyword">type</span> Image <span class="keyword">struct</span>&#123;</div><div class="line">Width, Height <span class="keyword">int</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(img Image)</span> <span class="title">ColorModel</span><span class="params">()</span> <span class="title">color</span>.<span class="title">Model</span></span> &#123;</div><div class="line"><span class="keyword">return</span> color.RGBAModel</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(img Image)</span> <span class="title">Bounds</span><span class="params">()</span> <span class="title">image</span>.<span class="title">Rectangle</span></span> &#123;</div><div class="line"><span class="keyword">return</span> image.Rect(<span class="number">0</span>, <span class="number">0</span>, img.Width, img.Height)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(img Image)</span> <span class="title">At</span><span class="params">(x, y <span class="keyword">int</span>)</span> <span class="title">color</span>.<span class="title">Color</span></span> &#123;</div><div class="line"><span class="keyword">return</span> color.RGBA&#123;<span class="keyword">uint8</span>(x * y), <span class="keyword">uint8</span>((x + y) / <span class="number">2</span>), <span class="number">100</span>, <span class="number">255</span>&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">m := Image&#123;<span class="number">100</span>, <span class="number">100</span>&#125;</div><div class="line">pic.ShowImage(m)</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h3 id="Concurrency"><a href="#Concurrency" class="headerlink" title="Concurrency"></a>Concurrency</h3><h4 id="goroutines"><a href="#goroutines" class="headerlink" title="goroutines"></a>goroutines</h4><p>A goroutine is a lightweight thread managed by the Go runtime.<br><code>go f(x, y, z)</code> starts a new goroutine running <code>f(x, y, z)</code>.<br>The <strong>evaluation</strong> of <code>f, x, y, and z</code> happens in the <strong>current goroutine</strong> and the <strong>execution</strong> of <code>f</code> happens in the <strong>new goroutine</strong>.<br>Goroutines run in the <strong>same address space</strong>, so access to shared memory must be synchronized. </p><h4 id="channels"><a href="#channels" class="headerlink" title="channels"></a>channels</h4><p>Channels are a typed conduit(pipe) through which you can send and receive values with the channel operator, <code>&lt;-</code>.<br>By default, <strong>sends and receives block until the other side is ready</strong>. This allows goroutines to <strong>synchronize without explicit locks or condition variables</strong>.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// (The data flows in the direction of the arrow.)</span></div><div class="line"><span class="comment">// Like maps and slices, channels must be created before use:</span></div><div class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</div><div class="line">ch &lt;- v    <span class="comment">// Send v to channel ch.</span></div><div class="line">v := &lt;-ch  <span class="comment">// Receive from ch, and</span></div><div class="line">           <span class="comment">// assign value to v.</span></div></pre></td></tr></table></figure></p><h4 id="buffered-Channels"><a href="#buffered-Channels" class="headerlink" title="buffered Channels"></a>buffered Channels</h4><p>Channels can be buffered. Provide the buffer length as the second argument to make to initialize a buffered channel:<br><code>ch := make(chan int, 100)</code><br><strong>Sends</strong> to a buffered channel <strong>block</strong> only when the buffer is <strong>full</strong>. <strong>Receives</strong> <strong>block</strong> when the buffer is <strong>empty</strong>.</p><h4 id="range-and-close"><a href="#range-and-close" class="headerlink" title="range and close"></a>range and close</h4><p><code>v, ok := &lt;-ch</code><br>ok is false if there are no more values to receive and the channel is closed.<br>The loop <code>for i := range c</code> <strong>receives values</strong> from the channel repeatedly <strong>until</strong> it is <strong>closed</strong>.</p><p><strong>Note</strong>: Only the sender should close a channel, never the receiver. Sending on a closed channel will cause a panic.</p><p><strong>Another note</strong>: Channels aren’t like files; you don’t usually need to close them.<br><strong>Closing</strong> is only necessary when the receiver must be told there are <strong>no more values coming</strong>, such as to <strong>terminate</strong> a <code>range</code> <strong>loop</strong>.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">fibonacci</span><span class="params">(n <span class="keyword">int</span>, c <span class="keyword">chan</span> <span class="keyword">int</span>)</span></span> &#123;</div><div class="line">x, y := <span class="number">0</span>, <span class="number">1</span></div><div class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</div><div class="line">c &lt;- x</div><div class="line">x, y = y, x+y</div><div class="line">&#125;</div><div class="line"><span class="built_in">close</span>(c)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">10</span>)</div><div class="line"><span class="keyword">go</span> fibonacci(<span class="built_in">cap</span>(c), c)</div><div class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> c &#123;</div><div class="line">fmt.Println(i)</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="select"><a href="#select" class="headerlink" title="select"></a>select</h4><p>The <code>select</code> statement lets a goroutine wait on multiple communication operations.<br>A <code>select</code> blocks until one of its cases can run, then it executes that case.<br><strong>It chooses one at random if multiple are ready</strong>.</p><p>Use a <code>default</code> case to try a send or receive without blocking:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">fibonacci</span><span class="params">(c, quit <span class="keyword">chan</span> <span class="keyword">int</span>)</span></span> &#123;</div><div class="line">x, y := <span class="number">0</span>, <span class="number">1</span></div><div class="line"><span class="keyword">for</span> &#123;</div><div class="line"><span class="keyword">select</span> &#123;</div><div class="line"><span class="keyword">case</span> c &lt;- x:</div><div class="line">x, y = y, x+y</div><div class="line"><span class="keyword">case</span> &lt;-quit:</div><div class="line">fmt.Println(<span class="string">"quit"</span>)</div><div class="line"><span class="keyword">return</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">default</span>:</div><div class="line">            <span class="comment">// receiving from c would block</span></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</div><div class="line">quit := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</div><div class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</div><div class="line">fmt.Println(&lt;-c)</div><div class="line">&#125;</div><div class="line">quit &lt;- <span class="number">0</span></div><div class="line">&#125;()</div><div class="line">fibonacci(c, quit)</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="sync-Mutex"><a href="#sync-Mutex" class="headerlink" title="sync.Mutex"></a>sync.Mutex</h4><p>We’ve seen how <strong>channels</strong> are great for <strong>communication among goroutines</strong>.<br>But what if we don’t need communication? What if we just want to make sure only one goroutine can access a variable at a time to avoid conflicts?<br>This concept is called <strong>mutual exclusion</strong>, and the conventional name for the data structure that provides it is <strong>mutex</strong>.<br>Go’s standard library provides mutual exclusion with <code>sync.Mutex</code> and its two methods:<br><code>Lock, Unlock</code><br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> SafeCounter <span class="keyword">struct</span> &#123;</div><div class="line">v   <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span></div><div class="line">mux sync.Mutex</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Inc increments the counter for the given key.</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *SafeCounter)</span> <span class="title">Inc</span><span class="params">(key <span class="keyword">string</span>)</span></span> &#123;</div><div class="line">c.mux.Lock()</div><div class="line"><span class="comment">// Lock so only one goroutine at a time can access the map c.v.</span></div><div class="line">c.v[key]++</div><div class="line">c.mux.Unlock()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Value returns the current value of the counter for the given key.</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *SafeCounter)</span> <span class="title">Value</span><span class="params">(key <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</div><div class="line">c.mux.Lock()</div><div class="line"><span class="comment">// Lock so only one goroutine at a time can access the map c.v.</span></div><div class="line"><span class="keyword">defer</span> c.mux.Unlock()</div><div class="line"><span class="keyword">return</span> c.v[key]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><ul><li><p>exercise-equivalent-binary-trees.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"golang.org/x/tour/tree"</span></div><div class="line"></div><div class="line"><span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="comment">// Walk walks the tree t sending all values</span></div><div class="line"><span class="comment">// from the tree to the channel ch.</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">Walk</span><span class="params">(t *tree.Tree, ch <span class="keyword">chan</span> <span class="keyword">int</span>)</span></span> &#123;</div><div class="line"><span class="keyword">defer</span> <span class="built_in">close</span>(ch)</div><div class="line"><span class="keyword">var</span> walker <span class="function"><span class="keyword">func</span><span class="params">(t *tree.Tree)</span></span></div><div class="line"><span class="function"><span class="title">walker</span> = <span class="title">func</span><span class="params">(t *tree.Tree)</span></span> &#123;</div><div class="line"><span class="keyword">if</span> t == <span class="literal">nil</span> &#123;</div><div class="line"><span class="keyword">return</span></div><div class="line">&#125;</div><div class="line">walker(t.Left)</div><div class="line">ch &lt;- t.Value</div><div class="line">walker(t.Right)</div><div class="line"></div><div class="line">&#125;</div><div class="line">walker(t)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Same determines whether the trees</span></div><div class="line"><span class="comment">// t1 and t2 contain the same values.</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">Same</span><span class="params">(t1, t2 *tree.Tree)</span> <span class="title">bool</span></span> &#123;</div><div class="line">ch1 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</div><div class="line">ch2 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</div><div class="line"><span class="keyword">go</span> Walk(t1, ch1)</div><div class="line"><span class="keyword">go</span> Walk(t2, ch2)</div><div class="line"></div><div class="line"><span class="keyword">for</span> x1 := <span class="keyword">range</span> ch1 &#123;</div><div class="line">x2, ok2 := &lt;-ch2</div><div class="line"><span class="keyword">if</span> !ok2 || x1 != x2 &#123;</div><div class="line"><span class="keyword">return</span> <span class="literal">false</span></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="literal">true</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">fmt.Println(Same(tree.New(<span class="number">1</span>), tree.New(<span class="number">1</span>)))</div><div class="line">fmt.Println(Same(tree.New(<span class="number">1</span>), tree.New(<span class="number">2</span>)))</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>exercise-web-crawler.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line"><span class="string">"sync"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">type</span> Fetcher <span class="keyword">interface</span> &#123;</div><div class="line"><span class="comment">// Fetch returns the body of URL and</span></div><div class="line"><span class="comment">// a slice of URLs found on that page.</span></div><div class="line">Fetch(url <span class="keyword">string</span>) (body <span class="keyword">string</span>, urls []<span class="keyword">string</span>, err error)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">type</span> Cache <span class="keyword">struct</span> &#123;</div><div class="line">visited <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">bool</span></div><div class="line">mtx sync.Mutex</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">type</span> Response <span class="keyword">struct</span> &#123;</div><div class="line">url <span class="keyword">string</span></div><div class="line">body <span class="keyword">string</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Crawl uses fetcher to recursively crawl</span></div><div class="line"><span class="comment">// pages starting with url, to a maximum of depth.</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">Crawl</span><span class="params">(url <span class="keyword">string</span>, depth <span class="keyword">int</span>, fetcher Fetcher, result <span class="keyword">chan</span> Response, cache Cache)</span></span> &#123;</div><div class="line"><span class="comment">// <span class="doctag">TODO:</span> Fetch URLs in parallel.</span></div><div class="line"><span class="comment">// <span class="doctag">TODO:</span> Don't fetch the same URL twice.</span></div><div class="line"><span class="comment">// This implementation doesn't do either:</span></div><div class="line"><span class="keyword">defer</span> <span class="built_in">close</span>(result)</div><div class="line"><span class="keyword">if</span> depth &lt;= <span class="number">0</span> &#123;</div><div class="line"><span class="keyword">return</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">cache.mtx.Lock()</div><div class="line"><span class="keyword">if</span> cache.visited[url] &#123;</div><div class="line">cache.mtx.Unlock()</div><div class="line"><span class="keyword">return</span></div><div class="line">&#125;</div><div class="line">cache.visited[url] = <span class="literal">true</span></div><div class="line">cache.mtx.Unlock()</div><div class="line"></div><div class="line">body, urls, err := fetcher.Fetch(url)</div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">fmt.Println(err)</div><div class="line"><span class="keyword">return</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">result &lt;- Response&#123;url, body&#125;</div><div class="line"><span class="comment">// fmt.Printf("found: %s %q\n", url, body)</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> _, u := <span class="keyword">range</span> urls &#123;</div><div class="line">tempResult := <span class="built_in">make</span>(<span class="keyword">chan</span> Response)</div><div class="line"><span class="keyword">go</span> Crawl(u, depth<span class="number">-1</span>, fetcher, tempResult, cache)</div><div class="line"><span class="keyword">for</span> re := <span class="keyword">range</span> tempResult &#123;</div><div class="line">result &lt;- re</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">result := <span class="built_in">make</span>(<span class="keyword">chan</span> Response)</div><div class="line"><span class="keyword">go</span> Crawl(<span class="string">"http://golang.org/"</span>, <span class="number">4</span>, fetcher, result, Cache&#123;visited:<span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">bool</span>)&#125;)</div><div class="line"></div><div class="line"><span class="keyword">for</span> re := <span class="keyword">range</span> result &#123;</div><div class="line">fmt.Printf(<span class="string">"found: %s %q\n"</span>, re.url, re.body)</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// fakeFetcher is Fetcher that returns canned results.</span></div><div class="line"><span class="keyword">type</span> fakeFetcher <span class="keyword">map</span>[<span class="keyword">string</span>]*fakeResult</div><div class="line"></div><div class="line"><span class="keyword">type</span> fakeResult <span class="keyword">struct</span> &#123;</div><div class="line">body <span class="keyword">string</span></div><div class="line">urls []<span class="keyword">string</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f fakeFetcher)</span> <span class="title">Fetch</span><span class="params">(url <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">string</span>, []<span class="keyword">string</span>, error)</span></span> &#123;</div><div class="line"><span class="keyword">if</span> res, ok := f[url]; ok &#123;</div><div class="line"><span class="keyword">return</span> res.body, res.urls, <span class="literal">nil</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="string">""</span>, <span class="literal">nil</span>, fmt.Errorf(<span class="string">"not found: %s"</span>, url)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// fetcher is a populated fakeFetcher.</span></div><div class="line"><span class="keyword">var</span> fetcher = fakeFetcher&#123;</div><div class="line"><span class="string">"http://golang.org/"</span>: &amp;fakeResult&#123;</div><div class="line"><span class="string">"The Go Programming Language"</span>,</div><div class="line">[]<span class="keyword">string</span>&#123;</div><div class="line"><span class="string">"http://golang.org/pkg/"</span>,</div><div class="line"><span class="string">"http://golang.org/cmd/"</span>,</div><div class="line">&#125;,</div><div class="line">&#125;,</div><div class="line"><span class="string">"http://golang.org/pkg/"</span>: &amp;fakeResult&#123;</div><div class="line"><span class="string">"Packages"</span>,</div><div class="line">[]<span class="keyword">string</span>&#123;</div><div class="line"><span class="string">"http://golang.org/"</span>,</div><div class="line"><span class="string">"http://golang.org/cmd/"</span>,</div><div class="line"><span class="string">"http://golang.org/pkg/fmt/"</span>,</div><div class="line"><span class="string">"http://golang.org/pkg/os/"</span>,</div><div class="line">&#125;,</div><div class="line">&#125;,</div><div class="line"><span class="string">"http://golang.org/pkg/fmt/"</span>: &amp;fakeResult&#123;</div><div class="line"><span class="string">"Package fmt"</span>,</div><div class="line">[]<span class="keyword">string</span>&#123;</div><div class="line"><span class="string">"http://golang.org/"</span>,</div><div class="line"><span class="string">"http://golang.org/pkg/"</span>,</div><div class="line">&#125;,</div><div class="line">&#125;,</div><div class="line"><span class="string">"http://golang.org/pkg/os/"</span>: &amp;fakeResult&#123;</div><div class="line"><span class="string">"Package os"</span>,</div><div class="line">[]<span class="keyword">string</span>&#123;</div><div class="line"><span class="string">"http://golang.org/"</span>,</div><div class="line"><span class="string">"http://golang.org/pkg/"</span>,</div><div class="line">&#125;,</div><div class="line">&#125;,</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h3 id="Language-specification"><a href="#Language-specification" class="headerlink" title="Language specification"></a>Language specification</h3><h4 id="Formatting"><a href="#Formatting" class="headerlink" title="Formatting"></a>Formatting</h4><ul><li>gofmt ?</li><li>Indentation<br>We use tabs for indentation and gofmt emits them by default. Use spaces only if you must.</li><li>Line length<br>Go has no line length limit. Don’t worry about overflowing a punched card. If a line feels too long, wrap it and indent with an extra tab.</li><li>Parentheses<br>Go needs fewer parentheses than C and Java: control structures (if, for, switch) do not have parentheses in their syntax. Also, the operator precedence hierarchy is shorter and clearer, so <code>x&lt;&lt;8 + y&lt;&lt;16</code> means what the spacing implies, unlike in the other languages.</li></ul><h4 id="Commentary"><a href="#Commentary" class="headerlink" title="Commentary"></a>Commentary</h4><ul><li>Go provides C-style <code>/* */</code> block comments and C++-style <code>//</code> line comments. </li><li>Line comments are the norm; </li><li><p>Block comments appear mostly as package comments, but are useful within an expression or to disable large swaths of code.</p></li><li><p><strong>Every exported (capitalized) name in a program should have a doc comment</strong>.</p></li><li>Doc comments work best as complete sentences, which allow a wide variety of automated presentations. </li><li>The first sentence should be a <strong>one-sentence summary</strong> that <strong>starts with the name being declared</strong>.</li></ul><h4 id="Names"><a href="#Names" class="headerlink" title="Names"></a>Names</h4><ul><li>Package names<br>By convention, packages are given lower case, single-word names; there should be no need for underscores or mixedCaps. For example, the package in <code>src/encoding/base64</code> is imported as <code>&quot;encoding/base64&quot;</code> but has name base64, not <code>encoding_base64</code> and not <code>encodingBase64</code>.</li><li>Clear and Concise Name<br>ring.New<br>once.Do</li><li><p>Getters and Setters<br>If you have a field called owner (lower case, unexported), the getter method should be called Owner (upper case, exported), not GetOwner.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">owner := obj.Owner()</div><div class="line"><span class="keyword">if</span> owner != user &#123;</div><div class="line">    obj.SetOwner(user)</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>Interface names<br>By convention, one-method interfaces are named by the method name plus an -er suffix or similar modification to construct an agent noun: Reader, Writer, Formatter, CloseNotifier etc.</p></li><li>MixedCaps<br>Finally, the convention in Go is to use MixedCaps or mixedCaps rather than underscores to write multiword names.</li></ul><h4 id="Semicolons"><a href="#Semicolons" class="headerlink" title="Semicolons"></a>Semicolons</h4><ul><li>Like C, Go’s formal grammar uses semicolons to terminate statements, but unlike in C, those semicolons do not appear in the source.</li><li><p>If the last token before a newline is an identifier, the lexer always inserts a semicolon after the token. This could be summarized as, “if the newline comes after a token that could end a statement, insert a semicolon”.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// identifiers</span></div><div class="line"><span class="keyword">break</span> <span class="keyword">continue</span> <span class="keyword">fallthrough</span> <span class="keyword">return</span> ++ -- ) &#125;</div></pre></td></tr></table></figure></li><li><p>One consequence of the semicolon insertion rules is that you <strong>cannot</strong> put the <strong>opening brace</strong> of a control structure (if, for, switch, or select) <strong>on the next line</strong>.<br>If you do, a semicolon will be inserted before the brace, which could cause unwanted effects.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// right</span></div><div class="line"><span class="keyword">if</span> i &lt; f() &#123;</div><div class="line">    g()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// wrong</span></div><div class="line"><span class="keyword">if</span> i &lt; f() </div><div class="line">&#123;</div><div class="line">    g()</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h4 id="Redeclaration-and-reassignment"><a href="#Redeclaration-and-reassignment" class="headerlink" title="Redeclaration and reassignment"></a>Redeclaration and reassignment</h4><p>In a := declaration a variable v may appear even if it has already been declared, provided:</p><ul><li>this declaration is in the same scope as the existing declaration of v (if v is already declared in an outer scope, the declaration will create a new variable),</li><li>the corresponding value in the initialization is assignable to v, and</li><li>there is at least one other variable in the declaration that is being declared a new.<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">f, err := os.Open(name)</div><div class="line">d, err := f.Stat()</div></pre></td></tr></table></figure></li></ul><h4 id="Data"><a href="#Data" class="headerlink" title="Data"></a>Data</h4><ul><li>Allocation with new<br><code>new(T)</code> returns a pointer to a newly allocated zero value of type <code>T</code>.</li><li>Allocation with make<br><code>make(T, args)</code> serves a purpose different from <code>new(T)</code>.<br>It creates slices, maps, and channels only, and it returns an <strong>initialized (not zeroed)</strong> value of type <code>T</code> (not <code>*T</code>).<br>The reason for the distinction is that these three types represent, under the covers, references to data structures that must be initialized before use.</li></ul><h4 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h4><p>There are major differences between the ways arrays work in Go and C. In Go,</p><ul><li>Arrays are values. Assigning one array to another copies all the elements.</li><li>In particular, if you pass an array to a function, it will receive a copy of the array, not a pointer to it.</li><li>The size of an array is part of its type. The types <code>[10]int</code> and <code>[20]int</code> are distinct.</li></ul><p>The value property can be useful but also expensive;<br>If you want C-like behavior and efficiency, you can <strong>pass a pointer to the array</strong>.<br><strong>But even this style isn’t idiomatic Go. Use slices instead.</strong></p><h4 id="The-blank-identifier"><a href="#The-blank-identifier" class="headerlink" title="The blank identifier"></a>The blank identifier</h4><p>The blank identifier can be assigned or declared with any value of any type, with the value discarded harmlessly.</p><ul><li><p>Unused imports and variables</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> (</div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"io"</span></div><div class="line">    <span class="string">"log"</span></div><div class="line">    <span class="string">"os"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">var</span> _ = fmt.Printf <span class="comment">// For debugging; delete when done. </span></div><div class="line"><span class="keyword">var</span> _ io.Reader    <span class="comment">// For debugging; delete when done. </span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    fd, err := os.Open(<span class="string">"test.go"</span>)</div><div class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">        log.Fatal(err)</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// <span class="doctag">TODO:</span> use fd.</span></div><div class="line">    _ = fd</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>Import for side effect<br><code>import _ &quot;net/http/pprof&quot;</code><br>This form of import makes clear that the package is being imported for its side effects, because there is no other possible use of the package: in this file, it doesn’t have a name. (If it did, and we didn’t use that name, the compiler would reject the program.)</p></li><li><p>Interface checks<br>If it’s necessary only to ask whether a type implements an interface, without actually using the interface itself, perhaps as part of an error check, use the blank identifier to ignore the type-asserted value:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> _, ok := val.(json.Marshaler); ok &#123;</div><div class="line">    fmt.Printf(<span class="string">"value %v of type %T implements json.Marshaler\n"</span>, val, val)</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><p>One place this situation arises is when it is necessary to guarantee within the package implementing the type that it actually satisfies the interface. If a type—for example, <code>json.RawMessage</code> needs a custom JSON representation, it should implement json.Marshaler, but there are no static conversions that would cause the compiler to verify this automatically. If the type inadvertently fails to satisfy the interface, the JSON encoder will still work, but will not use the custom implementation. To guarantee that the implementation is correct, a global declaration using the blank identifier can be used in the package:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> _ json.Marshaler = (*RawMessage)(<span class="literal">nil</span>)</div></pre></td></tr></table></figure></p><h4 id="Concurrency-1"><a href="#Concurrency-1" class="headerlink" title="Concurrency"></a>Concurrency</h4><p>concurrency: structuring a program as independently executing components.<br>parallelism: executing calculations in parallel for efficiency on multiple CPUs. </p><ul><li><p>Channels of channels<br>// TODO</p></li><li><p>Parallelization<br>Either run your job with environment variable <code>GOMAXPROCS</code> set to the number of cores to use or import the <code>runtime</code> package and call <code>runtime.GOMAXPROCS(NCPU)</code>.<br>A helpful value might be <code>runtime.NumCPU()</code>, which reports the number of logical CPUs on the local machine.</p></li><li><p>A leaky buffer<br>// TODO</p></li></ul><h4 id="Errors"><a href="#Errors" class="headerlink" title="Errors"></a>Errors</h4><ul><li><p>Panic<br>Panic that in effect creates a run-time error that will stop the program.<br>It’s always better to let things continue to run rather than taking down the whole program. One possible counterexample is during initialization: if the library truly cannot set itself up, it might be reasonable to panic, so to speak.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> user = os.Getenv(<span class="string">"USER"</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">if</span> user == <span class="string">""</span> &#123;</div><div class="line">        <span class="built_in">panic</span>(<span class="string">"no value for $USER"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>Recover<br>When panic is called, including implicitly for run-time errors such as indexing a slice out of bounds or failing a type assertion, it immediately stops execution of the current function and begins unwinding the stack of the goroutine, running any deferred functions along the way.<br>If that unwinding reaches the top of the goroutine’s stack, the program dies. However, it is possible to use the built-in function <strong>recover to regain control of the goroutine and resume normal execution</strong>.<br>One application of recover is to shut down a failing goroutine inside a server without killing the other executing goroutines.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">server</span><span class="params">(workChan &lt;-<span class="keyword">chan</span> *Work)</span></span> &#123;</div><div class="line">    <span class="keyword">for</span> work := <span class="keyword">range</span> workChan &#123;</div><div class="line">        <span class="keyword">go</span> safelyDo(work)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">safelyDo</span><span class="params">(work *Work)</span></span> &#123;</div><div class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">if</span> err := <span class="built_in">recover</span>(); err != <span class="literal">nil</span> &#123;</div><div class="line">            log.Println(<span class="string">"work failed:"</span>, err)</div><div class="line">        &#125;</div><div class="line">    &#125;()</div><div class="line">    do(work)</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><p>// TODO: the rest of contents…</p><h4 id="A-web-server"><a href="#A-web-server" class="headerlink" title="A web server"></a>A web server</h4><p>Let’s finish with a complete Go program, a web server.<br>This one is actually a kind of web re-server. Google provides a service at <a href="http://chart.apis.google.com" target="_blank" rel="external">http://chart.apis.google.com</a> that does automatic formatting of data into charts and graphs.<br>It’s hard to use interactively, though, because you need to put the data into the URL as a query.<br>The program here provides a nicer interface to one form of data: given a short piece of text, it calls on the chart server to produce a QR code, a matrix of boxes that encode the text. That image can be grabbed with your cell phone’s camera and interpreted as, for instance, a URL, saving you typing the URL into the phone’s tiny keyboard.<br>Here’s the complete program.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">    <span class="string">"flag"</span></div><div class="line">    <span class="string">"html/template"</span></div><div class="line">    <span class="string">"log"</span></div><div class="line">    <span class="string">"net/http"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">var</span> addr = flag.String(<span class="string">"addr"</span>, <span class="string">":1718"</span>, <span class="string">"http service address"</span>) <span class="comment">// Q=17, R=18</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> templ = template.Must(template.New(<span class="string">"qr"</span>).Parse(templateStr))</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    flag.Parse()</div><div class="line">    http.Handle(<span class="string">"/"</span>, http.HandlerFunc(QR))</div><div class="line">    err := http.ListenAndServe(*addr, <span class="literal">nil</span>)</div><div class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">        log.Fatal(<span class="string">"ListenAndServe:"</span>, err)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">QR</span><span class="params">(w http.ResponseWriter, req *http.Request)</span></span> &#123;</div><div class="line">    templ.Execute(w, req.FormValue(<span class="string">"s"</span>))</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> templateStr = <span class="string">`</span></div><div class="line"><span class="string">&lt;html&gt;</span></div><div class="line"><span class="string">&lt;head&gt;</span></div><div class="line"><span class="string">&lt;title&gt;QR Link Generator&lt;/title&gt;</span></div><div class="line"><span class="string">&lt;/head&gt;</span></div><div class="line"><span class="string">&lt;body&gt;</span></div><div class="line"><span class="string">&#123;&#123;if .&#125;&#125;</span></div><div class="line"><span class="string">&lt;img src="http://chart.apis.google.com/chart?chs=300x300&amp;cht=qr&amp;choe=UTF-8&amp;chl=&#123;&#123;.&#125;&#125;" /&gt;</span></div><div class="line"><span class="string">&lt;br&gt;</span></div><div class="line"><span class="string">&#123;&#123;.&#125;&#125;</span></div><div class="line"><span class="string">&lt;br&gt;</span></div><div class="line"><span class="string">&lt;br&gt;</span></div><div class="line"><span class="string">&#123;&#123;end&#125;&#125;</span></div><div class="line"><span class="string">&lt;form action="/" name=f method="GET"&gt;&lt;input maxLength=1024 size=70</span></div><div class="line"><span class="string">name=s value="" title="Text to QR Encode"&gt;&lt;input type=submit</span></div><div class="line"><span class="string">value="Show QR" name=qr&gt;</span></div><div class="line"><span class="string">&lt;/form&gt;</span></div><div class="line"><span class="string">&lt;/body&gt;</span></div><div class="line"><span class="string">&lt;/html&gt;</span></div><div class="line"><span class="string">`</span></div></pre></td></tr></table></figure></p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://golang.org/" target="_blank" rel="external">Go Official Site</a><br><a href="https://tour.golang.org/" target="_blank" rel="external">A Tour of Go</a><br><a href="https://www.gitbook.com/book/bingohuang/effective-go-zh-en/details" target="_blank" rel="external">Effective Go</a><br><a href="https://golang.org/ref/spec" target="_blank" rel="external">The Go Programming Language Specification</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;del&gt;Last Modified: 2017-08-23 11:46:10&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;&lt;del&gt;Hard to say, I finished Go, for about 20 days (except busy for 1 week and training for 1 week).&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;&lt;del&gt;Such a long time, 1 week to learn a new language, having known a little about concurrency.&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;&lt;del&gt;Not so bad.&lt;/del&gt;&lt;/p&gt;
&lt;h3 id=&quot;Acknowledge&quot;&gt;&lt;a href=&quot;#Acknowledge&quot; class=&quot;headerlink&quot; title=&quot;Acknowledge&quot;&gt;&lt;/a&gt;Acknowledge&lt;/h3&gt;&lt;p&gt;Go is a new language. Although it borrows ideas from existing languages, it has unusual properties that make effective Go programs different in character from programs written in its relatives.&lt;br&gt;The notes below was written from the view of &lt;strong&gt;a CPP programmer&lt;/strong&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;and a hello world&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; main&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	fmt.Println(&lt;span class=&quot;string&quot;&gt;&quot;Hello, World&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Doing" scheme="http://TaoSama.github.io/categories/Doing/"/>
    
      <category term="Go" scheme="http://TaoSama.github.io/categories/Doing/Go/"/>
    
    
  </entry>
  
  <entry>
    <title>Notes, Shell Script</title>
    <link href="http://TaoSama.github.io/2017/07/31/shell-script-notes/"/>
    <id>http://TaoSama.github.io/2017/07/31/shell-script-notes/</id>
    <published>2017-07-31T03:20:00.000Z</published>
    <updated>2017-09-20T09:33:58.000Z</updated>
    
    <content type="html"><![CDATA[<p><del>Last Modified: 2017-08-11 11:18:00</del></p><h3 id="Acknowledge"><a href="#Acknowledge" class="headerlink" title="Acknowledge"></a>Acknowledge</h3><ul><li>What is shell script?<br>A shell script is a file containing a series of commands.</li></ul><h3 id="The-first-shell-script"><a href="#The-first-shell-script" class="headerlink" title="The first shell script"></a>The first shell script</h3><p><code>hello_world.sh</code><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></div><div class="line"><span class="meta">#</span><span class="bash"> The line above is called a shebang.</span></div><div class="line"><span class="meta">#</span><span class="bash"> Every shell script should include this as its first line.</span></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> This is our first script.</span></div><div class="line">echo 'Hello World!'</div></pre></td></tr></table></figure></p><ul><li>make it executable<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">ls -l hello_world</div><div class="line">-rw-r--r-- 1  me    me      63  2009-03-07 10:10 hello_world</div><div class="line">chmod 755 hello_world</div><div class="line">ls -l hello_world</div><div class="line">-rwxr-xr-x 1  me    me      63  2009-03-07 10:10 hello_world</div><div class="line"></div><div class="line">./hello_word</div><div class="line">Hello World!</div></pre></td></tr></table></figure></li></ul><a id="more"></a><h3 id="Build-a-program"><a href="#Build-a-program" class="headerlink" title="Build a program"></a>Build a program</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></div><div class="line"><span class="meta">#</span><span class="bash"> Program to output a system information page</span></div><div class="line">TITLE="System Information Report For $HOSTNAME"</div><div class="line">CURRENT_TIME=$(date +"%x %r %Z")</div><div class="line">TIME_STAMP="Generated $CURRENT_TIME, by $USER"</div><div class="line">echo "&lt;HTML&gt;</div><div class="line">        &lt;HEAD&gt;</div><div class="line">                &lt;TITLE&gt;$TITLE&lt;/TITLE&gt;</div><div class="line">        &lt;/HEAD&gt;</div><div class="line">        &lt;BODY&gt;</div><div class="line">                &lt;H1&gt;$TITLE&lt;/H1&gt;</div><div class="line">                &lt;P&gt;$TIME_STAMP&lt;/P&gt;</div><div class="line">        &lt;/BODY&gt;</div><div class="line">&lt;/HTML&gt;"</div></pre></td></tr></table></figure><h4 id="here-documents"><a href="#here-documents" class="headerlink" title="here documents"></a>here documents</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">command &lt;&lt; token</div><div class="line">text</div><div class="line">token</div></pre></td></tr></table></figure><ul><li>By default, <strong>single and double quotes</strong> within here documents <strong>lose their special meaning</strong> to the shell.</li><li>If we change the redirection operator from <strong>“&lt;&lt;” to “&lt;&lt;-“</strong>, the shell will <strong>ignore leading tab characters</strong> in the here document. This allows a here document to be indented, which can improve readability.<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></div><div class="line"><span class="meta">#</span><span class="bash"> Program to output a system information page</span></div><div class="line">TITLE="System Information Report For $HOSTNAME"</div><div class="line">CURRENT_TIME=$(date +"%x %r %Z")</div><div class="line">TIME_STAMP="Generated $CURRENT_TIME, by $USER"</div><div class="line">cat &lt;&lt; _EOF_</div><div class="line">&lt;HTML&gt;</div><div class="line">         &lt;HEAD&gt;</div><div class="line">                &lt;TITLE&gt;$TITLE&lt;/TITLE&gt;</div><div class="line">         &lt;/HEAD&gt;</div><div class="line">         &lt;BODY&gt;</div><div class="line">                &lt;H1&gt;$TITLE&lt;/H1&gt;</div><div class="line">                &lt;P&gt;$TIME_STAMP&lt;/P&gt;</div><div class="line">         &lt;/BODY&gt;</div><div class="line">&lt;/HTML&gt;</div><div class="line">_EOF_</div></pre></td></tr></table></figure></li></ul><h3 id="Top-down-design"><a href="#Top-down-design" class="headerlink" title="Top-down design"></a>Top-down design</h3><h4 id="shell-function"><a href="#shell-function" class="headerlink" title="shell function"></a>shell function</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">function name &#123;</div><div class="line">    commands</div><div class="line">    return</div><div class="line">&#125;</div><div class="line">and</div><div class="line">name () &#123;</div><div class="line">    commands</div><div class="line">    return</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="local-variable"><a href="#local-variable" class="headerlink" title="local variable"></a>local variable</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></div><div class="line">i=0</div><div class="line">function hello &#123;</div><div class="line">    local i=1</div><div class="line">    echo 'local i = '$i</div><div class="line">    echo 'Hello World'</div><div class="line">&#125;</div><div class="line"></div><div class="line">hello</div><div class="line">echo 'global i = '$i</div></pre></td></tr></table></figure><h4 id="keep-program-runnable"><a href="#keep-program-runnable" class="headerlink" title="keep program runnable"></a>keep program runnable</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></div><div class="line"><span class="meta">#</span><span class="bash"> Program to output a system information page</span></div><div class="line">TITLE="System Information Report For $HOSTNAME"</div><div class="line">CURRENT_TIME=$(date +"%x %r %Z")</div><div class="line">TIME_STAMP="Generated $CURRENT_TIME, by $USER"</div><div class="line">report_uptime () &#123;</div><div class="line">  echo "Function report_uptime executed."</div><div class="line">  return</div><div class="line">&#125;</div><div class="line">report_disk_space () &#123;</div><div class="line">  echo "Function report_disk_space executed."</div><div class="line">  return</div><div class="line">&#125;</div><div class="line">report_home_space () &#123;</div><div class="line">  echo "Function report_home_space executed."</div><div class="line">  return</div><div class="line">&#125;</div><div class="line">cat &lt;&lt; _EOF_</div><div class="line">&lt;HTML&gt;</div><div class="line">    &lt;HEAD&gt;</div><div class="line">        &lt;TITLE&gt;$TITLE&lt;/TITLE&gt;</div><div class="line">    &lt;/HEAD&gt;</div><div class="line">    &lt;BODY&gt;</div><div class="line">        &lt;H1&gt;$TITLE&lt;/H1&gt;</div><div class="line">        &lt;P&gt;$TIME_STAMP&lt;/P&gt;</div><div class="line">        $(report_uptime)</div><div class="line">        $(report_disk_space)</div><div class="line">        $(report_home_space)</div><div class="line">    &lt;/BODY&gt;</div><div class="line">&lt;/HTML&gt;</div><div class="line">_EOF_</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">###########################################</span></span></div><div class="line">./sys_info_page</div><div class="line">&lt;HTML&gt;</div><div class="line">&lt;HEAD&gt;</div><div class="line">&lt;TITLE&gt;System Information Report For linuxbox&lt;/TITLE&gt;</div><div class="line">&lt;/HEAD&gt;</div><div class="line">&lt;BODY&gt;</div><div class="line">&lt;H1&gt;System Information Report For linuxbox&lt;/H1&gt;</div><div class="line">&lt;P&gt;Generated 03/20/2009 05:17:26 AM EDT, by me&lt;/P&gt;</div><div class="line">Function report_uptime executed.</div><div class="line">Function report_disk_space executed.</div><div class="line">Function report_home_space executed.</div><div class="line">&lt;/BODY&gt;</div><div class="line">&lt;/HTML&gt;</div></pre></td></tr></table></figure><h3 id="control-if-branching"><a href="#control-if-branching" class="headerlink" title="control: if branching"></a>control: if branching</h3><h4 id="if-statement"><a href="#if-statement" class="headerlink" title="if statement"></a>if statement</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">if commands; then</div><div class="line">     commands</div><div class="line">[elif commands; then</div><div class="line">     commands...]</div><div class="line">[else</div><div class="line">     commands]</div><div class="line">fi</div></pre></td></tr></table></figure><h4 id="exit-status"><a href="#exit-status" class="headerlink" title="exit status"></a>exit status</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">ls -d /usr/bin</div><div class="line">/usr/bin</div><div class="line">echo $?</div><div class="line">0</div><div class="line">ls -d /bin/usr</div><div class="line">ls: cannot access /bin/usr: No such file or directory</div><div class="line">echo $?</div><div class="line">2</div></pre></td></tr></table></figure><h4 id="test-expression"><a href="#test-expression" class="headerlink" title="test expression"></a>test expression</h4><p>The test command returns an <strong>exit status</strong> of <strong>zero</strong> when the <strong>expression is true</strong> and a status of <strong>one</strong> when the <strong>expression is false</strong>.<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">test expression</div><div class="line"><span class="meta">#</span><span class="bash"> the more popular one:</span></div><div class="line">[ expression ]</div></pre></td></tr></table></figure></p><h4 id="test-file-expression"><a href="#test-file-expression" class="headerlink" title="test file expression"></a>test file expression</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">test_file () &#123;</div><div class="line">    # test-file: Evaluate the status of a file</div><div class="line">    FILE=~/.bashrc</div><div class="line">    if [ -e "$FILE" ]; then</div><div class="line">        if [ -f "$FILE" ]; then</div><div class="line">            echo "$FILE is a regular file."</div><div class="line">        fi</div><div class="line">        if [ -d "$FILE" ]; then</div><div class="line">            echo "$FILE is a directory."</div><div class="line">        fi</div><div class="line">        if [ -r "$FILE" ]; then</div><div class="line">            echo "$FILE is readable."</div><div class="line">        fi</div><div class="line">        if [ -w "$FILE" ]; then</div><div class="line">            echo "$FILE is writable."</div><div class="line">        fi</div><div class="line">        if [ -x "$FILE" ]; then</div><div class="line">            echo "$FILE is executable/searchable."</div><div class="line">        fi</div><div class="line">    else</div><div class="line">        echo "$FILE does not exist"</div><div class="line">        return 1</div><div class="line">    fi</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="test-string-expression"><a href="#test-string-expression" class="headerlink" title="test string expression"></a>test string expression</h4><table><thead><tr><th style="text-align:center">Expression</th><th style="text-align:left">Is Ture If…</th></tr></thead><tbody><tr><td style="text-align:center">string</td><td style="text-align:left">string is not null.</td></tr><tr><td style="text-align:center">-n string</td><td style="text-align:left">The length of string is greater than zero.</td></tr><tr><td style="text-align:center">-z string</td><td style="text-align:left">The length of string is zero.</td></tr><tr><td style="text-align:center">string1 = string2 or string1 == string2</td><td style="text-align:left">string1 and string2 are equal. Single or double equal signs may be used, but the use of double equal signs is greatly preferred.</td></tr><tr><td style="text-align:center">string1 != string2</td><td style="text-align:left">string1 and string2 are not equal.</td></tr><tr><td style="text-align:center">string1 &gt; string2</td><td style="text-align:left">sting1 sorts after string2.</td></tr><tr><td style="text-align:center">string1 &lt; string2</td><td style="text-align:left">string1 sorts before string2.</td></tr></tbody></table><h4 id="test-integer-expression"><a href="#test-integer-expression" class="headerlink" title="test integer expression"></a>test integer expression</h4><table><thead><tr><th style="text-align:center">Expression</th><th style="text-align:left">Is Ture If…</th></tr></thead><tbody><tr><td style="text-align:center">integer1 -eq integer2</td><td style="text-align:left">integer1 is equal to integer2.</td></tr><tr><td style="text-align:center">integer1 -ne integer2</td><td style="text-align:left">integer1 is not equal to integer2.</td></tr><tr><td style="text-align:center">integer1 -le integer2</td><td style="text-align:left">integer1 is less than or equal to integer2.</td></tr><tr><td style="text-align:center">integer1 -lt integer2</td><td style="text-align:left">integer1 is less than integer2.</td></tr><tr><td style="text-align:center">integer1 -ge integer2</td><td style="text-align:left">integer1 is greater than or equal to integer2.</td></tr><tr><td style="text-align:center">integer1 -gt integer2</td><td style="text-align:left">integer1 is greater than integer2.</td></tr></tbody></table><h4 id="compound-command-enhanced-test-expression"><a href="#compound-command-enhanced-test-expression" class="headerlink" title="compound command, enhanced test expression"></a>compound command, enhanced test expression</h4><p><code>[[ expression ]]</code>: it is similar to test and it supports all of its expressions.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> but add a new string expression</span></div><div class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">which</span> returns <span class="literal">true</span> <span class="keyword">if</span> string is matched by the extended regular expression regex</span></div><div class="line">string =~ regex</div></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></div><div class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">test</span>-integer2: evaluate the value of an <span class="built_in">integer</span>.</span></div><div class="line">INT=-5</div><div class="line">if [[ "$INT" =~ ^-?[0-9]+$ ]]; then</div><div class="line">    if [ $INT -eq 0 ]; then</div><div class="line">        echo "INT is zero."</div><div class="line">    else</div><div class="line">        if [ $INT -lt 0 ]; then</div><div class="line">            echo "INT is negative."</div><div class="line">        else</div><div class="line">            echo "INT is positive."</div><div class="line">        fi</div><div class="line">        if [ $((INT % 2)) -eq 0 ]; then</div><div class="line">            echo "INT is even."</div><div class="line">        else</div><div class="line">            echo "INT is odd."</div><div class="line">        fi</div><div class="line">    fi</div><div class="line">else</div><div class="line">    echo "INT is not an integer." &gt;&amp;2</div><div class="line">    exit 1</div><div class="line">fi</div></pre></td></tr></table></figure><p>Another added feature of <code>[[ ]]</code> is that the == operator supports pattern matching the same way pathname expansion does. For example:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">FILE=foo.bar</div><div class="line">if [[ $FILE == foo.* ]]; then</div><div class="line"><span class="meta">&gt;</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"<span class="variable">$FILE</span> matches pattern 'foo.*'"</span></span></div><div class="line"><span class="meta">&gt;</span><span class="bash"> <span class="keyword">fi</span></span></div><div class="line">foo.bar matches pattern 'foo.*'</div></pre></td></tr></table></figure></p><p><code>(( arithmetic expression ))</code>: it is used to perform arithmetic truth tests.<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></div><div class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">test</span>-integer2a: evaluate the value of an <span class="built_in">integer</span>.</span></div><div class="line">INT=-5</div><div class="line">if [[ "$INT" =~ ^-?[0-9]+$ ]]; then</div><div class="line">    if ((INT == 0)); then</div><div class="line">        echo "INT is zero."</div><div class="line">    else</div><div class="line">        if ((INT &lt; 0)); then</div><div class="line">            echo "INT is negative."</div><div class="line">        else</div><div class="line">            echo "INT is positive."</div><div class="line">        fi</div><div class="line">        if (( ((INT % 2)) == 0)); then</div><div class="line">            echo "INT is even."</div><div class="line">        else</div><div class="line">            echo "INT is odd."</div><div class="line">        fi</div><div class="line">    fi</div><div class="line">else</div><div class="line">    echo "INT is not an integer." &gt;&amp;2</div><div class="line">    exit 1</div><div class="line">fi</div></pre></td></tr></table></figure></p><h4 id="combine-expressions"><a href="#combine-expressions" class="headerlink" title="combine expressions"></a>combine expressions</h4><p>Logical Operators<br>|Operation|    test|    [[ ]] and (( ))|<br>|:-:|:-:|:-:|<br>|AND    |-a|    &amp;&amp;|<br>|OR|    -o|    |||<br>|NOT|    !|    !|</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></div><div class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">test</span>-integer3: determine <span class="keyword">if</span> an <span class="built_in">integer</span> is within a</span></div><div class="line"><span class="meta">#</span><span class="bash"> specified range of values.</span></div><div class="line">MIN_VAL=1</div><div class="line">MAX_VAL=100</div><div class="line">INT=50</div><div class="line">if [[ "$INT" =~ ^-?[0-9]+$ ]]; then</div><div class="line">    if [[ INT -ge MIN_VAL &amp;&amp; INT -le MAX_VAL ]]; then</div><div class="line">        echo "$INT is within $MIN_VAL to $MAX_VAL."</div><div class="line">    else</div><div class="line">        echo "$INT is out of range."</div><div class="line">    fi</div><div class="line">else</div><div class="line">    echo "INT is not an integer." &gt;&amp;2</div><div class="line">    exit 1</div><div class="line">fi</div></pre></td></tr></table></figure><p>We also include parentheses around the expression, for grouping<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">if [ ! \( $INT -ge $MIN_VAL -a $INT -le $MAX_VAL \) ]; then</div><div class="line">    echo "$INT is outside $MIN_VAL to $MAX_VAL."</div><div class="line">else</div><div class="line">    echo "$INT is in range."</div><div class="line">fi</div></pre></td></tr></table></figure></p><h4 id="two-control-operators-can-perform-branching"><a href="#two-control-operators-can-perform-branching" class="headerlink" title="two control operators, can perform branching"></a>two control operators, can perform branching</h4><p><code>command1 &amp;&amp; command2</code><br><code>command1 || command2</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mkdir temp &amp;&amp; cd temp</div><div class="line">[ -d temp ] || mkdir temp</div><div class="line">[ -d temp ] || exit 1</div></pre></td></tr></table></figure><h4 id="detect-permission-with-if"><a href="#detect-permission-with-if" class="headerlink" title="detect permission with if"></a>detect permission with if</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">report_home_space () &#123;</div><div class="line">    if [[ $(id -u) -eq 0 ]]; then</div><div class="line">        cat &lt;&lt;- _EOF_</div><div class="line">        &lt;H2&gt;Home Space Utilization (All Users)&lt;/H2&gt;</div><div class="line">        &lt;PRE&gt;$(du -sh /home/*)&lt;/PRE&gt;</div><div class="line">_EOF_</div><div class="line">    else</div><div class="line">        cat &lt;&lt;- _EOF_</div><div class="line">        &lt;H2&gt;Home Space Utilization ($USER)&lt;/H2&gt;</div><div class="line">        &lt;PRE&gt;$(du -sh $HOME)&lt;/PRE&gt;</div><div class="line">_EOF_</div><div class="line">    fi</div><div class="line">    return</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="Keyboard-input"><a href="#Keyboard-input" class="headerlink" title="Keyboard input"></a>Keyboard input</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">read [-options] [variable...]</div></pre></td></tr></table></figure><ul><li>If read receives <strong>fewer</strong> than the expected number, the <strong>extra variables are empty</strong>.</li><li>If read receives <strong>more</strong> than the expected number, the <strong>final variable</strong> will contain <strong>all of the extra input</strong>. </li><li>If no variables are listed after the read command, a shell variable, <code>REPLY</code>, will be assigned all the input.</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></div><div class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">read</span>-secret: input a secret pass phrase</span></div><div class="line">if read -t 10 -sp "Enter secret pass phrase &gt; " secret_pass; then</div><div class="line">    echo "\nSecret pass phrase = '$secret_pass'"</div><div class="line">else</div><div class="line">    echo "\nInput timed out" &gt;&amp;2</div><div class="line">    exit 1</div><div class="line">fi</div></pre></td></tr></table></figure><h4 id="IFS-Internal-Field-Separator"><a href="#IFS-Internal-Field-Separator" class="headerlink" title="IFS (Internal Field Separator)"></a>IFS (Internal Field Separator)</h4><p>The shell allows one or more variable assignments to take place immediately before a command.<br>These assignments alter the environment for the command that follows.<br><strong>The effect of the assignment is temporary</strong>; only changing the environment for the duration of the command.<br>In our case, the value of IFS is changed to a colon character.<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></div><div class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">read</span>-ifs: <span class="built_in">read</span> fields from a file</span></div><div class="line">FILE=/etc/passwd</div><div class="line">read -p "Enter a user name &gt; " user_name</div><div class="line">file_info=$(grep "^$user_name:" $FILE)</div><div class="line">if [ -n "$file_info" ]; then</div><div class="line">    IFS=":" read user pw uid gid name home shell &lt;&lt;&lt; "$file_info"</div><div class="line">    echo "User = '$user'"</div><div class="line">    echo "UID = '$uid'"</div><div class="line">    echo "GID = '$gid'"</div><div class="line">    echo "Full Name = '$name'"</div><div class="line">    echo "Home Dir. = '$home'"</div><div class="line">    echo "Shell = '$shell'"</div><div class="line">else</div><div class="line">    echo "No such user '$user_name'" &gt;&amp;2</div><div class="line">    exit 1</div><div class="line">fi</div></pre></td></tr></table></figure></p><p>The <code>&lt;&lt;&lt;</code> operator indicates <strong>a here string</strong>.<br>A here string is like a here document, only shorter, consisting of a single string.<br>We might wonder why this <strong>rather oblique method</strong> was chosen rather than:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo "$file_info" | IFS=":" read user pw uid gid name home shell</div></pre></td></tr></table></figure></p><p><strong>You Can’t Pipe read</strong><br>The explanation has to do with the way the <strong>shell handles pipelines</strong>.<br>In bash (and other shells such as sh), <strong>pipelines create subshells</strong> (subshells is the subprocesses).<br>Subshells in Unix-like systems create copies of the environment for the processes to use while they execute.<br>When the command exits, the subshell and its environment are destroyed.<br>This means that a subshell can never alter the environment of its parent process.<br><strong>Then the effect of the assignment is lost</strong>.</p><h4 id="validating-input"><a href="#validating-input" class="headerlink" title="validating input"></a>validating input</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">    echo "Invalid input '$REPLY'" &gt;&amp;2</div><div class="line">    exit 1</div><div class="line">&#125;</div><div class="line">read -p "Enter a single item &gt; "</div><div class="line"><span class="meta">#</span><span class="bash"> input is empty (invalid)</span></div><div class="line">[[ -z $REPLY ]] &amp;&amp; invalid_input</div><div class="line"><span class="meta">#</span><span class="bash"> input is multiple items (invalid)</span></div><div class="line">(( $(echo $REPLY | wc -w) &gt; 1 )) &amp;&amp; invalid_input</div><div class="line"><span class="meta">#</span><span class="bash"> is input a valid filename?</span></div><div class="line">if [[ $REPLY =~ ^[-[:alnum:]\._]+$ ]]; then</div><div class="line">    echo "'$REPLY' is a valid filename."</div><div class="line">    if [[ -e $REPLY ]]; then</div><div class="line">        echo "And file '$REPLY' exists."</div><div class="line">    else</div><div class="line">        echo "However, file '$REPLY' does not exist."</div><div class="line">    fi</div><div class="line">    # is input a floating point number?</div><div class="line">    if [[ $REPLY =~ ^-?[[:digit:]]*\.[[:digit:]]+$ ]]; then</div><div class="line">        echo "'$REPLY' is a floating point number."</div><div class="line">    else</div><div class="line">        echo "'$REPLY' is not a floating point number."</div><div class="line">    fi</div><div class="line">    # is input an integer?</div><div class="line">    if [[ $REPLY =~ ^-?[[:digit:]]+$ ]]; then</div><div class="line">        echo "'$REPLY' is an integer."</div><div class="line">    else</div><div class="line">        echo "'$REPLY' is not an integer."</div><div class="line">    fi</div><div class="line">else</div><div class="line">    echo "The string '$REPLY' is not a valid filename."</div><div class="line">fi</div></pre></td></tr></table></figure><h4 id="menu"><a href="#menu" class="headerlink" title="menu"></a>menu</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></div><div class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">read</span>-menu: a menu driven system information program</span></div><div class="line">clear</div><div class="line">echo "</div><div class="line">Please Select:</div><div class="line"></div><div class="line">    1. Display System Information</div><div class="line">    2. Display Disk Space</div><div class="line">    3. Display Home Space Utilization</div><div class="line">    0. Quit</div><div class="line">"</div><div class="line">read -p "Enter selection [0-3] &gt; "</div><div class="line"></div><div class="line">if [[ $REPLY =~ ^[0-3]$ ]]; then</div><div class="line">    if [[ $REPLY == 0 ]]; then</div><div class="line">        echo "Program terminated."</div><div class="line">        exit</div><div class="line">    fi</div><div class="line">    if [[ $REPLY == 1 ]]; then</div><div class="line">        echo "Hostname: $HOSTNAME"</div><div class="line">        uptime</div><div class="line">        exit</div><div class="line">    fi</div><div class="line">    if [[ $REPLY == 2 ]]; then</div><div class="line">        df -h</div><div class="line">        exit</div><div class="line">    fi</div><div class="line">    if [[ $REPLY == 3 ]]; then</div><div class="line">        if [[ $(id -u) -eq 0 ]]; then</div><div class="line">            echo "Home Space Utilization (All Users)"</div><div class="line">            du -sh /home/*</div><div class="line">        else</div><div class="line">            echo "Home Space Utilization ($USER)"</div><div class="line">            du -sh $HOME</div><div class="line">        fi</div><div class="line">        exit</div><div class="line">    fi</div><div class="line">else</div><div class="line">    echo "Invalid entry." &gt;&amp;2</div><div class="line">    exit 1</div><div class="line">fi</div></pre></td></tr></table></figure><h3 id="Flow-control-while-until-loop"><a href="#Flow-control-while-until-loop" class="headerlink" title="Flow control: while/until loop"></a>Flow control: while/until loop</h3><h4 id="while"><a href="#while" class="headerlink" title="while"></a>while</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">while commands; do commands; done</div></pre></td></tr></table></figure><p><code>break</code> and <code>continue</code><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></div><div class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">while</span>-menu2: a menu driven system information program</span></div><div class="line">DELAY=3 # Number of seconds to display results</div><div class="line">while true; do</div><div class="line">    clear</div><div class="line">    cat &lt;&lt;- _EOF_</div><div class="line">        Please Select:</div><div class="line">        1. Display System Information</div><div class="line">        2. Display Disk Space</div><div class="line">        3. Display Home Space Utilization</div><div class="line">        0. Quit</div><div class="line">    _EOF_</div><div class="line">    read -p "Enter selection [0-3] &gt; "</div><div class="line">    if [[ $REPLY =~ ^[0-3]$ ]]; then</div><div class="line">        if [[ $REPLY == 1 ]]; then</div><div class="line">            echo "Hostname: $HOSTNAME"</div><div class="line">            uptime</div><div class="line">            sleep $DELAY</div><div class="line">            continue</div><div class="line">        fi</div><div class="line">        if [[ $REPLY == 2 ]]; then</div><div class="line">            df -h</div><div class="line">            sleep $DELAY</div><div class="line">            continue</div><div class="line">        fi</div><div class="line">        if [[ $REPLY == 3 ]]; then</div><div class="line">            if [[ $(id -u) -eq 0 ]]; then</div><div class="line">                echo "Home Space Utilization (All Users)"</div><div class="line">                du -sh /home/*</div><div class="line">            else</div><div class="line">                echo "Home Space Utilization ($USER)"</div><div class="line">                du -sh $HOME</div><div class="line">            fi</div><div class="line">            sleep $DELAY</div><div class="line">            continue</div><div class="line">        fi</div><div class="line">        if [[ $REPLY == 0 ]]; then</div><div class="line">            break</div><div class="line">        fi</div><div class="line">    else</div><div class="line">        echo "Invalid entry."</div><div class="line">        sleep $DELAY</div><div class="line">    fi</div><div class="line">done</div><div class="line">echo "Program terminated."</div></pre></td></tr></table></figure></p><h4 id="until"><a href="#until" class="headerlink" title="until"></a>until</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></div><div class="line"><span class="meta">#</span><span class="bash"> until-count: display a series of numbers</span></div><div class="line">count=1</div><div class="line">until [ $count -gt 5 ]; do</div><div class="line">    echo $count</div><div class="line">    count=$((count + 1))</div><div class="line">done</div><div class="line">echo "Finished."</div></pre></td></tr></table></figure><h4 id="process-files-with-while-or-until-loop"><a href="#process-files-with-while-or-until-loop" class="headerlink" title="process files with while or until loop"></a>process files with while or until loop</h4><ul><li><p>redirection</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></div><div class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">while</span>-read: <span class="built_in">read</span> lines from a file</span></div><div class="line">while read distro version release; do</div><div class="line">    printf "Distro: %s\tVersion: %s\tReleased: %s\n" \</div><div class="line">        $distro \</div><div class="line">        $version \</div><div class="line">        $release</div><div class="line">done &lt; distros.txt</div></pre></td></tr></table></figure></li><li><p>pipe</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></div><div class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">while</span>-read2: <span class="built_in">read</span> lines from a file</span></div><div class="line">sort -k 1,1 -k 2n distros.txt | while read distro version release; do</div><div class="line">    printf "Distro: %s\tVersion: %s\tReleased: %s\n" \</div><div class="line">        $distro \</div><div class="line">        $version \</div><div class="line">        $release</div><div class="line">done</div></pre></td></tr></table></figure></li></ul><h3 id="Stay-out-of-trouble"><a href="#Stay-out-of-trouble" class="headerlink" title="Stay out of trouble"></a>Stay out of trouble</h3><h4 id="syntactic-errors"><a href="#syntactic-errors" class="headerlink" title="syntactic errors"></a>syntactic errors</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">if [ $number = 1 ]; then echo "Number is equal to 1."</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> add double quotes to prevent unexpected expansion</span></div><div class="line">if [ "$number = 1]; the echo "Number is equal to 1."</div></pre></td></tr></table></figure><h4 id="logical-errors"><a href="#logical-errors" class="headerlink" title="logical errors"></a>logical errors</h4><ul><li>incorrect conditional expressions. </li><li>“Off by one” errors. </li><li>Unanticipated situations.</li></ul><h4 id="testing"><a href="#testing" class="headerlink" title="testing"></a>testing</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> use <span class="string">'echo'</span> to show the expanded parameters</span></div><div class="line">echo rm *  # TESTING</div></pre></td></tr></table></figure><h4 id="debugging"><a href="#debugging" class="headerlink" title="debugging"></a>debugging</h4><ul><li>isolate the area related to problem<br><strong>commenting out</strong> the code sections the code</li><li>tracing<ul><li>echo more messages</li><li>a method of tracing of bash<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">!/bin/bash -x</span></div><div class="line"><span class="meta">#</span><span class="bash"> trouble: script to demonstrate common errors</span></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> to activate tracing <span class="keyword">for</span> the entire script by adding the -x option to the first line</span></div><div class="line">number=1</div><div class="line">if [ $number = 1 ]; then</div><div class="line">    echo "Number is equal to 1."</div><div class="line">else</div><div class="line">    echo "Number is not equal to 1."</div><div class="line">fi</div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">#############################################</span></span></div><div class="line">export PS4='$LINENO + '</div><div class="line">trouble</div><div class="line">5 + number=1</div><div class="line">7 + '[' 1 = 1 ']'</div><div class="line">8 + echo 'Number is equal to 1.'</div><div class="line">Number is equal to 1.</div></pre></td></tr></table></figure></li></ul></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></div><div class="line"><span class="meta">#</span><span class="bash"> trouble: script to demonstrate common errors</span></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> to perform a trace on a selected portion of a script</span></div><div class="line"><span class="meta">#</span><span class="bash"> we can use the <span class="built_in">set</span> <span class="built_in">command</span> with the -x option:</span></div><div class="line">number=1</div><div class="line">set -x # Turn on tracing</div><div class="line">if [ $number = 1 ]; then</div><div class="line">    echo "Number is equal to 1."</div><div class="line">else</div><div class="line">    echo "Number is not equal to 1."</div><div class="line">fi</div><div class="line">set +x # Turn off tracing</div></pre></td></tr></table></figure><h3 id="Flow-control-case-branching"><a href="#Flow-control-case-branching" class="headerlink" title="Flow control: case branching"></a>Flow control: case branching</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">case word in</div><div class="line">    [pattern [| pattern]...) commands ;;]...</div><div class="line">esac</div></pre></td></tr></table></figure><p>The patterns used by case are the same as those used by pathname expansion. Here are some valid patterns:<br><code>a)</code>:    Matches if word equals “a”.<br><code>[[:alpha:]])</code>:    Matches if word is a single alphabetic character.<br><code>???)</code>:    Matches if word is exactly three characters long.<br><code>*.txt)</code>:    Matches if word ends with the characters “.txt”.<br><code>*)</code>:    Matches any value of word. It is good practice to include this as the last pattern in a case command; that is, to catch any possible invalid values.<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></div><div class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">case</span>-menu: a menu driven system information program</span></div><div class="line">clear</div><div class="line">echo "</div><div class="line">Please Select:</div><div class="line">1. Display System Information</div><div class="line">2. Display Disk Space</div><div class="line">3. Display Home Space Utilization</div><div class="line">0. Quit</div><div class="line">"</div><div class="line">read -p "Enter selection [0-3] &gt; "</div><div class="line">case $REPLY in</div><div class="line">    0)  echo "Program terminated."</div><div class="line">        exit</div><div class="line">        ;;</div><div class="line">    1)  echo "Hostname: $HOSTNAME"</div><div class="line">        uptime</div><div class="line">        ;;</div><div class="line">    2)  df -h</div><div class="line">        ;;</div><div class="line">    3)  if [[ $(id -u) -eq 0 ]]; then</div><div class="line">            echo "Home Space Utilization (All Users)"</div><div class="line">            du -sh /home/*</div><div class="line">        else</div><div class="line">            echo "Home Space Utilization ($USER)"</div><div class="line">            du -sh $HOME</div><div class="line">        fi</div><div class="line">        ;;</div><div class="line">    *)  echo "Invalid entry" &gt;&amp;2</div><div class="line">        exit 1</div><div class="line">        ;;</div><div class="line">esac</div></pre></td></tr></table></figure></p><h4 id="match-more-the-one-test"><a href="#match-more-the-one-test" class="headerlink" title="match more the one test"></a>match more the one test</h4><p>In bash <strong>prior to version 4.0</strong> there was <strong>no way</strong> for case to match more than one test.<br>Modern versions of bash, add the <code>;;&amp;</code> notation to terminate each action, we can do this:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></div><div class="line"><span class="meta">#</span><span class="bash"> case4-2: <span class="built_in">test</span> a character</span></div><div class="line">read -n 1 -p "Type a character &gt; "</div><div class="line">echo</div><div class="line">case $REPLY in</div><div class="line">    [[:upper:]])    echo "'$REPLY' is upper case." ;;&amp;</div><div class="line">    [[:lower:]])    echo "'$REPLY' is lower case." ;;&amp;</div><div class="line">    [[:alpha:]])    echo "'$REPLY' is alphabetic." ;;&amp;</div><div class="line">    [[:digit:]])    echo "'$REPLY' is a digit." ;;&amp;</div><div class="line">    [[:graph:]])    echo "'$REPLY' is a visible character." ;;&amp;</div><div class="line">    [[:punct:]])    echo "'$REPLY' is a punctuation symbol." ;;&amp;</div><div class="line">    [[:space:]])    echo "'$REPLY' is a whitespace character." ;;&amp;</div><div class="line">    [[:xdigit:]])   echo "'$REPLY' is a hexadecimal digit." ;;&amp;</div><div class="line">esac</div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">####################################################################</span></span></div><div class="line">case4-2</div><div class="line">Type a character &gt; a</div><div class="line">'a' is lower case.</div><div class="line">'a' is alphabetic.</div><div class="line">'a' is a visible character.</div><div class="line">'a' is a hexadecimal digit.</div></pre></td></tr></table></figure></p><h3 id="Positional-parameters"><a href="#Positional-parameters" class="headerlink" title="Positional parameters"></a>Positional parameters</h3><h4 id="access-to-the-contents-of-the-command-line"><a href="#access-to-the-contents-of-the-command-line" class="headerlink" title="access to the contents of the command line"></a>access to the contents of the command line</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></div><div class="line"><span class="meta">#</span><span class="bash"> posit-param: script to view <span class="built_in">command</span> line parameters</span></div><div class="line">echo "</div><div class="line">Number of arguments: $#</div><div class="line">\$0 = $0</div><div class="line">\$1 = $1</div><div class="line">\$2 = $2</div><div class="line">"</div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">####################################################</span></span></div><div class="line">posit-param</div><div class="line">Number of arguments: 0</div><div class="line"><span class="meta">$</span><span class="bash">0 = /home/me/bin/posit-param</span></div><div class="line"><span class="meta">$</span><span class="bash">1 =</span></div><div class="line"><span class="meta">$</span><span class="bash">2 =</span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">####################################################</span></span></div><div class="line">Number of arguments: 2</div><div class="line">posit-param a b</div><div class="line"><span class="meta">$</span><span class="bash">0 = /home/me/bin/posit-param</span></div><div class="line"><span class="meta">$</span><span class="bash">1 = a</span></div><div class="line"><span class="meta">$</span><span class="bash">2 = b</span></div></pre></td></tr></table></figure><h4 id="shift-access-to-a-large-number-of-arguments"><a href="#shift-access-to-a-large-number-of-arguments" class="headerlink" title="shift, access to a large number of arguments"></a>shift, access to a large number of arguments</h4><p>Each time shift is executed, the value of <code>$2</code> is moved to <code>$1</code>, the value of <code>$3</code> is moved to <code>$2</code> and so on.<br>The value of <code>$#</code> is also <strong>reduced by one</strong>.<br>In addition to <code>$0</code>, which <strong>never changes</strong>.<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></div><div class="line"><span class="meta">#</span><span class="bash"> posit-param2: script to display all arguments</span></div><div class="line">count=1</div><div class="line">while [[ $# -gt 0 ]]; do</div><div class="line">    echo "Argument $count = $1"</div><div class="line">    count=$((count + 1))</div><div class="line">    shift</div><div class="line">done</div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">####################################################</span></span></div><div class="line">posit-param2 a b c d</div><div class="line">Argument 1 = a</div><div class="line">Argument 2 = b</div><div class="line">Argument 3 = c</div><div class="line">Argument 4 = d</div></pre></td></tr></table></figure></p><h4 id="group-positional-parameters"><a href="#group-positional-parameters" class="headerlink" title="group positional parameters"></a>group positional parameters</h4><p><code>“$@”</code> is by far the most useful for most situations, because it preserves the integrity of each positional parameter.<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></div><div class="line"><span class="meta">#</span><span class="bash"> posit-params3 : script to demonstrate $* and <span class="variable">$@</span></span></div><div class="line">print_params () &#123;</div><div class="line">    echo "\$1 = $1"</div><div class="line">    echo "\$2 = $2"</div><div class="line">    echo "\$3 = $3"</div><div class="line">    echo "\$4 = $4"</div><div class="line">&#125;</div><div class="line">pass_params () &#123;</div><div class="line">    echo -e "\n" '$* :';      print_params   $*</div><div class="line">    echo -e "\n" '"$*" :';    print_params   "$*"</div><div class="line">    echo -e "\n" '$@ :';      print_params   $@</div><div class="line">    echo -e "\n" '"$@" :';    print_params   "$@"</div><div class="line">&#125;</div><div class="line">pass_params "word" "words with spaces"</div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">####################################################</span></span></div><div class="line">posit-param3</div><div class="line"><span class="meta"> $</span><span class="bash">* :</span></div><div class="line"><span class="meta">$</span><span class="bash">1 = word</span></div><div class="line"><span class="meta">$</span><span class="bash">2 = words</span></div><div class="line"><span class="meta">$</span><span class="bash">3 = with</span></div><div class="line"><span class="meta">$</span><span class="bash">4 = spaces</span></div><div class="line"> "$*" :</div><div class="line"><span class="meta">$</span><span class="bash">1 = word words with spaces</span></div><div class="line"><span class="meta">$</span><span class="bash">2 =</span></div><div class="line"><span class="meta">$</span><span class="bash">3 =</span></div><div class="line"><span class="meta">$</span><span class="bash">4 =</span></div><div class="line"><span class="meta"> $</span><span class="bash">@ :</span></div><div class="line"><span class="meta">$</span><span class="bash">1 = word</span></div><div class="line"><span class="meta">$</span><span class="bash">2 = words</span></div><div class="line"><span class="meta">$</span><span class="bash">3 = with</span></div><div class="line"><span class="meta">$</span><span class="bash">4 = spaces</span></div><div class="line"> "$@" :</div><div class="line"><span class="meta">$</span><span class="bash">1 = word</span></div><div class="line"><span class="meta">$</span><span class="bash">2 = words with spaces</span></div><div class="line"><span class="meta">$</span><span class="bash">3 =</span></div><div class="line"><span class="meta">$</span><span class="bash">4 =</span></div></pre></td></tr></table></figure></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> with our arguments</span></div><div class="line">both $* and $@ produce a four word result:</div><div class="line">     word words with spaces</div><div class="line">"$*" produces a one word result:</div><div class="line">    "word words with spaces"</div><div class="line">"$@" produces a two word result:</div><div class="line">    "word" "words with spaces"</div></pre></td></tr></table></figure><h4 id="a-complicated-application"><a href="#a-complicated-application" class="headerlink" title="a complicated application"></a>a complicated application</h4><ul><li>Output file <code>-f or --file</code></li><li>Interactive mode <code>-i or --interactive</code></li><li>Help <code>-h or --help</code><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></div><div class="line"><span class="meta">#</span><span class="bash"> sys_info_page: program to output a system information page</span></div><div class="line">PROGNAME=$(basename $0)</div><div class="line">TITLE="System Information Report For $HOSTNAME"</div><div class="line">CURRENT_TIME=$(date +"%x %r %Z")</div><div class="line">TIMESTAMP="Generated $CURRENT_TIME, by $USER"</div><div class="line">report_uptime () &#123;</div><div class="line">    cat &lt;&lt;- _EOF_</div><div class="line">        &lt;H2&gt;System Uptime&lt;/H2&gt;</div><div class="line">        &lt;PRE&gt;$(uptime)&lt;/PRE&gt;</div><div class="line">    _EOF_</div><div class="line">    return</div><div class="line">&#125;</div><div class="line">report_disk_space () &#123;</div><div class="line">    cat &lt;&lt;- _EOF_</div><div class="line">        &lt;H2&gt;Disk Space Utilization&lt;/H2&gt;</div><div class="line">        &lt;PRE&gt;$(df -h)&lt;/PRE&gt;</div><div class="line">    _EOF_</div><div class="line">    return</div><div class="line">&#125;</div><div class="line">report_home_space () &#123;</div><div class="line">    if [[ $(id -u) -eq 0 ]]; then</div><div class="line">        cat &lt;&lt;- _EOF_</div><div class="line">            &lt;H2&gt;Home Space Utilization (All Users)&lt;/H2&gt;</div><div class="line">            &lt;PRE&gt;$(du -sh /home/*)&lt;/PRE&gt;</div><div class="line">        _EOF_</div><div class="line">    else</div><div class="line">        cat &lt;&lt;- _EOF_</div><div class="line">            &lt;H2&gt;Home Space Utilization ($USER)&lt;/H2&gt;</div><div class="line">            &lt;PRE&gt;$(du -sh $HOME)&lt;/PRE&gt;</div><div class="line">        _EOF_</div><div class="line">    fi</div><div class="line">    return</div><div class="line">&#125;</div><div class="line">usage () &#123;</div><div class="line">    echo "$PROGNAME: usage: $PROGNAME [-f file | -i]"</div><div class="line">    return</div><div class="line">&#125;</div><div class="line">write_html_page () &#123;</div><div class="line">    cat &lt;&lt;- _EOF_</div><div class="line">        &lt;HTML&gt;</div><div class="line">            &lt;HEAD&gt;</div><div class="line">                &lt;TITLE&gt;$TITLE&lt;/TITLE&gt;</div><div class="line">            &lt;/HEAD&gt;</div><div class="line">            &lt;BODY&gt;</div><div class="line">                &lt;H1&gt;$TITLE&lt;/H1&gt;</div><div class="line">                &lt;P&gt;$TIMESTAMP&lt;/P&gt;</div><div class="line">                $(report_uptime)</div><div class="line">                $(report_disk_space)</div><div class="line">                $(report_home_space)</div><div class="line">            &lt;/BODY&gt;</div><div class="line">        &lt;/HTML&gt;</div><div class="line">    _EOF_</div><div class="line">    return</div><div class="line">&#125;</div><div class="line"><span class="meta">#</span><span class="bash"> process <span class="built_in">command</span> line options</span></div><div class="line">interactive=</div><div class="line">filename=</div><div class="line">while [[ -n $1 ]]; do</div><div class="line">    case $1 in</div><div class="line">        -f | --file)          shift</div><div class="line">                              filename=$1</div><div class="line">                              ;;</div><div class="line">        -i | --interactive)   interactive=1</div><div class="line">                              ;;</div><div class="line">        -h | --help)          usage</div><div class="line">                              exit</div><div class="line">                              ;;</div><div class="line">        *)                    usage &gt;&amp;2</div><div class="line">                              exit 1</div><div class="line">                              ;;</div><div class="line">    esac</div><div class="line">    shift</div><div class="line">done</div><div class="line"><span class="meta">#</span><span class="bash"> interactive mode</span></div><div class="line">if [[ -n $interactive ]]; then</div><div class="line">    while true; do</div><div class="line">        read -p "Enter name of output file: " filename</div><div class="line">        if [[ -e $filename ]]; then</div><div class="line">            read -p "'$filename' exists. Overwrite? [y/n/q] &gt; "</div><div class="line">            case $REPLY in</div><div class="line">                Y|y)    break</div><div class="line">                        ;;</div><div class="line">                Q|q)    echo "Program terminated."</div><div class="line">                        exit</div><div class="line">                        ;;</div><div class="line">                *)      continue</div><div class="line">                        ;;</div><div class="line">            esac</div><div class="line">        fi</div><div class="line">    done</div><div class="line">fi</div><div class="line"><span class="meta">#</span><span class="bash"> output html page</span></div><div class="line">if [[ -n $filename ]]; then</div><div class="line">    if touch $filename &amp;&amp; [[ -f $filename ]]; then</div><div class="line">        write_html_page &gt; $filename</div><div class="line">    else</div><div class="line">        echo "$PROGNAME: Cannot write file '$filename'" &gt;&amp;2</div><div class="line">        exit 1</div><div class="line">    fi</div><div class="line">else</div><div class="line">    write_html_page</div><div class="line">fi</div></pre></td></tr></table></figure></li></ul><h3 id="control-for-loop"><a href="#control-for-loop" class="headerlink" title="control: for loop"></a>control: for loop</h3><h4 id="the-original-for-command’s-syntax"><a href="#the-original-for-command’s-syntax" class="headerlink" title="the original for command’s syntax"></a>the original for command’s syntax</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">for variable [in words]; do</div><div class="line">    commands</div><div class="line">done</div></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></div><div class="line"><span class="meta">#</span><span class="bash"> longest-word : find longest string <span class="keyword">in</span> a file</span></div><div class="line">while [[ -n $1 ]]; do</div><div class="line">    if [[ -r $1 ]]; then</div><div class="line">        max_word=</div><div class="line">        max_len=0</div><div class="line">        for i in $(strings $1); do</div><div class="line">            len=$(echo $i | wc -c)</div><div class="line">            if (( len &gt; max_len )); then</div><div class="line">                max_len=$len</div><div class="line">                max_word=$i</div><div class="line">            fi</div><div class="line">        done</div><div class="line">        echo "$1: '$max_word' ($max_len characters)"</div><div class="line">    fi</div><div class="line">    shift</div><div class="line">done</div></pre></td></tr></table></figure><p>If the optional in words portion of the for command is omitted, for defaults to processing the <strong>positional parameters</strong>.<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> test.sh </span></div><div class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></div><div class="line">for i; do</div><div class="line">    echo $i</div><div class="line">done</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">###################</span></span></div><div class="line">test 1 2 3</div><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td></tr></table></figure></p><h4 id="C-style"><a href="#C-style" class="headerlink" title="C style"></a>C style</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">for (( expression1; expression2; expression3 )); do</div><div class="line">    commands</div><div class="line">done</div></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></div><div class="line"><span class="meta">#</span><span class="bash"> simple_counter : demo of C style <span class="keyword">for</span> <span class="built_in">command</span></span></div><div class="line">for (( i=0; i&lt;5; i=i+1 )); do</div><div class="line">    echo $i</div><div class="line">done</div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">###############################################</span></span></div><div class="line">simple_counter</div><div class="line">0</div><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td></tr></table></figure><h3 id="Strings-and-numbers"><a href="#Strings-and-numbers" class="headerlink" title="Strings and numbers"></a>Strings and numbers</h3><p><code>omitted</code><br><a href="http://billie66.github.io/TLCL/book/chap35.html" target="_blank" rel="external">Strings and number</a></p><h3 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h3><ul><li>shell arrays is <code>0-based</code>.</li><li><p>one way to create an array</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">declare -a a</div></pre></td></tr></table></figure></li><li><p>usually in the following way</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">name[subscript]=value</div><div class="line">name=(value1 value2 ...)</div><div class="line">days=(Sun Mon Tue Wed Thu Fri Sat)</div><div class="line">days=([0]=Sun [1]=Mon [2]=Tue [3]=Wed [4]=Thu [5]=Fri [6]=Sat)</div></pre></td></tr></table></figure></li><li><p>output the whole array<br><strong>(a small mistake in the book, corrected)</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> animals=(<span class="string">"a dog"</span> <span class="string">"a cat"</span> <span class="string">"a fish"</span>)</span></div><div class="line">for i in $&#123;animals[*]&#125;; do echo $i; done</div><div class="line">a dog</div><div class="line">a cat</div><div class="line">a fish</div><div class="line">for i in $&#123;animals[@]&#125;; do echo $i; done</div><div class="line">a dog</div><div class="line">a cat</div><div class="line">a fish</div><div class="line">for i in "$&#123;animals[*]&#125;"; do echo $i; done</div><div class="line">a dog a cat a fish</div><div class="line">for i in "$&#123;animals[@]&#125;"; do echo $i; done</div><div class="line">a dog</div><div class="line">a cat</div><div class="line">a fish</div></pre></td></tr></table></figure></li><li><p>determine the number of elements</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">a[100]=foo</div><div class="line">echo $&#123;#a[@]&#125; # number of array elements</div><div class="line">1</div><div class="line">echo $&#123;#a[100]&#125; # length of element 100</div><div class="line">3</div></pre></td></tr></table></figure></li><li><p>find the index of array used</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">foo=([2]=a [4]=b [6]=c)</div><div class="line">for i in "$&#123;foo[@]&#125;"; do echo $i; done</div><div class="line">a</div><div class="line">b</div><div class="line">c</div><div class="line">for i in "$&#123;!foo[@]&#125;"; do echo $i; done</div><div class="line">2</div><div class="line">4</div><div class="line">6</div></pre></td></tr></table></figure></li><li><p>sort the array</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></div><div class="line"><span class="meta">#</span><span class="bash"> array-sort : Sort an array</span></div><div class="line">a=(f e d c b a)</div><div class="line">echo "Original array: $&#123;a[@]&#125;"</div><div class="line">a_sorted=($(for i in "$&#123;a[@]&#125;"; do echo $i; done | sort))</div><div class="line">echo "Sorted array: $&#123;a_sorted[@]&#125;"</div></pre></td></tr></table></figure></li><li><p>delete an array</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> foo=(a b c d e f)</span></div><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="variable">$&#123;foo[@]&#125;</span></span></div><div class="line">a b c d e f</div><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">unset</span> foo</span></div><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="variable">$&#123;foo[@]&#125;</span></span></div><div class="line"><span class="meta">$</span><span class="bash"></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">#################################</span></span></div><div class="line"><span class="meta">$</span><span class="bash"> foo=(a b c d e f)</span></div><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="variable">$&#123;foo[@]&#125;</span></span></div><div class="line">a b c d e f</div><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">unset</span> <span class="string">'foo[2]'</span></span></div><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="variable">$&#123;foo[@]&#125;</span></span></div><div class="line">a b d e f</div></pre></td></tr></table></figure></li><li><p>any reference to an array variable without a subscript refers to <strong>element zero</strong> of the array</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> foo=(a b c d e f)</span></div><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="variable">$&#123;foo[@]&#125;</span></span></div><div class="line">a b c d e f</div><div class="line"><span class="meta">$</span><span class="bash"> foo=A</span></div><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="variable">$&#123;foo[@]&#125;</span></span></div><div class="line">A b c d e f</div></pre></td></tr></table></figure></li><li><p>associative array<br>associative arrays can <strong>only</strong> be created with the <code>declare</code> command using the new <code>-A</code> option</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">declare -A colors</div><div class="line">colors["red"]="#ff0000"</div><div class="line">colors["green"]="#00ff00"</div><div class="line">colors["blue"]="#0000ff"</div><div class="line">echo $&#123;colors["blue"]&#125;</div></pre></td></tr></table></figure></li></ul><h3 id="Odds-and-ends"><a href="#Odds-and-ends" class="headerlink" title="Odds and ends"></a>Odds and ends</h3><ul><li>group command or subshell<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> group <span class="built_in">command</span></span></div><div class="line"><span class="meta">#</span><span class="bash"> the braces must be separated from the commands by a space</span></div><div class="line"><span class="meta">#</span><span class="bash"> the last <span class="built_in">command</span> must be terminated with either a semicolon or a newline prior to the closing brace.</span></div><div class="line">&#123; command1; command2; [command3; ...] &#125;</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> subshell</span></div><div class="line">(command1; command2; [command3;...])</div></pre></td></tr></table></figure></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">ls -l &gt; output.txt</div><div class="line">echo "Listing of foo.txt" &gt;&gt; output.txt</div><div class="line">cat foo.txt &gt;&gt; output.txt</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">##################################################################</span></span></div><div class="line">&#123; ls -l; echo "Listing of foo.txt"; cat foo.txt; &#125; &gt; output.txt</div><div class="line">(ls -l; echo "Listing of foo.txt"; cat foo.txt) &gt; output.txt</div></pre></td></tr></table></figure><ul><li>process substitution<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">for</span> processes that produce standard output:</span></div><div class="line">&lt;(a list of commands)</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">for</span> processes that intake standard input:</span></div><div class="line"><span class="meta">&gt;</span><span class="bash">(a list of commands)</span></div></pre></td></tr></table></figure></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> to solve the problem brought by subshell, we can employ process substitution like this:</span></div><div class="line">read &lt; &lt;(echo "foo")</div><div class="line">echo $REPLY</div></pre></td></tr></table></figure><ul><li>trap<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">trap argument signal [signal...]</div></pre></td></tr></table></figure></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></div><div class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">trap</span>-demo2 : simple signal handling demo</span></div><div class="line">exit_on_signal_SIGINT () &#123;</div><div class="line">    echo "Script interrupted." 2&gt;&amp;1</div><div class="line">    exit 0</div><div class="line">&#125;</div><div class="line">exit_on_signal_SIGTERM () &#123;</div><div class="line">    echo "Script terminated." 2&gt;&amp;1</div><div class="line">    exit 0</div><div class="line">&#125;</div><div class="line">trap exit_on_signal_SIGINT SIGINT</div><div class="line">trap exit_on_signal_SIGTERM SIGTERM</div><div class="line">for i in &#123;1..5&#125;; do</div><div class="line">    echo "Iteration $i of 5"</div><div class="line">    sleep 5</div><div class="line">done</div></pre></td></tr></table></figure><ul><li><p>temp file<br><code>mktemp</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">tempfile=$(mktemp /tmp/foobar.$$.XXXXXXXXXX)</div><div class="line">echo $tempfile</div><div class="line">/tmp/foobar.6593.UOZuvM6654</div></pre></td></tr></table></figure></li><li><p>asynchronous execution<br><code>wait</code></p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></div><div class="line"><span class="meta">#</span><span class="bash"> async-parent : Asynchronous execution demo (parent)</span></div><div class="line">echo "Parent: starting..."</div><div class="line">echo "Parent: launching child script..."</div><div class="line">async-child &amp;</div><div class="line">pid=$!</div><div class="line">echo "Parent: child (PID= $pid) launched."</div><div class="line">echo "Parent: continuing..."</div><div class="line">sleep 2</div><div class="line">echo "Parent: pausing to wait for child to finish..."</div><div class="line">wait $pid</div><div class="line">echo "Parent: child is finished. Continuing..."</div><div class="line">echo "Parent: parent is done. Exiting."</div></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></div><div class="line"><span class="meta">#</span><span class="bash"> async-child : Asynchronous execution demo (child)</span></div><div class="line">echo "Child: child is running..."</div><div class="line">sleep 5</div><div class="line">echo "Child: child is done. Exiting."</div></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">async-parent</div><div class="line">Parent: starting...</div><div class="line">Parent: launching child script...</div><div class="line">Parent: child (PID= 6741) launched.</div><div class="line">Parent: continuing...</div><div class="line">Child: child is running...</div><div class="line">Parent: pausing to wait for child to finish...</div><div class="line">Child: child is done. Exiting.</div><div class="line">Parent: child is finished. Continuing...</div><div class="line">Parent: parent is done. Exiting.</div></pre></td></tr></table></figure><ul><li>named pipe<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> it works as `process1 | process2`</span></div><div class="line">process1 &gt; named_pipe</div><div class="line">process2 &lt; named_pipe</div></pre></td></tr></table></figure></li></ul><p><code>mkfifo</code><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">mkfifo pipe1</div><div class="line"><span class="meta">#</span><span class="bash"> process1</span></div><div class="line">ls -l &gt; pipe1</div><div class="line"><span class="meta">#</span><span class="bash"> process2</span></div><div class="line">cat &lt; pipe1</div></pre></td></tr></table></figure></p><h3 id="Summay"><a href="#Summay" class="headerlink" title="Summay"></a>Summay</h3><p>Well, we have completed our journey. The only thing left to do now is <strong>practice, practice, practice</strong>. Even though we covered a lot of ground in our trek, we barely <strong>scratched the surface</strong> as far as the command line goes. There are still thousands of command line programs left to be discovered and enjoyed. Start digging around in <code>/usr/bin</code> and you’ll see!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;del&gt;Last Modified: 2017-08-11 11:18:00&lt;/del&gt;&lt;/p&gt;
&lt;h3 id=&quot;Acknowledge&quot;&gt;&lt;a href=&quot;#Acknowledge&quot; class=&quot;headerlink&quot; title=&quot;Acknowledge&quot;&gt;&lt;/a&gt;Acknowledge&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;What is shell script?&lt;br&gt;A shell script is a file containing a series of commands.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;The-first-shell-script&quot;&gt;&lt;a href=&quot;#The-first-shell-script&quot; class=&quot;headerlink&quot; title=&quot;The first shell script&quot;&gt;&lt;/a&gt;The first shell script&lt;/h3&gt;&lt;p&gt;&lt;code&gt;hello_world.sh&lt;/code&gt;&lt;br&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt;!/bin/bash&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; The line above is called a shebang.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; Every shell script should include this as its first line.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; This is our first script.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;echo &#39;Hello World!&#39;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;make it executable&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;ls -l hello_world&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;-rw-r--r-- 1  me    me      63  2009-03-07 10:10 hello_world&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;chmod 755 hello_world&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ls -l hello_world&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;-rwxr-xr-x 1  me    me      63  2009-03-07 10:10 hello_world&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;./hello_word&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Hello World!&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Doing" scheme="http://TaoSama.github.io/categories/Doing/"/>
    
      <category term="Shell" scheme="http://TaoSama.github.io/categories/Doing/Shell/"/>
    
    
  </entry>
  
  <entry>
    <title>Notes, Shell</title>
    <link href="http://TaoSama.github.io/2017/07/01/shell-notes/"/>
    <id>http://TaoSama.github.io/2017/07/01/shell-notes/</id>
    <published>2017-07-01T02:13:10.000Z</published>
    <updated>2017-09-20T09:28:09.000Z</updated>
    
    <content type="html"><![CDATA[<p><del>Last Modified: 2017-07-31 11:18:00</del></p><h3 id="Acknowledge"><a href="#Acknowledge" class="headerlink" title="Acknowledge"></a>Acknowledge</h3><ul><li>What is shell?<ul><li>The shell is a program that takes keyboard commands and passes them to the operating system to carry out.</li><li>Almost all Linux distributions supply a shell program from the GNU Project called <strong>bash</strong>.</li><li><strong>Bash</strong> is an enhanced replacement for <strong>sh</strong>, the original Unix shell program written by Steve Bourne.</li></ul></li><li>What is terminal emulator?<ul><li>We use a terminal emulator to interact with the shell when using a GUI.</li><li>KDE uses <strong>konsole</strong> and GNOME uses <strong>gnome-terminal</strong>, though it’s likely called simply <strong>“terminal”</strong> on our menu.</li></ul></li><li><p>Shell prompt</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[me@linuxbox ~]$</div></pre></td></tr></table></figure></li><li><p>Some Simple Commands</p><ul><li>date - Display the current time and date.</li><li>cal - Display a calendar of the current month.</li><li>df - Display the current amount of free space on your disk drives.</li><li>free - Display the amount of free memory.</li><li>exit - End the terminal session.</li></ul></li></ul><a id="more"></a><h2 id="Navigate-the-file-system"><a href="#Navigate-the-file-system" class="headerlink" title="Navigate the file system"></a>Navigate the file system</h2><ul><li>pwd - Print name of current working directory</li><li>cd - Change directory</li><li>ls - List directory contents</li><li>file – Determine file type</li><li>less – View file contents</li></ul><h4 id="important-facts-about-filenames"><a href="#important-facts-about-filenames" class="headerlink" title="important facts about filenames"></a>important facts about filenames</h4><ul><li>Filenames that <strong>begin with</strong> a <strong>period character(.)</strong> are hidden.<br><code>ls -a</code> can display them, <code>ll -a</code> can display the detailed lists.</li><li><strong>Filenames and commands</strong> in Linux, like Unix, are <strong>case sensitive</strong>. The filenames “File1” and “file1” refer to different files.</li><li>If you want to <strong>represent spaces</strong> between words in a filename, use <strong>underscore characters(_)</strong>. Though Linux supports long filenames which may contain embedded spaces and punctuation characters: period(.), dash(-), underscore(_).</li></ul><h3 id="Manipulate-files-and-directories"><a href="#Manipulate-files-and-directories" class="headerlink" title="Manipulate files and directories"></a>Manipulate files and directories</h3><ul><li>cp – Copy files and directories</li><li>mv – Move/rename files and directories</li><li>mkdir – Create directories</li><li>rm – Remove files and directories</li><li>ln – Create hard and symbolic links</li></ul><p><strong>Here is a useful tip.</strong> Whenever you use wildcards with <code>rm</code> (besides carefully checking your typing!), test the wildcard first with <code>ls</code>.<br>|Wildcard|Meaning|<br>|:——:|:——|<br>|*|    Matches any characters|<br>|?|    Matches any single character|<br>|[characters]|    Matches any character that is a member of the set characters|<br>|[!characters]|    Matches any character that is not a member of the set characters|<br>|[[:class:]]|    Matches any character that is a member of the specified class|</p><table><thead><tr><th style="text-align:center">Character</th><th style="text-align:left">Class Meaning</th></tr></thead><tbody><tr><td style="text-align:center">[:alnum:]</td><td style="text-align:left">Matches any alphanumeric character</td></tr><tr><td style="text-align:center">[:alpha:]</td><td style="text-align:left">Matches any alphabetic character</td></tr><tr><td style="text-align:center">[:digit:]</td><td style="text-align:left">Matches any numeral</td></tr><tr><td style="text-align:center">[:lower:]</td><td style="text-align:left">Matches any lowercase letter</td></tr><tr><td style="text-align:center">[:upper:]</td><td style="text-align:left">Matches any uppercase letter</td></tr></tbody></table><h4 id="ln-—-Create-links"><a href="#ln-—-Create-links" class="headerlink" title="ln — Create links"></a>ln — Create links</h4><h5 id="create-hard-links"><a href="#create-hard-links" class="headerlink" title="create hard links"></a>create hard links</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ln file link</div></pre></td></tr></table></figure><ul><li>a hard link may not reference a file that is not on the same disk partition as the link itself.</li><li>a hard link may not reference a directory.</li><li>a hard link is <strong>indistinguishable</strong> from the file itself when listed with <code>ls</code>. </li><li>when a hard link is deleted, the link is removed but the contents of the file itself continue to exist (that is, its space is not deallocated) until all links to the file are deleted.</li></ul><h5 id="create-symbolic-links"><a href="#create-symbolic-links" class="headerlink" title="create symbolic links"></a>create symbolic links</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ln -s item link</div></pre></td></tr></table></figure><ul><li>a file pointed to by a symbolic link is <strong>also written</strong>, if you write some something to the symbolic link.</li><li>however when you delete a symbolic link, <strong>only the link is deleted</strong>, not the file itself.</li></ul><h3 id="Use-commands"><a href="#Use-commands" class="headerlink" title="Use commands"></a>Use commands</h3><ul><li>type – Indicate how a command name is interpreted</li><li>which – Display which executable program will be executed</li><li>man – Display a command’s manual page</li><li>apropos – Display a list of appropriate commands</li><li>info – Display a command’s info entry</li><li>whatis – Display a very brief description of a command</li><li>whereis - Display the path of the executable program of a command</li><li>alias – Create an alias for a command</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> append a new line of <span class="built_in">alias</span></span></div><div class="line">echo 'alias foo="cd /usr; ls; cd -"' &gt;&gt; .bashrc</div><div class="line"><span class="meta">#</span><span class="bash"> force bash to re-read the modified .bashrc file</span></div><div class="line">source .bashrc</div></pre></td></tr></table></figure><h3 id="I-O-redirection"><a href="#I-O-redirection" class="headerlink" title="I/O redirection"></a>I/O redirection</h3><ul><li>cat - Concatenate files</li><li>sort - Sort lines of text</li><li>uniq - Report or omit repeated lines</li><li>grep - Print lines matching a pattern</li><li>wc - Print newline, word, and byte counts for each file</li><li>head - Output the first part of a file</li><li>tail - Output the last part of a file</li><li><p>tee - Read from standard input and write to standard output and files</p></li><li><p><code>&lt;</code> operator redirects the standard input, <code>&gt;</code> operator redirects the standard output.<br><code>&gt;&gt;</code> means to append instead of overwriting.<br>file streams as standard <strong>input, output and error</strong>, the shell references them internally as <strong>file descriptors zero, one and two</strong>, respectively</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> redirect to standard error</span></div><div class="line">ls -l /bin/usr 2&gt; ls-error.txt</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> redirect standard output and error to same file</span></div><div class="line"><span class="meta">#</span><span class="bash"> the redirection of standard error must always occur after</span></div><div class="line"><span class="meta">#</span><span class="bash"> redirecting standard output or it doesn’t work</span></div><div class="line">ls -l /bin/usr &gt; ls-output.txt 2&gt;&amp;1  # old version</div><div class="line">ls -l /bin/usr &amp;&gt; ls-output.txt      # new version</div></pre></td></tr></table></figure></li><li><p>to suppress error messages from a command, a special file called <code>/dev/null</code>, and it is a system device called a <strong>bit bucket</strong> which accepts input and does nothing with it.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ls -l /bin/usr 2&gt; /dev/null</div></pre></td></tr></table></figure></li><li><p>the <strong>pipe</strong> operator <code>|</code> (vertical bar), the standard output of one command can be piped into the standard input of another.<br>usually assisted with filters.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> sort and unique files <span class="keyword">then</span> show</span></div><div class="line">ls /bin /usr/bin | sort | uniq | less</div><div class="line"><span class="meta">#</span><span class="bash"> report the duplicate files with -d</span></div><div class="line">ls /bin /usr/bin | sort | uniq -d | less</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> add wc to pipelines to count things</span></div><div class="line">ls /bin /usr/bin | sort | uniq | wc -l</div></pre></td></tr></table></figure></li><li><p><strong>grep</strong> is a powerful program used to find text patterns within files.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ls /bin /usr/bin | sort | uniq | grep zip</div></pre></td></tr></table></figure></li></ul><p><code>-i</code> to ignore case, <code>-v</code> to print the lines that do not match the pattern, <code>-n</code> to show the line numbers.</p><ul><li><p><strong>head</strong> prints the <strong>first ten lines</strong> of a file and the <strong>tail</strong> command prints <strong>the last ten lines</strong> by default.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> -n to adjust the number of lines to show</span></div><div class="line">head -n 5 ls-output.txt</div><div class="line"><span class="meta">#</span><span class="bash"> -f to allow tail to view files <span class="keyword">in</span> real-time</span></div><div class="line">tail -f /var/log/messages</div></pre></td></tr></table></figure></li><li><p><strong>tee</strong> reads standard input and copies it <strong>to both standard output</strong> (allowing the data to continue down the pipeline) and <strong>to one or more files</strong>.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ls /usr/bin | tee ls.txt | grep zip</div></pre></td></tr></table></figure></li></ul><h3 id="Expansion"><a href="#Expansion" class="headerlink" title="Expansion"></a>Expansion</h3><ul><li><p>pathname expansion</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">echo D*</div><div class="line">Desktop  Documents</div></pre></td></tr></table></figure></li><li><p>arithmetic expansion</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> / is just <span class="built_in">integer</span> division, ** is exponentiation</span></div><div class="line">echo $((2+2-2*2/3%10+2**2))</div><div class="line">7</div></pre></td></tr></table></figure></li><li><p>brace expansion</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">echo Front-&#123;A,B,C&#125;-Back</div><div class="line">Front-A-Back Front-B-Back Front-C-Back</div><div class="line"></div><div class="line">echo Number_&#123;1..5&#125;</div><div class="line">Number_1  Number_2  Number_3  Number_4  Number_5</div><div class="line"></div><div class="line">echo a&#123;A&#123;1,2&#125;,B&#123;3,4&#125;&#125;b</div><div class="line">aA1b aA2b aB3b aB4b</div></pre></td></tr></table></figure></li><li><p>parameter expansion</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">echo $USER</div><div class="line">me</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> to see a list of available variables</span></div><div class="line">printenv | less</div></pre></td></tr></table></figure></li><li><p>command substitution</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">echo $(ls)</div><div class="line">Desktop Documents ls-output.txt Music Pictures Public Templates</div><div class="line"></div><div class="line">ls -l $(which cp)</div><div class="line">-rwxr-xr-x 1 root root 71516 2007-12-05 08:58 /bin/cp</div><div class="line"></div><div class="line">file $(ls /usr/bin/* | grep zip)</div><div class="line">/usr/bin/bunzip2:     symbolic link to `bzip2'</div></pre></td></tr></table></figure></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> use back-quotes instead of the dollar sign and parentheses</span></div><div class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">in</span> older version of bash</span></div><div class="line">ls -l `which cp`</div><div class="line">-rwxr-xr-x 1 root root 71516 2007-12-05 08:58 /bin/cp</div></pre></td></tr></table></figure><h4 id="to-control-expansion"><a href="#to-control-expansion" class="headerlink" title="to control expansion"></a>to control expansion</h4><ul><li>double quotes<br>If you place text inside double quotes, all the special characters used by the shell lose their special meaning and are treated as ordinary characters.<br>The <strong>exceptions</strong> are <code>$</code>, <code>\ (backslash)</code>, and <code>` (back-quote)</code>.</li><li>single quotes<br>All expansions lose their special meaning.</li><li>escape character<br>You can precede a character with a <code>\ (backslash)</code> to selectively prevent an expansion.<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">echo text ~/*.txt &#123;a,b&#125; $(echo foo) $((2+2)) $USER</div><div class="line">text /home/me/ls-output.txt a b foo 4 me</div></pre></td></tr></table></figure></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">echo "text ~/*.txt &#123;a,b&#125; $(echo foo) $((2+2)) $USER"</div><div class="line">text ~/*.txt   &#123;a,b&#125; foo 4 me</div></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">echo 'text ~/*.txt &#123;a,b&#125; $(echo foo) $((2+2)) $USER'</div><div class="line">text ~/*.txt  &#123;a,b&#125; $(echo foo) $((2+2)) $USER</div></pre></td></tr></table></figure><h3 id="Keyboard-operating-techniques"><a href="#Keyboard-operating-techniques" class="headerlink" title="Keyboard operating techniques"></a>Keyboard operating techniques</h3><ul><li>clear - Clear the screen</li><li>history - Display the contents of the history list</li></ul><h4 id="cursor-movement-shortcuts"><a href="#cursor-movement-shortcuts" class="headerlink" title="cursor movement shortcuts"></a>cursor movement shortcuts</h4><table><thead><tr><th style="text-align:center">Key</th><th style="text-align:left">Action</th></tr></thead><tbody><tr><td style="text-align:center">Ctrl-a</td><td style="text-align:left">Move cursor to the beginning of the line.</td></tr><tr><td style="text-align:center">Ctrl-e</td><td style="text-align:left">Move cursor to the end of the line.</td></tr><tr><td style="text-align:center">Ctrl-f</td><td style="text-align:left">Move cursor forward one character; same as the right arrow key.</td></tr><tr><td style="text-align:center">Ctrl-b</td><td style="text-align:left">Move cursor backward one character; same as the left arrow key.</td></tr><tr><td style="text-align:center">Alt-f</td><td style="text-align:left">Move cursor forward one word.</td></tr><tr><td style="text-align:center">Alt-b</td><td style="text-align:left">Move cursor backward one word.</td></tr></tbody></table><h4 id="text-editing-shortcuts"><a href="#text-editing-shortcuts" class="headerlink" title="text editing shortcuts"></a>text editing shortcuts</h4><table><thead><tr><th style="text-align:center">Key</th><th style="text-align:left">Action</th></tr></thead><tbody><tr><td style="text-align:center">Ctrl-d</td><td style="text-align:left">Delete the character at the cursor location.</td></tr><tr><td style="text-align:center">Ctrl-t</td><td style="text-align:left">Transpose(exchange)the character at the cursor location with the one preceding it.</td></tr><tr><td style="text-align:center">Alt-t</td><td style="text-align:left">Transpose the word at the cursor location with the one preceding it.</td></tr><tr><td style="text-align:center">Alt-l</td><td style="text-align:left">Convert the characters from the cursor location to the end of the word to lowercase.</td></tr><tr><td style="text-align:center">Alt-u</td><td style="text-align:left">Convert the characters from the cursor location to the end of the word to uppercase.</td></tr></tbody></table><h4 id="cut-and-paste-shortcuts"><a href="#cut-and-paste-shortcuts" class="headerlink" title="cut and paste shortcuts"></a>cut and paste shortcuts</h4><table><thead><tr><th style="text-align:center">Key</th><th style="text-align:left">Action</th></tr></thead><tbody><tr><td style="text-align:center">Ctrl-k</td><td style="text-align:left">Kill text from the cursor location to the end of line.</td></tr><tr><td style="text-align:center">Ctrl-u</td><td style="text-align:left">Kill text from the cursor location to the beginning of the line.</td></tr><tr><td style="text-align:center">Alt-d</td><td style="text-align:left">Kill text from the cursor location to the end of the current word.</td></tr><tr><td style="text-align:center">Alt-Backspace</td><td style="text-align:left">Kill text from the cursor location to the beginning of the word. If the cursor is at the beginning of a word, kill the previous word.</td></tr><tr><td style="text-align:center">Ctrl-y</td><td style="text-align:left">Yank text from the kill-ring and insert it at the cursor location.</td></tr></tbody></table><h4 id="history-expansion-and-shortcuts"><a href="#history-expansion-and-shortcuts" class="headerlink" title="history expansion and shortcuts"></a>history expansion and shortcuts</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">history | grep /usr/bin</div><div class="line"><span class="meta">#</span><span class="bash"> 88  ls -l /usr/bin &gt; ls-output.txt</span></div><div class="line"><span class="meta">#</span><span class="bash"> to expand the <span class="built_in">command</span> of <span class="built_in">history</span> of 88th line</span></div><div class="line">!88</div><div class="line"><span class="meta">#</span><span class="bash"> to expand the last <span class="built_in">command</span> of <span class="built_in">history</span></span></div><div class="line">!!</div></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">Key</th><th style="text-align:left">Action</th></tr></thead><tbody><tr><td style="text-align:center">Ctrl-p</td><td style="text-align:left">Move to the previous history entry. Same action as the up arrow.</td></tr><tr><td style="text-align:center">Ctrl-n</td><td style="text-align:left">Move to the next history entry. Same action as the down arrow.</td></tr><tr><td style="text-align:center">Ctrl-r</td><td style="text-align:left">Reverse incremental search. Searches incrementally from the current command line up the history list.</td></tr><tr><td style="text-align:center">Ctrl-o</td><td style="text-align:left">Execute the current item in the history list and advance to the next one. This is handy if you are trying to re-execute a sequence of commands in the history list.</td></tr></tbody></table><h3 id="Permission"><a href="#Permission" class="headerlink" title="Permission"></a>Permission</h3><ul><li>id – Display user identity</li><li>chmod – Change a file’s mode</li><li>umask – Set the default file permissions</li><li>su – Run a shell as another user</li><li>sudo – Execute a command as another user</li><li>chown – Change a file’s owner</li><li>chgrp – Change a file’s group ownership</li><li>passwd – Change a user’s password</li></ul><h4 id="access-rights-read-write-execution"><a href="#access-rights-read-write-execution" class="headerlink" title="access rights, read, write, execution"></a>access rights, read, write, execution</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ls -l foo.txt</div><div class="line">-rw-rw-r-- 1 me   me   0 2008-03-06 14:52 foo.txt</div><div class="line"><span class="meta">#</span><span class="bash"> the first one is file <span class="built_in">type</span>, and the left nine is file mode.</span></div></pre></td></tr></table></figure><h5 id="file-types"><a href="#file-types" class="headerlink" title="file types"></a>file types</h5><table><thead><tr><th style="text-align:center">Attribute</th><th style="text-align:left">File Type</th></tr></thead><tbody><tr><td style="text-align:center">-</td><td style="text-align:left">a regular file</td></tr><tr><td style="text-align:center">d</td><td style="text-align:left">A directory</td></tr><tr><td style="text-align:center">l</td><td style="text-align:left">A symbolic link. Notice that with symbolic links, the remainning file attributes are always “rwxrwxrwx” and are dummy values. The real file attributes are those of the file the symbolic link points to.</td></tr><tr><td style="text-align:center">c</td><td style="text-align:left">A character special file. This file type refers to a device that handles data as a stream of bytes, such as a terminal or modem.</td></tr><tr><td style="text-align:center">b</td><td style="text-align:left">A block special file. This file type refers to a device that handles data in blocks, such as a hard drive or CD-ROM drive.</td></tr></tbody></table><h5 id="file-mode"><a href="#file-mode" class="headerlink" title="file mode"></a>file mode</h5><p><img src="http://7xru22.com1.z0.glb.clouddn.com/101.png" alt=""><br>|Attribute|    Files|    Directories|<br>|:-:|:-|<br>|r|    Allows a file to be opened and read.|    Allows a directory’s contents to be listed if the execute attribute is also set.|<br>|w|    Allows a file to be written to or truncated, however this attribute does not allow files to be renamed or deleted. The ability to delete or rename files is determined by directory attributes.|    Allows files within a directory to be created, deleted, and renamed if the execute attribute is also set.|<br>|x|    Allows a file to be treated as a program and executed. Program files written in scripting languages must also be set as readable to be executed.|    Allows a directory to be entered, e.g., cd directory.|</p><h4 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a>chmod</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">chmod 600 foo.txt</div><div class="line">ls -l foo.txt</div><div class="line">-rw------- 1 me    me    0  2008-03-06 14:52 foo.txt</div></pre></td></tr></table></figure><p>a few common ones: 7 (rwx), 6 (rw-), 5 (r-x), 4 (r–), and 0 (—).</p><h5 id="chmod-Symbolic-Notation"><a href="#chmod-Symbolic-Notation" class="headerlink" title="chmod Symbolic Notation"></a>chmod Symbolic Notation</h5><table><thead><tr><th style="text-align:center">Notation</th><th style="text-align:left">Meaning</th></tr></thead><tbody><tr><td style="text-align:center">u</td><td style="text-align:left">Short for “user”, but means the file or directory owner.</td></tr><tr><td style="text-align:center">g</td><td style="text-align:left">Group owner.</td></tr><tr><td style="text-align:center">o</td><td style="text-align:left">Short for “others”, but means world.</td></tr><tr><td style="text-align:center">a</td><td style="text-align:left">Short for “all”, the combination of “u”, “g”, and “o”.</td></tr></tbody></table><h5 id="chmod-Symbolic-Notation-Examples"><a href="#chmod-Symbolic-Notation-Examples" class="headerlink" title="chmod Symbolic Notation Examples"></a>chmod Symbolic Notation Examples</h5><table><thead><tr><th style="text-align:center">Example</th><th style="text-align:left">Meaning</th></tr></thead><tbody><tr><td style="text-align:center">u+x</td><td style="text-align:left">Add execute permission for the owner.</td></tr><tr><td style="text-align:center">u-x</td><td style="text-align:left">Remove execute permission from the owner.</td></tr><tr><td style="text-align:center">+x</td><td style="text-align:left">Add execute permission for the owner, group, and world. Equivalent to a+x.</td></tr><tr><td style="text-align:center">o-rw</td><td style="text-align:left">Remove the read and write permission from anyone besides the owner and group owner.</td></tr><tr><td style="text-align:center">u+x,go=rw</td><td style="text-align:left">Add execute permission for the owner and set the permissions for the group and others to read and execute. Multiple specifications may be separated by commas.</td></tr></tbody></table><h4 id="umask"><a href="#umask" class="headerlink" title="umask"></a>umask</h4><p>The umask command controls the default permissions given to a file when it is created. It uses octal notation to express a mask of bits <strong>to be removed</strong> from a file’s mode attributes.<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">umask 0022</div></pre></td></tr></table></figure></p><h4 id="others"><a href="#others" class="headerlink" title="others"></a>others</h4><ul><li><p>The <strong>su</strong> command is used to start a shell as another user. </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">su [-[l]] [user]</div></pre></td></tr></table></figure></li><li><p>The <strong>sudo</strong> command is used to execute commands as a different user (usually the superuser) in a very controlled way.</p></li><li><p>The <strong>chown</strong> command is used to change the owner and group owner of a file or directory. Superuser privileges are required to use this command. </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chown [owner][:[group]] file...</div></pre></td></tr></table></figure></li><li><p>In older versions of Unix, the chown command only changed file ownership, not group ownership. For that purpose, a separate command, <strong>chgrp</strong> was used. It works much the same way as chown, except for being more limited.</p></li><li><p>The <strong>passwd</strong> command is used to set passwords for <strong>yourself</strong> (and for other users if you have access to superuser privileges). </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">passwd [user]</div></pre></td></tr></table></figure></li><li><p>more infos, … <code>adduser, useradd, groupadd</code></p></li></ul><h3 id="Process"><a href="#Process" class="headerlink" title="Process"></a>Process</h3><ul><li>ps – Report a snapshot of current processes</li><li>top – Display tasks</li><li>jobs – List active jobs</li><li>bg – Place a job in the background</li><li>fg – Place a job in the foreground</li><li>kill – Send a signal to a process</li><li>killall – Kill processes by name</li><li>shutdown – Shutdown or reboot the system</li></ul><h4 id="Process-States"><a href="#Process-States" class="headerlink" title="Process States"></a>Process States</h4><table><thead><tr><th style="text-align:center">State</th><th style="text-align:left">Meaning</th></tr></thead><tbody><tr><td style="text-align:center">R</td><td style="text-align:left">Running. This means that the process is running or ready to run.</td></tr><tr><td style="text-align:center">S</td><td style="text-align:left">Sleeping. A process is not running; rather, it is waiting for an event, such as a keystroke or network packet.</td></tr><tr><td style="text-align:center">D</td><td style="text-align:left">Uninterruptible Sleep. Process is waiting for I/O such as a disk drive.</td></tr><tr><td style="text-align:center">T</td><td style="text-align:left">Stopped. Process has been instructed to stop. More on this later.</td></tr><tr><td style="text-align:center">Z</td><td style="text-align:left">A defunct or “zombie” process. This is a child process that has terminated, but has not been cleaned up by its parent.</td></tr><tr><td style="text-align:center">&lt;</td><td style="text-align:left">A high priority process. It’s possible to grant more importance to a process, giving it more time on the CPU. This property of a process is called niceness. A process with high priority is said to be less nice because it’s taking more of the CPU’s time, which leaves less for everybody else.</td></tr><tr><td style="text-align:center">N</td><td style="text-align:left">A low priority process. A process with low priority (a “nice” process) will only get processor time after other processes with higher priority have been serviced.</td></tr></tbody></table><h4 id="Signals"><a href="#Signals" class="headerlink" title="Signals"></a>Signals</h4><p>In the case of <strong>Ctrl-c</strong>, a signal called <strong>INT</strong> (Interrupt) is sent; with <strong>Ctrl-z</strong>, a signal called <strong>TSTP</strong> (Terminal Stop.) </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">kill [-Number] PID</div><div class="line">kill [-SIG&lt;Name&gt;] PID</div></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">Number</th><th style="text-align:center">Name</th><th style="text-align:left">Meaning</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">HUP</td><td style="text-align:left">Hangup.</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">INT</td><td style="text-align:left">Interrupt. Performs the same function as the Ctrl-c key sent from the terminal. It will usually terminate a program.</td></tr><tr><td style="text-align:center">9</td><td style="text-align:center">KILL</td><td style="text-align:left">Kill.</td></tr><tr><td style="text-align:center">15</td><td style="text-align:center">TERM</td><td style="text-align:left">Terminate. This is the default signal sent by the kill command. If a program is still “alive” enough to receive signals, it will terminate.</td></tr><tr><td style="text-align:center">18</td><td style="text-align:center">CONT</td><td style="text-align:left">Continue. This will restore a process after a STOP signal.</td></tr><tr><td style="text-align:center">19</td><td style="text-align:center">STOP</td><td style="text-align:left">Stop. This signal causes a process to pause without terminating. Like the KILL signal, it is not sent to the target process, and thus it cannot be ignored.</td></tr></tbody></table><h3 id="Shell-environment"><a href="#Shell-environment" class="headerlink" title="Shell environment"></a>Shell environment</h3><ul><li>printenv – Print part or all of the environment</li><li>set – Set shell options</li><li>export – Export environment to subsequently executed programs</li><li>alias – Create an alias for a command</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">printenv USER # print environment variable USER</div><div class="line">echo $USER    # a same way as above</div><div class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">export</span> added PATH</span></div><div class="line">PATH=$PATH:$HOME/bin</div><div class="line">export PATH</div></pre></td></tr></table></figure><h3 id="Basic-usage-of-vi"><a href="#Basic-usage-of-vi" class="headerlink" title="Basic usage of vi"></a>Basic usage of vi</h3><p><code>to do</code></p><h3 id="Customize-shell-prompt"><a href="#Customize-shell-prompt" class="headerlink" title="Customize shell prompt"></a>Customize shell prompt</h3><p><code>omitted</code></p><h3 id="Package-control"><a href="#Package-control" class="headerlink" title="Package control"></a>Package control</h3><table><thead><tr><th style="text-align:center">-</th><th style="text-align:center">Debian Style (.deb)</th><th style="text-align:center">Red Hat Style (.rpm)</th></tr></thead><tbody><tr><td style="text-align:center">Distributions (Partial Listing)</td><td style="text-align:center">Debian, Ubuntu, Xandros, Linspire</td><td style="text-align:center">Fedora, CentOS, Red Hat Enterprise Linux, OpenSUSE, Mandriva, PCLinuxOS</td></tr><tr><td style="text-align:center">Low-Level Tools</td><td style="text-align:center">dpkg</td><td style="text-align:center">apt-get, aptitude</td></tr><tr><td style="text-align:center">High-Level Tools</td><td style="text-align:center">rpm</td><td style="text-align:center">yum</td></tr><tr><td style="text-align:center">Package Search Commands</td><td style="text-align:center">apt-get update; apt-cache search search_string</td><td style="text-align:center">yum search search_string</td></tr><tr><td style="text-align:center">Package Installation Commands</td><td style="text-align:center">apt-get update; apt-get install package_name</td><td style="text-align:center">yum install package_name</td></tr><tr><td style="text-align:center">Low-Level Package Installation Commands</td><td style="text-align:center">dpkg –install package_file</td><td style="text-align:center">rpm -i package_file</td></tr><tr><td style="text-align:center">Package Removal Commands</td><td style="text-align:center">apt-get remove package_name</td><td style="text-align:center">yum erase package_name</td></tr><tr><td style="text-align:center">Package Update Commands</td><td style="text-align:center">apt-get update; apt-get upgrade</td><td style="text-align:center">yum update</td></tr><tr><td style="text-align:center">Low-Level Package Upgrade Commands</td><td style="text-align:center">dpkg –install package_file</td><td style="text-align:center">rpm -U package_file</td></tr><tr><td style="text-align:center">Package Listing Commands</td><td style="text-align:center">dpkg –list</td><td style="text-align:center">rpm -qa</td></tr><tr><td style="text-align:center">Package Status Commands</td><td style="text-align:center">dpkg –status package_name</td><td style="text-align:center">rpm -q package_name</td></tr><tr><td style="text-align:center">Package Information Commands</td><td style="text-align:center">apt-cache show package_name</td><td style="text-align:center">yum info package_name</td></tr><tr><td style="text-align:center">Package File Identification Commands</td><td style="text-align:center">dpkg –search file_name</td><td style="text-align:center">rpm -qf file_name</td></tr></tbody></table><h3 id="Storage-devices"><a href="#Storage-devices" class="headerlink" title="Storage devices"></a>Storage devices</h3><ul><li>mount – Mount a file system</li><li>umount – Unmount a file system</li><li>fsck – Check and repair a file system</li><li>fdisk – Partition table manipulator</li><li>mkfs – Create a file system</li><li>fdformat – Format a floppy disk</li><li>dd – Write block oriented data directly to a device</li><li>genisoimage (mkisofs) – Create an ISO 9660 image file</li><li>wodim (cdrecord) – Write data to optical storage media</li><li>md5sum – Calculate an MD5 checksum</li></ul><p><code>omitted</code></p><h3 id="Networking"><a href="#Networking" class="headerlink" title="Networking"></a>Networking</h3><ul><li>ping - Send an ICMP ECHO_REQUEST to network hosts</li><li>traceroute - Print the route packets trace to a network host</li><li>netstat - Print network connections, routing tables, interface statistics, masquerade connections, and multicast memberships</li><li>ftp - Internet file transfer program</li><li>wget - Non-interactive network downloader</li><li>ssh - OpenSSH SSH client (remote login program)</li></ul><h3 id="Find-files"><a href="#Find-files" class="headerlink" title="Find files"></a>Find files</h3><ul><li>locate – Find files by name</li><li>find – Search for files in a directory hierarchy</li></ul><p>We will also look at a command that is often used with file search commands to process the resulting list of files:</p><ul><li>xargs – Build and execute command lines from standard input</li></ul><p>In addition, we will introduce a couple of commands to assist us in or exploration:</p><ul><li>touch – Change file times</li><li>stat – Display file or file system status</li></ul><h3 id="Archive-and-backup"><a href="#Archive-and-backup" class="headerlink" title="Archive and backup"></a>Archive and backup</h3><ul><li>gzip – Compress or expand files</li><li>bzip2 – A block sorting file compressor</li><li>tar – Tape archiving utility</li><li>zip – Package and compress files</li><li>rsync – Remote file and directory synchronization</li></ul><h3 id="Regex"><a href="#Regex" class="headerlink" title="Regex"></a>Regex</h3><p>grep: global regular expression print<br><code>-n</code>: Prefix each matching line with the number of the line within the file. May also be specified –line-number.<br><code>-r</code>: Recursively search subdirectories listed.</p><h4 id="metacharacters"><a href="#metacharacters" class="headerlink" title="metacharacters"></a>metacharacters</h4><p>Regular expression metacharacters consist of the following:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">^ $ . [ ] &#123; &#125; - ? * + ( ) | \</div></pre></td></tr></table></figure></p><h5 id="any-character"><a href="#any-character" class="headerlink" title="any character"></a>any character</h5><p>The dot or period(.) character is used to match any character. </p><h5 id="anchors"><a href="#anchors" class="headerlink" title="anchors"></a>anchors</h5><p>The caret <code>(^)</code> and dollar <code>($)</code> sign characters are treated as anchors. This means that they cause the match to occur only if the regular expression is found <strong>at the beginning of the line</strong> or <strong>at the end of the line</strong>.<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> crossword puzzles</span></div><div class="line">grep -i '^..j.r$' /usr/share/dict/words</div><div class="line">Gujar</div><div class="line">Kajar</div><div class="line">Major</div><div class="line">major</div></pre></td></tr></table></figure></p><h5 id="bracket-expressions"><a href="#bracket-expressions" class="headerlink" title="bracket expressions"></a>bracket expressions</h5><p>Bracket expressions is used to match a single character from a specified set of characters.<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">grep -h '[bg]zip' dirlist*.txt</div><div class="line">bzip2</div><div class="line">bzip2recover</div><div class="line">gzip</div></pre></td></tr></table></figure></p><p>Metacharacters lose their special meaning when placed within brackets. However, <strong>two cases</strong> have different meanings.<br>The first is the caret <code>(^)</code>, which is used to indicate <strong>negation</strong>; the second is the dash <code>(-)</code>, which is used to indicate a <strong>character range</strong>.<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">grep -h '[^bg]zip' dirlist*.txt</div><div class="line">bunzip2</div><div class="line">gunzip</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> it will match all filenames starting with letters and numbers:</span></div><div class="line">grep -h '^[A-Za-z0-9]' dirlist*.txt</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> to include a dash, making it the first character <span class="keyword">in</span> the expression</span></div><div class="line"><span class="meta">#</span><span class="bash"> it will match every filename containing a dash, or a upper <span class="keyword">case</span> “A” or an uppercase “Z”.</span></div><div class="line">grep -h '[-AZ]' dirlist*.txt</div></pre></td></tr></table></figure></p><h4 id="POSIX-Character-Classes"><a href="#POSIX-Character-Classes" class="headerlink" title="POSIX Character Classes"></a>POSIX Character Classes</h4><table><thead><tr><th style="text-align:center">Character Class</th><th style="text-align:left">Description</th></tr></thead><tbody><tr><td style="text-align:center">[:alnum:]</td><td style="text-align:left">The alphanumeric characters. In ASCII, equivalent to: [A-Za-z0-9]</td></tr><tr><td style="text-align:center">[:word:]</td><td style="text-align:left">The same as [:alnum:], with the addition of the underscore (_) character.</td></tr><tr><td style="text-align:center">[:alpha:]</td><td style="text-align:left">The alphabetic characters. In ASCII, equivalent to: [A-Za-z]</td></tr><tr><td style="text-align:center">[:digit:]</td><td style="text-align:left">The numerals zero through nine.</td></tr><tr><td style="text-align:center">[:lower:]</td><td style="text-align:left">The lowercase letters.</td></tr><tr><td style="text-align:center">[:space:]</td><td style="text-align:left">The whitespace characters including space, tab, carriage return, newline, vertical tab, and form feed. In ASCII, equivalent to: [ \t\r\n\v\f]</td></tr><tr><td style="text-align:center">[:upper:]</td><td style="text-align:left">The upper case characters.</td></tr><tr><td style="text-align:center">[:xdigit:]</td><td style="text-align:left">Characters used to express hexadecimal numbers. In ASCII, equivalent to: [0-9A-Fa-f]</td></tr></tbody></table><h4 id="basic-regular-expressions-BRE-and-extended-regular-expressions-ERE"><a href="#basic-regular-expressions-BRE-and-extended-regular-expressions-ERE" class="headerlink" title="basic regular expressions (BRE) and extended regular expressions (ERE)"></a>basic regular expressions (BRE) and extended regular expressions (ERE)</h4><p>What’s the difference between BRE and ERE?<br>It’s a matter of metacharacters.<br>With BRE, the following metacharacters are recognized:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">^ $ . [ ] *</div></pre></td></tr></table></figure></p><p>All other characters are considered literals.</p><p>With ERE, the following metacharacters (and their associated functions) are added:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">( ) &#123; &#125; ? + |</div></pre></td></tr></table></figure></p><h4 id="alternation"><a href="#alternation" class="headerlink" title="alternation"></a>alternation</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> it will match the filenames <span class="keyword">in</span> our lists that start with either “bz”, “gz”, or “zip</span></div><div class="line">grep -Eh '^(bz|gz|zip)' dirlist*.txt</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> it changes to match any filename that begins with “bz” or contains “gz” or contains “zip”</span></div><div class="line">grep -Eh '^bz|gz|zip' dirlist*.txt</div></pre></td></tr></table></figure><h4 id="quantifier"><a href="#quantifier" class="headerlink" title="quantifier"></a>quantifier</h4><p>The question mark <code>(?)</code> means <strong>making the preceding element optional (matching 0 or 1 element)</strong>.<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> to valid <span class="keyword">if</span> it matched either of these two forms:</span></div><div class="line"><span class="meta">#</span><span class="bash"> (nnn) nnn-nnnn</span></div><div class="line"><span class="meta">#</span><span class="bash"> nnn nnn-nnnn</span></div><div class="line"></div><div class="line">echo "(555) 123-4567" | grep -E '^\(?[0-9][0-9][0-9]</div><div class="line">\)? [0-9][0-9][0-9]-[0-9][0-9][0-9][0-9]$'</div><div class="line">(555) 123-4567</div><div class="line"></div><div class="line">echo "555 123-4567" | grep -E '^\(?[0-9][0-9][0-9]\)</div><div class="line">? [0-9][0-9][0-9]-[0-9][0-9][0-9][0-9]$'</div><div class="line">555 123-4567</div></pre></td></tr></table></figure></p><p>The asterisk <code>(*)</code> means <strong>making the preceding element optional (matching 0 or any number of times elements)</strong>.<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> to see <span class="keyword">if</span> a string was a sentence</span></div><div class="line"><span class="meta">#</span><span class="bash"> it starts with an uppercase letter</span></div><div class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">then</span> contains any number of upper and lowercase letters and spaces</span></div><div class="line"><span class="meta">#</span><span class="bash"> and ends with a period. </span></div><div class="line">echo "This works." | grep -E '[[:upper:]][[:upper:][:lower:] ]*\.'</div><div class="line">This works.</div><div class="line"></div><div class="line">echo "this does not" | grep -E '[[:upper:]][[:upper:][:lower:] ]*\.'</div></pre></td></tr></table></figure></p><p>The plus mark <code>(+)</code> means <strong>making the preceding element optional (matching 1 or any number of times elements)</strong>.<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> it will match lines consisting of groups of one or more alphabetic characters separated by single spaces</span></div><div class="line">echo "This that" | grep -E '^([[:alpha:]]+ ?)+$'</div><div class="line">This that</div><div class="line"></div><div class="line">echo "a b c" | grep -E '^([[:alpha:]]+ ?)+$'</div><div class="line">a b c</div></pre></td></tr></table></figure></p><p>The <code>{</code> and <code>}</code> metacharacters are used to <strong>express minimum and maximum numbers of required matches</strong>. They may be specified in four possible ways:<br>|Specifier|    Meaning|<br>|:-:|:-|<br>|{n}|    Match the preceding element if it occurs exactly n times.<br>|{n,m}|    Match the preceding element if it occurs at least n times, but no more than m times.|<br>|{n,}|    Match the preceding element if it occurs n or more times.|<br>|{,m}|    Match the preceding element if it occurs no more than m times.|<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">echo "(555) 123-4567" | grep -E '^\(?[0-9]&#123;3&#125;\)? [0-9]&#123;3&#125;-[0-9]&#123;4&#125;$'</div><div class="line">(555) 123-4567</div></pre></td></tr></table></figure></p><h4 id="find-files"><a href="#find-files" class="headerlink" title="find files"></a>find files</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> it will reveal pathnames that contain embedded spaces and other potentially offensive characters</span></div><div class="line">find . -regex '.*[^-\_./0-9a-zA-Z].*'</div></pre></td></tr></table></figure><h4 id="less-and-vim"><a href="#less-and-vim" class="headerlink" title="less and vim"></a>less and vim</h4><p>They support basic regular expressions.<br>Pressing the <code>/</code> key followed by <strong>a regular expression</strong> will perform a search.</p><h3 id="Manipulate-text"><a href="#Manipulate-text" class="headerlink" title="Manipulate text"></a>Manipulate text</h3><ul><li>cat – Concatenate files and print on the standard output</li><li>sort – Sort lines of text files</li><li>uniq – Report or omit repeated lines</li><li>cut – Remove sections from each line of files</li><li>paste – Merge lines of files</li><li>join – Join lines of two files on a common field</li><li>comm – Compare two sorted files line by line</li><li>diff – Compare files line by line</li><li>patch – Apply a diff file to an original</li><li>tr – Translate or delete characters</li><li>sed – Stream editor for filtering and transforming text</li><li>aspell – Interactive spell checker</li></ul><h4 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h4><p><code>-A</code>: display non- printing characters in the text.<br><code>-n</code>: show line numbers.<br><code>-s</code>: suppress the output of multiple blank lines.</p><h4 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h4><p><code>-n</code>: perform sorting based on the numeric evaluation of a string rather than alphabetical value.<br><code>-r</code>: sort in reverse order. results are in descending rather than ascending order.<br><code>-b</code>: ignore leading blanks.<br><code>-k field1[,field2]</code>: sort based on a key field located from field1 to field2 rather than the entire line.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> by specifying -k 3.7 we instruct sort to </span></div><div class="line"><span class="meta">#</span><span class="bash"> use a sort key that begins at the seventh character within the third field</span></div><div class="line">sort -k 3.7nbr -k 3.1nbr -k 3.4nbr distros.txt</div><div class="line">Fedora         10    11/25/2008</div><div class="line">Ubuntu         8.10  10/30/2008</div><div class="line">SUSE           11.0  06/19/2008</div><div class="line">...</div></pre></td></tr></table></figure><h4 id="unique"><a href="#unique" class="headerlink" title="unique"></a>unique</h4><p><code>-u</code>: remove duplicates from the sorted output.<br><code>-d</code>: only output duplicated lines, rather than unique lines.</p><h4 id="cut"><a href="#cut" class="headerlink" title="cut"></a>cut</h4><p><code>-f filed_list</code>, <code>-c char_list</code>, <code>-d delimiter_char</code><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">cut -f 3 distros.txt</div><div class="line">12/07/2006</div><div class="line">11/25/2008</div><div class="line"></div><div class="line">cut -f 3 distros.txt | cut -c 7-10</div><div class="line">2006</div><div class="line">2008</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> default delimiter is tab</span></div><div class="line"><span class="meta">#</span><span class="bash"> what <span class="keyword">if</span> we wanted a file fully manipulated with cut by characters, rather than fields</span></div><div class="line">expand distros.txt | cut -c 23-</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">set</span> delimiter to <span class="string">':'</span></span></div><div class="line">cut -d ':' -f 1 /etc/passwd | head</div></pre></td></tr></table></figure></p><h4 id="paste"><a href="#paste" class="headerlink" title="paste"></a>paste</h4><p>The paste command does the opposite of cut. Rather than extracting a column of text from a file, it adds one or more columns of text to a file.</p><h4 id="join"><a href="#join" class="headerlink" title="join"></a>join</h4><p>A join is an operation usually associated with relational databases where data from multiple tables with a shared key field is combined to form a desired result.</p><h4 id="comm-and-diff"><a href="#comm-and-diff" class="headerlink" title="comm and diff"></a>comm and diff</h4><ul><li>comm<br>The comm program compares two text files and displays the lines that are unique to each one and the lines they have in common.</li><li>diff<br><code>-c</code>: <strong>contex format</strong><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">diff -c file1.txt file2.txt</div><div class="line">*** file1.txt    2008-12-23 06:40:13.000000000 -0500</div><div class="line">--- file2.txt   2008-12-23 06:40:34.000000000 -0500</div><div class="line">***************</div><div class="line">*** 1,4 ****</div><div class="line">- a</div><div class="line">  b</div><div class="line">  c</div><div class="line">  d</div><div class="line">--- 1,4 ----</div><div class="line">  b</div><div class="line">  c</div><div class="line">  d</div><div class="line">  + e</div></pre></td></tr></table></figure></li></ul><p><code>-u</code>: <strong>unified format</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">diff -u file1.txt file2.txt</div><div class="line">--- file1.txt 2008-12-23 06:40:13.000000000 -0500</div><div class="line">+++ file2.txt 2008-12-23 06:40:34.000000000 -0500</div><div class="line">@@ -1,4 +1,4 @@</div><div class="line">-a</div><div class="line"> b</div><div class="line"> c</div><div class="line"> d</div><div class="line">+e</div></pre></td></tr></table></figure></p><h4 id="patch"><a href="#patch" class="headerlink" title="patch"></a>patch</h4><p>To prepare a diff file for use with patch, the GNU documentation (see Further Reading below) suggests using diff as follows:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">diff -Naur old_file new_file &gt; diff_file</div></pre></td></tr></table></figure></p><p>Once the diff file has been created, we can apply it to patch the old file into the new file:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">patch &lt; diff_file</div></pre></td></tr></table></figure></p><h4 id="tr"><a href="#tr" class="headerlink" title="tr"></a>tr</h4><p>The tr program is used to transliterate characters.<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> transliterate characters</span></div><div class="line">echo "lowercase letters" | tr a-z A-Z</div><div class="line">LOWERCASE LETTERS</div><div class="line">echo "lowercase letters" | tr [:lower:] A</div><div class="line">AAAAAAAAA AAAAAAA</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> delete <span class="string">'\r'</span> <span class="keyword">in</span> dos files</span></div><div class="line">tr -d '\r' &lt; dos_file &gt; unix_file</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> “squeeze” (delete) repeated instances of a character</span></div><div class="line">echo "aaabbbccc" | tr -s ab</div><div class="line">abccc</div></pre></td></tr></table></figure></p><h4 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h4><p><code>-n</code>: no auto-print;</p><p>sed Address Notation<br>|Address|    Description|<br>|:-:|:-|<br>|n|    A line number where n is a positive integer.|<br>|$|    The last line.|<br>|/regexp/|    Lines matching a POSIX basic regular expression. Note that the regular expression is delimited by slash characters. Optionally, the regular expression may be delimited by an alternate character, by specifying the expression with \cregexpc, where c is the alternate character.|<br>|addr1,addr2|    A range of lines from addr1 to addr2, inclusive. Addresses may be any of the single address forms above.|<br>|first~step|    Match the line represented by the number first, then each subsequent line at step intervals. For example 1~2 refers to each odd numbered line, 5~5 refers to the fifth line and every fifth line thereafter.|<br>|addr1,+n|    Match addr1 and the following n lines.|<br>|addr!|    Match all lines except addr, which may be any of the forms above.|</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">sed -n '1,5p' distros.txt</div><div class="line">SUSE           10.2     12/07/2006</div><div class="line">Fedora         10       11/25/2008</div><div class="line">SUSE           11.0     06/19/2008</div><div class="line">Ubuntu         8.04     04/24/2008</div><div class="line">Fedora         8        11/08/2007</div><div class="line"></div><div class="line">sed -n '/SUSE/p' distros.txt</div><div class="line">SUSE         10.2     12/07/2006</div><div class="line">SUSE         11.0     06/19/2008</div><div class="line"></div><div class="line">sed -n '/SUSE/!p' distros.txt</div><div class="line">Fedora         10       11/25/2008</div><div class="line">Ubuntu         8.04     04/24/2008</div></pre></td></tr></table></figure><p>sed Basic Editing Commands<br>|Command|    Description|<br>|:-:|:-|<br>|=|    Output current line number.|<br>|a|    Append text after the current line.|<br>|d|    Delete the current line.|<br>|i|    Insert text in front of the current line.|<br>|p|    Print the current line. By default, sed prints every line and only edits lines that match a specified address within the file. The default behavior can be overridden by specifying the -n option.|<br>|q|    Exit sed without processing any more lines. If the -n option is not specified, output the current line.|<br>|Q|    Exit sed without processing any more lines.|<br>|s/regexp/replacement/|    Substitute the contents of replacement wherever regexp is found. replacement may include the special character &amp;, which is equivalent to the text matched by regexp. In addition, replacement may include the sequences \1 through \9, which are the contents of the corresponding subexpressions in regexp. For more about this, see the discussion of back references below. After the trailing slash following replacement, an optional flag may be specified to modify the s command’s behavior.|<br>|y/set1/set2|    Perform transliteration by converting characters from set1 to the corresponding characters in set2. Note that unlike tr, sed requires that both sets be of the same length.|</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> <span class="string">'s/([0-9]&#123;2&#125;)/([0-9]&#123;2&#125;)/([0-9]&#123;4&#125;)$/\3-\1-\2/'</span></span></div><div class="line">sed 's/\([0-9]\&#123;2\&#125;\)\/\([0-9]\&#123;2\&#125;\)\/\([0-9]\&#123;4\&#125;\)$/\3-\1-\2/' distros.txt</div><div class="line">SUSE           10.2     2006-12-07</div><div class="line"></div><div class="line">echo "aaabbbccc" | sed 's/b/B/'</div><div class="line">aaaBbbccc</div><div class="line"></div><div class="line">echo "aaabbbccc" | sed 's/b/B/g'</div><div class="line">aaaBBBccc</div></pre></td></tr></table></figure><h4 id="aspell"><a href="#aspell" class="headerlink" title="aspell"></a>aspell</h4><p>an interactive spelling checker.<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">aspell check textfile</div></pre></td></tr></table></figure></p><h3 id="Format-text-output"><a href="#Format-text-output" class="headerlink" title="Format text output"></a>Format text output</h3><p><code>omitted</code></p><h3 id="Printer"><a href="#Printer" class="headerlink" title="Printer"></a>Printer</h3><p><code>ommited</code></p><h3 id="Compile-source-code"><a href="#Compile-source-code" class="headerlink" title="Compile source code"></a>Compile source code</h3><p>Why compile software? There are two reasons:</p><ol><li>Availability. Despite the number of precompiled programs in distribution repositories, some distributions may not include all the desired applications. In this case, the only way to get the desired program is to compile it from source.</li><li>Timeliness. While some distributions specialize in cutting edge versions of programs, many do not. This means that in order to have the very latest version of a program, compiling is necessary.</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">[~]$ mkdir src</div><div class="line">[~]$ cd src</div><div class="line">ftp ftp.gnu.org</div><div class="line">anonymous</div><div class="line"><span class="meta">ftp&gt;</span><span class="bash"> <span class="built_in">cd</span> gnu/diction</span></div><div class="line"><span class="meta">ftp&gt;</span><span class="bash"> ls</span></div><div class="line">150 Here comes the directory listing.</div><div class="line">-rw-r--r-- 1 1003 65534 68940 Aug 28 1998 diction-0.7.tar.gz</div><div class="line">-rw-r--r-- 1 1003 65534 90957 Mar 04 2002 diction-1.02.tar.gz</div><div class="line">-rw-r--r-- 1 1003 65534 141062 Sep 17 2007 diction-1.11.tar.gz</div><div class="line"><span class="meta">ftp&gt;</span><span class="bash"> get diction-1.11.tar.gz</span></div><div class="line">226 File send OK.</div><div class="line"><span class="meta">ftp&gt;</span><span class="bash"> <span class="built_in">bye</span></span></div><div class="line"><span class="meta">[src]$</span><span class="bash"> ls</span></div><div class="line">diction-1.11.tar.gz</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> unpack</span></div><div class="line"><span class="meta">[src]$</span><span class="bash"> tar -xzf diction-1.11.tar.gz</span></div><div class="line"><span class="meta">[src]$</span><span class="bash"> <span class="built_in">cd</span> diction-1.11</span></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> configure, compile and install</span></div><div class="line">[diction-1.11]$ ./configure</div><div class="line">[diction-1.11]$ make</div><div class="line">[diction-1.11]$ make install</div></pre></td></tr></table></figure><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="http://billie66.github.io/TLCL/book/index.html" target="_blank" rel="external">快乐的 Linux 命令行</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;del&gt;Last Modified: 2017-07-31 11:18:00&lt;/del&gt;&lt;/p&gt;
&lt;h3 id=&quot;Acknowledge&quot;&gt;&lt;a href=&quot;#Acknowledge&quot; class=&quot;headerlink&quot; title=&quot;Acknowledge&quot;&gt;&lt;/a&gt;Acknowledge&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;What is shell?&lt;ul&gt;
&lt;li&gt;The shell is a program that takes keyboard commands and passes them to the operating system to carry out.&lt;/li&gt;
&lt;li&gt;Almost all Linux distributions supply a shell program from the GNU Project called &lt;strong&gt;bash&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Bash&lt;/strong&gt; is an enhanced replacement for &lt;strong&gt;sh&lt;/strong&gt;, the original Unix shell program written by Steve Bourne.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What is terminal emulator?&lt;ul&gt;
&lt;li&gt;We use a terminal emulator to interact with the shell when using a GUI.&lt;/li&gt;
&lt;li&gt;KDE uses &lt;strong&gt;konsole&lt;/strong&gt; and GNOME uses &lt;strong&gt;gnome-terminal&lt;/strong&gt;, though it’s likely called simply &lt;strong&gt;“terminal”&lt;/strong&gt; on our menu.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Shell prompt&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[me@linuxbox ~]$&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Some Simple Commands&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;date - Display the current time and date.&lt;/li&gt;
&lt;li&gt;cal - Display a calendar of the current month.&lt;/li&gt;
&lt;li&gt;df - Display the current amount of free space on your disk drives.&lt;/li&gt;
&lt;li&gt;free - Display the amount of free memory.&lt;/li&gt;
&lt;li&gt;exit - End the terminal session.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Doing" scheme="http://TaoSama.github.io/categories/Doing/"/>
    
      <category term="Shell" scheme="http://TaoSama.github.io/categories/Doing/Shell/"/>
    
    
  </entry>
  
  <entry>
    <title>Constructors, Destrustors and Assignment Operators, Notes(2), Effective C++</title>
    <link href="http://TaoSama.github.io/2017/06/15/effective-cpp-constructors-destructors-and-assignment-operators/"/>
    <id>http://TaoSama.github.io/2017/06/15/effective-cpp-constructors-destructors-and-assignment-operators/</id>
    <published>2017-06-15T13:20:10.000Z</published>
    <updated>2017-09-19T14:48:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>(I read a Chinese version of the book, any translation problem plz point out. </p><a id="more"></a><h2 id="Constructors-Destructors-and-Assignment-Operator"><a href="#Constructors-Destructors-and-Assignment-Operator" class="headerlink" title="Constructors, Destructors and Assignment Operator"></a>Constructors, Destructors and Assignment Operator</h2><h3 id="Know-what-functions-CPP-silently-writes-and-calls"><a href="#Know-what-functions-CPP-silently-writes-and-calls" class="headerlink" title="Know what functions CPP silently writes and calls"></a>Know what functions CPP silently writes and calls</h3><p>For empty class, the complier will declare a copy constructor, a copy assignment operator, a destructor, <strong>if no any constructor is declared, one more default constructor is declared by compiler</strong>.<br>They are all public and inlined, and <strong>when called, they will be created (during compiling period)</strong>.</p><h3 id="Explicitly-disallow-the-use-of-compiler-generated-functions-you-do-not-want"><a href="#Explicitly-disallow-the-use-of-compiler-generated-functions-you-do-not-want" class="headerlink" title="Explicitly disallow the use of compiler-generated functions you do not want"></a>Explicitly disallow the use of compiler-generated functions you do not want</h3><ul><li><p>declare as private with no definition.<br>when member function or friend function calls, <strong>a linkage error</strong> will be reported.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeForSale</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="comment">// ...</span></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    HomeForSale(<span class="keyword">const</span> HomeForSale&amp;);</div><div class="line">    HomeForSale&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> HomeForSale&amp;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure></li><li><p><strong>earlier? -&gt; compiling period</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Uncopyable</span> &#123;</span></div><div class="line"><span class="keyword">protected</span>:</div><div class="line">    Uncopyable() &#123;&#125;</div><div class="line">    ~Uncopyable() &#123;&#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    Uncopyable(<span class="keyword">const</span> Uncopyable&amp;);</div><div class="line">    Uncopyable&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> Uncopyable&amp;);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeForSale</span>:</span> <span class="keyword">private</span> Uncopyable &#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure></li></ul><p><strong>why?</strong><br>anyone tries to copy <code>HomeForSale</code>, the compiler will try to generate a copy constructor and a copy assignment operator, then “compiler-generated version” tries to call the ones in base classes respectively, and it will be refused due to the privateness of copying functions in base classes.</p><ul><li>Boost have one class <code>noncopyable</code> similarly that mentioned above.</li><li>CPP11 new feature, <code>=delete</code> </li></ul><h3 id="Declare-vitual-destructors-in-polymorphic-base-classes"><a href="#Declare-vitual-destructors-in-polymorphic-base-classes" class="headerlink" title="Declare vitual destructors in polymorphic base classes."></a>Declare vitual destructors in polymorphic base classes.</h3><ul><li>CPP points out specificly, it is a <strong>undefined behavior</strong> when a object of derived class is deleted by a pointer of base class, which has a non-virtual destructor.</li><li>Any class that has a virtual function should have a virtual destructor.</li><li>A class with no virtual destructor mustn’t be used as a base class, such as STL containers. In other words, <strong>if some class is not designed for using as a base class, it shouldn’t declare a virtual destructor</strong>.</li><li>Declare a pure virtual destrutor when creating an abstract class without any other pure virtual functions.<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AWOV</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="keyword">virtual</span> ~AWOV() = <span class="number">0</span>;</div><div class="line">&#125;;</div><div class="line">AWOV::~AWOV() &#123;&#125;</div></pre></td></tr></table></figure></li></ul><h3 id="Prevent-exceptions-from-leaving-destructors"><a href="#Prevent-exceptions-from-leaving-destructors" class="headerlink" title="Prevent exceptions from leaving destructors"></a>Prevent exceptions from leaving destructors</h3><p><strong>When 2 exceptions exist at the same time, the program either aborts or results in a undefined behavior</strong>.</p><p><strong>double insurance</strong><br>if customer need to response to the exceptions which was thrown by the run-time of some function, the class should provide a normal function (other than handled in the destructor).<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DBConn</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</div><div class="line">        db.close();</div><div class="line">        closed = <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">    ~DBConn() &#123;</div><div class="line">        <span class="keyword">if</span>(!closed) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                db.close();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">catch</span> (...) &#123;</div><div class="line">                <span class="comment">// log, then abort or swallow the exception</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    DBConnection db;</div><div class="line">    <span class="keyword">bool</span> closed;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><h3 id="Never-call-virtual-functions-during-construction-or-destruction"><a href="#Never-call-virtual-functions-during-construction-or-destruction" class="headerlink" title="Never call virtual functions during construction or destruction"></a>Never call virtual functions during construction or destruction</h3><ul><li>virtual functions never downcast to derived classes, when base classed is constructing.</li><li>once called, it is a <strong>undefined behavior</strong> because the members haven’t been initialized yet.</li><li><strong>if needed, declare as non-virtual</strong><br>constructors of derived classes passes the parameters to the ones of base classes (static functions will also avoid the problem).<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Transaction</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">Transaction</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; logInfo)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">logTransaction</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; logInfo)</span> <span class="keyword">const</span></span>; <span class="comment">// non-virtual</span></div><div class="line">&#125;;</div><div class="line">Transaction::Transaction(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; logInfo) &#123;</div><div class="line">    logTransaction(logInfo);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BuyTransaction</span>:</span> <span class="keyword">public</span> Transaction &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    BuyTransaction( ... )</div><div class="line">        : Transaction(createLogString( ... ))</div><div class="line">    &#123;&#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="keyword">static</span> <span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">createLogString</span><span class="params">( ...)</span></span>;</div><div class="line">);</div></pre></td></tr></table></figure></li></ul><h3 id="Assignment-operator"><a href="#Assignment-operator" class="headerlink" title="Assignment operator"></a>Assignment operator</h3><ul><li>Have assignment operators return a reference to <code>*this</code></li><li>Handle assignment to self<br><strong>copy and swap</strong> technique<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Widget&amp; Widget::<span class="keyword">operator</span>=(<span class="keyword">const</span> Widget&amp; rhs) &#123;</div><div class="line">    Widget temp(rhs);</div><div class="line">    swap(*<span class="keyword">this</span>, temp);</div><div class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h3 id="Copy-all-parts-of-an-object"><a href="#Copy-all-parts-of-an-object" class="headerlink" title="Copy all parts of an object"></a>Copy all parts of an object</h3><ul><li><p>compiler may generate no warnings or errors when you implement your own copy constructors or copy assignment operators</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Customer</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    Customer(<span class="keyword">const</span> Customer&amp; rhs);</div><div class="line">    Customer&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> Customer&amp; rhs);</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> name;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PriorityCustomer</span>:</span> <span class="keyword">public</span> Customer &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    PriorityCustomer(<span class="keyword">const</span> PriorityCustomer&amp; rhs);</div><div class="line">    PriorityCustomer&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> PriorityCustomer&amp; rhs);</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="keyword">int</span> priority;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">PriorityCustomer::PriorityCustomer(<span class="keyword">const</span> PriorityCustomer&amp; rhs)</div><div class="line">    : Customer(rhs),</div><div class="line">      priority(rhs.priority) &#123;&#125;</div><div class="line"></div><div class="line">PriorityCustomer&amp; PriorityCustomer::<span class="keyword">operator</span>=(<span class="keyword">const</span> PriorityCustomer&amp; rhs) &#123;</div><div class="line">    Customer::<span class="keyword">operator</span>=(rhs);</div><div class="line">    priority = rhs.priority;</div><div class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p><strong>Do not try to use some copying function to implement another one</strong>.<br>If you wanna avoid code duplicate, try to introduce a new function, maybe called <code>init()</code> to be called by the two copying functions.</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;(I read a Chinese version of the book, any translation problem plz point out. &lt;/p&gt;
    
    </summary>
    
      <category term="Doing" scheme="http://TaoSama.github.io/categories/Doing/"/>
    
      <category term="CPP" scheme="http://TaoSama.github.io/categories/Doing/CPP/"/>
    
    
  </entry>
  
  <entry>
    <title>Accustoming to CPP, Notes(1), Effective C++</title>
    <link href="http://TaoSama.github.io/2017/06/11/effective-cpp-accustoming-to-cpp/"/>
    <id>http://TaoSama.github.io/2017/06/11/effective-cpp-accustoming-to-cpp/</id>
    <published>2017-06-11T03:20:10.000Z</published>
    <updated>2017-09-19T14:48:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>(I read a Chinese version of the book, any translation problem plz point out. </p><a id="more"></a><h3 id="View-CPP-as-a-federation-of-languages"><a href="#View-CPP-as-a-federation-of-languages" class="headerlink" title="View CPP as a federation of languages"></a>View CPP as a federation of languages</h3><ul><li><p>a multiparadigm programming language</p><ul><li>procedural</li><li>object-oriented programming (OOP)</li><li>functional programming (FP)</li><li>generic</li><li>template metaprogramming (TMP)</li></ul></li><li><p>tips</p><ul><li>pass-by-value is more efficient for built-in types (C-like types)</li><li>pass-by-reference-to-const is better for user-defined types</li><li>pass-by-value is better for STL iterators and functors (both implemented based on C-pointers)</li></ul></li></ul><h3 id="Prefer-compliers-to-preprocessors"><a href="#Prefer-compliers-to-preprocessors" class="headerlink" title="Prefer compliers to preprocessors"></a>Prefer compliers to preprocessors</h3><h4 id="Use-consts-for-constants"><a href="#Use-consts-for-constants" class="headerlink" title="Use consts for constants"></a>Use consts for constants</h4><ul><li><p>consts can be in the symbol table and will be seen by compliers</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> <span class="keyword">char</span>* <span class="keyword">const</span> authorName = <span class="string">"Scott Meyers"</span>;</div><div class="line"><span class="comment">//std::string is better than char*-based string</span></div><div class="line"><span class="keyword">const</span> <span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">authorName</span><span class="params">(<span class="string">"Scott Meyers"</span>)</span></span>;</div></pre></td></tr></table></figure></li><li><p>consts in class for scope</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Well, it is a declaration not a definition. Normally CPP requires a definition for anything you use.</span></div><div class="line"><span class="comment">// But static consts in class with integral types(ints, chars, bools) need to be treated specially.</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GamePlayer</span> &#123;</span></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> NumTurns = <span class="number">5</span>; <span class="comment">//declaration</span></div><div class="line">    <span class="keyword">int</span> scores[NumTurns];</div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure></li></ul><p><strong>No need to provide definitions when their addresses are never taken.</strong><br><strong>Some compliers may wrongly require a definition, then it will look like:</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// definiton, no more initialization due to done in declaration</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> GamePlayer::NumTurns;</div></pre></td></tr></table></figure></p><ul><li><p>#defines have no scope<br>once a macro is defined, it is taken into effect during all the later process of compiling(unless #undef is done).<br><strong>no encapsulation</strong></p></li><li><p>enum hack</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// some like #defines</span></div><div class="line"><span class="comment">// consts can be taken the addresses while enums cannot</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GamePlayer</span> &#123;</span></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="keyword">enum</span> &#123; NumTurns = <span class="number">5</span> &#125;;</div><div class="line">    <span class="keyword">int</span> scores[NumTurns];</div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure></li></ul><p><strong>For acquaintance, enum hack is basic technique in TMP</strong></p><h4 id="Use-template-inlines-for-mini-functions"><a href="#Use-template-inlines-for-mini-functions" class="headerlink" title="Use template inlines for mini functions"></a>Use template inlines for mini functions</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// disgusting</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CALL_WITH_MAX(a, b) f((a) &gt; (b) ? (a) : (b))</span></div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">callWithMAX</span><span class="params">(<span class="keyword">const</span> T&amp; a, <span class="keyword">const</span> T&amp; b)</span> </span>&#123;</div><div class="line">    f(a &gt; b ? a : b);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="Use-consts-whenever-possible"><a href="#Use-consts-whenever-possible" class="headerlink" title="Use consts whenever possible"></a>Use consts whenever possible</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">char</span> greeting[] = <span class="string">"Hello"</span>;</div><div class="line"><span class="keyword">char</span>* p = greeting;              <span class="comment">// non-const pointer, non-const data</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">char</span>* p = greeting;        <span class="comment">// non-const pointer, const data</span></div><div class="line"><span class="keyword">char</span>* <span class="keyword">const</span> p = greeting;        <span class="comment">// const pointer, non-const data</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">char</span>* <span class="keyword">const</span> p = greeting;  <span class="comment">// const pointer, const data</span></div></pre></td></tr></table></figure><ul><li><p>STL iterator<br>iterator acts like a T* pointer.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec;</div><div class="line"><span class="comment">// iter acts like T* const</span></div><div class="line"><span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator iter = vec.begin(); </div><div class="line">*iter = <span class="number">10</span>;  <span class="comment">// ok</span></div><div class="line">++iter;      <span class="comment">// CE</span></div><div class="line"></div><div class="line"><span class="comment">// cIter acts like const T*</span></div><div class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::const_iterator cIter = vec.begin();</div><div class="line">++iter;      <span class="comment">// ok</span></div><div class="line">*iter = <span class="number">10</span>;  <span class="comment">// CE</span></div></pre></td></tr></table></figure></li><li><p>return const value</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rational</span> &#123;</span> <span class="comment">// ... &#125;;</span></div><div class="line"><span class="keyword">const</span> Rational <span class="keyword">operator</span>* (<span class="keyword">const</span> Rational&amp; lhs, <span class="keyword">const</span> Rational&amp; rhs);</div><div class="line"></div><div class="line">Rational a, b, c;</div><div class="line"><span class="keyword">if</span>(a * b = c) &#123;&#125; <span class="comment">// CE, without const it will be ok</span></div></pre></td></tr></table></figure></li></ul><p><strong>CPP returns object by value, so the assignment is never legal, for only changing a copy.</strong></p><ul><li>const member function<br><strong>two member functions can be overloaded even if they are only different in constness.</strong><br><strong>in real, const member function is overloaded when const objects are used in passed by pointer-to-const or passed by reference-to-const.</strong><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TextBlock</span> &#123;</span></div><div class="line"><span class="keyword">public</span>: </div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span>&amp; <span class="keyword">operator</span>[](<span class="built_in">std</span>::<span class="keyword">size_t</span> position) <span class="keyword">const</span> &#123;</div><div class="line">        <span class="comment">// ...</span></div><div class="line">        <span class="keyword">return</span> text[position];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">char</span>&amp; <span class="keyword">operator</span>[](<span class="built_in">std</span>::<span class="keyword">size_t</span> position) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">const_cast</span>&lt;<span class="keyword">char</span>&amp;&gt;(</div><div class="line">            <span class="keyword">static_cast</span>&lt;<span class="keyword">const</span> TextBlock&amp;&gt;(*<span class="keyword">this</span>)[position]</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">const</span> TextBlock&amp; ctb)</span> </span>&#123;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; ctb[<span class="number">0</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><p><strong>non-const overloaded function can be implemented by calling the const version is safe, otherwise it is not.</strong></p><ul><li>bitwise constness or logical constness<br><strong>bitwist constness is the definition of CPP’s constness, so the const member funcion cannot change any non-static member variable.</strong><br>use keyword <code>mutable</code> to release the constraint of CPP’s bitwise constness.<br><strong>write codes by using logical constness.</strong><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CTextBlock</span> &#123;</span></div><div class="line">    <span class="keyword">public</span>: </div><div class="line">        <span class="built_in">std</span>::<span class="keyword">size_t</span> length() <span class="keyword">const</span>;</div><div class="line">    <span class="keyword">private</span>:</div><div class="line">        <span class="keyword">char</span>* pText;</div><div class="line">        <span class="keyword">mutable</span> <span class="built_in">std</span>::<span class="keyword">size_t</span> textLength;</div><div class="line">        <span class="keyword">mutable</span> <span class="keyword">bool</span> lengthIsValid;</div><div class="line">&#125;;</div><div class="line"><span class="built_in">std</span>::<span class="keyword">size_t</span> CTextBlock::length() <span class="keyword">const</span> &#123;</div><div class="line">    <span class="keyword">if</span>(!lengthIsValid) &#123;</div><div class="line">        textLength = <span class="built_in">std</span>::<span class="built_in">strlen</span>(pText); <span class="comment">// can be changed</span></div><div class="line">        lengthIsValid = <span class="literal">true</span>;            <span class="comment">// same as above</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> textLength;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h3 id="Make-sure-that-objects-are-initialized-before-used"><a href="#Make-sure-that-objects-are-initialized-before-used" class="headerlink" title="Make sure that objects are initialized before used"></a>Make sure that objects are initialized before used</h3><ul><li>objects will be initialized when declared in heap while they won’t when declared in stack.</li><li>it is not easy to memorize it, whatever, keep initialization always.</li><li>do not mix assignment and initialization.</li><li><strong>for user-defined types, always use the member initialization list and always list all the member variables in the member initialization list.</strong></li><li>sometimes, a class may have many constructors, and to avoid duplication, we can move the invitializatin of the variables that have same efficiency between assignment and initialization to some private function. (well, this ‘pseudo-intialization’ is not advocated, try member initialization list as much as possible)</li><li>The order of initialization:<ul><li>base classes is initialized earlier than derived classes.</li><li>member variables is initialized as the order of that they are declared even if the order of the appearance in member initialization list is different.</li></ul></li><li>non-local static objects<ul><li>static objects: global objects, objects defined in namespace, static objects in classes, functions, file scopes.</li><li>local static objects: static objects in functions.</li><li>no specific initialization order for non-local static objects in different translation unit.</li><li>Singleton:<br><strong>use local static objects to replace the non-local ones.</strong><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileSystem</span> &#123;</span> <span class="comment">// ... &#125;;</span></div><div class="line"><span class="function">FileSystem&amp; <span class="title">tfs</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> FileSystem fs;</div><div class="line">    <span class="keyword">return</span> fs;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Directory</span> &#123;</span> <span class="comment">// ... &#125;;</span></div><div class="line">Directory::Directory( params ) &#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">    <span class="built_in">std</span>::<span class="keyword">size_t</span> disks = tfs().numDisks();</div><div class="line">&#125;</div><div class="line"><span class="function">Directory&amp; <span class="title">tempDir</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> Directory td;</div><div class="line">    <span class="keyword">return</span> td;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;(I read a Chinese version of the book, any translation problem plz point out. &lt;/p&gt;
    
    </summary>
    
      <category term="Doing" scheme="http://TaoSama.github.io/categories/Doing/"/>
    
      <category term="CPP" scheme="http://TaoSama.github.io/categories/Doing/CPP/"/>
    
    
  </entry>
  
  <entry>
    <title>Address Collecting</title>
    <link href="http://TaoSama.github.io/2017/05/18/Address-Collecting/"/>
    <id>http://TaoSama.github.io/2017/05/18/Address-Collecting/</id>
    <published>2017-05-18T10:30:10.000Z</published>
    <updated>2017-09-19T14:48:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>这里留地址吧，具体时间就截止到多说关闭(6.1)吧，到时候我就换Disqus了<br>喔，到时候收到了转给我打印费和邮费就好了。<br>(某ACMer卖模版月入百万！才不会说我是骗手机号的呢</p><a id="more"></a><p>那啥地址就按照这个格式留吧：</p><p>收件地址： 重庆市重庆大学A区中门11舍<br>收件人：老顽童<br>收件人号码：13123333333</p><p>嗨呀，以后就只能自己玩啦~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里留地址吧，具体时间就截止到多说关闭(6.1)吧，到时候我就换Disqus了&lt;br&gt;喔，到时候收到了转给我打印费和邮费就好了。&lt;br&gt;(某ACMer卖模版月入百万！才不会说我是骗手机号的呢&lt;/p&gt;
    
    </summary>
    
      <category term="Doing" scheme="http://TaoSama.github.io/categories/Doing/"/>
    
      <category term="Life" scheme="http://TaoSama.github.io/categories/Doing/Life/"/>
    
    
  </entry>
  
  <entry>
    <title>Backthoughts during These Days</title>
    <link href="http://TaoSama.github.io/2017/04/28/Backthoughts-during-These-Days/"/>
    <id>http://TaoSama.github.io/2017/04/28/Backthoughts-during-These-Days/</id>
    <published>2017-04-28T09:30:10.000Z</published>
    <updated>2017-09-19T14:48:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>“I’m sorry that you are not the person we choose”<br>“I’m sorry …”</p><a id="more"></a><p>Yeah, I gotta some problems myself, mainly from the ICPC regionals’ results…<br>I managed to avoid that, yet I can’t control the inner hints myself…</p><p>During the toutiao interview, the first two was OK.<br>The third one crashed..</p><p>Last year, a new team formed, and I became the vice coder instead of<br>the major coder…<br>Less and less onsite coding, makes me lose the judgement of coding time of a problem..</p><p>WAPS online Interview, anxiety made me … couldn’t think straightly..<br>Unexpectedly, onsite interview, I did a great job.. even I was not matched at last.<br>Anyway, it doesn’t matter.. Life is not all about money and comfort,<br>and I’d love to have some challenges which hard mode of life will be more exciting.</p><p>Well, going back to the third one of toutiao’ interview.<br>So bad! I AM the one who can code a complicated data structure problem,<br>and a complicated implementation problem too…<br>Calm down, and 30 minutes is OK.. Do believe myself…<br>Failure won’t take anything.<br>Results can’t be changed, more world later on.</p><p>2 times I failed at the third interview of toutiao.<br>I don’t believe the fate, just lack of some luck.<br>More details, see this link, <a href="/2017/04/28/Backthoughts-about-the-Failure-of-the-Autumn-and-Spring-Campus-Recruiting-of-Toutiao/">click me</a></p><p>Be better and More progress！<br>More effort on the hard mode chosed！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;“I’m sorry that you are not the person we choose”&lt;br&gt;“I’m sorry …”&lt;/p&gt;
    
    </summary>
    
      <category term="Doing" scheme="http://TaoSama.github.io/categories/Doing/"/>
    
      <category term="Life" scheme="http://TaoSama.github.io/categories/Doing/Life/"/>
    
    
  </entry>
  
  <entry>
    <title>头条秋招春招失败的思考</title>
    <link href="http://TaoSama.github.io/2017/04/28/Backthoughts-about-the-Failure-of-the-Autumn-and-Spring-Campus-Recruiting-of-Toutiao/"/>
    <id>http://TaoSama.github.io/2017/04/28/Backthoughts-about-the-Failure-of-the-Autumn-and-Spring-Campus-Recruiting-of-Toutiao/</id>
    <published>2017-04-28T09:20:10.000Z</published>
    <updated>2017-09-19T14:48:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>毕设交了一波初稿，总算回来填坑了。回头想想，不得不说头条面试反映了我的心境变化。</p><a id="more"></a><h2 id="秋招后台岗"><a href="#秋招后台岗" class="headerlink" title="秋招后台岗"></a>秋招后台岗</h2><h3 id="一面"><a href="#一面" class="headerlink" title="一面"></a>一面</h3><p>记得有2个题，其中一个应该非常水的题，没啥印象了。</p><h4 id="数组中乘积最大连续子数组"><a href="#数组中乘积最大连续子数组" class="headerlink" title="数组中乘积最大连续子数组"></a>数组中乘积最大连续子数组</h4><p>这个现在就是一眼的dp，只怪刷了那么多题的我还是刷题太少了。</p><ul><li>Old Solution<br>直接暴力是$O(n^3)$的，所以就显然的前缀积优化到$O(n^2)$<br>蓝儿因为有$0$，这里就会有些问题，为了避免除$0$要做一些处理<br>不过实际上只要乘了$0$这一段乘积就是$0$了，所以把所有$0$的位置抠出来就可以了<br>然后枚举每一段，就不会有事了，答案初始化为$0$就可以了，前提是有一个$0$。。</li><li>New Solution<br>很简单的dp啊，，$f[i][0/1]:$=到$i$这个位置的连续乘积最大值/最小值<br>就是套用最大连续子段和的套路，这破题我还被问过两遍<br>$HR$又做了一个更复杂的的树形的，不过那个时候我一眼秒了。。<br>就因为有负数嘛，所以就简单的维护下最小值就好了。。</li></ul><h3 id="二面"><a href="#二面" class="headerlink" title="二面"></a>二面</h3><h4 id="写个类似单调栈的玩意儿"><a href="#写个类似单调栈的玩意儿" class="headerlink" title="写个类似单调栈的玩意儿"></a>写个类似单调栈的玩意儿</h4><p>印象中应该让写了一个支持<code>push</code>,<code>pop</code>,<code>getMin</code>的栈，所有操作$O(1)$</p><ul><li>Solution<br>这东西也很简单啊，就维护数字栈的之后再顺手维护一个单调栈，细节注意一下就好了<br>我当时并没有想到单调栈，可能平时用的不多。不过还是有脑子的，随便一想就想到了。<br>我记得这个破题剑指offer上有吧，虽然一直没注意。</li></ul><h4 id="微信怎么拉取朋友圈信息"><a href="#微信怎么拉取朋友圈信息" class="headerlink" title="微信怎么拉取朋友圈信息"></a>微信怎么拉取朋友圈信息</h4><p>这东西我真不会啊，就xjb说了一下，本地存个跟帐号有关的hashvalue表示已经拉取了多少<br>每次拉取的时候，服务器也生成一个，比对一下，不适最新的就拉取就好了。<br>当然你问我什么别人点赞评论啥的，我真的不会啊。。</p><h4 id="服务器很少，流量很大，怎么负载均衡啊"><a href="#服务器很少，流量很大，怎么负载均衡啊" class="headerlink" title="服务器很少，流量很大，怎么负载均衡啊"></a>服务器很少，流量很大，怎么负载均衡啊</h4><p>不会啊，xjb扯淡啊，就随手说了一下缓存服务器，Nginx啥的(这东西我tm就听过名字。<br><del>讲道理啊，为啥不买设备啊喂！(大雾</del></p><h3 id="三面"><a href="#三面" class="headerlink" title="三面"></a>三面</h3><p>哇，这面跑不了啊，直接就问我后台技术栈啥的。<br>骗不过去了啊。然后就不知道啊。有点绝望啊。<br>意识不清醒了啊，打完比赛找不到工作一同交织在一起啊。<br>然后面试官问我读不读研啊。然后脑子一抽说想读啊。<br>然后我还耿直的去问头条有没有quit工作去读研啊<br><del>没见过比我更sb的人了</del><br>主要还是比赛打炸了，心态太差了。几个月都没调好。</p><h3 id="然后就没然后了啊"><a href="#然后就没然后了啊" class="headerlink" title="然后就没然后了啊"></a>然后就没然后了啊</h3><h2 id="春招算法岗"><a href="#春招算法岗" class="headerlink" title="春招算法岗"></a>春招算法岗</h2><h3 id="一面-1"><a href="#一面-1" class="headerlink" title="一面"></a>一面</h3><p>扯扯淡啊，自我介绍啥的啊，ACM打的怎么样啊。。</p><h4 id="二叉树最长路径长度"><a href="#二叉树最长路径长度" class="headerlink" title="二叉树最长路径长度"></a>二叉树最长路径长度</h4><p>一看就当普通树做了啊，然后就无脑说两次dfs求直径就好了啊。<br>他说能不能一次啊，那就无脑dp求一下直径啊。<br>他说还能不能再简单一点啊。 <del>(dp还不简单啊</del><br>哇 我又看了一下题，发现二叉树。<br>然后我就说那简化一下啊。</p><ul><li>Code<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></div><div class="line">    Node* ls, *rs;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = INT_MAX / <span class="number">2</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> maxd = -INF;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(Node* cur)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(cur == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> ldep = dfs(cur-&gt;ls);</div><div class="line">    <span class="keyword">int</span> rdep = dfs(cur-&gt;rs);</div><div class="line">   maxd = max(maxd, ldep + rdep + <span class="number">1</span>);</div><div class="line">    <span class="keyword">return</span> max(ldep, rdep) + <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h4 id="脑筋急转弯"><a href="#脑筋急转弯" class="headerlink" title="脑筋急转弯"></a>脑筋急转弯</h4><p>有25个人，跑道一次只能跑5个人，问最少跑几次能得到冠亚季军啊。</p><ul><li>Solution<br>一眼看穿是多路归并啊，然后算了一下是8啊。。</li></ul><h3 id="二面-1"><a href="#二面-1" class="headerlink" title="二面"></a>二面</h3><p>不记得问了啥啊，就扔了一个题，然后问了点儿机器学习的东西</p><h4 id="复杂链表的复制"><a href="#复杂链表的复制" class="headerlink" title="复杂链表的复制"></a>复杂链表的复制</h4><ul><li><p>Description<br>有一个链表L,其每个节点有2个指针，一个指针next指向链表的下个节点，另一个random随机指向链表中的任一个节点，可能是自己或者为空，写一个程序，复制这个链表</p></li><li><p>Solution<br>剑指offer上有啊，看了一眼思路啊当时就，然后很慌啊。<br>不过面了那么多面试啊，一下子就冷静了啊。然后就会了啊。<br>就后面拷贝一份搞一搞啊。</p></li><li><p>Code</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> val;</div><div class="line">    Node *nxt, *random;</div><div class="line">    Node()&#123;&#125;</div><div class="line">    Node(<span class="keyword">int</span> val, Node *nxt, Node *random): val(val), nxt(nxt), random(random)&#123;&#125;</div><div class="line">    </div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function">Node* <span class="title">copyComplexList</span><span class="params">(Node *head)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(head == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">nullptr</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">for</span>(Node *cur = head; cur != <span class="literal">nullptr</span>; cur = cur-&gt;nxt-&gt;nxt)&#123;</div><div class="line">        Node *copied = <span class="keyword">new</span> Node(cur-&gt;val, cur-&gt;nxt, cur-&gt;random);</div><div class="line">        cur-&gt;nxt = copied;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(Node *cur = head-&gt;nxt; cur != <span class="literal">nullptr</span>; cur = cur-&gt;nxt-&gt;nxt)&#123;</div><div class="line">        cur-&gt;random = cur-&gt;random-&gt;nxt;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    Node *nHead = head-&gt;nxt;</div><div class="line">    <span class="keyword">for</span>(Node *cur = head; cur != <span class="literal">nullptr</span>; cur = cur-&gt;nxt)&#123;</div><div class="line">        Node *copied = cur-&gt;nxt;</div><div class="line">        Node *copiedNxt = copied-&gt;nxt-&gt;nxt;</div><div class="line">        Node *curNxt = cur-&gt;nxt-&gt;nxt;</div><div class="line">        cur-&gt;nxt = curNxt;</div><div class="line">        copied-&gt;nxt = copiedNxt;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> nHead;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h4 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h4><ul><li>手推一下LR吧<br>就直接把Hypothesis Function，Cost Function写一写，Gradient Decent推一推啊。<br>然后我就推了一下啊，sigmoid函数的导数差点不会推啊。。有惊无险啊</li><li>正则参数$\lambda$选取的影响啊<br>大了会overfitting啊，小了会underfitting啊。</li></ul><h4 id="一个奇怪的题"><a href="#一个奇怪的题" class="headerlink" title="一个奇怪的题"></a>一个奇怪的题</h4><ul><li><p>Description<br>对一个数组，有n个数据，找一个索引的位置k，使前k个数的方差var(k)和后面n-k个数的方差var(n-k)之和最小。</p></li><li><p>Solution<br>不知道能不能$O(1)$啊，不会做啊，就暴力展开了一下方差啊<br>然后$O(n)$枚举$k$，$O(1)$算答案，总复杂度$O(n)$</p></li><li><p>Code</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">var = \sum_&#123;i=1&#125;^n (x_i - avg)^2 </span></div><div class="line"><span class="comment">= \sum_&#123;i=1&#125;^n (x_i ^ 2 + avg^2 - 2*x_i*avg)</span></div><div class="line"><span class="comment">= \sum_&#123;i=1&#125;^n (x_i ^ 2 + (sum / n)^2 - 2 * x_i * (sum / n))</span></div><div class="line"><span class="comment">= \sum_&#123;i=1&#125;^n x_i^2 + sum^2 /n - 2*sum^2/n= \sum_&#123;i=1&#125;^n x_i^2 - sum^2/n</span></div><div class="line"><span class="comment">*/</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">findIndex</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; v)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> preSqSum = <span class="number">0</span>, totSqSum = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> preSum = <span class="number">0</span>, totSum = <span class="number">0</span>;</div><div class="line">    pair&lt;<span class="keyword">double</span>, <span class="keyword">int</span>&gt; varAndIdx = &#123;<span class="number">-1</span>, <span class="number">-1</span>&#125;;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v.size(); ++i)&#123;</div><div class="line">        totSqSum += v[i] * v[i];</div><div class="line">        totSum += v[i];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v.size(); ++i)&#123;</div><div class="line">        preSum += v[i];</div><div class="line">        preSqSum += v[i] * v[i];</div><div class="line">        <span class="keyword">int</span> sufSqSum = totSqSum - preSqSum;</div><div class="line">        <span class="keyword">int</span> sufSum = totSum - preSum;</div><div class="line">        <span class="keyword">double</span> preVar = preSqSum - <span class="number">1.0</span> * preSum * preSum / (i + <span class="number">1</span>);</div><div class="line">        <span class="keyword">double</span> sufVar = sufSqSum - <span class="number">1.0</span> * sufSum * sufSum/ (v.size() - i - <span class="number">1</span>);</div><div class="line">        varAndIdx = max(varAndIdx, &#123;preVar + sufVar, i&#125;);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> varAndIdx.second;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h3 id="三面-1"><a href="#三面-1" class="headerlink" title="三面"></a>三面</h3><h4 id="24点游戏"><a href="#24点游戏" class="headerlink" title="24点游戏"></a>24点游戏</h4><ul><li><p>Description<br>给定4个整数0～9，给出是否能计算得到24，加减乘除括号，普通算术运算。精度他说<code>1e-5</code></p></li><li><p>Solution<br>以前写过啊，蓝儿没脑子了啊，连面了两面。<br>就选择写暴力搜索所有表达式啊。<br>然后就因为<code>string v = &quot;&quot; + toChar(a) + toChar(b) + toChar(c) + toChar(d);</code><br>这个垃圾代码不CE挂了啊。。我以为会CE的啊。结果最后半天才反应到这里。<br>写了半个多小时，面试官他写了一个都写完了啊。。难受啊。。<br>我当时好怂啊，不自信啊。。结果面试结束后几分钟就调通了啊。</p></li><li><p>My Code<br>找不到最终版本了，就扔个有点小问题的吧。纪念一下我这个“C++大师”</p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="built_in">string</span> op = <span class="string">"+-*/"</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">getPriority</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(c == <span class="string">'+'</span> || c == <span class="string">'-'</span>) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(c == <span class="string">'*'</span> || c == <span class="string">'/'</span>) <span class="keyword">return</span> <span class="number">2</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; inToPost(<span class="keyword">const</span> <span class="built_in">string</span>&amp; expr) &#123;</div><div class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt; opr;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; ret;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; expr.size(); ++i) &#123;</div><div class="line">        <span class="keyword">char</span> c = expr[i];</div><div class="line">        <span class="keyword">if</span>(c == <span class="string">'('</span>) opr.push(c);</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(c == <span class="string">')'</span>) &#123;</div><div class="line">            <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</div><div class="line">                <span class="keyword">char</span> top = opr.top(); opr.pop();</div><div class="line">                <span class="keyword">if</span>(top == <span class="string">'('</span>) <span class="keyword">break</span>;</div><div class="line">                ret.push_back(<span class="built_in">string</span>(<span class="number">1</span>, top));</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">isdigit</span>(c)) &#123;</div><div class="line">            <span class="built_in">string</span> digit;</div><div class="line">            <span class="keyword">for</span>(; i &lt; expr.size() &amp;&amp; <span class="built_in">isdigit</span>(expr[i]); ++i) digit += expr[i];</div><div class="line">            ret.push_back(digit);</div><div class="line">            --i;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">int</span> curP = getPriority(c);</div><div class="line">            <span class="keyword">for</span>(; opr.size() &amp;&amp; getPriority(opr.top()) &gt;= curP; opr.pop())</div><div class="line">                ret.push_back(<span class="built_in">string</span>(<span class="number">1</span>, opr.top()));</div><div class="line">            opr.push(c);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(; opr.size(); opr.pop()) ret.push_back(<span class="built_in">string</span>(<span class="number">1</span>, opr.top()));</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">double</span> <span class="title">calc</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; post)</span> </span>&#123;</div><div class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">double</span>&gt; opd;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span>&amp; s : post) &#123;</div><div class="line">        <span class="keyword">if</span>(<span class="built_in">isdigit</span>(s[<span class="number">0</span>])) opd.push(stod(s));</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            assert(opd.size());</div><div class="line">            <span class="keyword">double</span> y = opd.top(); opd.pop();</div><div class="line">            assert(opd.size());</div><div class="line">            <span class="keyword">double</span> x = opd.top(); opd.pop();</div><div class="line">            <span class="keyword">if</span>(s[<span class="number">0</span>] == <span class="string">'+'</span>) opd.push(x + y);</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s[<span class="number">0</span>] == <span class="string">'-'</span>) opd.push(x - y);</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s[<span class="number">0</span>] == <span class="string">'*'</span>) opd.push(x * y);</div><div class="line">            <span class="keyword">else</span> opd.push(x / y);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> opd.top();</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> dep, <span class="keyword">bool</span> lftBracketed, <span class="built_in">string</span> s)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(dep == s.size()) &#123;</div><div class="line">        <span class="keyword">if</span>(lftBracketed) s += <span class="string">')'</span>;</div><div class="line"><span class="comment">//        cout &lt;&lt; s &lt;&lt; endl;</span></div><div class="line">        <span class="keyword">if</span>(<span class="built_in">abs</span>(calc(inToPost(s)) - <span class="number">24</span>) &lt; <span class="number">1e-5</span>) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(<span class="built_in">isdigit</span>(s[dep])) &#123;</div><div class="line">        <span class="keyword">if</span>(dep &gt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</div><div class="line">                <span class="built_in">string</span> ns = s;</div><div class="line">                ns.insert(dep, <span class="number">1</span>, op[i]);</div><div class="line">                <span class="keyword">if</span>(check(dep + <span class="number">2</span>, lftBracketed, ns)) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">                <span class="keyword">if</span>(lftBracketed) &#123;</div><div class="line">                    ns.insert(dep + <span class="number">2</span>, <span class="number">1</span>, <span class="string">')'</span>);</div><div class="line">                    <span class="keyword">if</span>(check(dep + <span class="number">3</span>, <span class="number">0</span>, ns)) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    ns.insert(dep + <span class="number">1</span>, <span class="number">1</span>, <span class="string">'('</span>);</div><div class="line">                    <span class="keyword">if</span>(check(dep + <span class="number">3</span>, <span class="number">1</span>, ns)) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(check(dep + <span class="number">1</span>, lftBracketed, s)) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(check(dep + <span class="number">1</span>, lftBracketed, s)) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">twentyFour</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c, <span class="keyword">int</span> d)</span> </span>&#123;</div><div class="line">    <span class="keyword">auto</span> toChar = [](<span class="keyword">int</span> x) &#123;<span class="keyword">return</span> <span class="keyword">char</span>(<span class="string">'0'</span> + x);&#125;;</div><div class="line">    <span class="built_in">string</span> v = <span class="built_in">string</span>(<span class="string">""</span>) + toChar(a) + toChar(b) + toChar(c) + toChar(d);</div><div class="line">    sort(v.begin(), v.end());</div><div class="line"></div><div class="line">    <span class="keyword">bool</span> ok = <span class="literal">false</span>;</div><div class="line">    <span class="keyword">do</span> &#123;</div><div class="line">        ok |= check(<span class="number">0</span>, <span class="number">0</span>, v);</div><div class="line">    &#125; <span class="keyword">while</span>(!ok &amp;&amp; next_permutation(v.begin(), v.end()));</div><div class="line">    <span class="keyword">return</span> ok;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="built_in">string</span> test = <span class="string">"5*5-5/5"</span>;</div><div class="line">    <span class="comment">//cout &lt;&lt; calc(test) &lt;&lt; endl;</span></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; (calc(inToPost(test))) &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; twentyFour(<span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>) &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>Interviewer’s Code<br>没仔细读这个代码啊，改天研究一下正确性，写一个bugfree的24点感觉不容易啊。。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> itertools</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">isEqual</span><span class="params">(v0, v1)</span>:</span></div><div class="line">    <span class="keyword">return</span> abs(v0 - v1) &lt; <span class="number">1e-6</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">expresssion</span><span class="params">(code, v0, v1)</span>:</span></div><div class="line">    <span class="keyword">if</span> code == <span class="number">0</span>:</div><div class="line">        <span class="keyword">return</span> v0 + v1</div><div class="line">    <span class="keyword">elif</span> code == <span class="number">1</span>:</div><div class="line">        <span class="keyword">return</span> v0 - v1</div><div class="line">    <span class="keyword">elif</span> code == <span class="number">2</span>:</div><div class="line">        <span class="keyword">return</span> v1 - v0</div><div class="line">    <span class="keyword">elif</span> code == <span class="number">3</span>:</div><div class="line">        <span class="keyword">return</span> v0 * v1</div><div class="line">    <span class="keyword">elif</span> code == <span class="number">4</span>:</div><div class="line">        <span class="keyword">if</span> isEqual(v1, <span class="number">0</span>):</div><div class="line">            <span class="keyword">return</span> float(<span class="string">'NaN'</span>)</div><div class="line">        <span class="keyword">return</span> float(v0)/v1</div><div class="line">    <span class="keyword">elif</span> code == <span class="number">5</span>:</div><div class="line">        <span class="keyword">if</span> isEqual(v0, <span class="number">0</span>):</div><div class="line">            <span class="keyword">return</span> float(<span class="string">'NaN'</span>)</div><div class="line">        <span class="keyword">return</span> float(v1)/v0</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">printExpr</span><span class="params">(code, v0, v1)</span>:</span></div><div class="line">    <span class="keyword">if</span> code == <span class="number">0</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">'%s+%s'</span> %(v0, v1)</div><div class="line">    <span class="keyword">if</span> code == <span class="number">1</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">'%s-%s'</span> %(v0, v1)</div><div class="line">    <span class="keyword">if</span> code == <span class="number">2</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">'%s-%s'</span> % (v1, v0)</div><div class="line">    <span class="keyword">if</span> code == <span class="number">3</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">'%s*%s'</span> % (v0, v1)</div><div class="line">    <span class="keyword">if</span> code == <span class="number">4</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">'%s/%s'</span> % (v0, v1)</div><div class="line">    <span class="keyword">if</span> code == <span class="number">5</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">'%s/%s'</span> %(v1, v0)</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(a, v)</span>:</span></div><div class="line">    <span class="keyword">if</span> len(a) == <span class="number">1</span>:</div><div class="line">        <span class="keyword">return</span> isEqual(a[<span class="number">0</span>], v)</div><div class="line">    <span class="keyword">elif</span> len(a) == <span class="number">2</span>:</div><div class="line">        <span class="keyword">for</span> code <span class="keyword">in</span> range(<span class="number">6</span>):</div><div class="line">            <span class="keyword">if</span> isEqual(expresssion(code, a[<span class="number">0</span>], a[<span class="number">1</span>]), v):</div><div class="line">                printExpr(code, a[<span class="number">0</span>], a[<span class="number">1</span>])</div><div class="line">                <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">    <span class="keyword">elif</span> len(a) == <span class="number">3</span>:</div><div class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> itertools.permutations(a):</div><div class="line">            <span class="keyword">for</span> code <span class="keyword">in</span> range(<span class="number">6</span>):</div><div class="line">                <span class="keyword">if</span> search([expresssion(code, b[<span class="number">0</span>], b[<span class="number">1</span>]), b[<span class="number">2</span>]], v):</div><div class="line">                    printExpr(code, b[<span class="number">0</span>], b[<span class="number">1</span>])</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">    <span class="keyword">elif</span> len(a) == <span class="number">4</span>:</div><div class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> itertools.permutations(a):</div><div class="line">            <span class="keyword">for</span> code <span class="keyword">in</span> range(<span class="number">6</span>):</div><div class="line">                <span class="keyword">if</span> search([expresssion(code, b[<span class="number">0</span>], b[<span class="number">1</span>]), b[<span class="number">2</span>], b[<span class="number">3</span>]], v):</div><div class="line">                    printExpr(code, b[<span class="number">0</span>], b[<span class="number">1</span>])</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">    <span class="keyword">elif</span> len(a) == <span class="number">4</span>:</div><div class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> itertools.permutations(a):</div><div class="line">            <span class="keyword">for</span> code <span class="keyword">in</span> range(<span class="number">6</span>):</div><div class="line">                <span class="keyword">if</span> search([expresssion(code, b[<span class="number">0</span>], b[<span class="number">1</span>]), b[<span class="number">2</span>], b[<span class="number">3</span>]], v):</div><div class="line">                    printExpr(code, b[<span class="number">0</span>], b[<span class="number">1</span>])</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"><span class="keyword">print</span> search([<span class="number">3</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">8</span>], <span class="number">24</span>)</div></pre></td></tr></table></figure><h3 id="然后就又没然后了啊"><a href="#然后就又没然后了啊" class="headerlink" title="然后就又没然后了啊"></a>然后就又没然后了啊</h3><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>好好学习辣！然后要自信！失败了并不会失去什么。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;毕设交了一波初稿，总算回来填坑了。回头想想，不得不说头条面试反映了我的心境变化。&lt;/p&gt;
    
    </summary>
    
      <category term="Doing" scheme="http://TaoSama.github.io/categories/Doing/"/>
    
      <category term="Interview" scheme="http://TaoSama.github.io/categories/Doing/Interview/"/>
    
    
  </entry>
  
  <entry>
    <title>WAPS Interview</title>
    <link href="http://TaoSama.github.io/2017/04/28/WAPS-Interview/"/>
    <id>http://TaoSama.github.io/2017/04/28/WAPS-Interview/</id>
    <published>2017-04-28T09:05:10.000Z</published>
    <updated>2017-09-19T14:48:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>3.31 rejected..<br>Since the campus recruitment in this year is over, a little summary here..</p><a id="more"></a><h3 id="Online-Coding"><a href="#Online-Coding" class="headerlink" title="Online Coding"></a>Online Coding</h3><h4 id=""><a href="#" class="headerlink" title="???"></a>???</h4><p>I forgot this one and no record, really easy though.</p><h4 id="Verify-Preorder-Serialization-of-a-Binary-Tree"><a href="#Verify-Preorder-Serialization-of-a-Binary-Tree" class="headerlink" title="Verify Preorder Serialization of a Binary Tree"></a>Verify Preorder Serialization of a Binary Tree</h4><p>One way to serialize a binary tree is to use pre-order traversal.<br>When we encounter a non-null node, we record the node’s value.<br>If it is a null node, we record using a sentinel value such as #.</p><ul><li><p>Examples<br>  • “9,3,4,#,#,1,#,#,2,#,6,#,#” → true<br>  • “1,#” → false<br>  • “9,#,#,1” → false</p></li><li><p>Solution<br>Just simply go pre-order traversal and check whether each node has two sons…<br>Careful about some corner cases..</p></li><li><p>Code<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-4-28/55313160-file_1493372200147_2948.png" alt=""></p></li></ul><h3 id="Onsite-Interview"><a href="#Onsite-Interview" class="headerlink" title="Onsite Interview"></a>Onsite Interview</h3><p>4 easy problems… I gotta have a solution only with a glance.</p><p>I only recall 2 of them.</p><h4 id="Anagram-Matching"><a href="#Anagram-Matching" class="headerlink" title="Anagram Matching"></a>Anagram Matching</h4><p>anagram: a word formed by rearranging the letters of another, such as cinema, formed from iceman<br>try to figgure out the number of occurrences of all the anagrams of $T$ in $S$, lowercase alphabets</p><ul><li>Solution<br>use the number of occurrences of each alphabet to hash all the anagrams of $T$<br>total time complexity is $O(\sum |S|),where\sum = 26$</li></ul><h4 id="Maximum-Weighted-Independent-Set-of-a-tree"><a href="#Maximum-Weighted-Independent-Set-of-a-tree" class="headerlink" title="Maximum Weighted Independent Set of a tree"></a>Maximum Weighted Independent Set of a tree</h4><p>choose some nodes that each pair of them have no edge.<br>try to maximize the total weight of the chosen nodes</p><ul><li>Solution<br>simple tree dp. $f[u][0/1]:=$ the maximum weight of the independent set that the subtree rooted at $u$, and choosing $u$ or not<br>and the transition is simple:<br>choose $u$, all of its sons mustn’t be choosed<br>not choose $u$, choosing or not choosing its sons is OK, choose the maximum one.<br>$ans=\max \{f[root][0], f[root][1]\}$<br>total time complexity is $O(N)$</li></ul><h4 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h4><p>Two interviewers are both very nice and patient. Good Expericence.</p><h4 id="VP-Interview"><a href="#VP-Interview" class="headerlink" title="VP Interview"></a>VP Interview</h4><p>Fvcking stupid that I talked about FP programming…<br>I’m not familiar with that..<br>I think the Japanese interviewer was a little sleepy, so absolutely my interview is a shit.. even he “woke up” when heard FP..<br>And it seemed that the Chinese one is weak.. some easy cpp questions..</p><p>Bad Expericence！<br>A Lesson：no more talking about the things without knowing a shit..</p><h3 id="Something-more"><a href="#Something-more" class="headerlink" title="Something more"></a>Something more</h3><p>No chance to attempt the indeed interview is a pity..<br>it would be very nice to have a free trip to Japan..</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;3.31 rejected..&lt;br&gt;Since the campus recruitment in this year is over, a little summary here..&lt;/p&gt;
    
    </summary>
    
      <category term="Doing" scheme="http://TaoSama.github.io/categories/Doing/"/>
    
      <category term="Interview" scheme="http://TaoSama.github.io/categories/Doing/Interview/"/>
    
    
  </entry>
  
  <entry>
    <title>So Sad</title>
    <link href="http://TaoSama.github.io/2017/04/24/So-Sad/"/>
    <id>http://TaoSama.github.io/2017/04/24/So-Sad/</id>
    <published>2017-04-23T19:17:10.000Z</published>
    <updated>2017-09-19T14:48:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>Sooooo Sad! Nothing changes, am I wrong?<br>Defintely not, calm down for some time..</p><a id="more"></a><p>Well, many things to do…<br>Which one get the most priority? Am I clear?</p><p>Am I really prepared? I’m afraid that something may follow the process of history..</p><p>Try to be more precise on some certain thing.</p><p>Any time, calm down.<br>The desire can lead you to the paradise and also the hell…</p><p>Think about myself.<br>A Little afraid to failure… That’s not what I want.</p><p>I wanna get my straightness and bravery back!</p><p>Well, all things will be OK.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Sooooo Sad! Nothing changes, am I wrong?&lt;br&gt;Defintely not, calm down for some time..&lt;/p&gt;
    
    </summary>
    
      <category term="Doing" scheme="http://TaoSama.github.io/categories/Doing/"/>
    
      <category term="Life" scheme="http://TaoSama.github.io/categories/Doing/Life/"/>
    
    
  </entry>
  
</feed>
