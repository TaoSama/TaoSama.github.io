<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>TaoSama&#39;s Blog</title>
  
  <subtitle>Reborn and Walk Alone</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://TaoSama.github.io/"/>
  <updated>2017-09-19T14:48:07.000Z</updated>
  <id>http://TaoSama.github.io/</id>
  
  <author>
    <name>TaoSama</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Constructors, Destrustors and Assignment Operators, Notes(2), Effective C++</title>
    <link href="http://TaoSama.github.io/2017/06/15/Constructors-Destructors-and-Assignment-Operators/"/>
    <id>http://TaoSama.github.io/2017/06/15/Constructors-Destructors-and-Assignment-Operators/</id>
    <published>2017-06-15T13:20:10.000Z</published>
    <updated>2017-09-19T14:48:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>(I read a Chinese version of the book, any translation problem plz point out. </p><a id="more"></a><h2 id="Constructors-Destructors-and-Assignment-Operator"><a href="#Constructors-Destructors-and-Assignment-Operator" class="headerlink" title="Constructors, Destructors and Assignment Operator"></a>Constructors, Destructors and Assignment Operator</h2><h3 id="Know-what-functions-CPP-silently-writes-and-calls"><a href="#Know-what-functions-CPP-silently-writes-and-calls" class="headerlink" title="Know what functions CPP silently writes and calls"></a>Know what functions CPP silently writes and calls</h3><p>For empty class, the complier will declare a copy constructor, a copy assignment operator, a destructor, <strong>if no any constructor is declared, one more default constructor is declared by compiler</strong>.<br>They are all public and inlined, and <strong>when called, they will be created (during compiling period)</strong>.</p><h3 id="Explicitly-disallow-the-use-of-compiler-generated-functions-you-do-not-want"><a href="#Explicitly-disallow-the-use-of-compiler-generated-functions-you-do-not-want" class="headerlink" title="Explicitly disallow the use of compiler-generated functions you do not want"></a>Explicitly disallow the use of compiler-generated functions you do not want</h3><ul><li><p>declare as private with no definition.<br>when member function or friend function calls, <strong>a linkage error</strong> will be reported.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeForSale</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="comment">// ...</span></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    HomeForSale(<span class="keyword">const</span> HomeForSale&amp;);</div><div class="line">    HomeForSale&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> HomeForSale&amp;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure></li><li><p><strong>earlier? -&gt; compiling period</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Uncopyable</span> &#123;</span></div><div class="line"><span class="keyword">protected</span>:</div><div class="line">    Uncopyable() &#123;&#125;</div><div class="line">    ~Uncopyable() &#123;&#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    Uncopyable(<span class="keyword">const</span> Uncopyable&amp;);</div><div class="line">    Uncopyable&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> Uncopyable&amp;);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeForSale</span>:</span> <span class="keyword">private</span> Uncopyable &#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure></li></ul><p><strong>why?</strong><br>anyone tries to copy <code>HomeForSale</code>, the compiler will try to generate a copy constructor and a copy assignment operator, then “compiler-generated version” tries to call the ones in base classes respectively, and it will be refused due to the privateness of copying functions in base classes.</p><ul><li>Boost have one class <code>noncopyable</code> similarly that mentioned above.</li><li>CPP11 new feature, <code>=delete</code> </li></ul><h3 id="Declare-vitual-destructors-in-polymorphic-base-classes"><a href="#Declare-vitual-destructors-in-polymorphic-base-classes" class="headerlink" title="Declare vitual destructors in polymorphic base classes."></a>Declare vitual destructors in polymorphic base classes.</h3><ul><li>CPP points out specificly, it is a <strong>undefined behavior</strong> when a object of derived class is deleted by a pointer of base class, which has a non-virtual destructor.</li><li>Any class that has a virtual function should have a virtual destructor.</li><li>A class with no virtual destructor mustn’t be used as a base class, such as STL containers. In other words, <strong>if some class is not designed for using as a base class, it shouldn’t declare a virtual destructor</strong>.</li><li>Declare a pure virtual destrutor when creating an abstract class without any other pure virtual functions.<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AWOV</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="keyword">virtual</span> ~AWOV() = <span class="number">0</span>;</div><div class="line">&#125;;</div><div class="line">AWOV::~AWOV() &#123;&#125;</div></pre></td></tr></table></figure></li></ul><h3 id="Prevent-exceptions-from-leaving-destructors"><a href="#Prevent-exceptions-from-leaving-destructors" class="headerlink" title="Prevent exceptions from leaving destructors"></a>Prevent exceptions from leaving destructors</h3><p><strong>When 2 exceptions exist at the same time, the program either aborts or results in a undefined behavior</strong>.</p><p><strong>double insurance</strong><br>if customer need to response to the exceptions which was thrown by the run-time of some function, the class should provide a normal function (other than handled in the destructor).<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DBConn</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</div><div class="line">        db.close();</div><div class="line">        closed = <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">    ~DBConn() &#123;</div><div class="line">        <span class="keyword">if</span>(!closed) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                db.close();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">catch</span> (...) &#123;</div><div class="line">                <span class="comment">// log, then abort or swallow the exception</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    DBConnection db;</div><div class="line">    <span class="keyword">bool</span> closed;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><h3 id="Never-call-virtual-functions-during-construction-or-destruction"><a href="#Never-call-virtual-functions-during-construction-or-destruction" class="headerlink" title="Never call virtual functions during construction or destruction"></a>Never call virtual functions during construction or destruction</h3><ul><li>virtual functions never downcast to derived classes, when base classed is constructing.</li><li>once called, it is a <strong>undefined behavior</strong> because the members haven’t been initialized yet.</li><li><strong>if needed, declare as non-virtual</strong><br>constructors of derived classes passes the parameters to the ones of base classes (static functions will also avoid the problem).<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Transaction</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">Transaction</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; logInfo)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">logTransaction</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; logInfo)</span> <span class="keyword">const</span></span>; <span class="comment">// non-virtual</span></div><div class="line">&#125;;</div><div class="line">Transaction::Transaction(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; logInfo) &#123;</div><div class="line">    logTransaction(logInfo);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BuyTransaction</span>:</span> <span class="keyword">public</span> Transaction &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    BuyTransaction( ... )</div><div class="line">        : Transaction(createLogString( ... ))</div><div class="line">    &#123;&#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="keyword">static</span> <span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">createLogString</span><span class="params">( ...)</span></span>;</div><div class="line">);</div></pre></td></tr></table></figure></li></ul><h3 id="Assignment-operator"><a href="#Assignment-operator" class="headerlink" title="Assignment operator"></a>Assignment operator</h3><ul><li>Have assignment operators return a reference to <code>*this</code></li><li>Handle assignment to self<br><strong>copy and swap</strong> technique<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Widget&amp; Widget::<span class="keyword">operator</span>=(<span class="keyword">const</span> Widget&amp; rhs) &#123;</div><div class="line">    Widget temp(rhs);</div><div class="line">    swap(*<span class="keyword">this</span>, temp);</div><div class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h3 id="Copy-all-parts-of-an-object"><a href="#Copy-all-parts-of-an-object" class="headerlink" title="Copy all parts of an object"></a>Copy all parts of an object</h3><ul><li><p>compiler may generate no warnings or errors when you implement your own copy constructors or copy assignment operators</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Customer</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    Customer(<span class="keyword">const</span> Customer&amp; rhs);</div><div class="line">    Customer&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> Customer&amp; rhs);</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> name;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PriorityCustomer</span>:</span> <span class="keyword">public</span> Customer &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    PriorityCustomer(<span class="keyword">const</span> PriorityCustomer&amp; rhs);</div><div class="line">    PriorityCustomer&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> PriorityCustomer&amp; rhs);</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="keyword">int</span> priority;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">PriorityCustomer::PriorityCustomer(<span class="keyword">const</span> PriorityCustomer&amp; rhs)</div><div class="line">    : Customer(rhs),</div><div class="line">      priority(rhs.priority) &#123;&#125;</div><div class="line"></div><div class="line">PriorityCustomer&amp; PriorityCustomer::<span class="keyword">operator</span>=(<span class="keyword">const</span> PriorityCustomer&amp; rhs) &#123;</div><div class="line">    Customer::<span class="keyword">operator</span>=(rhs);</div><div class="line">    priority = rhs.priority;</div><div class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p><strong>Do not try to use some copying function to implement another one</strong>.<br>If you wanna avoid code duplicate, try to introduce a new function, maybe called <code>init()</code> to be called by the two copying functions.</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;(I read a Chinese version of the book, any translation problem plz point out. &lt;/p&gt;
    
    </summary>
    
      <category term="Doing" scheme="http://TaoSama.github.io/categories/Doing/"/>
    
      <category term="CPP" scheme="http://TaoSama.github.io/categories/Doing/CPP/"/>
    
    
  </entry>
  
  <entry>
    <title>Accustoming to CPP, Notes(1), Effective C++</title>
    <link href="http://TaoSama.github.io/2017/06/11/Accustoming-to-CPP/"/>
    <id>http://TaoSama.github.io/2017/06/11/Accustoming-to-CPP/</id>
    <published>2017-06-11T03:20:10.000Z</published>
    <updated>2017-09-19T14:48:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>(I read a Chinese version of the book, any translation problem plz point out. </p><a id="more"></a><h3 id="View-CPP-as-a-federation-of-languages"><a href="#View-CPP-as-a-federation-of-languages" class="headerlink" title="View CPP as a federation of languages"></a>View CPP as a federation of languages</h3><ul><li><p>a multiparadigm programming language</p><ul><li>procedural</li><li>object-oriented programming (OOP)</li><li>functional programming (FP)</li><li>generic</li><li>template metaprogramming (TMP)</li></ul></li><li><p>tips</p><ul><li>pass-by-value is more efficient for built-in types (C-like types)</li><li>pass-by-reference-to-const is better for user-defined types</li><li>pass-by-value is better for STL iterators and functors (both implemented based on C-pointers)</li></ul></li></ul><h3 id="Prefer-compliers-to-preprocessors"><a href="#Prefer-compliers-to-preprocessors" class="headerlink" title="Prefer compliers to preprocessors"></a>Prefer compliers to preprocessors</h3><h4 id="Use-consts-for-constants"><a href="#Use-consts-for-constants" class="headerlink" title="Use consts for constants"></a>Use consts for constants</h4><ul><li><p>consts can be in the symbol table and will be seen by compliers</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> <span class="keyword">char</span>* <span class="keyword">const</span> authorName = <span class="string">"Scott Meyers"</span>;</div><div class="line"><span class="comment">//std::string is better than char*-based string</span></div><div class="line"><span class="keyword">const</span> <span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">authorName</span><span class="params">(<span class="string">"Scott Meyers"</span>)</span></span>;</div></pre></td></tr></table></figure></li><li><p>consts in class for scope</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Well, it is a declaration not a definition. Normally CPP requires a definition for anything you use.</span></div><div class="line"><span class="comment">// But static consts in class with integral types(ints, chars, bools) need to be treated specially.</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GamePlayer</span> &#123;</span></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> NumTurns = <span class="number">5</span>; <span class="comment">//declaration</span></div><div class="line">    <span class="keyword">int</span> scores[NumTurns];</div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure></li></ul><p><strong>No need to provide definitions when their addresses are never taken.</strong><br><strong>Some compliers may wrongly require a definition, then it will look like:</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// definiton, no more initialization due to done in declaration</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> GamePlayer::NumTurns;</div></pre></td></tr></table></figure></p><ul><li><p>#defines have no scope<br>once a macro is defined, it is taken into effect during all the later process of compiling(unless #undef is done).<br><strong>no encapsulation</strong></p></li><li><p>enum hack</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// some like #defines</span></div><div class="line"><span class="comment">// consts can be taken the addresses while enums cannot</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GamePlayer</span> &#123;</span></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="keyword">enum</span> &#123; NumTurns = <span class="number">5</span> &#125;;</div><div class="line">    <span class="keyword">int</span> scores[NumTurns];</div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure></li></ul><p><strong>For acquaintance, enum hack is basic technique in TMP</strong></p><h4 id="Use-template-inlines-for-mini-functions"><a href="#Use-template-inlines-for-mini-functions" class="headerlink" title="Use template inlines for mini functions"></a>Use template inlines for mini functions</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// disgusting</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CALL_WITH_MAX(a, b) f((a) &gt; (b) ? (a) : (b))</span></div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">callWithMAX</span><span class="params">(<span class="keyword">const</span> T&amp; a, <span class="keyword">const</span> T&amp; b)</span> </span>&#123;</div><div class="line">    f(a &gt; b ? a : b);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="Use-consts-whenever-possible"><a href="#Use-consts-whenever-possible" class="headerlink" title="Use consts whenever possible"></a>Use consts whenever possible</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">char</span> greeting[] = <span class="string">"Hello"</span>;</div><div class="line"><span class="keyword">char</span>* p = greeting;              <span class="comment">// non-const pointer, non-const data</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">char</span>* p = greeting;        <span class="comment">// non-const pointer, const data</span></div><div class="line"><span class="keyword">char</span>* <span class="keyword">const</span> p = greeting;        <span class="comment">// const pointer, non-const data</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">char</span>* <span class="keyword">const</span> p = greeting;  <span class="comment">// const pointer, const data</span></div></pre></td></tr></table></figure><ul><li><p>STL iterator<br>iterator acts like a T* pointer.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec;</div><div class="line"><span class="comment">// iter acts like T* const</span></div><div class="line"><span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator iter = vec.begin(); </div><div class="line">*iter = <span class="number">10</span>;  <span class="comment">// ok</span></div><div class="line">++iter;      <span class="comment">// CE</span></div><div class="line"></div><div class="line"><span class="comment">// cIter acts like const T*</span></div><div class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::const_iterator cIter = vec.begin();</div><div class="line">++iter;      <span class="comment">// ok</span></div><div class="line">*iter = <span class="number">10</span>;  <span class="comment">// CE</span></div></pre></td></tr></table></figure></li><li><p>return const value</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rational</span> &#123;</span> <span class="comment">// ... &#125;;</span></div><div class="line"><span class="keyword">const</span> Rational <span class="keyword">operator</span>* (<span class="keyword">const</span> Rational&amp; lhs, <span class="keyword">const</span> Rational&amp; rhs);</div><div class="line"></div><div class="line">Rational a, b, c;</div><div class="line"><span class="keyword">if</span>(a * b = c) &#123;&#125; <span class="comment">// CE, without const it will be ok</span></div></pre></td></tr></table></figure></li></ul><p><strong>CPP returns object by value, so the assignment is never legal, for only changing a copy.</strong></p><ul><li>const member function<br><strong>two member functions can be overloaded even if they are only different in constness.</strong><br><strong>in real, const member function is overloaded when const objects are used in passed by pointer-to-const or passed by reference-to-const.</strong><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TextBlock</span> &#123;</span></div><div class="line"><span class="keyword">public</span>: </div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span>&amp; <span class="keyword">operator</span>[](<span class="built_in">std</span>::<span class="keyword">size_t</span> position) <span class="keyword">const</span> &#123;</div><div class="line">        <span class="comment">// ...</span></div><div class="line">        <span class="keyword">return</span> text[position];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">char</span>&amp; <span class="keyword">operator</span>[](<span class="built_in">std</span>::<span class="keyword">size_t</span> position) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">const_cast</span>&lt;<span class="keyword">char</span>&amp;&gt;(</div><div class="line">            <span class="keyword">static_cast</span>&lt;<span class="keyword">const</span> TextBlock&amp;&gt;(*<span class="keyword">this</span>)[position]</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">const</span> TextBlock&amp; ctb)</span> </span>&#123;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; ctb[<span class="number">0</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><p><strong>non-const overloaded function can be implemented by calling the const version is safe, otherwise it is not.</strong></p><ul><li>bitwise constness or logical constness<br><strong>bitwist constness is the definition of CPP’s constness, so the const member funcion cannot change any non-static member variable.</strong><br>use keyword <code>mutable</code> to release the constraint of CPP’s bitwise constness.<br><strong>write codes by using logical constness.</strong><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CTextBlock</span> &#123;</span></div><div class="line">    <span class="keyword">public</span>: </div><div class="line">        <span class="built_in">std</span>::<span class="keyword">size_t</span> length() <span class="keyword">const</span>;</div><div class="line">    <span class="keyword">private</span>:</div><div class="line">        <span class="keyword">char</span>* pText;</div><div class="line">        <span class="keyword">mutable</span> <span class="built_in">std</span>::<span class="keyword">size_t</span> textLength;</div><div class="line">        <span class="keyword">mutable</span> <span class="keyword">bool</span> lengthIsValid;</div><div class="line">&#125;;</div><div class="line"><span class="built_in">std</span>::<span class="keyword">size_t</span> CTextBlock::length() <span class="keyword">const</span> &#123;</div><div class="line">    <span class="keyword">if</span>(!lengthIsValid) &#123;</div><div class="line">        textLength = <span class="built_in">std</span>::<span class="built_in">strlen</span>(pText); <span class="comment">// can be changed</span></div><div class="line">        lengthIsValid = <span class="literal">true</span>;            <span class="comment">// same as above</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> textLength;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h3 id="Make-sure-that-objects-are-initialized-before-used"><a href="#Make-sure-that-objects-are-initialized-before-used" class="headerlink" title="Make sure that objects are initialized before used"></a>Make sure that objects are initialized before used</h3><ul><li>objects will be initialized when declared in heap while they won’t when declared in stack.</li><li>it is not easy to memorize it, whatever, keep initialization always.</li><li>do not mix assignment and initialization.</li><li><strong>for user-defined types, always use the member initialization list and always list all the member variables in the member initialization list.</strong></li><li>sometimes, a class may have many constructors, and to avoid duplication, we can move the invitializatin of the variables that have same efficiency between assignment and initialization to some private function. (well, this ‘pseudo-intialization’ is not advocated, try member initialization list as much as possible)</li><li>The order of initialization:<ul><li>base classes is initialized earlier than derived classes.</li><li>member variables is initialized as the order of that they are declared even if the order of the appearance in member initialization list is different.</li></ul></li><li>non-local static objects<ul><li>static objects: global objects, objects defined in namespace, static objects in classes, functions, file scopes.</li><li>local static objects: static objects in functions.</li><li>no specific initialization order for non-local static objects in different translation unit.</li><li>Singleton:<br><strong>use local static objects to replace the non-local ones.</strong><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileSystem</span> &#123;</span> <span class="comment">// ... &#125;;</span></div><div class="line"><span class="function">FileSystem&amp; <span class="title">tfs</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> FileSystem fs;</div><div class="line">    <span class="keyword">return</span> fs;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Directory</span> &#123;</span> <span class="comment">// ... &#125;;</span></div><div class="line">Directory::Directory( params ) &#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">    <span class="built_in">std</span>::<span class="keyword">size_t</span> disks = tfs().numDisks();</div><div class="line">&#125;</div><div class="line"><span class="function">Directory&amp; <span class="title">tempDir</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> Directory td;</div><div class="line">    <span class="keyword">return</span> td;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;(I read a Chinese version of the book, any translation problem plz point out. &lt;/p&gt;
    
    </summary>
    
      <category term="Doing" scheme="http://TaoSama.github.io/categories/Doing/"/>
    
      <category term="CPP" scheme="http://TaoSama.github.io/categories/Doing/CPP/"/>
    
    
  </entry>
  
  <entry>
    <title>Address Collecting</title>
    <link href="http://TaoSama.github.io/2017/05/18/Address-Collecting/"/>
    <id>http://TaoSama.github.io/2017/05/18/Address-Collecting/</id>
    <published>2017-05-18T10:30:10.000Z</published>
    <updated>2017-09-19T14:48:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>这里留地址吧，具体时间就截止到多说关闭(6.1)吧，到时候我就换Disqus了<br>喔，到时候收到了转给我打印费和邮费就好了。<br>(某ACMer卖模版月入百万！才不会说我是骗手机号的呢</p><a id="more"></a><p>那啥地址就按照这个格式留吧：</p><p>收件地址： 重庆市重庆大学A区中门11舍<br>收件人：老顽童<br>收件人号码：13123333333</p><p>嗨呀，以后就只能自己玩啦~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里留地址吧，具体时间就截止到多说关闭(6.1)吧，到时候我就换Disqus了&lt;br&gt;喔，到时候收到了转给我打印费和邮费就好了。&lt;br&gt;(某ACMer卖模版月入百万！才不会说我是骗手机号的呢&lt;/p&gt;
    
    </summary>
    
      <category term="Doing" scheme="http://TaoSama.github.io/categories/Doing/"/>
    
      <category term="Life" scheme="http://TaoSama.github.io/categories/Doing/Life/"/>
    
    
  </entry>
  
  <entry>
    <title>Backthoughts during These Days</title>
    <link href="http://TaoSama.github.io/2017/04/28/Backthoughts-during-These-Days/"/>
    <id>http://TaoSama.github.io/2017/04/28/Backthoughts-during-These-Days/</id>
    <published>2017-04-28T09:30:10.000Z</published>
    <updated>2017-09-19T14:48:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>“I’m sorry that you are not the person we choose”<br>“I’m sorry …”</p><a id="more"></a><p>Yeah, I gotta some problems myself, mainly from the ICPC regionals’ results…<br>I managed to avoid that, yet I can’t control the inner hints myself…</p><p>During the toutiao interview, the first two was OK.<br>The third one crashed..</p><p>Last year, a new team formed, and I became the vice coder instead of<br>the major coder…<br>Less and less onsite coding, makes me lose the judgement of coding time of a problem..</p><p>WAPS online Interview, anxiety made me … couldn’t think straightly..<br>Unexpectedly, onsite interview, I did a great job.. even I was not matched at last.<br>Anyway, it doesn’t matter.. Life is not all about money and comfort,<br>and I’d love to have some challenges which hard mode of life will be more exciting.</p><p>Well, going back to the third one of toutiao’ interview.<br>So bad! I AM the one who can code a complicated data structure problem,<br>and a complicated implementation problem too…<br>Calm down, and 30 minutes is OK.. Do believe myself…<br>Failure won’t take anything.<br>Results can’t be changed, more world later on.</p><p>2 times I failed at the third interview of toutiao.<br>I don’t believe the fate, just lack of some luck.<br>More details, see this link, <a href="/2017/04/28/Backthoughts-about-the-Failure-of-the-Autumn-and-Spring-Campus-Recruiting-of-Toutiao/">click me</a></p><p>Be better and More progress！<br>More effort on the hard mode chosed！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;“I’m sorry that you are not the person we choose”&lt;br&gt;“I’m sorry …”&lt;/p&gt;
    
    </summary>
    
      <category term="Doing" scheme="http://TaoSama.github.io/categories/Doing/"/>
    
      <category term="Life" scheme="http://TaoSama.github.io/categories/Doing/Life/"/>
    
    
  </entry>
  
  <entry>
    <title>头条秋招春招失败的思考</title>
    <link href="http://TaoSama.github.io/2017/04/28/Backthoughts-about-the-Failure-of-the-Autumn-and-Spring-Campus-Recruiting-of-Toutiao/"/>
    <id>http://TaoSama.github.io/2017/04/28/Backthoughts-about-the-Failure-of-the-Autumn-and-Spring-Campus-Recruiting-of-Toutiao/</id>
    <published>2017-04-28T09:20:10.000Z</published>
    <updated>2017-09-19T14:48:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>毕设交了一波初稿，总算回来填坑了。回头想想，不得不说头条面试反映了我的心境变化。</p><a id="more"></a><h2 id="秋招后台岗"><a href="#秋招后台岗" class="headerlink" title="秋招后台岗"></a>秋招后台岗</h2><h3 id="一面"><a href="#一面" class="headerlink" title="一面"></a>一面</h3><p>记得有2个题，其中一个应该非常水的题，没啥印象了。</p><h4 id="数组中乘积最大连续子数组"><a href="#数组中乘积最大连续子数组" class="headerlink" title="数组中乘积最大连续子数组"></a>数组中乘积最大连续子数组</h4><p>这个现在就是一眼的dp，只怪刷了那么多题的我还是刷题太少了。</p><ul><li>Old Solution<br>直接暴力是$O(n^3)$的，所以就显然的前缀积优化到$O(n^2)$<br>蓝儿因为有$0$，这里就会有些问题，为了避免除$0$要做一些处理<br>不过实际上只要乘了$0$这一段乘积就是$0$了，所以把所有$0$的位置抠出来就可以了<br>然后枚举每一段，就不会有事了，答案初始化为$0$就可以了，前提是有一个$0$。。</li><li>New Solution<br>很简单的dp啊，，$f[i][0/1]:$=到$i$这个位置的连续乘积最大值/最小值<br>就是套用最大连续子段和的套路，这破题我还被问过两遍<br>$HR$又做了一个更复杂的的树形的，不过那个时候我一眼秒了。。<br>就因为有负数嘛，所以就简单的维护下最小值就好了。。</li></ul><h3 id="二面"><a href="#二面" class="headerlink" title="二面"></a>二面</h3><h4 id="写个类似单调栈的玩意儿"><a href="#写个类似单调栈的玩意儿" class="headerlink" title="写个类似单调栈的玩意儿"></a>写个类似单调栈的玩意儿</h4><p>印象中应该让写了一个支持<code>push</code>,<code>pop</code>,<code>getMin</code>的栈，所有操作$O(1)$</p><ul><li>Solution<br>这东西也很简单啊，就维护数字栈的之后再顺手维护一个单调栈，细节注意一下就好了<br>我当时并没有想到单调栈，可能平时用的不多。不过还是有脑子的，随便一想就想到了。<br>我记得这个破题剑指offer上有吧，虽然一直没注意。</li></ul><h4 id="微信怎么拉取朋友圈信息"><a href="#微信怎么拉取朋友圈信息" class="headerlink" title="微信怎么拉取朋友圈信息"></a>微信怎么拉取朋友圈信息</h4><p>这东西我真不会啊，就xjb说了一下，本地存个跟帐号有关的hashvalue表示已经拉取了多少<br>每次拉取的时候，服务器也生成一个，比对一下，不适最新的就拉取就好了。<br>当然你问我什么别人点赞评论啥的，我真的不会啊。。</p><h4 id="服务器很少，流量很大，怎么负载均衡啊"><a href="#服务器很少，流量很大，怎么负载均衡啊" class="headerlink" title="服务器很少，流量很大，怎么负载均衡啊"></a>服务器很少，流量很大，怎么负载均衡啊</h4><p>不会啊，xjb扯淡啊，就随手说了一下缓存服务器，Nginx啥的(这东西我tm就听过名字。<br><del>讲道理啊，为啥不买设备啊喂！(大雾</del></p><h3 id="三面"><a href="#三面" class="headerlink" title="三面"></a>三面</h3><p>哇，这面跑不了啊，直接就问我后台技术栈啥的。<br>骗不过去了啊。然后就不知道啊。有点绝望啊。<br>意识不清醒了啊，打完比赛找不到工作一同交织在一起啊。<br>然后面试官问我读不读研啊。然后脑子一抽说想读啊。<br>然后我还耿直的去问头条有没有quit工作去读研啊<br><del>没见过比我更sb的人了</del><br>主要还是比赛打炸了，心态太差了。几个月都没调好。</p><h3 id="然后就没然后了啊"><a href="#然后就没然后了啊" class="headerlink" title="然后就没然后了啊"></a>然后就没然后了啊</h3><h2 id="春招算法岗"><a href="#春招算法岗" class="headerlink" title="春招算法岗"></a>春招算法岗</h2><h3 id="一面-1"><a href="#一面-1" class="headerlink" title="一面"></a>一面</h3><p>扯扯淡啊，自我介绍啥的啊，ACM打的怎么样啊。。</p><h4 id="二叉树最长路径长度"><a href="#二叉树最长路径长度" class="headerlink" title="二叉树最长路径长度"></a>二叉树最长路径长度</h4><p>一看就当普通树做了啊，然后就无脑说两次dfs求直径就好了啊。<br>他说能不能一次啊，那就无脑dp求一下直径啊。<br>他说还能不能再简单一点啊。 <del>(dp还不简单啊</del><br>哇 我又看了一下题，发现二叉树。<br>然后我就说那简化一下啊。</p><ul><li>Code<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></div><div class="line">    Node* ls, *rs;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = INT_MAX / <span class="number">2</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> maxd = -INF;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(Node* cur)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(cur == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> ldep = dfs(cur-&gt;ls);</div><div class="line">    <span class="keyword">int</span> rdep = dfs(cur-&gt;rs);</div><div class="line">   maxd = max(maxd, ldep + rdep + <span class="number">1</span>);</div><div class="line">    <span class="keyword">return</span> max(ldep, rdep) + <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h4 id="脑筋急转弯"><a href="#脑筋急转弯" class="headerlink" title="脑筋急转弯"></a>脑筋急转弯</h4><p>有25个人，跑道一次只能跑5个人，问最少跑几次能得到冠亚季军啊。</p><ul><li>Solution<br>一眼看穿是多路归并啊，然后算了一下是8啊。。</li></ul><h3 id="二面-1"><a href="#二面-1" class="headerlink" title="二面"></a>二面</h3><p>不记得问了啥啊，就扔了一个题，然后问了点儿机器学习的东西</p><h4 id="复杂链表的复制"><a href="#复杂链表的复制" class="headerlink" title="复杂链表的复制"></a>复杂链表的复制</h4><ul><li><p>Description<br>有一个链表L,其每个节点有2个指针，一个指针next指向链表的下个节点，另一个random随机指向链表中的任一个节点，可能是自己或者为空，写一个程序，复制这个链表</p></li><li><p>Solution<br>剑指offer上有啊，看了一眼思路啊当时就，然后很慌啊。<br>不过面了那么多面试啊，一下子就冷静了啊。然后就会了啊。<br>就后面拷贝一份搞一搞啊。</p></li><li><p>Code</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> val;</div><div class="line">    Node *nxt, *random;</div><div class="line">    Node()&#123;&#125;</div><div class="line">    Node(<span class="keyword">int</span> val, Node *nxt, Node *random): val(val), nxt(nxt), random(random)&#123;&#125;</div><div class="line">    </div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function">Node* <span class="title">copyComplexList</span><span class="params">(Node *head)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(head == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">nullptr</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">for</span>(Node *cur = head; cur != <span class="literal">nullptr</span>; cur = cur-&gt;nxt-&gt;nxt)&#123;</div><div class="line">        Node *copied = <span class="keyword">new</span> Node(cur-&gt;val, cur-&gt;nxt, cur-&gt;random);</div><div class="line">        cur-&gt;nxt = copied;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(Node *cur = head-&gt;nxt; cur != <span class="literal">nullptr</span>; cur = cur-&gt;nxt-&gt;nxt)&#123;</div><div class="line">        cur-&gt;random = cur-&gt;random-&gt;nxt;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    Node *nHead = head-&gt;nxt;</div><div class="line">    <span class="keyword">for</span>(Node *cur = head; cur != <span class="literal">nullptr</span>; cur = cur-&gt;nxt)&#123;</div><div class="line">        Node *copied = cur-&gt;nxt;</div><div class="line">        Node *copiedNxt = copied-&gt;nxt-&gt;nxt;</div><div class="line">        Node *curNxt = cur-&gt;nxt-&gt;nxt;</div><div class="line">        cur-&gt;nxt = curNxt;</div><div class="line">        copied-&gt;nxt = copiedNxt;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> nHead;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h4 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h4><ul><li>手推一下LR吧<br>就直接把Hypothesis Function，Cost Function写一写，Gradient Decent推一推啊。<br>然后我就推了一下啊，sigmoid函数的导数差点不会推啊。。有惊无险啊</li><li>正则参数$\lambda$选取的影响啊<br>大了会overfitting啊，小了会underfitting啊。</li></ul><h4 id="一个奇怪的题"><a href="#一个奇怪的题" class="headerlink" title="一个奇怪的题"></a>一个奇怪的题</h4><ul><li><p>Description<br>对一个数组，有n个数据，找一个索引的位置k，使前k个数的方差var(k)和后面n-k个数的方差var(n-k)之和最小。</p></li><li><p>Solution<br>不知道能不能$O(1)$啊，不会做啊，就暴力展开了一下方差啊<br>然后$O(n)$枚举$k$，$O(1)$算答案，总复杂度$O(n)$</p></li><li><p>Code</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">var = \sum_&#123;i=1&#125;^n (x_i - avg)^2 </span></div><div class="line"><span class="comment">= \sum_&#123;i=1&#125;^n (x_i ^ 2 + avg^2 - 2*x_i*avg)</span></div><div class="line"><span class="comment">= \sum_&#123;i=1&#125;^n (x_i ^ 2 + (sum / n)^2 - 2 * x_i * (sum / n))</span></div><div class="line"><span class="comment">= \sum_&#123;i=1&#125;^n x_i^2 + sum^2 /n - 2*sum^2/n= \sum_&#123;i=1&#125;^n x_i^2 - sum^2/n</span></div><div class="line"><span class="comment">*/</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">findIndex</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; v)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> preSqSum = <span class="number">0</span>, totSqSum = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> preSum = <span class="number">0</span>, totSum = <span class="number">0</span>;</div><div class="line">    pair&lt;<span class="keyword">double</span>, <span class="keyword">int</span>&gt; varAndIdx = &#123;<span class="number">-1</span>, <span class="number">-1</span>&#125;;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v.size(); ++i)&#123;</div><div class="line">        totSqSum += v[i] * v[i];</div><div class="line">        totSum += v[i];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v.size(); ++i)&#123;</div><div class="line">        preSum += v[i];</div><div class="line">        preSqSum += v[i] * v[i];</div><div class="line">        <span class="keyword">int</span> sufSqSum = totSqSum - preSqSum;</div><div class="line">        <span class="keyword">int</span> sufSum = totSum - preSum;</div><div class="line">        <span class="keyword">double</span> preVar = preSqSum - <span class="number">1.0</span> * preSum * preSum / (i + <span class="number">1</span>);</div><div class="line">        <span class="keyword">double</span> sufVar = sufSqSum - <span class="number">1.0</span> * sufSum * sufSum/ (v.size() - i - <span class="number">1</span>);</div><div class="line">        varAndIdx = max(varAndIdx, &#123;preVar + sufVar, i&#125;);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> varAndIdx.second;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h3 id="三面-1"><a href="#三面-1" class="headerlink" title="三面"></a>三面</h3><h4 id="24点游戏"><a href="#24点游戏" class="headerlink" title="24点游戏"></a>24点游戏</h4><ul><li><p>Description<br>给定4个整数0～9，给出是否能计算得到24，加减乘除括号，普通算术运算。精度他说<code>1e-5</code></p></li><li><p>Solution<br>以前写过啊，蓝儿没脑子了啊，连面了两面。<br>就选择写暴力搜索所有表达式啊。<br>然后就因为<code>string v = &quot;&quot; + toChar(a) + toChar(b) + toChar(c) + toChar(d);</code><br>这个垃圾代码不CE挂了啊。。我以为会CE的啊。结果最后半天才反应到这里。<br>写了半个多小时，面试官他写了一个都写完了啊。。难受啊。。<br>我当时好怂啊，不自信啊。。结果面试结束后几分钟就调通了啊。</p></li><li><p>My Code<br>找不到最终版本了，就扔个有点小问题的吧。纪念一下我这个“C++大师”</p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="built_in">string</span> op = <span class="string">"+-*/"</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">getPriority</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(c == <span class="string">'+'</span> || c == <span class="string">'-'</span>) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(c == <span class="string">'*'</span> || c == <span class="string">'/'</span>) <span class="keyword">return</span> <span class="number">2</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; inToPost(<span class="keyword">const</span> <span class="built_in">string</span>&amp; expr) &#123;</div><div class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt; opr;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; ret;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; expr.size(); ++i) &#123;</div><div class="line">        <span class="keyword">char</span> c = expr[i];</div><div class="line">        <span class="keyword">if</span>(c == <span class="string">'('</span>) opr.push(c);</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(c == <span class="string">')'</span>) &#123;</div><div class="line">            <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</div><div class="line">                <span class="keyword">char</span> top = opr.top(); opr.pop();</div><div class="line">                <span class="keyword">if</span>(top == <span class="string">'('</span>) <span class="keyword">break</span>;</div><div class="line">                ret.push_back(<span class="built_in">string</span>(<span class="number">1</span>, top));</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">isdigit</span>(c)) &#123;</div><div class="line">            <span class="built_in">string</span> digit;</div><div class="line">            <span class="keyword">for</span>(; i &lt; expr.size() &amp;&amp; <span class="built_in">isdigit</span>(expr[i]); ++i) digit += expr[i];</div><div class="line">            ret.push_back(digit);</div><div class="line">            --i;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">int</span> curP = getPriority(c);</div><div class="line">            <span class="keyword">for</span>(; opr.size() &amp;&amp; getPriority(opr.top()) &gt;= curP; opr.pop())</div><div class="line">                ret.push_back(<span class="built_in">string</span>(<span class="number">1</span>, opr.top()));</div><div class="line">            opr.push(c);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(; opr.size(); opr.pop()) ret.push_back(<span class="built_in">string</span>(<span class="number">1</span>, opr.top()));</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">double</span> <span class="title">calc</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; post)</span> </span>&#123;</div><div class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">double</span>&gt; opd;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span>&amp; s : post) &#123;</div><div class="line">        <span class="keyword">if</span>(<span class="built_in">isdigit</span>(s[<span class="number">0</span>])) opd.push(stod(s));</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            assert(opd.size());</div><div class="line">            <span class="keyword">double</span> y = opd.top(); opd.pop();</div><div class="line">            assert(opd.size());</div><div class="line">            <span class="keyword">double</span> x = opd.top(); opd.pop();</div><div class="line">            <span class="keyword">if</span>(s[<span class="number">0</span>] == <span class="string">'+'</span>) opd.push(x + y);</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s[<span class="number">0</span>] == <span class="string">'-'</span>) opd.push(x - y);</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s[<span class="number">0</span>] == <span class="string">'*'</span>) opd.push(x * y);</div><div class="line">            <span class="keyword">else</span> opd.push(x / y);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> opd.top();</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> dep, <span class="keyword">bool</span> lftBracketed, <span class="built_in">string</span> s)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(dep == s.size()) &#123;</div><div class="line">        <span class="keyword">if</span>(lftBracketed) s += <span class="string">')'</span>;</div><div class="line"><span class="comment">//        cout &lt;&lt; s &lt;&lt; endl;</span></div><div class="line">        <span class="keyword">if</span>(<span class="built_in">abs</span>(calc(inToPost(s)) - <span class="number">24</span>) &lt; <span class="number">1e-5</span>) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(<span class="built_in">isdigit</span>(s[dep])) &#123;</div><div class="line">        <span class="keyword">if</span>(dep &gt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</div><div class="line">                <span class="built_in">string</span> ns = s;</div><div class="line">                ns.insert(dep, <span class="number">1</span>, op[i]);</div><div class="line">                <span class="keyword">if</span>(check(dep + <span class="number">2</span>, lftBracketed, ns)) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">                <span class="keyword">if</span>(lftBracketed) &#123;</div><div class="line">                    ns.insert(dep + <span class="number">2</span>, <span class="number">1</span>, <span class="string">')'</span>);</div><div class="line">                    <span class="keyword">if</span>(check(dep + <span class="number">3</span>, <span class="number">0</span>, ns)) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    ns.insert(dep + <span class="number">1</span>, <span class="number">1</span>, <span class="string">'('</span>);</div><div class="line">                    <span class="keyword">if</span>(check(dep + <span class="number">3</span>, <span class="number">1</span>, ns)) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(check(dep + <span class="number">1</span>, lftBracketed, s)) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(check(dep + <span class="number">1</span>, lftBracketed, s)) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">twentyFour</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c, <span class="keyword">int</span> d)</span> </span>&#123;</div><div class="line">    <span class="keyword">auto</span> toChar = [](<span class="keyword">int</span> x) &#123;<span class="keyword">return</span> <span class="keyword">char</span>(<span class="string">'0'</span> + x);&#125;;</div><div class="line">    <span class="built_in">string</span> v = <span class="built_in">string</span>(<span class="string">""</span>) + toChar(a) + toChar(b) + toChar(c) + toChar(d);</div><div class="line">    sort(v.begin(), v.end());</div><div class="line"></div><div class="line">    <span class="keyword">bool</span> ok = <span class="literal">false</span>;</div><div class="line">    <span class="keyword">do</span> &#123;</div><div class="line">        ok |= check(<span class="number">0</span>, <span class="number">0</span>, v);</div><div class="line">    &#125; <span class="keyword">while</span>(!ok &amp;&amp; next_permutation(v.begin(), v.end()));</div><div class="line">    <span class="keyword">return</span> ok;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="built_in">string</span> test = <span class="string">"5*5-5/5"</span>;</div><div class="line">    <span class="comment">//cout &lt;&lt; calc(test) &lt;&lt; endl;</span></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; (calc(inToPost(test))) &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; twentyFour(<span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>) &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>Interviewer’s Code<br>没仔细读这个代码啊，改天研究一下正确性，写一个bugfree的24点感觉不容易啊。。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> itertools</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">isEqual</span><span class="params">(v0, v1)</span>:</span></div><div class="line">    <span class="keyword">return</span> abs(v0 - v1) &lt; <span class="number">1e-6</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">expresssion</span><span class="params">(code, v0, v1)</span>:</span></div><div class="line">    <span class="keyword">if</span> code == <span class="number">0</span>:</div><div class="line">        <span class="keyword">return</span> v0 + v1</div><div class="line">    <span class="keyword">elif</span> code == <span class="number">1</span>:</div><div class="line">        <span class="keyword">return</span> v0 - v1</div><div class="line">    <span class="keyword">elif</span> code == <span class="number">2</span>:</div><div class="line">        <span class="keyword">return</span> v1 - v0</div><div class="line">    <span class="keyword">elif</span> code == <span class="number">3</span>:</div><div class="line">        <span class="keyword">return</span> v0 * v1</div><div class="line">    <span class="keyword">elif</span> code == <span class="number">4</span>:</div><div class="line">        <span class="keyword">if</span> isEqual(v1, <span class="number">0</span>):</div><div class="line">            <span class="keyword">return</span> float(<span class="string">'NaN'</span>)</div><div class="line">        <span class="keyword">return</span> float(v0)/v1</div><div class="line">    <span class="keyword">elif</span> code == <span class="number">5</span>:</div><div class="line">        <span class="keyword">if</span> isEqual(v0, <span class="number">0</span>):</div><div class="line">            <span class="keyword">return</span> float(<span class="string">'NaN'</span>)</div><div class="line">        <span class="keyword">return</span> float(v1)/v0</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">printExpr</span><span class="params">(code, v0, v1)</span>:</span></div><div class="line">    <span class="keyword">if</span> code == <span class="number">0</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">'%s+%s'</span> %(v0, v1)</div><div class="line">    <span class="keyword">if</span> code == <span class="number">1</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">'%s-%s'</span> %(v0, v1)</div><div class="line">    <span class="keyword">if</span> code == <span class="number">2</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">'%s-%s'</span> % (v1, v0)</div><div class="line">    <span class="keyword">if</span> code == <span class="number">3</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">'%s*%s'</span> % (v0, v1)</div><div class="line">    <span class="keyword">if</span> code == <span class="number">4</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">'%s/%s'</span> % (v0, v1)</div><div class="line">    <span class="keyword">if</span> code == <span class="number">5</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">'%s/%s'</span> %(v1, v0)</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(a, v)</span>:</span></div><div class="line">    <span class="keyword">if</span> len(a) == <span class="number">1</span>:</div><div class="line">        <span class="keyword">return</span> isEqual(a[<span class="number">0</span>], v)</div><div class="line">    <span class="keyword">elif</span> len(a) == <span class="number">2</span>:</div><div class="line">        <span class="keyword">for</span> code <span class="keyword">in</span> range(<span class="number">6</span>):</div><div class="line">            <span class="keyword">if</span> isEqual(expresssion(code, a[<span class="number">0</span>], a[<span class="number">1</span>]), v):</div><div class="line">                printExpr(code, a[<span class="number">0</span>], a[<span class="number">1</span>])</div><div class="line">                <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">    <span class="keyword">elif</span> len(a) == <span class="number">3</span>:</div><div class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> itertools.permutations(a):</div><div class="line">            <span class="keyword">for</span> code <span class="keyword">in</span> range(<span class="number">6</span>):</div><div class="line">                <span class="keyword">if</span> search([expresssion(code, b[<span class="number">0</span>], b[<span class="number">1</span>]), b[<span class="number">2</span>]], v):</div><div class="line">                    printExpr(code, b[<span class="number">0</span>], b[<span class="number">1</span>])</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">    <span class="keyword">elif</span> len(a) == <span class="number">4</span>:</div><div class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> itertools.permutations(a):</div><div class="line">            <span class="keyword">for</span> code <span class="keyword">in</span> range(<span class="number">6</span>):</div><div class="line">                <span class="keyword">if</span> search([expresssion(code, b[<span class="number">0</span>], b[<span class="number">1</span>]), b[<span class="number">2</span>], b[<span class="number">3</span>]], v):</div><div class="line">                    printExpr(code, b[<span class="number">0</span>], b[<span class="number">1</span>])</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">    <span class="keyword">elif</span> len(a) == <span class="number">4</span>:</div><div class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> itertools.permutations(a):</div><div class="line">            <span class="keyword">for</span> code <span class="keyword">in</span> range(<span class="number">6</span>):</div><div class="line">                <span class="keyword">if</span> search([expresssion(code, b[<span class="number">0</span>], b[<span class="number">1</span>]), b[<span class="number">2</span>], b[<span class="number">3</span>]], v):</div><div class="line">                    printExpr(code, b[<span class="number">0</span>], b[<span class="number">1</span>])</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"><span class="keyword">print</span> search([<span class="number">3</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">8</span>], <span class="number">24</span>)</div></pre></td></tr></table></figure><h3 id="然后就又没然后了啊"><a href="#然后就又没然后了啊" class="headerlink" title="然后就又没然后了啊"></a>然后就又没然后了啊</h3><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>好好学习辣！然后要自信！失败了并不会失去什么。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;毕设交了一波初稿，总算回来填坑了。回头想想，不得不说头条面试反映了我的心境变化。&lt;/p&gt;
    
    </summary>
    
      <category term="Doing" scheme="http://TaoSama.github.io/categories/Doing/"/>
    
      <category term="Interview" scheme="http://TaoSama.github.io/categories/Doing/Interview/"/>
    
    
  </entry>
  
  <entry>
    <title>WAPS Interview</title>
    <link href="http://TaoSama.github.io/2017/04/28/WAPS-Interview/"/>
    <id>http://TaoSama.github.io/2017/04/28/WAPS-Interview/</id>
    <published>2017-04-28T09:05:10.000Z</published>
    <updated>2017-09-19T14:48:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>3.31 rejected..<br>Since the campus recruitment in this year is over, a little summary here..</p><a id="more"></a><h3 id="Online-Coding"><a href="#Online-Coding" class="headerlink" title="Online Coding"></a>Online Coding</h3><h4 id=""><a href="#" class="headerlink" title="???"></a>???</h4><p>I forgot this one and no record, really easy though.</p><h4 id="Verify-Preorder-Serialization-of-a-Binary-Tree"><a href="#Verify-Preorder-Serialization-of-a-Binary-Tree" class="headerlink" title="Verify Preorder Serialization of a Binary Tree"></a>Verify Preorder Serialization of a Binary Tree</h4><p>One way to serialize a binary tree is to use pre-order traversal.<br>When we encounter a non-null node, we record the node’s value.<br>If it is a null node, we record using a sentinel value such as #.</p><ul><li><p>Examples<br>  • “9,3,4,#,#,1,#,#,2,#,6,#,#” → true<br>  • “1,#” → false<br>  • “9,#,#,1” → false</p></li><li><p>Solution<br>Just simply go pre-order traversal and check whether each node has two sons…<br>Careful about some corner cases..</p></li><li><p>Code<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-4-28/55313160-file_1493372200147_2948.png" alt=""></p></li></ul><h3 id="Onsite-Interview"><a href="#Onsite-Interview" class="headerlink" title="Onsite Interview"></a>Onsite Interview</h3><p>4 easy problems… I gotta have a solution only with a glance.</p><p>I only recall 2 of them.</p><h4 id="Anagram-Matching"><a href="#Anagram-Matching" class="headerlink" title="Anagram Matching"></a>Anagram Matching</h4><p>anagram: a word formed by rearranging the letters of another, such as cinema, formed from iceman<br>try to figgure out the number of occurrences of all the anagrams of $T$ in $S$, lowercase alphabets</p><ul><li>Solution<br>use the number of occurrences of each alphabet to hash all the anagrams of $T$<br>total time complexity is $O(\sum |S|),where\sum = 26$</li></ul><h4 id="Maximum-Weighted-Independent-Set-of-a-tree"><a href="#Maximum-Weighted-Independent-Set-of-a-tree" class="headerlink" title="Maximum Weighted Independent Set of a tree"></a>Maximum Weighted Independent Set of a tree</h4><p>choose some nodes that each pair of them have no edge.<br>try to maximize the total weight of the chosen nodes</p><ul><li>Solution<br>simple tree dp. $f[u][0/1]:=$ the maximum weight of the independent set that the subtree rooted at $u$, and choosing $u$ or not<br>and the transition is simple:<br>choose $u$, all of its sons mustn’t be choosed<br>not choose $u$, choosing or not choosing its sons is OK, choose the maximum one.<br>$ans=\max {f[root][0], f[root][1]}$<br>total time complexity is $O(N)$</li></ul><h4 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h4><p>Two interviewers are both very nice and patient. Good Expericence.</p><h4 id="VP-Interview"><a href="#VP-Interview" class="headerlink" title="VP Interview"></a>VP Interview</h4><p>Fvcking stupid that I talked about FP programming…<br>I’m not familiar with that..<br>I think the Japanese interviewer was a little sleepy, so absolutely my interview is a shit.. even he “woke up” when heard FP..<br>And it seemed that the Chinese one is weak.. some easy cpp questions..</p><p>Bad Expericence！<br>A Lesson：no more talking about the things without knowing a shit..</p><h3 id="Something-more"><a href="#Something-more" class="headerlink" title="Something more"></a>Something more</h3><p>No chance to attempt the indeed interview is a pity..<br>it would be very nice to have a free trip to Japan..</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;3.31 rejected..&lt;br&gt;Since the campus recruitment in this year is over, a little summary here..&lt;/p&gt;
    
    </summary>
    
      <category term="Doing" scheme="http://TaoSama.github.io/categories/Doing/"/>
    
      <category term="Interview" scheme="http://TaoSama.github.io/categories/Doing/Interview/"/>
    
    
  </entry>
  
  <entry>
    <title>So Sad</title>
    <link href="http://TaoSama.github.io/2017/04/24/So-Sad/"/>
    <id>http://TaoSama.github.io/2017/04/24/So-Sad/</id>
    <published>2017-04-23T19:17:10.000Z</published>
    <updated>2017-09-19T14:48:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>Sooooo Sad! Nothing changes, am I wrong?<br>Defintely not, calm down for some time..</p><a id="more"></a><p>Well, many things to do…<br>Which one get the most priority? Am I clear?</p><p>Am I really prepared? I’m afraid that something may follow the process of history..</p><p>Try to be more precise on some certain thing.</p><p>Any time, calm down.<br>The desire can lead you to the paradise and also the hell…</p><p>Think about myself.<br>A Little afraid to failure… That’s not what I want.</p><p>I wanna get my straightness and bravery back!</p><p>Well, all things will be OK.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Sooooo Sad! Nothing changes, am I wrong?&lt;br&gt;Defintely not, calm down for some time..&lt;/p&gt;
    
    </summary>
    
      <category term="Doing" scheme="http://TaoSama.github.io/categories/Doing/"/>
    
      <category term="Life" scheme="http://TaoSama.github.io/categories/Doing/Life/"/>
    
    
  </entry>
  
  <entry>
    <title>Codeforces Round 408 (Div. 2)</title>
    <link href="http://TaoSama.github.io/2017/04/12/Codeforces%20Round%20408%20(Div.%202)/"/>
    <id>http://TaoSama.github.io/2017/04/12/Codeforces Round 408 (Div. 2)/</id>
    <published>2017-04-11T20:34:10.000Z</published>
    <updated>2017-09-19T14:48:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>$C题直接读错题，被教育到死，DE其实好做，没仔细想就跑了。。$</p><a id="more"></a><h3 id="C-Bank-Hacking"><a href="#C-Bank-Hacking" class="headerlink" title="C. Bank Hacking"></a>C. Bank Hacking</h3><p>题意：<br>$N\le 10^5个点的树，点权，初始每个点黑色，现在要涂白$<br>$你的力量\ge 点权可以涂白，开始任选一点涂$<br>$涂白一个点导致和它之间相连的黑点点权+1，通过一个黑点相连的点权也+1$<br>$之后涂白一个点，必须保证它和一个白点相连$<br>$问最少需要多少力量怎么把所有点涂白$</p><p>分析：<br>$眼瞎没看到通过一个黑点相连，然后又没看到涂白的点必须和白点相连$<br>$这2个这么强的条件，你玩一下发现就是一圈一圈涂的，答案最多是maxA_i+2$<br>$然后你就枚举起点，相连的+1，其他的+2就可以了$<br>$map、multiset都怼不过去，按rank排序上BIT吧$<br>$其实维护一下maxA_i和maxA_i-1的个数就可以了，都没有说明答案maxA_i，不然有谁就谁+2$<br>$这里给出O(nlogn)的代码$</p><p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2017-04-11</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cerr &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cerr &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, a[N];</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[N];</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BIT</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> n, b[N];</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> _n)</span> </span>&#123;</div><div class="line">        n = _n;</div><div class="line">        <span class="built_in">memset</span>(b, <span class="number">0</span>, <span class="keyword">sizeof</span> b);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> v)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span>(; i &lt;= n; i += i &amp; -i) b[i] += v;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(; i; i -= i &amp; -i) ret += b[i];</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">kth</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">18</span>; ~i; --i) &#123;</div><div class="line">            <span class="keyword">int</span> x = <span class="number">1</span> &lt;&lt; i;</div><div class="line">            <span class="keyword">if</span>(ret + x &lt;= n &amp;&amp; b[ret + x] &lt; k) &#123;</div><div class="line">                k -= b[ret + x];</div><div class="line">                ret += x;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ret + <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">&#125; bit;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) == <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) G[i].clear();</div><div class="line"></div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; xs;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a + i);</div><div class="line">            xs.push_back(a[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</div><div class="line">            <span class="keyword">int</span> u, v; <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</div><div class="line">            G[u].push_back(v);</div><div class="line">            G[v].push_back(u);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        sort(xs.begin(), xs.end());</div><div class="line">        xs.resize(unique(xs.begin(), xs.end()) - xs.begin());</div><div class="line">        <span class="keyword">auto</span> getRank = [&amp;](<span class="keyword">int</span> x) &#123;</div><div class="line">            <span class="keyword">return</span> lower_bound(xs.begin(), xs.end(), x) - xs.begin() + <span class="number">1</span>;</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> ans = INF;</div><div class="line">        bit.init(xs.size());</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) bit.add(getRank(a[i]), <span class="number">1</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">            <span class="keyword">int</span> cur = a[i];</div><div class="line">            bit.add(getRank(a[i]), <span class="number">-1</span>);</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> v : G[i]) &#123;</div><div class="line">                bit.add(getRank(a[v]), <span class="number">-1</span>);</div><div class="line">                cur = max(cur, a[v] + <span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">int</span> k = bit.sum(xs.size());</div><div class="line">            <span class="keyword">if</span>(k) &#123;</div><div class="line">                <span class="keyword">int</span> idx = bit.kth(k);</div><div class="line">                cur = max(cur, xs[idx - <span class="number">1</span>] + <span class="number">2</span>);</div><div class="line">            &#125;</div><div class="line">            ans = min(ans, cur);</div><div class="line"></div><div class="line">            bit.add(getRank(a[i]), <span class="number">1</span>);</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> v : G[i]) bit.add(getRank(a[v]), <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="D-Police-Stations"><a href="#D-Police-Stations" class="headerlink" title="D. Police Stations"></a>D. Police Stations</h3><p>题意：<br>$N\le 10^5的树，1\le K\le 10^5个标记点，给定距离0\le D &lt; N$<br>$问最多删去几条边使得，每个点到标记点的距离还能不超过D$<br>$保证有解$</p><p>分析:<br>$保证有解，所以其实就相当于每个标记点所在的连通块与其他的连接对半切$<br>$找到这个对半切的边就好了，答案一定是标记点数-1$<br>$直接从标记点开始bfs就好了，如果碰到访问过的点，切掉就ok，一定是对半切的$<br>$毕竟bfs是按照level来的，这样实现非常帅气啊$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2017-04-11</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cerr &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cerr &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m, d;</div><div class="line"><span class="keyword">bool</span> cut[N], vis[N];</div><div class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; G[N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;m, &amp;d) == <span class="number">3</span>) &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; q; q.reserve(n);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</div><div class="line">            <span class="keyword">int</span> x; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line">            q.push_back(&#123;x, <span class="number">0</span>&#125;);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) G[i].clear();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</div><div class="line">            <span class="keyword">int</span> u, v; <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</div><div class="line">            G[u].push_back(&#123;v, i&#125;);</div><div class="line">            G[v].push_back(&#123;u, i&#125;);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span> vis);</div><div class="line">        <span class="built_in">memset</span>(cut, <span class="number">0</span>, <span class="keyword">sizeof</span> cut);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; q.size(); ++i) &#123;</div><div class="line">            <span class="keyword">int</span> u, fa; tie(u, fa) = q[i];</div><div class="line">            <span class="keyword">if</span>(vis[u]) <span class="keyword">continue</span>;</div><div class="line">            vis[u] = <span class="literal">true</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span>&amp; e : G[u]) &#123;</div><div class="line">                <span class="keyword">int</span> v, id; tie(v, id) = e;</div><div class="line">                <span class="keyword">if</span>(v == fa) <span class="keyword">continue</span>;</div><div class="line">                <span class="keyword">if</span>(vis[v]) &#123;</div><div class="line">                    cut[id] = <span class="literal">true</span>;</div><div class="line">                    <span class="keyword">continue</span>;</div><div class="line">                &#125;</div><div class="line">                q.push_back(&#123;v, u&#125;);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) <span class="keyword">if</span>(cut[i]) ans.push_back(i);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans.size());</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ans.size(); ++i)</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d%c"</span>, ans[i], <span class="string">" \n"</span>[i + <span class="number">1</span> == ans.size()]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="E-Exam-Cheating"><a href="#E-Exam-Cheating" class="headerlink" title="E. Exam Cheating"></a>E. Exam Cheating</h3><p>题意：<br>$N\le 10^3行，有2个人，各会一些其中一些行，主人公看P\le 10^3次$<br>$每次选择一个人看连续K\le 50行，问主人公最多能会多少行$</p><p>分析:<br>$首先有一个暴力的dp，f[i][j][a][b]:=1\sim i行，看了j次$<br>$上一次看使得第一个人可以免费看a行，第二个人b行的最多会的行数$<br>$转移就枚举不看，看第一个人，看第二个人，都看$<br>$复杂度是O(npk^2)，显然会T$<br>$注意连续这个条件，2个人加起来最多看2\times \lceil {n\over k}\rceil次$<br>$所以复杂度变成了O(n\times 2\times \lceil {n\over k}\rceil k^2)=O(n^2k)$<br>$cf跑得很快就可以过了$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2017-04-11</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cerr &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cerr &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m, k;</div><div class="line"><span class="keyword">int</span> f[<span class="number">2</span>][<span class="number">1005</span>][<span class="number">55</span>][<span class="number">55</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;m, &amp;k) == <span class="number">3</span>) &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; q(n + <span class="number">1</span>, <span class="number">1</span>);</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a(n + <span class="number">1</span>, <span class="number">0</span>), b(n + <span class="number">1</span>, <span class="number">0</span>);</div><div class="line">        <span class="keyword">int</span> aCnt; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;aCnt);</div><div class="line">        <span class="keyword">while</span>(aCnt--) &#123;</div><div class="line">            <span class="keyword">int</span> x; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line">            a[x] = <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> bCnt; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;bCnt);</div><div class="line">        <span class="keyword">while</span>(bCnt--) &#123;</div><div class="line">            <span class="keyword">int</span> x; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line">            b[x] = <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> p = <span class="number">0</span>; <span class="built_in">memset</span>(f[p], <span class="number">0xc0</span>, <span class="keyword">sizeof</span> f[p]);</div><div class="line">        f[p][<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">        <span class="keyword">auto</span> getMax = [](<span class="keyword">int</span>&amp; x, <span class="keyword">int</span> y) &#123;<span class="keyword">if</span>(x &lt; y) x = y;&#125;;</div><div class="line"></div><div class="line">        m = min(m, <span class="number">2</span> * (n + k - <span class="number">1</span>) / k);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">            <span class="built_in">memset</span>(f[!p], <span class="number">0xc0</span>, <span class="keyword">sizeof</span> f[!p]);</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= m; ++j) &#123;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>; x &lt;= k; ++x) &#123;</div><div class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> y = <span class="number">0</span>; y &lt;= k; ++y) &#123;</div><div class="line">                        <span class="keyword">int</span> nj, nx, ny, val;</div><div class="line">                        nj = j, nx = max(<span class="number">0</span>, x - <span class="number">1</span>), ny = max(<span class="number">0</span>, y - <span class="number">1</span>), val = (nx &amp;&amp; a[i]) || (ny &amp;&amp; b[i]);</div><div class="line">                        getMax(f[!p][nj][nx][ny], f[p][j][x][y] + val);</div><div class="line">                        nj = j + <span class="number">1</span>, nx = k, ny = max(<span class="number">0</span>, y - <span class="number">1</span>), val = (nx &amp;&amp; a[i]) || (ny &amp;&amp; b[i]);</div><div class="line">                        getMax(f[!p][nj][nx][ny], f[p][j][x][y] + val);</div><div class="line">                        nj = j + <span class="number">1</span>, nx = max(<span class="number">0</span>, x - <span class="number">1</span>), ny = k, val = (nx &amp;&amp; a[i]) || (ny &amp;&amp; b[i]);</div><div class="line">                        getMax(f[!p][nj][nx][ny], f[p][j][x][y] + val);</div><div class="line">                        nj = j + <span class="number">2</span>, nx = k, ny = k, val = (nx &amp;&amp; a[i]) || (ny &amp;&amp; b[i]);</div><div class="line">                        getMax(f[!p][nj][nx][ny], f[p][j][x][y] + val);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            p = !p;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= m; ++j) &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>; x &lt;= k; ++x) &#123;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> y = <span class="number">0</span>; y &lt;= k; ++y) &#123;</div><div class="line">                    getMax(ans, f[p][j][x][y]);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;$C题直接读错题，被教育到死，DE其实好做，没仔细想就跑了。。$&lt;/p&gt;
    
    </summary>
    
      <category term="套题" scheme="http://TaoSama.github.io/categories/%E5%A5%97%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>Codeforces Round 358 (Div. 2) E. Alyona and Triangles</title>
    <link href="http://TaoSama.github.io/2017/04/12/Codeforces%20Round%20358%20(Div.%202)%20E.%20Alyona%20and%20Triangles/"/>
    <id>http://TaoSama.github.io/2017/04/12/Codeforces Round 358 (Div. 2) E. Alyona and Triangles/</id>
    <published>2017-04-11T18:34:10.000Z</published>
    <updated>2017-09-19T14:48:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>题意：<br>$N\le 5000个点，保证任意形成的三角形的面积\le S\le 10^{18}$<br>$现在构成出一个三角形面积不超过4S，使得包含这个N个点$</p><a id="more"></a><p>分析：<br>$求个凸包，然后n^2枚举2个点，two\ pointers旋转卡壳搞出第三个点$<br>$求出最大三角形，之后把每条边作为对角线搞出大三角形就好了$<br>$即原来三角形的每个点是新三角形每条边的中点$<br>$证明方式就反证一下，如果有点在大三角形外$<br>$那么他作为新的三角形的顶点，拥有更大的高，面积更大，矛盾$<br>$所以原来的构造方法正确$<br>$时间复杂度O(n^2)$<br><img src="http://7xru22.com1.z0.glb.clouddn.com/17-4-12/82888166-file_1491935866495_b4d6.png" alt=""></p><p>题外话：<br>$我觉得点积叉积还是写函数比较好，不重载运算符比较好$<br>$避免更多的括号，省得出事，而且好看，算是更新了一下板子$</p><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2017-04-10</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cerr &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cerr &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> Type;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> &#123;</span></div><div class="line">    Type x, y;</div><div class="line">    Point() &#123;&#125;</div><div class="line">    Point(Type x, Type y) : x(x), y(y) &#123;&#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">()</span> </span>&#123;<span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>, &amp;x, &amp;y);&#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">()</span> </span>&#123;<span class="built_in">printf</span>(<span class="string">"%lld %lld\n"</span>, x, y);&#125;</div><div class="line">    Point <span class="keyword">operator</span>+(<span class="keyword">const</span> Point&amp; p) <span class="keyword">const</span> &#123;</div><div class="line">        <span class="keyword">return</span> Point(x + p.x, y + p.y);</div><div class="line">    &#125;</div><div class="line">    Point <span class="keyword">operator</span>-(<span class="keyword">const</span> Point&amp; p) <span class="keyword">const</span> &#123;</div><div class="line">        <span class="keyword">return</span> Point(x - p.x, y - p.y);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Point&amp; p) <span class="keyword">const</span> &#123;</div><div class="line">        <span class="keyword">return</span> x != p.x ? x &lt; p.x : y &lt; p.y;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function">Type <span class="title">dot</span><span class="params">(<span class="keyword">const</span> Point&amp; A, <span class="keyword">const</span> Point&amp; B)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> A.x * B.x + A.y * B.y;</div><div class="line">&#125;</div><div class="line"><span class="function">Type <span class="title">det</span><span class="params">(<span class="keyword">const</span> Point&amp; A, <span class="keyword">const</span> Point&amp; B)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> A.x * B.y - A.y * B.x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//输入不能有重点，函数执行完后输入顺序被破坏</span></div><div class="line">Point ps[N], ch[N];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">convexHull</span><span class="params">(Point* p, <span class="keyword">int</span> n, Point* ch)</span> </span>&#123;</div><div class="line">    sort(p, p + n);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> m = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</div><div class="line">        <span class="keyword">while</span>(m &gt; <span class="number">1</span> &amp;&amp; det(ch[m - <span class="number">1</span>] - ch[m - <span class="number">2</span>], p[i] - ch[m - <span class="number">2</span>]) &lt;= <span class="number">0</span>) --m;</div><div class="line">        ch[m++] = p[i];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = n - <span class="number">2</span>, t = m; ~i; --i) &#123;</div><div class="line">        <span class="keyword">while</span>(m &gt; t &amp;&amp; det(ch[m - <span class="number">1</span>] - ch[m - <span class="number">2</span>], p[i] - ch[m - <span class="number">2</span>]) &lt;= <span class="number">0</span>) --m;</div><div class="line">        ch[m++] = p[i];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(n &gt; <span class="number">1</span>) --m;</div><div class="line">    <span class="keyword">return</span> m;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; rotatingCalipers(Point* ch, <span class="keyword">int</span> n) &#123;</div><div class="line">    <span class="keyword">if</span>(n &lt; <span class="number">3</span>) <span class="keyword">return</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;();</div><div class="line"></div><div class="line">    Type ans = <span class="number">0</span>;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ret(<span class="number">3</span>);</div><div class="line"></div><div class="line">    ch[n] = ch[<span class="number">0</span>];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>, k = j; j &lt; n; ++j) &#123;</div><div class="line">            <span class="keyword">while</span>(det(ch[j] - ch[i], ch[k + <span class="number">1</span>] - ch[i])</div><div class="line">                    &gt; det(ch[j] - ch[i], ch[k] - ch[i]))</div><div class="line">                k = (k + <span class="number">1</span>) % n;</div><div class="line">            <span class="keyword">if</span>(det(ch[j] - ch[i], ch[k] - ch[i]) &gt; ans) &#123;</div><div class="line">                ans = det(ch[j] - ch[i], ch[k] - ch[i]);</div><div class="line">                ret = &#123;i, j, k&#125;;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> n; <span class="keyword">long</span> <span class="keyword">long</span> s;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%lld"</span>, &amp;n, &amp;s);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) ps[i].read();</div><div class="line">    <span class="keyword">int</span> m = convexHull(ps, n, ch);</div><div class="line"></div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; triangle = rotatingCalipers(ch, m);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</div><div class="line">        Point p = ch[triangle[i]] + ch[triangle[(i + <span class="number">1</span>) % <span class="number">3</span>]] - ch[triangle[(i + <span class="number">2</span>) % <span class="number">3</span>]];</div><div class="line">        p.write();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题意：&lt;br&gt;$N\le 5000个点，保证任意形成的三角形的面积\le S\le 10^{18}$&lt;br&gt;$现在构成出一个三角形面积不超过4S，使得包含这个N个点$&lt;/p&gt;
    
    </summary>
    
      <category term="计算几何" scheme="http://TaoSama.github.io/categories/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/"/>
    
      <category term="旋转卡壳" scheme="http://TaoSama.github.io/categories/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/%E6%97%8B%E8%BD%AC%E5%8D%A1%E5%A3%B3/"/>
    
    
  </entry>
  
  <entry>
    <title>BestCoder Round 93</title>
    <link href="http://TaoSama.github.io/2017/04/12/BestCoder%20Round%2093/"/>
    <id>http://TaoSama.github.io/2017/04/12/BestCoder Round 93/</id>
    <published>2017-04-11T16:34:10.000Z</published>
    <updated>2017-09-19T14:48:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>补题学套路。。</p><a id="more"></a><h3 id="1001-MG-loves-gold"><a href="#1001-MG-loves-gold" class="headerlink" title="1001 MG loves gold"></a>1001 MG loves gold</h3><p>题意：<br>$N\le 10^5个数的序列，拆成尽快多的部分，使得每个部分不包含重复数字$</p><p>分析:<br>$直接贪心就好了，每次取尽可能长的不包含重复数字的，set判重即可$</p><p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2017-04-01</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cerr &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cerr &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, a[N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">while</span>(t--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a + i);</div><div class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">        <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; mp;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>, j; i &lt;= n; i = j) &#123;</div><div class="line">            ++ans;</div><div class="line">            mp.clear();</div><div class="line">            <span class="keyword">for</span>(j = i; j &lt;= n &amp;&amp; !mp.count(a[j]); ++j) mp.insert(a[j]);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="1002-MG-loves-apple"><a href="#1002-MG-loves-apple" class="headerlink" title="1002 MG loves apple"></a>1002 MG loves apple</h3><p>题意：<br>$给定1个N\le 10^5位的不含前导零的数字，现删去恰好0\le K&lt;N个数字$<br>$使得剩下的数字，顺序不变，构成的合法数字，能被3整除$<br>$问是否可行$</p><p>分析：<br>$这个题跟CF\ EDU\ 18\ C的贪心做法类似$<br>$首先一个数能被3整除跟数字和sum能被3整除一致$<br>$接下来就统计一下cnt_i的个，\%3=i的数个数$<br>$首先特判数字中含0，且k=n-1的情况，CF那个题也是$</p><p>$之后就枚举非0数字，使得它作为第一位，存不存在一种合法方案使得sum\%3=0$<br>$这里要注意，这个非0数字是不能删掉的，他前面的都必须删掉，后面的就枚举一下$<br>$枚举0,1,3选取的个数，当然是\%3后的，之后判断need的数去掉这些之后能不能被3整除$<br>$然后判一判就好了，注意细节$<br>$复杂度O(3^3n)$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2017-04-01</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cerr &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cerr &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">char</span> a[N], r[N];</div><div class="line"><span class="keyword">int</span> cnt[<span class="number">3</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">go</span><span class="params">(<span class="keyword">int</span> mod, <span class="keyword">int</span> need)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> a = <span class="number">0</span>; a &lt; <span class="number">3</span>; ++a) &#123; <span class="comment">//1</span></div><div class="line">        <span class="keyword">if</span>(a &gt; cnt[<span class="number">1</span>]) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> b = <span class="number">0</span>; b &lt; <span class="number">3</span>; ++b) &#123; <span class="comment">//2</span></div><div class="line">            <span class="keyword">if</span>(b &gt; cnt[<span class="number">2</span>]) <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; <span class="number">3</span>; ++c) &#123; <span class="comment">//0</span></div><div class="line">                <span class="keyword">if</span>(c &gt; cnt[<span class="number">0</span>]) <span class="keyword">continue</span>;</div><div class="line">                <span class="keyword">if</span>((a + <span class="number">2</span> * b) % <span class="number">3</span> != mod) <span class="keyword">continue</span>;</div><div class="line">                <span class="keyword">if</span>(a + b + c &gt; need) <span class="keyword">continue</span>;</div><div class="line">                <span class="keyword">if</span>((need - a - b - c) % <span class="number">3</span> != <span class="number">0</span>) <span class="keyword">continue</span>;</div><div class="line">                <span class="keyword">int</span> t = (cnt[<span class="number">1</span>] - a) / <span class="number">3</span> + (cnt[<span class="number">2</span>] - b) / <span class="number">3</span> + (cnt[<span class="number">0</span>] - c) / <span class="number">3</span>;</div><div class="line">                <span class="keyword">if</span>(<span class="number">3</span> * t + a + b + c &gt;= need) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">while</span>(t--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%s"</span>, &amp;n, &amp;m, a + <span class="number">1</span>);</div><div class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) cnt[i] = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">            a[i] -= <span class="string">'0'</span>;</div><div class="line">            r[i] = a[i] % <span class="number">3</span>;</div><div class="line">            ++cnt[r[i]];</div><div class="line">            sum += r[i];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">bool</span> ok = <span class="literal">false</span>;</div><div class="line">        <span class="keyword">if</span>(m == n - <span class="number">1</span>)</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n &amp;&amp; !ok; ++i) ok |= a[i] == <span class="number">0</span>;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> need = m;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n &amp;&amp; !ok; ++i) &#123;</div><div class="line">            <span class="keyword">int</span> x = a[i];</div><div class="line">            <span class="keyword">if</span>(x) &#123;</div><div class="line">                --cnt[r[i]];</div><div class="line">                ok |= go(sum % <span class="number">3</span>, need);</div><div class="line">            &#125; <span class="keyword">else</span> --cnt[r[i]];</div><div class="line">            sum -= r[i];</div><div class="line">            <span class="keyword">if</span>(--need &lt; <span class="number">0</span>) <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">puts</span>(ok ? <span class="string">"yes"</span> : <span class="string">"no"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="1003-MG-loves-string"><a href="#1003-MG-loves-string" class="headerlink" title="1003 MG loves string"></a>1003 MG loves string</h3><p>题意：<br>$给定一个26个小写字母的置换A，即进行一次变换，所有字符(‘a’+i)都会变成A_i$<br>$问一个长度是N\le 10^9随机字符串，变换到自身的期望变换次数$<br>$输出期望答案乘上26^n以后模10^9+7的结果$</p><p>分析：<br>$可以发现不同的置换的环的长度不超过6个，1+2+3+4+5+6&gt;26$<br>$所以就枚举不同的置换的环的组合，至少出现一次的方案数$<br>$我们知道一个置换变回自己的次数是，每个环的长度的lcm$<br>$先统计出每个环长度的选取的字母的个数$<br>$f[sta]:=sta状态的环至少出现一次的方案数$<br>$算这个可以容斥来搞，随便选-非法的$<br>$g[sta]:=sta状态的环随便选的方案数，g[sta]=cnt[sta]^n$<br>$f[sta]=g[sta]-\displaystyle\sum_{s0\subset sta} f[s0]$<br>$之后乘上对应的lcm就可以了$<br>$复杂度为O(6^3logn)$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2017-04-02</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cerr &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cerr &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="keyword">char</span> a[<span class="number">27</span>];</div><div class="line"><span class="keyword">int</span> f[<span class="number">1</span> &lt;&lt; <span class="number">6</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">while</span>(t--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%s"</span>, &amp;n, a);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i) a[i] -= <span class="string">'a'</span>;</div><div class="line"></div><div class="line">        <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; mp;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i) &#123;</div><div class="line">            <span class="keyword">int</span> cnt = <span class="number">1</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = a[i]; j != i; j = a[j]) ++cnt;</div><div class="line">            ++mp[cnt];</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; v(mp.begin(), mp.end());</div><div class="line">        <span class="keyword">auto</span> add = [&amp;](<span class="keyword">int</span>&amp; x, <span class="keyword">int</span> y) &#123;<span class="keyword">if</span>((x += y) &gt;= MOD) x -= MOD;&#125;;</div><div class="line">        <span class="keyword">auto</span> quickPow = [&amp;](<span class="keyword">int</span> x, <span class="keyword">int</span> y) &#123;</div><div class="line">            <span class="keyword">int</span> ret = <span class="number">1</span>;</div><div class="line">            <span class="keyword">for</span>(; y; y &gt;&gt;= <span class="number">1</span>) &#123;</div><div class="line">                <span class="keyword">if</span>(y &amp; <span class="number">1</span>) ret = <span class="number">1L</span>L * ret * x % MOD;</div><div class="line">                x = <span class="number">1L</span>L * x * x % MOD;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> ret;</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> s = <span class="number">1</span>; s &lt; <span class="number">1</span> &lt;&lt; v.size(); ++s) &#123;</div><div class="line">            <span class="keyword">int</span> sum = <span class="number">0</span>, lcm = <span class="number">1</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v.size(); ++i) &#123;</div><div class="line">                <span class="keyword">if</span>(s &gt;&gt; i &amp; <span class="number">1</span>) &#123;</div><div class="line">                    lcm = lcm / __gcd(lcm, v[i].first) * v[i].first;</div><div class="line">                    sum += v[i].second;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            f[s] = quickPow(sum, n);</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> s0 = s &amp; (s - <span class="number">1</span>); s0; s0 = (s0 - <span class="number">1</span>) &amp; s) add(f[s], MOD - f[s0]);</div><div class="line">            add(ans, <span class="number">1L</span>L * f[s] * lcm % MOD);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="1004-MG-loves-set"><a href="#1004-MG-loves-set" class="headerlink" title="1004 MG loves set"></a>1004 MG loves set</h3><p>题意：<br>$如果一个集合所有元素的平方的和小于等于所有元素的和的平方，那么就称这个集合为“和谐集合”。$<br>$给定n\le 30个数，询问有多少个非空子集是“和谐集合”$</p><p>分析：<br>$现有一个集合S，则题目的条件为\displaystyle\sum<em>{x\in S} x^2\le (\displaystyle\sum</em>{x\in S} x)^2$<br>$移项则有，(\displaystyle\sum<em>{x\in S} x)^2-\displaystyle\sum</em>{x\in S} x^2\ge 0，这个就是2\displaystyle\sum<em>{x,\ y\in S,\ x&lt;y}xy\ge 0$<br>$然后看到n=30，显然的折半枚举$<br>$令va=\displaystyle\sum</em>{x\in S} x，vb=2\displaystyle\sum_{x,\ y\in S,\ x&lt;y}xy$<br>$那么上面那个式子由2个集合合并可以表示为，2\times va\times va’+vb+vb’\ge 0$<br>$把(va,\ vb)看成直线，(va’,\ vb’)看成点，那么就是求直线上方的点数，KDT优化即可$<br>$时间复杂度为O(2^{15}log2^{15})$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2017-04-03</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cerr &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cerr &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">const</span> LL LLINF = <span class="number">0x3f3f3f3f3f3f3f3f</span>LL;</div><div class="line"><span class="keyword">namespace</span> KDT &#123;</div><div class="line">    <span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1</span> &lt;&lt; <span class="number">16</span>, K = <span class="number">2</span>;</div><div class="line">    <span class="keyword">int</span> D;</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Point</span> &#123;</span></div><div class="line">        LL d[K];</div><div class="line">        <span class="keyword">inline</span> LL&amp; <span class="keyword">operator</span>[](<span class="keyword">int</span> k) &#123;<span class="keyword">return</span> d[k];&#125;</div><div class="line">        <span class="keyword">inline</span> <span class="keyword">const</span> LL&amp; <span class="keyword">operator</span>[](<span class="keyword">int</span> k) <span class="keyword">const</span> &#123;<span class="keyword">return</span> d[k];&#125;</div><div class="line">        <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Point&amp; p) <span class="keyword">const</span> &#123;</div><div class="line">            <span class="keyword">return</span> d[D] &lt; p.d[D];</div><div class="line">        &#125;</div><div class="line">    &#125; a[M];</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></div><div class="line">        Point key, maxd, mind;</div><div class="line">        Node* ch[<span class="number">2</span>];</div><div class="line">        <span class="keyword">int</span> sz;</div><div class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">up</span><span class="params">()</span> </span>&#123;</div><div class="line">            sz = ch[<span class="number">0</span>]-&gt;sz + ch[<span class="number">1</span>]-&gt;sz + <span class="number">1</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; K; ++i) &#123;</div><div class="line">                maxd[i] = max(maxd[i], ch[<span class="number">0</span>]-&gt;maxd[i]);</div><div class="line">                maxd[i] = max(maxd[i], ch[<span class="number">1</span>]-&gt;maxd[i]);</div><div class="line">                mind[i] = min(mind[i], ch[<span class="number">0</span>]-&gt;mind[i]);</div><div class="line">                mind[i] = min(mind[i], ch[<span class="number">1</span>]-&gt;mind[i]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125; pool[M], *ptr, *null, *root;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">onLine</span><span class="params">(<span class="keyword">const</span> Point&amp; p, <span class="keyword">const</span> Point&amp; q)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">2</span> * p[<span class="number">0</span>] * q[<span class="number">0</span>] + p[<span class="number">1</span>] + q[<span class="number">1</span>] &gt;= <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">h</span><span class="params">(Node* o, <span class="keyword">const</span> Point&amp; p)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line">        ret += onLine(&#123;o-&gt;mind[<span class="number">0</span>], o-&gt;mind[<span class="number">1</span>]&#125;, p);</div><div class="line">        ret += onLine(&#123;o-&gt;mind[<span class="number">0</span>], o-&gt;maxd[<span class="number">1</span>]&#125;, p);</div><div class="line">        ret += onLine(&#123;o-&gt;maxd[<span class="number">0</span>], o-&gt;mind[<span class="number">1</span>]&#125;, p);</div><div class="line">        ret += onLine(&#123;o-&gt;maxd[<span class="number">0</span>], o-&gt;maxd[<span class="number">1</span>]&#125;, p);</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">inline</span> Node* <span class="title">newNode</span><span class="params">(<span class="keyword">const</span> Point&amp; p)</span> </span>&#123;</div><div class="line">        ptr-&gt;key = p;</div><div class="line">        ptr-&gt;ch[<span class="number">0</span>] = ptr-&gt;ch[<span class="number">1</span>] = null;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; K; ++i)</div><div class="line">            ptr-&gt;maxd[i] = ptr-&gt;mind[i] = ptr-&gt;key[i];</div><div class="line">        <span class="keyword">return</span> ptr++;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">        ptr = pool;</div><div class="line">        null = ptr++;</div><div class="line">        null-&gt;sz = <span class="number">0</span>;</div><div class="line">        null-&gt;ch[<span class="number">0</span>] = null-&gt;ch[<span class="number">1</span>] = null;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; K; ++i) &#123;</div><div class="line">            null-&gt;mind[i] = LLINF;</div><div class="line">            null-&gt;maxd[i] = -LLINF;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(Node*&amp; o, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> dim)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(l &gt; r) <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">int</span> m = l + r &gt;&gt; <span class="number">1</span>;</div><div class="line">        D = dim;</div><div class="line">        nth_element(a + l, a + m, a + r + <span class="number">1</span>);</div><div class="line">        o = newNode(a[m]);</div><div class="line">        build(o-&gt;ch[<span class="number">0</span>], l, m - <span class="number">1</span>, (dim + <span class="number">1</span>) % K);</div><div class="line">        build(o-&gt;ch[<span class="number">1</span>], m + <span class="number">1</span>, r, (dim + <span class="number">1</span>) % K);</div><div class="line">        o-&gt;up();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(Node* o, <span class="keyword">const</span> Point&amp; p)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(o == null) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> have = h(o, p);</div><div class="line">        <span class="keyword">if</span>(!have) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span>(have == <span class="number">4</span>) <span class="keyword">return</span> o-&gt;sz;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> ret = onLine(o-&gt;key, p);</div><div class="line">        ret += query(o-&gt;ch[<span class="number">0</span>], p);</div><div class="line">        ret += query(o-&gt;ch[<span class="number">1</span>], p);</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//    freopen("C:\\Users\\TaoSama\\Desktop\\out.txt", "w", stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">while</span>(t--) &#123;</div><div class="line">        <span class="keyword">int</span> n; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v(n);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span>&amp; x : v) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line"></div><div class="line">        <span class="keyword">int</span> hf = (n + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> s = <span class="number">0</span>; s &lt; <span class="number">1</span> &lt;&lt; hf; ++s) &#123;</div><div class="line">            LL va = <span class="number">0</span>, vb = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; hf; ++i) &#123;</div><div class="line">                <span class="keyword">if</span>(s &gt;&gt; i &amp; <span class="number">1</span>) &#123;</div><div class="line">                    va += v[i];</div><div class="line">                    vb += <span class="number">1L</span>L * v[i] * v[i];</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            KDT::a[s + <span class="number">1</span>] = &#123;va, va* va - vb&#125;;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        KDT::init();</div><div class="line">        KDT::Node*&amp; root = KDT::root;</div><div class="line">        KDT::build(root, <span class="number">1</span>, <span class="number">1</span> &lt;&lt; hf, <span class="number">0</span>);</div><div class="line"></div><div class="line">        n &gt;&gt;= <span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> s = <span class="number">0</span>; s &lt; <span class="number">1</span> &lt;&lt; n; ++s) &#123;</div><div class="line">            LL va = <span class="number">0</span>, vb = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</div><div class="line">                <span class="keyword">if</span>(s &gt;&gt; i &amp; <span class="number">1</span>) &#123;</div><div class="line">                    va += v[hf + i];</div><div class="line">                    vb += <span class="number">1L</span>L * v[hf + i] * v[hf + i];</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            ans += KDT::query(root, &#123;va, va * va - vb&#125;);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans - <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;补题学套路。。&lt;/p&gt;
    
    </summary>
    
      <category term="套题" scheme="http://TaoSama.github.io/categories/%E5%A5%97%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>Hihocode 1496 寻找最大值（高维前缀和）</title>
    <link href="http://TaoSama.github.io/2017/04/05/Hihocode%201496%20%E5%AF%BB%E6%89%BE%E6%9C%80%E5%A4%A7%E5%80%BC%EF%BC%88%E9%AB%98%E7%BB%B4%E5%89%8D%E7%BC%80%E5%92%8C%EF%BC%89/"/>
    <id>http://TaoSama.github.io/2017/04/05/Hihocode 1496 寻找最大值（高维前缀和）/</id>
    <published>2017-04-04T18:44:10.000Z</published>
    <updated>2017-09-19T14:48:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>题意：<br>$给定一个长度为N\le 10^5的数列，1\le A<em>i\le 2^{20}$<br>$求\displaystyle\max</em>{i,\ j,\ i\neq j}{A_i\times A_j\times (A_i\&amp; A_j)}的值$</p><a id="more"></a><p>分析：<br>$这个题显然不能枚举A_i和A_j，考虑枚举A_i\&amp; A_j的值$<br>$令z=A_i\&amp;A_j，事实上条件可以不用这么严格$<br>$只要找到z的超集Z’即可，即z\supset Z’$<br>$假如存在Z’中的两个元素z’_1，z’_2分别是最大值和次大值$<br>$满足z’_1\&amp; z’_2=z，那么这个必然是z的答案$<br>$假如z’_1\&amp; z’_2&gt;z，那么令z’_1\&amp; z’_2=y$<br>$那么这个答案必然在y处更新，且答案更大，也就是说不会影响答案$<br>$所以问题就变成了如何求z的超集的最大值和次大值了$</p><p>$这是一个高位前缀和问题，即20维空间，每一维大小是2$<br>$所以把1的答案都加到0上即可，因为1是0的超集$<br>$同理子集问题也可以这么搞，不过是0加到1上，0是1的子集$<br>$具体看代码，注意循环顺序，感受一下前缀和$</p><p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2017-04-04</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cerr &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cerr &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n;</div><div class="line">pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; f[<span class="number">1</span> &lt;&lt; <span class="number">20</span>];</div><div class="line"></div><div class="line">pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; <span class="keyword">operator</span>+(pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; A, pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; B) &#123;</div><div class="line">    pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; ret = A;</div><div class="line">    <span class="keyword">if</span>(B.first &gt; ret.first) &#123;</div><div class="line">        swap(ret.first, ret.second);</div><div class="line">        ret.first = B.first;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(B.second &gt; ret.second) ret.second = B.second;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">while</span>(t--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1</span> &lt;&lt; <span class="number">20</span>; ++i) f[i] = &#123;<span class="number">0</span>, <span class="number">0</span>&#125;;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">            <span class="keyword">int</span> x; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line">            f[x] = f[x] + make_pair(x, <span class="number">0</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; ++i)</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">1</span> &lt;&lt; <span class="number">20</span>; ++j)</div><div class="line">                <span class="keyword">if</span>(j &gt;&gt; i &amp; <span class="number">1</span>) f[j ^ (<span class="number">1</span> &lt;&lt; i)] = f[j ^ (<span class="number">1</span> &lt;&lt; i)] + f[j];</div><div class="line"></div><div class="line">        <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1</span> &lt;&lt; <span class="number">20</span>; ++i)</div><div class="line">            ans = max(ans, <span class="number">1L</span>L * i * f[i].first * f[i].second);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题意：&lt;br&gt;$给定一个长度为N\le 10^5的数列，1\le A&lt;em&gt;i\le 2^{20}$&lt;br&gt;$求\displaystyle\max&lt;/em&gt;{i,\ j,\ i\neq j}{A_i\times A_j\times (A_i\&amp;amp; A_j)}的值$&lt;/p&gt;
    
    </summary>
    
      <category term="数学" scheme="http://TaoSama.github.io/categories/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="FFT/NTT/FWT" scheme="http://TaoSama.github.io/categories/%E6%95%B0%E5%AD%A6/FFT-NTT-FWT/"/>
    
    
      <category term="高维前缀和" scheme="http://TaoSama.github.io/tags/%E9%AB%98%E7%BB%B4%E5%89%8D%E7%BC%80%E5%92%8C/"/>
    
  </entry>
  
  <entry>
    <title>Hihocode 1492 Parentheses Sequence（dp）</title>
    <link href="http://TaoSama.github.io/2017/04/05/Hihocode%201492%20Parentheses%20Sequence%EF%BC%88dp%EF%BC%89/"/>
    <id>http://TaoSama.github.io/2017/04/05/Hihocode 1492 Parentheses Sequence（dp）/</id>
    <published>2017-04-04T18:33:10.000Z</published>
    <updated>2017-09-19T14:48:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>题意：<br>$给定一个长度为N\le 10^3的括号串，可以插入括号$<br>$问变成合法的括号串的最短插入次数，和方法数$</p><a id="more"></a><p>分析：<br>$首先回顾一下如何表示一个合法的括号串$<br>$令’(‘=1，’)’=-1，那么需要前缀和\ge 0，且和=0$<br>$那么显然我们有一个三方的dp$<br>$f[i][j][k]:=1\sim i，插入了j个括号，sum=k的方法数$<br>$再开个bool表示一下状态存不存在即可$<br>$这样就可以找到最少多少个，以及相应的方案数了$</p><p>$蓝儿三方是不能过的，思考一下，这其实是一个背包问题$<br>$背包的是sum，所以其实我们看成是一个图的问题，即n\times sum个节点的图$<br>$那么插入的括号的个数自然变成了最短路，方法数自然变成了最短路方案数$<br>$然后dp就变成了f[i][k]:=1\sim i，sum=k的最少插入括号数和方法数$<br>$最后减去原来的括号个数即可$<br>$这个背包化图的思路可以做一下上次CF\ 407的C：$<a href="http://codeforces.com/problemset/problem/788/C" target="_blank" rel="external">题目链接</a></p><p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2017-04-04</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cerr &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cerr &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e3</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="keyword">char</span> s[N];</div><div class="line"><span class="keyword">int</span> f[N][N], g[N][N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span>&amp; x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>((x += y) &gt;= MOD) x -= MOD;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s + <span class="number">1</span>);</div><div class="line">    n = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</div><div class="line"></div><div class="line">    <span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; q;</div><div class="line">    <span class="built_in">memset</span>(f, <span class="number">-1</span>, <span class="keyword">sizeof</span> f);</div><div class="line">    f[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>, g[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">    q.push(&#123;<span class="number">0</span>, <span class="number">0</span>&#125;);</div><div class="line">    <span class="keyword">while</span>(q.size()) &#123;</div><div class="line">        <span class="keyword">int</span> i, j; tie(i, j) = q.front(); q.pop();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">-1</span>; k &lt;= <span class="number">1</span>; k += <span class="number">2</span>) &#123;</div><div class="line">            <span class="keyword">char</span> c = k == <span class="number">1</span> ? <span class="string">'('</span> : <span class="string">')'</span>;</div><div class="line">            <span class="keyword">int</span> ni = min(n, i + (s[i + <span class="number">1</span>] == c));</div><div class="line">            <span class="keyword">int</span> nj = j + k;</div><div class="line">            <span class="keyword">if</span>(nj &gt;= <span class="number">0</span> &amp;&amp; nj &lt;= n) &#123;</div><div class="line">                <span class="keyword">if</span>(f[ni][nj] == <span class="number">-1</span>) &#123;</div><div class="line">                    f[ni][nj] = f[i][j] + <span class="number">1</span>;</div><div class="line">                    g[ni][nj] = g[i][j];</div><div class="line">                    q.push(&#123;ni, nj&#125;);</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span>(f[ni][nj] == f[i][j] + <span class="number">1</span>) &#123;</div><div class="line">                    add(g[ni][nj], g[i][j]);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, f[n][<span class="number">0</span>] - n, g[n][<span class="number">0</span>]);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题意：&lt;br&gt;$给定一个长度为N\le 10^3的括号串，可以插入括号$&lt;br&gt;$问变成合法的括号串的最短插入次数，和方法数$&lt;/p&gt;
    
    </summary>
    
      <category term="动态规划" scheme="http://TaoSama.github.io/categories/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    
  </entry>
  
  <entry>
    <title>BestCoder Round 92</title>
    <link href="http://TaoSama.github.io/2017/04/05/BestCoder%20Round%2092/"/>
    <id>http://TaoSama.github.io/2017/04/05/BestCoder Round 92/</id>
    <published>2017-04-04T17:04:10.000Z</published>
    <updated>2017-09-19T14:48:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>好久没写题解了。。感觉还是经常写点文字。题解勉强算是吧(雾</p><a id="more"></a><h3 id="1001-Skip-the-Class"><a href="#1001-Skip-the-Class" class="headerlink" title="1001 Skip the Class"></a>1001 Skip the Class</h3><p>直接对于每种课程维护最大值和次大值即可</p><h3 id="1002-Count-the-Sheep"><a href="#1002-Count-the-Sheep" class="headerlink" title="1002 Count the Sheep"></a>1002 Count the Sheep</h3><p>题意：<br>$给定N\le 10^5个男羊，M\le 10^5个女羊，K\le 10^5个朋友关系$<br>$问满足A-B、B-C、C-D是朋友关系且A、B、C、D各不相同的，A-B-C-D这样序列的方案数$</p><p>分析：<br>$直接枚举B-C边，然后统计下两边的度就好了，别忘了减去自己$</p><h3 id="1003-Girls-Love-233"><a href="#1003-Girls-Love-233" class="headerlink" title="1003 Girls Love 233"></a>1003 Girls Love 233</h3><p>题意：<br>$给定长度N\le 100的由字符’2’和’3’构成的字符串$<br>$有\lfloor{M\over 2}\rfloor次操作次数，每次可以交换2个相邻的字符$<br>$最多能使这个字符串中有多少个子串”233”呢$</p><p>分析：<br>$官方题解给了一个很妙的dp$<br>$可以发现答案其实只跟’2’有关，即’3’和’3’换是毫无意义的$<br>$于是我们可以抠出来所有’2’的位置，那么只对’2’有交换的花费$<br>$接下来考虑dp，f[i][j][k][3]:=$<br>$选取了i个’2’，j个’3’，使用了k次交换，状态是s的最多子串数$<br>$s状态显然有i\in [0,3):’2’后面有i个’3’，如果有第一次有2个’3’显然答案+1$<br>$最终ans=\displaystyle\max_{k,\ s}{ f[c2][c3][k][s]}$</p><p>代码:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2017-02-27</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cerr &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cerr &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e2</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">char</span> s[N];</div><div class="line"><span class="keyword">int</span> f[N][N][N / <span class="number">2</span>][<span class="number">3</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">getMax</span><span class="params">(<span class="keyword">int</span>&amp; x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(x &lt; y) x = y;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">while</span>(t--) &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; p(<span class="number">1</span>, <span class="number">0</span>);</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%s"</span>, &amp;n, &amp;m, s + <span class="number">1</span>);  m &gt;&gt;= <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="keyword">if</span>(s[i] == <span class="string">'2'</span>) p.push_back(i);</div><div class="line">        <span class="keyword">int</span> c2 = p.size() - <span class="number">1</span>, c3 = n - c2;</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= c2; ++i)</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= c3; ++j)</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= m; ++k)</div><div class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> z = <span class="number">0</span>; z &lt; <span class="number">3</span>; ++z)</div><div class="line">                        f[i][j][k][z] = -INF;</div><div class="line">        f[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>][<span class="number">2</span>] = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= c2; ++i) &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= c3; ++j) &#123;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= m; ++k) &#123;</div><div class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> z = <span class="number">0</span>; z &lt; <span class="number">3</span>; ++z) &#123;</div><div class="line">                        <span class="keyword">if</span>(f[i][j][k][z] &lt; <span class="number">0</span>) <span class="keyword">continue</span>;</div><div class="line">                        <span class="keyword">if</span>(i &lt; c2) &#123;</div><div class="line">                            <span class="keyword">int</span> nk = k + <span class="built_in">abs</span>(i + j + <span class="number">1</span> - p[i + <span class="number">1</span>]);</div><div class="line">                            <span class="keyword">if</span>(nk &lt;= m) getMax(f[i + <span class="number">1</span>][j][nk][<span class="number">0</span>], f[i][j][k][z]);</div><div class="line">                        &#125;</div><div class="line">                        <span class="keyword">if</span>(j &lt; c3) &#123;</div><div class="line">                            <span class="keyword">int</span> nz = z, one = <span class="number">0</span>;</div><div class="line">                            <span class="keyword">if</span>(nz != <span class="number">2</span>) &#123;</div><div class="line">                                <span class="keyword">if</span>(++nz == <span class="number">2</span>) ++one;</div><div class="line">                            &#125;</div><div class="line">                            getMax(f[i][j + <span class="number">1</span>][k][nz], f[i][j][k][z] + one);</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= m; ++k)</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> z = <span class="number">0</span>; z &lt; <span class="number">3</span>; ++z)</div><div class="line">                getMax(ans, f[c2][c3][k][z]);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="1004-Game-Arrangement"><a href="#1004-Game-Arrangement" class="headerlink" title="1004 Game Arrangement"></a>1004 Game Arrangement</h3><p>题意：<br>$给定N\le 10^4段空闲时间[L_i,\ R_i]，1\le L_i\le R_i\le 10^9$<br>$给定M\le 10^4个游戏的感兴趣时段[l_i,\ r_i]，1\le l_i\le r_i\le 10^9，并且需要持续时间1\le d_i\le 10^9$<br>$对于i类游戏只能全在它的感兴趣时段，以及某段空闲时段才可以玩$<br>$问最多能玩游戏的次数$</p><p>分析:<br>$如果数据范围不是10^9的话，显然可以按时间来dp，就不多说了$<br>$可以考虑贪心，因为物品的价值都是1，就可以贪心了$<br>$对于当前时间，对某个游戏肯定选择持续短的，就可以用堆或者set来贪心了$<br>$首先把空闲时间和游戏按照起始时间排序$<br>$考虑枚举每一段空闲时间，首先把当前能玩的游戏全部加进去堆里$<br>$再把一把都玩不了的都删了，然后取出第一个能玩的$<br>$当前这个游戏能玩多久由三个东西限制，一个是空闲时间，一个是感兴趣时间$<br>$还有下一个游戏的开始时间来限制$<br>$肯定尝试下取整个是一定可以的$<br>$然后你以为就对了？？显然不是，我还可以后延续到下一个游戏的时间$<br>$所以就考虑再玩一个，但是只是尝试，所以拆成两半，一个是现在玩一些$<br>$剩下的时间成为一个新的游戏塞进去，之后直接尝试下一个游戏就可以了$<br>$这样贪心就对了$<br>$注意一下边界的细节，时间复杂度是O(nlogn)$<br>$感谢bc大佬的代码$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2017-02-27</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cerr &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cerr &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> l, r, d;</div><div class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Node&amp; r) <span class="keyword">const</span> &#123;</div><div class="line">        <span class="keyword">return</span> d &gt; r.d;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">see</span><span class="params">()</span> </span>&#123;</div><div class="line">        pr(l); pr(r); prln(d);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">while</span>(t--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">        <span class="built_in">vector</span>&lt;Node&gt; a, b;</div><div class="line">        a.reserve(n); b.reserve(m);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">            <span class="keyword">int</span> l, r; <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;l, &amp;r);</div><div class="line">            <span class="keyword">if</span>(a.size() &amp;&amp; a.back().r + <span class="number">1</span> == l)</div><div class="line">                a.back().r = r;</div><div class="line">            <span class="keyword">else</span> a.push_back(&#123;l, r, <span class="number">0</span>&#125;);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</div><div class="line">            <span class="keyword">int</span> l, r, d; <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;l, &amp;r, &amp;d);</div><div class="line">            b.push_back(&#123;l, r, d&#125;);</div><div class="line">        &#125;</div><div class="line">        b.push_back(&#123;INF, <span class="number">-1</span>, <span class="number">-1</span>&#125;);</div><div class="line">        sort(b.begin(), b.end(), [](<span class="keyword">const</span> Node &amp; a, <span class="keyword">const</span> Node &amp; b) &#123;</div><div class="line">            <span class="keyword">return</span> a.l &lt; b.l;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">        priority_queue&lt;Node&gt; q;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; a.size(); ++i) &#123;</div><div class="line">            <span class="keyword">int</span> cur = a[i].l;</div><div class="line">            <span class="keyword">for</span>(; cur &lt;= a[i].r;) &#123;</div><div class="line">                <span class="keyword">for</span>(; b[j].l &lt;= cur; ++j) q.push(b[j]); <span class="comment">//insert</span></div><div class="line">                <span class="keyword">while</span>(q.size() &amp;&amp; q.top().r - q.top().d + <span class="number">1</span> &lt; cur) q.pop(); <span class="comment">//delete</span></div><div class="line">                <span class="keyword">if</span>(!q.size()) &#123;cur = b[j].l; <span class="keyword">continue</span>;&#125;</div><div class="line"></div><div class="line">                Node tp = q.top();</div><div class="line">                <span class="keyword">int</span> r = min(a[i].r, tp.r);</div><div class="line">                <span class="keyword">int</span> cnt = (min(r, b[j].l - <span class="number">1</span>) - cur + <span class="number">1</span>) / tp.d;</div><div class="line">                ans += cnt;</div><div class="line">                cur += cnt * tp.d;</div><div class="line">                <span class="keyword">if</span>(!cnt) &#123;</div><div class="line">                    <span class="keyword">int</span> nxt = cur + tp.d - <span class="number">1</span>;</div><div class="line">                    <span class="keyword">if</span>(nxt &lt;= r) q.push(&#123;b[j].l, nxt, nxt - b[j].l + <span class="number">1</span>&#125;);</div><div class="line">                    cur = b[j].l;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;好久没写题解了。。感觉还是经常写点文字。题解勉强算是吧(雾&lt;/p&gt;
    
    </summary>
    
      <category term="套题" scheme="http://TaoSama.github.io/categories/%E5%A5%97%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>Notes, A Byte of Python</title>
    <link href="http://TaoSama.github.io/2017/03/25/Notes,%20A%20Byte%20of%20Python/"/>
    <id>http://TaoSama.github.io/2017/03/25/Notes, A Byte of Python/</id>
    <published>2017-03-24T19:04:10.000Z</published>
    <updated>2017-09-19T14:48:07.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>总结一下$python$的语法对于一个$cpp\ programmer$来说如何快速上手</li><li>工具查阅。。</li></ul><a id="more"></a><h3 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h3><h4 id="数"><a href="#数" class="headerlink" title="数"></a>数</h4><ul><li>整数(int) <code>type(1)</code></li><li>长整数(long) <code>type(1L)</code></li><li>浮点数(float) <code>type(1.0)</code> <strong>python不区分单双精度浮点数</strong></li><li>复数(complex) <code>type(2.3+5j)</code></li></ul><h4 id="字符串-str"><a href="#字符串-str" class="headerlink" title="字符串(str)"></a>字符串(str)</h4><ul><li><p><strong>‘和”意思相同</strong> <code>&#39;hello&#39; &quot;hello&quot;</code><br><code>&#39;&#39;&#39;或者&quot;&quot;&quot;</code>多行引号 <strong>里面随便用’和” 会自动转义</strong> </p></li><li><p>自然字符串<br>r或者R前缀 不会转义 <code>r&quot;new line\n&quot;</code></p></li><li><p>Unicode字符串<br>u或者U前缀 <code>u&quot;This is a unicode string&quot;</code></p></li><li><p>Tips:<br><strong>字符串是不可变的</strong><br><strong>正则表示式 一定要用自然字符串</strong><br><strong>行连接: (下面两个等价)</strong> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">print</span>\</div><div class="line">i</div><div class="line"><span class="keyword">print</span> i</div></pre></td></tr></table></figure></li></ul><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ul><li>命名规则<br>类似于C/C++或者Java</li></ul><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><ul><li><code>+ - * / % &lt;&lt; &gt;&gt; &amp; | ^ ~ &lt; &gt; &lt;= &gt;= == !=</code> 不变</li><li><code>x**y</code> ==&gt; $x^y$</li><li>//取整除 <code>5//2.1=2.0</code></li><li><p>逻辑运算符 <code>not and or</code></p></li><li><p>运算符优先级</p></li></ul><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">lambda</td><td style="text-align:center">lambda表达式</td></tr><tr><td style="text-align:center">or</td><td style="text-align:center">布尔“或”</td></tr><tr><td style="text-align:center">and</td><td style="text-align:center">布尔“与”</td></tr><tr><td style="text-align:center">not</td><td style="text-align:center">x 布尔“非”</td></tr><tr><td style="text-align:center">in，not in</td><td style="text-align:center">成员测试</td></tr><tr><td style="text-align:center">is，is not</td><td style="text-align:center">同一性测试</td></tr><tr><td style="text-align:center">&lt;，&lt;=，&gt;，>=，!=，==</td><td style="text-align:center">比较</td></tr><tr><td style="text-align:center">&#124;</td><td style="text-align:center">按位或</td></tr><tr><td style="text-align:center">^</td><td style="text-align:center">按位异或</td></tr><tr><td style="text-align:center">&amp;</td><td style="text-align:center">按位与</td></tr><tr><td style="text-align:center">&lt;&lt;，&gt;&gt;</td><td style="text-align:center">移位</td></tr><tr><td style="text-align:center">+，-</td><td style="text-align:center">加法与减法</td></tr><tr><td style="text-align:center">*，/，%</td><td style="text-align:center">乘法、除法与取余</td></tr><tr><td style="text-align:center">+x，-x</td><td style="text-align:center">正负号</td></tr><tr><td style="text-align:center">~x</td><td style="text-align:center">按位翻转</td></tr><tr><td style="text-align:center">**</td><td style="text-align:center">指数</td></tr><tr><td style="text-align:center">x.attribute</td><td style="text-align:center">属性参考</td></tr><tr><td style="text-align:center">x[index]</td><td style="text-align:center">下标</td></tr><tr><td style="text-align:center">x[index:index]</td><td style="text-align:center">寻址段</td></tr><tr><td style="text-align:center">f(arguments…)</td><td style="text-align:center">函数调用</td></tr><tr><td style="text-align:center">(experession,…)</td><td style="text-align:center">绑定或元组显示</td></tr><tr><td style="text-align:center">[expression,…]</td><td style="text-align:center">列表显示</td></tr><tr><td style="text-align:center">{key:datum,…}</td><td style="text-align:center">字典显示</td></tr><tr><td style="text-align:center">`expression,…`</td><td style="text-align:center">字符串转换</td></tr></tbody></table><h3 id="控制语句-不要忘记"><a href="#控制语句-不要忘记" class="headerlink" title="控制语句 (不要忘记:)"></a>控制语句 (不要忘记:)</h3><p><strong>else部分是可选的。如果包含else，它总是在循环结束后执行一次，除非遇到break</strong></p><ul><li><p>if和while</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># !/usr/bin/python</span></div><div class="line">number = <span class="number">23</span></div><div class="line">running = <span class="keyword">True</span></div><div class="line"><span class="keyword">while</span> running:</div><div class="line">    guess=int(raw_input(<span class="string">"Enter an integer:"</span>))</div><div class="line">    <span class="keyword">if</span> guess == number:</div><div class="line">        print(<span class="string">"Congratulation, you guessd it."</span>)</div><div class="line">        running = <span class="keyword">False</span></div><div class="line">    <span class="keyword">elif</span> guess &lt; number:</div><div class="line">        print(<span class="string">"No, it is a little higher"</span>)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        print(<span class="string">"No, it is a little lower"</span>)</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    print(<span class="string">"The while loop is over."</span>)</div><div class="line">print(<span class="string">"Done"</span>)</div></pre></td></tr></table></figure></li><li><p>for, break和continue</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>):</div><div class="line">    <span class="keyword">if</span> x == <span class="number">2</span>:</div><div class="line">        <span class="keyword">continue</span></div><div class="line">    <span class="keyword">if</span> x == <span class="number">4</span>:</div><div class="line">        <span class="keyword">break</span></div></pre></td></tr></table></figure></li></ul><h3 id="函数-不要忘记"><a href="#函数-不要忘记" class="headerlink" title="函数 (不要忘记:)"></a>函数 (不要忘记:)</h3><ul><li><p>实参传递方式类似Java, 值类型值传递，对象类型引用传递</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">maximum</span><span class="params">(x, y)</span>:</span></div><div class="line">    <span class="keyword">if</span> x &gt; y:</div><div class="line">        <span class="keyword">return</span> x</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> y</div></pre></td></tr></table></figure></li><li><p>默认参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">printWord</span><span class="params">(word, times = <span class="number">1</span>)</span>:</span></div><div class="line">    print(word * times)</div></pre></td></tr></table></figure></li><li><p>关键参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(a, b = <span class="number">5</span>, c = <span class="number">10</span>)</span>:</span></div><div class="line">    print(<span class="string">'a is %d, b is %d, c is %d'</span> % (a, b, c))</div><div class="line"><span class="comment">#####################################################</span></div><div class="line">func(<span class="number">3</span>, <span class="number">7</span>)</div><div class="line">func(<span class="number">25</span>, c = <span class="number">24</span>)</div><div class="line">func(c = <span class="number">50</span>, a = <span class="number">100</span>)</div></pre></td></tr></table></figure></li><li><p>DocStrings<br>文档字符串的惯例是一个多行字符串，它的首行以大写字母开始，句号结尾。第二行是空行，从第三行开始是详细的描述。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">printMax</span><span class="params">(x, y)</span>:</span></div><div class="line">    <span class="string">'''Prints the maximum of two numbers.</span></div><div class="line"><span class="string">    </span></div><div class="line"><span class="string">    The two values must be integers.'''</span></div><div class="line">    </div><div class="line">    <span class="keyword">if</span> x &gt; y:</div><div class="line">        <span class="keyword">print</span> x, <span class="string">'is maximum'</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">print</span> y, <span class="string">'is maximum'</span></div><div class="line"><span class="comment">##########################################</span></div><div class="line">printMax(<span class="number">3</span>, <span class="number">5</span>)</div><div class="line"><span class="keyword">print</span> printMax.__doc__</div></pre></td></tr></table></figure></li></ul><h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><p><strong>每个.py程序都是1个模块(可以类似cpp类一样用.来访问模块内的成员)</strong></p><ul><li>from..import语句<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">print</span> <span class="string">'The command line arguments are:'</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> sys.argv:</div><div class="line">        <span class="keyword">print</span> i</div><div class="line"><span class="keyword">print</span> <span class="string">'\n\nThe PYTHONPATH is'</span>, sys.path, <span class="string">'\n'</span></div></pre></td></tr></table></figure></li></ul><p>如果你想要直接输入<code>argv</code>变量到你的程序中（避免在每次使用它时打sys.），那么你可以使用<code>from sys import argv</code>语句。<br>如果你想要输入所有sys模块使用的名字，那么你可以使用<code>from sys import *</code>语句。这对于所有模块都适用。<br>一般说来，应该避免使用<code>from..import</code>而使用<code>import</code>语句，因为这样可以使你的程序更加易读，也可以避免名称的冲突。</p><ul><li><p>使用模块的<code>__name__</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">'This program is being run by itself'</span></div><div class="line"><span class="keyword">else</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">'I am being imported from another module'</span></div></pre></td></tr></table></figure></li><li><p>dir()函数<br>可以使用内建的dir函数来列出模块定义的标识符。标识符有函数、类和变量。<br>当你为dir()提供一个模块名的时候，它返回模块定义的名称列表。<br>如果不提供参数，它返回当前模块中定义的名称列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> sys</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dir() <span class="comment"># get list of attributes for current module</span></div><div class="line">[<span class="string">'__builtins__'</span>, <span class="string">'__doc__'</span>, <span class="string">'__name__'</span>, <span class="string">'sys'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">5</span> <span class="comment"># create a new variable 'a'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dir()</div><div class="line">[<span class="string">'__builtins__'</span>, <span class="string">'__doc__'</span>, <span class="string">'__name__'</span>, <span class="string">'a'</span>, <span class="string">'sys'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> a <span class="comment"># delete/remove a name</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dir()</div><div class="line">[<span class="string">'__builtins__'</span>, <span class="string">'__doc__'</span>, <span class="string">'__name__'</span>, <span class="string">'sys'</span>]</div></pre></td></tr></table></figure></li></ul><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line">list.append(<span class="number">4</span>)</div><div class="line">list.pop(<span class="number">0</span>) <span class="comment"># del list[0]</span></div><div class="line">list.sort()</div><div class="line">print(list)</div></pre></td></tr></table></figure><h4 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">empty = ()</div><div class="line">single = (<span class="number">1</span>, )</div><div class="line">zoo = (<span class="string">"wolf"</span>, <span class="string">"elephant"</span>, <span class="string">"penguin"</span>)</div><div class="line"><span class="keyword">print</span> <span class="string">"number of animals in the zoo is"</span>, len(zoo) <span class="comment"># 3</span></div><div class="line">new_zoo = (<span class="string">"monkey"</span>, <span class="string">"dolphin"</span>, zoo)</div><div class="line"><span class="keyword">print</span> <span class="string">"number of animals in the new zoo is"</span>, len(new_zoo) <span class="comment"># 3</span></div></pre></td></tr></table></figure><p>元组最通常的用法是用在打印语句<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">age = <span class="number">22</span></div><div class="line">name = <span class="string">'Swaroop'</span></div><div class="line"><span class="keyword">print</span> <span class="string">'%s is %d years old'</span> % (name, age)</div><div class="line"><span class="keyword">print</span> <span class="string">'Why is %s playing with that python?'</span> % name</div></pre></td></tr></table></figure></p><h4 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h4><p>只能使用不可变的对象（比如字符串）来作为字典的键，但是你可以把不可变或可变的对象作为字典的值。<br>基本说来就是，你应该只使用简单的对象作为键。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">ab = &#123; <span class="string">'Swaroop'</span> : <span class="string">'swaroopch@byteofpython.info'</span>,</div><div class="line">       <span class="string">'Larry'</span> : <span class="string">'larry@wall.org'</span>,</div><div class="line">       <span class="string">'Matsumoto'</span> : <span class="string">'matz@ruby-lang.org'</span>,</div><div class="line">       <span class="string">'Spammer'</span> : <span class="string">'spammer@hotmail.com'</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">print</span> <span class="string">"Swaroop's address is %s"</span> % ab[<span class="string">'Swaroop'</span>]</div></pre></td></tr></table></figure></p><h4 id="序列"><a href="#序列" class="headerlink" title="序列"></a>序列</h4><p>列表、元组和字符串都是序列，序列的两个主要特点是索引操作符和切片操作符。<br>索引操作符让我们可以从序列中抓取一个特定项目。切片操作符让我们能够获取序列的一个切片，即一部分序列</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">shoplist = [<span class="string">'apple'</span>, <span class="string">'mango'</span>, <span class="string">'carrot'</span>, <span class="string">'banana'</span>]</div><div class="line"><span class="comment"># Indexing or 'Subscription' operation</span></div><div class="line"><span class="keyword">print</span> <span class="string">'Item 0 is'</span>, shoplist[<span class="number">0</span>]</div><div class="line"><span class="keyword">print</span> <span class="string">'Item -1 is'</span>, shoplist[<span class="number">-1</span>]</div><div class="line"><span class="comment"># Slicing on a list</span></div><div class="line"><span class="keyword">print</span> <span class="string">'Item 1 to 3 is'</span>, shoplist[<span class="number">1</span>:<span class="number">3</span>]</div><div class="line"><span class="keyword">print</span> <span class="string">'Item 2 to end is'</span>, shoplist[<span class="number">2</span>:]</div><div class="line"><span class="keyword">print</span> <span class="string">'Item 1 to -1 is'</span>, shoplist[<span class="number">1</span>:<span class="number">-1</span>]</div><div class="line"><span class="keyword">print</span> <span class="string">'Item start to end is'</span>, shoplist[:]</div><div class="line"><span class="comment"># Slicing on a string</span></div><div class="line">name = <span class="string">'swaroop'</span></div><div class="line"><span class="keyword">print</span> <span class="string">'characters 1 to 3 is'</span>, name[<span class="number">1</span>:<span class="number">3</span>]</div><div class="line"><span class="keyword">print</span> <span class="string">'characters 2 to end is'</span>, name[<span class="number">2</span>:]</div><div class="line"><span class="keyword">print</span> <span class="string">'characters 1 to -1 is'</span>, name[<span class="number">1</span>:<span class="number">-1</span>]</div><div class="line"><span class="keyword">print</span> <span class="string">'characters start to end is'</span>, name[:]</div><div class="line"><span class="comment">#################################################</span></div><div class="line">Item <span class="number">0</span> <span class="keyword">is</span> apple</div><div class="line">Item <span class="number">-1</span> <span class="keyword">is</span> banana</div><div class="line">Item <span class="number">1</span> to <span class="number">3</span> <span class="keyword">is</span> [<span class="string">'mango'</span>, <span class="string">'carrot'</span>]</div><div class="line">Item <span class="number">2</span> to end <span class="keyword">is</span> [<span class="string">'carrot'</span>, <span class="string">'banana'</span>]</div><div class="line">Item <span class="number">1</span> to <span class="number">-1</span> <span class="keyword">is</span> [<span class="string">'mango'</span>, <span class="string">'carrot'</span>]</div><div class="line">Item start to end <span class="keyword">is</span> [<span class="string">'apple'</span>, <span class="string">'mango'</span>, <span class="string">'carrot'</span>, <span class="string">'banana'</span>]</div><div class="line">characters <span class="number">1</span> to <span class="number">3</span> <span class="keyword">is</span> wa</div><div class="line">characters <span class="number">2</span> to end <span class="keyword">is</span> aroop</div><div class="line">characters <span class="number">1</span> to <span class="number">-1</span> <span class="keyword">is</span> waroo</div><div class="line">characters start to end <span class="keyword">is</span> swaroop</div></pre></td></tr></table></figure><h4 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h4><p>当你创建一个对象并给它赋一个变量的时候，这个变量仅仅引用那个对象，而不是表示这个对象本身！<br>也就是说，变量名指向你计算机中存储那个对象的内存。这被称作名称到对象的绑定。<br><strong>必须使用切片操作符来取得拷贝</strong></p><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><h4 id="类的声明"><a href="#类的声明" class="headerlink" title="类的声明"></a>类的声明</h4><p>基本跟cpp差不多，类中定义的变量，类似于cpp中的类的静态成员变量(比如下中的population)<br>如果你使用的数据成员名称以双下划线前缀比如__privatevar，Python的名称管理体系会有效地把它作为私有变量。<br>一个惯例，如果某个变量只想在类或对象中使用，就应该以单下划线前缀。<br>其他的名称都将作为公共的，可以被其他类/对象使用。<br>记住这只是一个惯例，并不是Python所要求的（与双下划线前缀不同）。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></div><div class="line">    <span class="string">'''Represents a person.'''</span></div><div class="line">    population = <span class="number">0</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></div><div class="line">        <span class="string">'''Initializes the person's data.'''</span></div><div class="line">        self.name = name</div><div class="line">        <span class="keyword">print</span> <span class="string">'(Initializing %s)'</span> % self.name</div><div class="line">        <span class="comment"># When this person is created, he/she</span></div><div class="line">        <span class="comment"># adds to the population</span></div><div class="line">        Person.population += <span class="number">1</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">'''I am dying.'''</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'%s says bye.'</span> % self.name</div><div class="line">        Person.population -= <span class="number">1</span></div><div class="line">        <span class="keyword">if</span> Person.population == <span class="number">0</span>:</div><div class="line">            <span class="keyword">print</span> <span class="string">'I am the last one.'</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">print</span> <span class="string">'There are still %d people left.'</span> % Person.population</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sayHi</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">'''Greeting by the person.</span></div><div class="line"><span class="string">        Really, that's all it does.'''</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'Hi, my name is %s.'</span> % self.name</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">howMany</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">'''Prints the current population.'''</span></div><div class="line">        <span class="keyword">if</span> Person.population == <span class="number">1</span>:</div><div class="line">            <span class="keyword">print</span> <span class="string">'I am the only person here.'</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">print</span> <span class="string">'We have %d persons here.'</span> % Person.population</div><div class="line"></div><div class="line"><span class="comment">###########################################</span></div><div class="line">swaroop = Person(<span class="string">'Swaroop'</span>)</div><div class="line">swaroop.sayHi()</div><div class="line">swaroop.howMany()</div><div class="line">kalam = Person(<span class="string">'Abdul Kalam'</span>)</div><div class="line">kalam.sayHi()</div><div class="line">kalam.howMany()</div><div class="line">swaroop.sayHi()</div><div class="line">swaroop.howMany()</div><div class="line"><span class="comment">###########################################</span></div><div class="line">(Initializing Swaroop)</div><div class="line">Hi, my name <span class="keyword">is</span> Swaroop.</div><div class="line">I am the only person here.</div><div class="line">(Initializing Abdul Kalam)</div><div class="line">Hi, my name <span class="keyword">is</span> Abdul Kalam.</div><div class="line">We have <span class="number">2</span> persons here.</div><div class="line">Hi, my name <span class="keyword">is</span> Swaroop.</div><div class="line">We have <span class="number">2</span> persons here.</div><div class="line">Abdul Kalam says bye.</div><div class="line">There are still <span class="number">1</span> people left.</div><div class="line">Swaroop says bye.</div><div class="line">I am the last one.</div></pre></td></tr></table></figure></p><h4 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h4><p><strong>Python不会自动调用基本类的constructor，你得亲自专门调用它</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SchoolMember</span>:</span></div><div class="line">    <span class="string">'''Represents any school member.'''</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></div><div class="line">        self.name = name</div><div class="line">        self.age = age</div><div class="line">        <span class="keyword">print</span> <span class="string">'(Initialized SchoolMember: %s)'</span> % self.name</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tell</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">'''Tell my details.'''</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'Name:"%s" Age:"%s"'</span> % (self.name, self.age),</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span><span class="params">(SchoolMember)</span>:</span></div><div class="line">    <span class="string">'''Represents a teacher.'''</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age, salary)</span>:</span></div><div class="line">        SchoolMember.__init__(self, name, age)</div><div class="line">        self.salary = salary</div><div class="line">        <span class="keyword">print</span> <span class="string">'(Initialized Teacher: %s)'</span> % self.name</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tell</span><span class="params">(self)</span>:</span></div><div class="line">        SchoolMember.tell(self)</div><div class="line">        <span class="keyword">print</span> <span class="string">'Salary: "%d"'</span> % self.salary</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(SchoolMember)</span>:</span></div><div class="line">    <span class="string">'''Represents a student.'''</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age, marks)</span>:</span></div><div class="line">        SchoolMember.__init__(self, name, age)</div><div class="line">        self.marks = marks</div><div class="line">        <span class="keyword">print</span> <span class="string">'(Initialized Student: %s)'</span> % self.name</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tell</span><span class="params">(self)</span>:</span></div><div class="line">        SchoolMember.tell(self)</div><div class="line">        <span class="keyword">print</span> <span class="string">'Marks: "%d"'</span> % self.marks</div><div class="line"></div><div class="line"><span class="comment">##############################################################</span></div><div class="line">t = Teacher(<span class="string">'Mrs. Shrividya'</span>, <span class="number">40</span>, <span class="number">30000</span>)</div><div class="line">s = Student(<span class="string">'Swaroop'</span>, <span class="number">22</span>, <span class="number">75</span>)</div><div class="line"><span class="keyword">print</span> <span class="comment"># prints a blank line</span></div><div class="line">members = [t, s]</div><div class="line"><span class="keyword">for</span> member <span class="keyword">in</span> members:</div><div class="line">member.tell() <span class="comment"># works for both Teachers and Students</span></div><div class="line"><span class="comment">##############################################################</span></div><div class="line">(Initialized SchoolMember: Mrs. Shrividya)</div><div class="line">(Initialized Teacher: Mrs. Shrividya)</div><div class="line">(Initialized SchoolMember: Swaroop)</div><div class="line">(Initialized Student: Swaroop)</div><div class="line">Name:<span class="string">"Mrs. Shrividya"</span> Age:<span class="string">"40"</span> Salary: <span class="string">"30000"</span></div><div class="line">Name:<span class="string">"Swaroop"</span> Age:<span class="string">"22"</span> Marks: <span class="string">"75"</span></div></pre></td></tr></table></figure></p><h3 id="I-O"><a href="#I-O" class="headerlink" title="I/O"></a>I/O</h3><h4 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">poem = <span class="string">'''\</span></div><div class="line"><span class="string">Programming is fun</span></div><div class="line"><span class="string">When the work is done</span></div><div class="line"><span class="string">if you wanna make your work also fun:</span></div><div class="line"><span class="string">use Python!</span></div><div class="line"><span class="string">'''</span></div><div class="line">f = file(<span class="string">'poem.txt'</span>, <span class="string">'w'</span>) <span class="comment"># open for 'w'riting</span></div><div class="line">f.write(poem) <span class="comment"># write text to file</span></div><div class="line">f.close() <span class="comment"># close the file</span></div><div class="line">f = file(<span class="string">'poem.txt'</span>) <span class="comment"># if no mode is specified, 'r'ead mode is assumed by default</span></div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    line = f.readline()</div><div class="line">    <span class="keyword">if</span> len(line) == <span class="number">0</span>: <span class="comment"># Zero length indicates EOF</span></div><div class="line">        <span class="keyword">break</span></div><div class="line">    <span class="keyword">print</span> line, <span class="comment"># Notice comma to avoid automatic newline added by Python</span></div><div class="line">f.close() <span class="comment"># close the file</span></div></pre></td></tr></table></figure><h4 id="储存器"><a href="#储存器" class="headerlink" title="储存器"></a>储存器</h4><p>Python提供一个标准的模块，称为pickle。<br>使用它你可以在一个文件中储存何Python对象，之后你又可以把它完整无缺地取出来。这被称为 持久地 储存对象。<br>还有另一个模块称为cPickle，它的功能和pickle模块完全相同，只不过它是C语言编写的，因此要快得多（比pickle快1000倍）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> cPickle <span class="keyword">as</span> p</div><div class="line"><span class="comment">#import pickle as p</span></div><div class="line">shoplistfile = <span class="string">'shoplist.data'</span></div><div class="line"><span class="comment"># the name of the file where we will store the object</span></div><div class="line">shoplist = [<span class="string">'apple'</span>, <span class="string">'mango'</span>, <span class="string">'carrot'</span>]</div><div class="line"><span class="comment"># Write to the file</span></div><div class="line">f = file(shoplistfile, <span class="string">'w'</span>)</div><div class="line">p.dump(shoplist, f) <span class="comment"># dump the object to a file</span></div><div class="line">f.close()</div><div class="line"><span class="keyword">del</span> shoplist <span class="comment"># remove the shoplist</span></div><div class="line"><span class="comment"># Read back from the storage</span></div><div class="line">f = file(shoplistfile)</div><div class="line">storedlist = p.load(f)</div><div class="line"><span class="keyword">print</span> storedlist</div></pre></td></tr></table></figure></p><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><p><strong>else可以和try…except连用，不能只与try…finally连用</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment"># Filename: raising.py</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShortInputException</span><span class="params">(Exception)</span>:</span></div><div class="line">    <span class="string">'''A user-defined exception class.'''</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, length, atleast)</span>:</span></div><div class="line">    Exception.__init__(self)</div><div class="line">    self.length = length</div><div class="line">    self.atleast = atleast</div><div class="line"><span class="keyword">try</span>:</div><div class="line">    s = raw_input(<span class="string">'Enter something --&gt; '</span>)</div><div class="line">    <span class="keyword">if</span> len(s) &lt; <span class="number">3</span>:</div><div class="line">        <span class="keyword">raise</span> ShortInputException(len(s), <span class="number">3</span>)</div><div class="line">    <span class="comment"># Other work can continue as usual here</span></div><div class="line"><span class="keyword">except</span> EOFError:</div><div class="line">    <span class="keyword">print</span> <span class="string">'\nWhy did you do an EOF on me?'</span></div><div class="line"><span class="keyword">except</span> ShortInputException, x:</div><div class="line">    <span class="keyword">print</span> <span class="string">'ShortInputException: The input was of length %d, \</span></div><div class="line"><span class="string">was expecting at least %d'</span> % (x.length, x.atleast)</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">'No exception was raised.'</span></div></pre></td></tr></table></figure></p><h3 id="Python标准库"><a href="#Python标准库" class="headerlink" title="Python标准库"></a>Python标准库</h3><h4 id="sys模块"><a href="#sys模块" class="headerlink" title="sys模块"></a>sys模块</h4><ul><li><code>sys.argv</code>列表中总是至少有一个项目。<code>sys.argv[0]</code>（由于Python从0开始计数）就是当前运行的程序名称。其他的命令行参数在这个项目之后。</li><li><code>sys.version</code>字符串给你提供安装的Python的版本信息</li><li><code>sys.stdin、sys.stdout和sys.stderr</code>分别对应程序的标准输入、标准输出和标准错误流。</li></ul><h4 id="os模块"><a href="#os模块" class="headerlink" title="os模块"></a>os模块</h4><ul><li><code>os.name</code>字符串指示你正在使用的平台。比如对于Windows，它是’nt’，而对于Linux/Unix<br>用户，它是’posix’。</li><li><code>os.getcwd()</code>函数得到当前工作目录，即当前Python脚本工作的目录路径。</li><li><code>os.getenv()和os.putenv()</code>函数分别用来读取和设置环境变量。</li><li><code>os.listdir()</code>返回指定目录下的所有文件和目录名。</li><li><code>os.remove()</code>函数用来删除一个文件。</li><li><code>os.system()</code>函数用来运行shell命令。</li><li><code>os.linesep</code>字符串给出当前平台使用的行终止符。例如，Windows使用’\r\n’，Linux使<br>用’\n’而Mac使用’\r’。</li><li><p><code>os.path.split()</code>函数返回一个路径的目录名和文件名。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.split(<span class="string">'/home/swaroop/byte/code/poem.txt'</span>)</div><div class="line">(<span class="string">'/home/swaroop/byte/code'</span>, <span class="string">'poem.txt'</span>)</div></pre></td></tr></table></figure></li><li><p><code>os.path.isfile()和os.path.isdir()</code>函数分别检验给出的路径是一个文件还是目录</p></li><li><code>os.path.exists()</code>函数用来检验给出的路径是否真地存在</li></ul><h3 id="更多关于Python"><a href="#更多关于Python" class="headerlink" title="更多关于Python"></a>更多关于Python</h3><h4 id="列表综合（List-Comprehension）"><a href="#列表综合（List-Comprehension）" class="headerlink" title="列表综合（List Comprehension）"></a>列表综合（List Comprehension）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line">listone = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</div><div class="line">listtwo = [<span class="number">2</span>*i <span class="keyword">for</span> i <span class="keyword">in</span> listone <span class="keyword">if</span> i &gt; <span class="number">2</span>]</div><div class="line"><span class="keyword">print</span> listtwo</div></pre></td></tr></table></figure><h4 id="在函数中接收元组和列表"><a href="#在函数中接收元组和列表" class="headerlink" title="在函数中接收元组和列表"></a>在函数中接收元组和列表</h4><p>在args变量前有<code>*</code>前缀，多余的函数参数都会作为一个元组存储在args中<br>如果使用的是<code>**</code>前缀，多余的参数则会被认为是一个字典的键/值对<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">powersum</span><span class="params">(power, *args)</span>:</span></div><div class="line"><span class="meta">... </span><span class="string">'''Return the sum of each argument raised to specified power.'''</span></div><div class="line"><span class="meta">... </span>total = <span class="number">0</span></div><div class="line"><span class="meta">... </span><span class="keyword">for</span> i <span class="keyword">in</span> args:</div><div class="line"><span class="meta">... </span>total += pow(i, power)</div><div class="line"><span class="meta">... </span><span class="keyword">return</span> total</div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>powersum(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</div><div class="line"><span class="number">25</span></div></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>dict = &#123;&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> dict</div><div class="line">&#123;&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">addKVs</span><span class="params">(**args)</span>:</span></div><div class="line"><span class="meta">... </span>    <span class="keyword">for</span> key <span class="keyword">in</span> args.keys():</div><div class="line"><span class="meta">... </span>            dict[key] = args[key]</div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>addKVs(a=<span class="number">1</span>,b=<span class="number">2</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> dict</div><div class="line">&#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>&#125;</div></pre></td></tr></table></figure><h4 id="lambda-expression"><a href="#lambda-expression" class="headerlink" title="lambda expression"></a>lambda expression</h4><p>语法：<code>lambda [arg1[,arg2,arg3....argN]]:expression</code><br>注意：<br>只能使用表达式，即便是print语句也不能用在lambda形式中<br><code>for..in..if</code>能做的，最好不要选择lambda<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">fuck = <span class="keyword">lambda</span> : <span class="string">'hello world'</span></div><div class="line"><span class="keyword">print</span> fuck()</div><div class="line">addition = <span class="keyword">lambda</span> a, b : a + b</div><div class="line"><span class="keyword">print</span> addition(<span class="number">1</span>, <span class="number">2</span>)</div><div class="line"><span class="comment">###########################</span></div><div class="line">hello world</div><div class="line"><span class="number">3</span></div></pre></td></tr></table></figure></p><h4 id="exec、eval、assert、repr"><a href="#exec、eval、assert、repr" class="headerlink" title="exec、eval、assert、repr"></a>exec、eval、assert、repr</h4><ul><li><p><code>exec</code>语句用来执行储存在字符串或文件中的Python语句</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">exec</span> <span class="string">'print "Hello World"'</span></div><div class="line">Hello World</div></pre></td></tr></table></figure></li><li><p><code>eval</code>语句用来计算存储在字符串中的有效Python表达式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>eval(<span class="string">'2*3'</span>)</div><div class="line"><span class="number">6</span></div></pre></td></tr></table></figure></li><li><p><code>assert</code>语句用来声明某个条件是真的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>mylist = [<span class="string">'item'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">assert</span> len(mylist) &gt;= <span class="number">1</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>mylist.pop()</div><div class="line"><span class="string">'item'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">assert</span> len(mylist) &gt;= <span class="number">1</span></div><div class="line">Traceback (most recent call last):</div><div class="line">File "&lt;stdin&gt;", line 1, in ?</div><div class="line">AssertionError</div></pre></td></tr></table></figure></li><li><p><code>repr</code>函数和<code>反引号</code>（也称转换符）用来获取对象的可打印表示形式<br>注意，在大多数时候有<code>eval(repr(object)) == object</code><br>可通过定义类的<code>__repr__</code>方法来控制对象被<code>repr</code>函数调用时返回的内容</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>i = []</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>i.append(<span class="string">'item'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>`i`</div><div class="line"><span class="string">"['item']"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>repr(i)</div><div class="line"><span class="string">"['item']"</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;总结一下$python$的语法对于一个$cpp\ programmer$来说如何快速上手&lt;/li&gt;
&lt;li&gt;工具查阅。。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Doing" scheme="http://TaoSama.github.io/categories/Doing/"/>
    
      <category term="Python" scheme="http://TaoSama.github.io/categories/Doing/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Coursera, Machine Learning</title>
    <link href="http://TaoSama.github.io/2017/03/07/Coursera%20Machine%20Learning/"/>
    <id>http://TaoSama.github.io/2017/03/07/Coursera Machine Learning/</id>
    <published>2017-03-07T09:04:10.000Z</published>
    <updated>2017-09-19T14:48:07.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>总算是开始学习$ML$了，这个$Stanford$的课看了一下$Materials$发现被精简了好多啊<br>好处是通俗易懂，入门必备啊。。真是适合我这种数学渣</p><a id="more"></a><h3 id="笔记和编程作业答案"><a href="#笔记和编程作业答案" class="headerlink" title="笔记和编程作业答案"></a>笔记和编程作业答案</h3><p>这里丢一波地址，毕竟博客的$md$对$Latex$的兹磁其实是一般的<br>还是作业部落比较好用，主要是博客还得$push$吧，笔记应该是随心写的那种<br>所以酱紫比较好</p><ul><li><a href="https://www.zybuluo.com/TaoSama/note/675864" target="_blank" rel="external">My Notes</a></li><li><a href="https://github.com/TaoSama/Coursera/tree/master/Machine%20Learning" target="_blank" rel="external">My Exercises</a></li></ul><hr><p><del>Updated</del></p><h3 id="完成了"><a href="#完成了" class="headerlink" title="完成了"></a>完成了</h3><ul><li><strong>现在是2017年3月12日 03:35:01，历时7天整，最终以$99.2\%$的成绩通过了</strong></li><li>基本都是一次通过，拿满可能做了$2\sim 3$次</li><li><p>除了Anomaly Detection和Recommender Systems各错了一个，前者做了$6$遍还是没拿满，我!@#$%^&amp;</p></li><li><p>看到这个绿图还是很欣慰啊，就跟你大半夜日题看到$AC$一样的，勉强入门了？？</p></li></ul><p><img src="http://7xru22.com1.z0.glb.clouddn.com/17-3-12/37459681-file_1489260426139_8708.png" alt=""></p><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><ul><li>加油加油，我发现我还是爱学习的？ 爱数学？(雾</li><li>接下来可以玩一玩平台，工具啥的了</li><li>具体数学推导深入啥的，玩的过程中学可能更有效一点的</li><li>好像摆脱颓废的状态了，果然是忙起来就好了。。</li><li>感觉有空还是要把$cs229$的$lecture\ notes$看一看的，读了第一个感觉非常好啊</li><li>然后跟着他们一起学一学$DL$？ 再上一波$cs231n$了估计要</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;总算是开始学习$ML$了，这个$Stanford$的课看了一下$Materials$发现被精简了好多啊&lt;br&gt;好处是通俗易懂，入门必备啊。。真是适合我这种数学渣&lt;/p&gt;
    
    </summary>
    
      <category term="Doing" scheme="http://TaoSama.github.io/categories/Doing/"/>
    
      <category term="Machine Learning" scheme="http://TaoSama.github.io/categories/Doing/Machine-Learning/"/>
    
    
  </entry>
  
  <entry>
    <title>Reborn and Walk Alone</title>
    <link href="http://TaoSama.github.io/2017/02/28/Roborn-and-Walk-Alone/"/>
    <id>http://TaoSama.github.io/2017/02/28/Roborn-and-Walk-Alone/</id>
    <published>2017-02-28T14:18:10.000Z</published>
    <updated>2017-09-19T14:48:07.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>时光太瘦，指缝太宽，不经意的一瞥，已隔经年<br> <div style="text-align:right">——安意如</div><br>作为一个记忆是有限覆盖式的人（摊手），我大概已经不太记得这个人生$2\sim 3$年往前的事情了，不知是幸运还是悲哀。<br>四年太快，马上就要毕业了，最近又传来噩耗，能不能毕业都不一定了，自作孽真是的。<br>无数次幻想如果没有得到想要的结果就退役了是怎么样的，正儿八经儿从坎普回来发现其实也没啥区别。<br>仿佛我的力气早已经在一年前透支了，突然找不回从前努力的那个自己了，这个样子不行啊，每天浑浑噩噩的。<br>明天就是三月了，即使是在最后一秒回头也是不晚的，毕竟不是生死，真希望自己踽踽独行，踌躇满志。</p><a id="more"></a><h3 id="莫名其妙的终于下了决定"><a href="#莫名其妙的终于下了决定" class="headerlink" title="莫名其妙的终于下了决定"></a>莫名其妙的终于下了决定</h3><p>讲道理，迷茫的时候$salary-oriented$是很兹磁的啊，所谓技多不压身，学一波都是挺好玩的<br>$ML、CV$什么的，周围学的人都已经建立正反馈了，而我还没找到正反馈，不过我想应该不难<br>其他方向的孩子们早都深入了，观望真是一件最愚蠢的事情，开始做什么的才是硬道理啊</p><h3 id="博客重新搞了搞"><a href="#博客重新搞了搞" class="headerlink" title="博客重新搞了搞"></a>博客重新搞了搞</h3><p>以前黑灰的实在是看着好压抑啊，然后又去把<code>landscape</code>原版拿来搞一搞，借鉴了一下别人的<br>发现自己实在是缺乏美(前端)的眼睛(skill)，也就只有$xjb$修一修$bug$，然后再随便调一调配色这种水平<br>看起来勉强是能看了，终于把<a href="//taosama.com">taosama.com</a>买下来了，然后又可以重新愉快的写博客了？？？</p><h3 id="然后就开始重新写博客了？"><a href="#然后就开始重新写博客了？" class="headerlink" title="然后就开始重新写博客了？"></a>然后就开始重新写博客了？</h3><p>把东西整理一下，然后又可以随便刷刷题，打打$cf$，学学东西<br>实习学的东西也可以整理一波。。然后就正儿八经儿的开始学习了？<br>毕竟三月了，新的开始。。</p><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>好好学习，好好打游戏。。好好看视频。。别特么胡思乱想。。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;时光太瘦，指缝太宽，不经意的一瞥，已隔经年&lt;br&gt; &lt;div style=&quot;text-align:right&quot;&gt;——安意如&lt;/div&gt;&lt;br&gt;作为一个记忆是有限覆盖式的人（摊手），我大概已经不太记得这个人生$2\sim 3$年往前的事情了，不知是幸运还是悲哀。&lt;br&gt;四年太快，马上就要毕业了，最近又传来噩耗，能不能毕业都不一定了，自作孽真是的。&lt;br&gt;无数次幻想如果没有得到想要的结果就退役了是怎么样的，正儿八经儿从坎普回来发现其实也没啥区别。&lt;br&gt;仿佛我的力气早已经在一年前透支了，突然找不回从前努力的那个自己了，这个样子不行啊，每天浑浑噩噩的。&lt;br&gt;明天就是三月了，即使是在最后一秒回头也是不晚的，毕竟不是生死，真希望自己踽踽独行，踌躇满志。&lt;/p&gt;
    
    </summary>
    
      <category term="Doing" scheme="http://TaoSama.github.io/categories/Doing/"/>
    
      <category term="Life" scheme="http://TaoSama.github.io/categories/Doing/Life/"/>
    
    
  </entry>
  
  <entry>
    <title>51nod 1610 路径计数（dp、容斥）</title>
    <link href="http://TaoSama.github.io/2016/09/23/51nod%201610%20%E8%B7%AF%E5%BE%84%E8%AE%A1%E6%95%B0%EF%BC%88dp%E3%80%81%E5%AE%B9%E6%96%A5%E5%8E%9F%E7%90%86%EF%BC%89/"/>
    <id>http://TaoSama.github.io/2016/09/23/51nod 1610 路径计数（dp、容斥原理）/</id>
    <published>2016-09-22T16:52:10.000Z</published>
    <updated>2017-09-19T14:48:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>题意： </p><blockquote><p>$给定一个N\le 100点，M\le 5\times 10^4边的有向无环图$<br>$一条路径的值:=路径上所有边权的最大公约数$<br>$Q\le 500次修改操作，每次修改一条边的边权\le 100$<br>$每次修改后输出有向无环图上路径的值为1的路径数量，答案模10^9+7$</p></blockquote><a id="more"></a><p>分析：</p><blockquote><p>$修改1条边所能影响的是他的约数那些边，看数据发现每次询问最多只兹磁O(n^2)$<br>$暴力做是不行的，考虑对倍数容斥一下$<br>$f[div][i][j]:=值为div倍数的i\to j的方法数$<br>$根据拓扑序dp一下就得到dp[div][i]:=以i结尾的值为div倍数的方法数$<br>$g[i]:=值为i的倍数的方法数，h[i]:=值为i的方法数，这个容斥一下就好了$<br>$对于每次修改显然只影响约数那些，拿出来暴力重新dp，再容斥算答案就好了$<br>$本题约数级别是sqrt(100)也就是10，所以复杂度是O(100\times n^2+q\times 10\times 100^2)$</p></blockquote><p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-08-29</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">5e4</span> + <span class="number">10</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line">LL f[N][N][N], g[N], h[N];</div><div class="line"><span class="comment">//x倍数的i-&gt;j的路径数, x的倍数的路径数, x的路径数</span></div><div class="line"></div><div class="line"><span class="keyword">int</span> u[M], v[M], c[M];</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[N], topo;</div><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; divisors[N];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">gao</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; ++i)</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt; N; j += i)</div><div class="line">            divisors[j].push_back(i);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, a, b) for(int i = a; i &lt;= b; ++i)</span></div><div class="line"></div><div class="line"><span class="function">LL <span class="title">calc</span><span class="params">(<span class="keyword">int</span> div)</span> </span>&#123;</div><div class="line">    LL sum = <span class="number">0</span>;</div><div class="line">    <span class="built_in">vector</span>&lt;LL&gt; dp(n + <span class="number">1</span>, <span class="number">0</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; topo.size(); ++i) &#123;</div><div class="line">        <span class="keyword">int</span> u = topo[i];</div><div class="line">        sum = (sum + dp[u]) % MOD;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; topo.size(); ++j) &#123;</div><div class="line">            <span class="keyword">int</span> v = topo[j];</div><div class="line">            dp[v] += f[div][u][v] * (<span class="number">1</span> + dp[u]);</div><div class="line">            dp[v] %= MOD;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> sum;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">solve</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">100</span>; i; --i) &#123;</div><div class="line">        h[i] = g[i];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i + i; j &lt;= <span class="number">100</span>; j += i) h[i] -= h[j];</div><div class="line">        h[i] = (h[i] % MOD + MOD) % MOD;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> h[<span class="number">1</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    gao();</div><div class="line"></div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; in(n + <span class="number">1</span>, <span class="number">0</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, u + i, v + i, c + i);</div><div class="line">        G[u[i]].push_back(v[i]); ++in[v[i]];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> div : divisors[c[i]]) ++f[div][u[i]][v[i]];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="keyword">if</span>(!in[i]) topo.push_back(i);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; topo.size(); ++i) &#123;</div><div class="line">        <span class="keyword">int</span> u = topo[i];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> v : G[u]) <span class="keyword">if</span>(--in[v] == <span class="number">0</span>) topo.push_back(v);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; ++i) g[i] = calc(i);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, solve());</div><div class="line"></div><div class="line">    <span class="keyword">int</span> q; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;q);</div><div class="line">    <span class="keyword">while</span>(q--) &#123;</div><div class="line">        <span class="keyword">int</span> x, y; <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</div><div class="line"></div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; affected;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> div : divisors[c[x]]) &#123;</div><div class="line">            --f[div][u[x]][v[x]];</div><div class="line">            affected.push_back(div);</div><div class="line">        &#125;</div><div class="line">        c[x] = y;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> div : divisors[c[x]]) &#123;</div><div class="line">            ++f[div][u[x]][v[x]];</div><div class="line">            affected.push_back(div);</div><div class="line">        &#125;</div><div class="line">        sort(affected.begin(), affected.end());</div><div class="line">        affected.resize(unique(affected.begin(), affected.end()) - affected.begin());</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> div : affected) g[div] = calc(div);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, solve());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题意： &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$给定一个N\le 100点，M\le 5\times 10^4边的有向无环图$&lt;br&gt;$一条路径的值:=路径上所有边权的最大公约数$&lt;br&gt;$Q\le 500次修改操作，每次修改一条边的边权\le 100$&lt;br&gt;$每次修改后输出有向无环图上路径的值为1的路径数量，答案模10^9+7$&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数学" scheme="http://TaoSama.github.io/categories/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="容斥" scheme="http://TaoSama.github.io/categories/%E6%95%B0%E5%AD%A6/%E5%AE%B9%E6%96%A5/"/>
    
    
      <category term="容斥" scheme="http://TaoSama.github.io/tags/%E5%AE%B9%E6%96%A5/"/>
    
  </entry>
  
  <entry>
    <title>CSU 1805 Three Capitals（BEST定理、MatrixTree定理）</title>
    <link href="http://TaoSama.github.io/2016/09/22/CSU%201805%20Three%20Capitals%EF%BC%88BEST%E5%AE%9A%E7%90%86%E3%80%81MatrixTree%E5%AE%9A%E7%90%86%EF%BC%89/"/>
    <id>http://TaoSama.github.io/2016/09/22/CSU 1805 Three Capitals（BEST定理、MatrixTree定理）/</id>
    <published>2016-09-22T15:16:10.000Z</published>
    <updated>2017-09-19T14:48:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>题意： </p><blockquote><p>$给定无向图3个点A、B、G，AB间有a条边，AG间有b条边，BG间有c条边$<br>$求从A出发回到A的欧拉回路的个数，答案模10^9+7$</p></blockquote><a id="more"></a><p>分析：</p><blockquote><p>$叉姐给出1个有向图欧拉回路计数的定理$<br>$有向图欧拉回路的话，判定条件：连通，每个点入度=出度$<br>$有向图欧拉回路计数(BSET\ Theorem)：$<br>$ec(G)=t<em>s(G)\cdot deg(s)! \cdot \prod</em>{v\in V,\ v\ne s} (deg(v)-1)!,\ t_s(G):=以s为根的外向树的个数$<br>$注意特判1个点答案是1$<br>$生成树计数(Kirchhoff\ Theorem)：$<br>$基尔霍夫矩阵K=度数矩阵D-邻接矩阵A$<br>$重边：按照边数计算，自环：不计入度数$<br>$无向图生成树计数：c=|K的任意1个n-1阶主子式|$<br>$有向图外向树计数：c=|去掉根所在的那阶得到的主子式|$</p></blockquote><hr><blockquote><p>$以上是学习内容，这个题只要枚举一条边的其中1个方向的边数$<br>$然后根据欧拉回路判定性条件解出其他边的2个方向的边数$<br>$然后直接套定理解出个数，注意选边的时候要乘组合数$<br>$然后这个题就做完了，时间复杂度O(n)$</p></blockquote><p>$代码：$<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-09-07</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line">LL a[N][N], ans[N];</div><div class="line"><span class="keyword">bool</span> isFreeX[N];</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">gauss</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) isFreeX[i] = <span class="literal">false</span>;</div><div class="line">    LL ret = <span class="number">1</span>, neg = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> r = <span class="number">1</span>, c = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(; r &lt; n &amp;&amp; c &lt; m; ++r, ++c) &#123;</div><div class="line">        <span class="keyword">int</span> p = r;</div><div class="line">        <span class="keyword">for</span>(; p &lt; n; ++p) <span class="keyword">if</span>(a[p][c]) <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">if</span>(p == n) &#123;--r; isFreeX[c] = <span class="literal">true</span>; <span class="keyword">continue</span>;&#125;</div><div class="line">        <span class="keyword">if</span>(p != r) &#123;</div><div class="line">            neg ^= <span class="number">1</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = c; i &lt;= m; ++i) swap(a[p][i], a[r][i]);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//eliminate coefficient</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = r + <span class="number">1</span>; i &lt; n; ++i) &#123;</div><div class="line">            <span class="keyword">while</span>(a[i][c]) &#123;</div><div class="line">                LL delta = a[i][c] / a[r][c];</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = c; j &lt;= m; ++j) &#123;</div><div class="line">                    a[i][j] += MOD - delta * a[r][j] % MOD;</div><div class="line">                    a[i][j] %= MOD;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span>(!a[i][c]) <span class="keyword">break</span>;</div><div class="line">                neg ^= <span class="number">1</span>;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = c; j &lt;= m; ++j) swap(a[r][j], a[i][j]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(r != n) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; r; ++i) ret = ret * a[i][i] % MOD;</div><div class="line">    <span class="keyword">if</span>(neg) ret = (-ret + MOD) % MOD;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> A, B, C;</div><div class="line"><span class="keyword">int</span> deg[N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span>&amp; x, <span class="keyword">int</span> A)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(x &amp; <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    x /= <span class="number">2</span>;</div><div class="line">    <span class="keyword">return</span> x &gt;= <span class="number">0</span> &amp;&amp; x &lt;= A;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e5</span> + <span class="number">10</span>;</div><div class="line">LL fact[M], finv[M];</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">quick</span><span class="params">(LL x, LL n)</span> </span>&#123;</div><div class="line">    LL ret = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(; n; n &gt;&gt;= <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">if</span>(n &amp; <span class="number">1</span>) ret = ret * x % MOD;</div><div class="line">        x = x * x % MOD;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">comb</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(n &lt; m) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">return</span> fact[n] * finv[m] % MOD * finv[n - m] % MOD;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    fact[<span class="number">0</span>] = finv[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; M; ++i) &#123;</div><div class="line">        fact[i] = fact[i - <span class="number">1</span>] * i % MOD;</div><div class="line">        finv[i] = quick(fact[i], MOD - <span class="number">2</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;A, &amp;B, &amp;C) == <span class="number">3</span>) &#123;</div><div class="line">        LL ans = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>; x &lt;= A; ++x) &#123; <span class="comment">//x in-degrees from A; y from C, z from B</span></div><div class="line">            <span class="keyword">int</span> y = <span class="number">2</span> * x + C - A;</div><div class="line">            <span class="keyword">if</span>(!check(y, C)) <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">int</span> z = <span class="number">2</span> * y + B - C;</div><div class="line">            <span class="keyword">if</span>(!check(z, B)) <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">if</span>(x + B - z != A - x + z) <span class="keyword">continue</span>; <span class="comment">//check A</span></div><div class="line"></div><div class="line">            deg[<span class="number">0</span>] = x + B - z;</div><div class="line">            deg[<span class="number">1</span>] = y + A - x;</div><div class="line">            deg[<span class="number">2</span>] = z + C - y;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) a[i][i] = deg[i];</div><div class="line">            a[<span class="number">0</span>][<span class="number">1</span>] = -(A - x); a[<span class="number">0</span>][<span class="number">2</span>] = -z;</div><div class="line">            a[<span class="number">1</span>][<span class="number">0</span>] = -x;  a[<span class="number">1</span>][<span class="number">2</span>] = -(C - y);</div><div class="line">            a[<span class="number">2</span>][<span class="number">0</span>] = -(B - z); a[<span class="number">2</span>][<span class="number">1</span>] = -y;</div><div class="line"></div><div class="line">            LL cur = comb(A, x) * comb(C, y) % MOD * comb(B, z) % MOD;</div><div class="line"></div><div class="line">            <span class="comment">//BEST Theorem</span></div><div class="line">            cur = cur * gauss(<span class="number">3</span>, <span class="number">3</span>) % MOD;</div><div class="line">            cur = cur * deg[<span class="number">0</span>] % MOD;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) cur = cur * fact[deg[i] - <span class="number">1</span>] % MOD;</div><div class="line">            ans = (ans + cur) % MOD;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题意： &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$给定无向图3个点A、B、G，AB间有a条边，AG间有b条边，BG间有c条边$&lt;br&gt;$求从A出发回到A的欧拉回路的个数，答案模10^9+7$&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="图论" scheme="http://TaoSama.github.io/categories/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="生成树计数" scheme="http://TaoSama.github.io/categories/%E5%9B%BE%E8%AE%BA/%E7%94%9F%E6%88%90%E6%A0%91%E8%AE%A1%E6%95%B0/"/>
    
    
      <category term="生成树计数" scheme="http://TaoSama.github.io/tags/%E7%94%9F%E6%88%90%E6%A0%91%E8%AE%A1%E6%95%B0/"/>
    
      <category term="有向图欧拉回路计数" scheme="http://TaoSama.github.io/tags/%E6%9C%89%E5%90%91%E5%9B%BE%E6%AC%A7%E6%8B%89%E5%9B%9E%E8%B7%AF%E8%AE%A1%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>IFrog 1032 - A-B（容斥）</title>
    <link href="http://TaoSama.github.io/2016/09/22/IFrog%201032%20-%20A-B%EF%BC%88%E5%AE%B9%E6%96%A5%E5%8E%9F%E7%90%86%EF%BC%89/"/>
    <id>http://TaoSama.github.io/2016/09/22/IFrog 1032 - A-B（容斥原理）/</id>
    <published>2016-09-22T12:45:10.000Z</published>
    <updated>2017-09-19T14:48:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>题意： </p><blockquote><p>$n\le 500个球，需要把他们放到m\le 500个盒子里，盒子不同，可以为空$<br>$要求拥有最多球的盒子唯一，问方案数，答案模998244353$</p></blockquote><a id="more"></a><p>分析：</p><blockquote><p>$容斥原理套路题，枚举最多球的个数x，令事件A_i:=i号盒子\ge x的解的方法数$<br>$显然E<em>x=$<img src="http://7xru22.com1.z0.glb.clouddn.com/16-9-21/99036938.jpg" alt=""><br>$所以容斥一波就好了，注意这里是有序的，所以容斥的时候要乘C(m-1,\ i)$<br>$因为选出1个盒子放最大的，最后插到m-1个盒子里有m种可能$<br>$对于n个球放进m个不同的盒子可以为空用隔板法来求，即calc(n,\ m)=C(n+m-1,\ m-1)$<br>$ans=m\sum</em>{x} E<em>x =m\sum</em>{x}\sum_{i=0}^{m-1} (-1)^i \cdot C(m-1,\ i) \cdot calc(m-1-x-i\times x,\ m-1)$<br>$阶乘预处理一下组合数，时间复杂度O(nm)$</p></blockquote><p>$代码：$<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-09-22</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">500</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">998244353</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">quick</span><span class="params">(LL x, LL n)</span> </span>&#123;</div><div class="line">    LL ret = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(; n; n &gt;&gt;= <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">if</span>(n &amp; <span class="number">1</span>) ret = ret * x % MOD;</div><div class="line">        x = x * x % MOD;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line">LL fact[N], invf[N];</div><div class="line"><span class="function">LL <span class="title">C</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(n &lt; m) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">return</span> fact[n] * invf[m] % MOD * invf[n - m] % MOD;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">calc</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> C(n + m - <span class="number">1</span>, m - <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">solve</span><span class="params">(<span class="keyword">int</span> lft, <span class="keyword">int</span> x, <span class="keyword">int</span> m)</span> </span>&#123;</div><div class="line">    LL ret = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m; ++i) &#123;</div><div class="line">        <span class="keyword">if</span>(lft - i * x &lt; <span class="number">0</span>) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">if</span>(i &amp; <span class="number">1</span>) ret -= C(m, i) * calc(lft - i * x, m) % MOD;</div><div class="line">        <span class="keyword">else</span> ret += C(m, i) * calc(lft - i * x, m) % MOD;</div><div class="line">        ret %= MOD;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> (ret + MOD) % MOD;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    fact[<span class="number">0</span>] = invf[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; ++i) &#123;</div><div class="line">        fact[i] = fact[i - <span class="number">1</span>] * i % MOD;</div><div class="line">        invf[i] = quick(fact[i], MOD - <span class="number">2</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m) &#123;</div><div class="line">        <span class="keyword">if</span>(m == <span class="number">1</span>) &#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">"1\n"</span>; <span class="keyword">continue</span>;&#125;</div><div class="line"></div><div class="line">        LL ans = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = n / m + <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">            ans += solve(n - i, i, m - <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        ans = ans * m % MOD;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题意： &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$n\le 500个球，需要把他们放到m\le 500个盒子里，盒子不同，可以为空$&lt;br&gt;$要求拥有最多球的盒子唯一，问方案数，答案模998244353$&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数学" scheme="http://TaoSama.github.io/categories/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="容斥" scheme="http://TaoSama.github.io/categories/%E6%95%B0%E5%AD%A6/%E5%AE%B9%E6%96%A5/"/>
    
    
      <category term="容斥" scheme="http://TaoSama.github.io/tags/%E5%AE%B9%E6%96%A5/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces 451E. Devu and Flowers（容斥）</title>
    <link href="http://TaoSama.github.io/2016/09/21/Codeforces%20451E.%20Devu%20and%20Flowers%EF%BC%88%E5%AE%B9%E6%96%A5%E5%8E%9F%E7%90%86%EF%BC%89/"/>
    <id>http://TaoSama.github.io/2016/09/21/Codeforces 451E. Devu and Flowers（容斥原理）/</id>
    <published>2016-09-21T12:09:10.000Z</published>
    <updated>2017-09-19T14:48:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>题意： </p><blockquote><p>$求x_1+x_2+…+x_n\le s,\ x_1\le f1,\ x_2\le f_2,…,x_n\le f_n的方法数，答案模10^9 + 7$<br>$n\le 20,\ f_i\le 10^{12},\ s\le 10^{14}$</p></blockquote><a id="more"></a><p>分析：</p><blockquote><p>$容斥原理套路题，令事件A_i:=至少x_i&gt;f_i的解的方法数$<br>$显然ans=$<img src="http://7xru22.com1.z0.glb.clouddn.com/16-9-21/99036938.jpg" alt=""><br>$所以容斥一波就好了，计算每个的时候，先把超过的部分减掉，剩下的就转化成了$<br>$left个物品装进n个盒子，盒子可以为空的问题，这个用隔板法就可以了$<br>$大组合数取模用lucas，组合数由于1个很小，直接暴力就可以了$</p></blockquote><p>$代码：$<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by TaoSama on 2016-09-17</span></div><div class="line"><span class="comment">//  Copyright (c) 2016 TaoSama. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:102400000,102400000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pr(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">"  "</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> prln(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">quick</span><span class="params">(LL x, LL n)</span> </span>&#123;</div><div class="line">    LL ret = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(; n; n &gt;&gt;= <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">if</span>(n &amp; <span class="number">1</span>) ret = ret * x % MOD;</div><div class="line">        x = x * x % MOD;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">C</span><span class="params">(LL n, LL m)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(n &lt; m) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    m = min(m, n - m);</div><div class="line"></div><div class="line">    LL up = <span class="number">1</span>, dw = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</div><div class="line">        up = up * (n - i) % MOD;</div><div class="line">        dw = dw * (i + <span class="number">1</span>) % MOD;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> up * quick(dw, MOD - <span class="number">2</span>) % MOD;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">lucas</span><span class="params">(LL n, LL m)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(m == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">return</span> C(n % MOD, m % MOD) * lucas(n / MOD, m / MOD) % MOD;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">calc</span><span class="params">(LL n, LL m)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> lucas(n + m - <span class="number">1</span>, m - <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n;</div><div class="line">LL s, f[N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"C:\\Users\\TaoSama\\Desktop\\in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="comment">//  freopen("C:\\Users\\TaoSama\\Desktop\\out.txt","w",stdout);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; s) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) <span class="built_in">cin</span> &gt;&gt; f[i];</div><div class="line"></div><div class="line">        LL ans = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1</span> &lt;&lt; n; ++i) &#123;</div><div class="line">            LL lft = s, cnt = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</div><div class="line">                <span class="keyword">if</span>(i &gt;&gt; j &amp; <span class="number">1</span>) &#123;</div><div class="line">                    lft -= f[j] + <span class="number">1</span>;</div><div class="line">                    ++cnt;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(lft &lt; <span class="number">0</span>) <span class="keyword">continue</span>;</div><div class="line"></div><div class="line">            <span class="keyword">if</span>(cnt &amp; <span class="number">1</span>) ans -= calc(lft, n);</div><div class="line">            <span class="keyword">else</span> ans += calc(lft, n);</div><div class="line">            ans %= MOD;</div><div class="line">        &#125;</div><div class="line">        ans = (ans + MOD) % MOD;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题意： &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$求x_1+x_2+…+x_n\le s,\ x_1\le f1,\ x_2\le f_2,…,x_n\le f_n的方法数，答案模10^9 + 7$&lt;br&gt;$n\le 20,\ f_i\le 10^{12},\ s\le 10^{14}$&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数学" scheme="http://TaoSama.github.io/categories/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="容斥" scheme="http://TaoSama.github.io/categories/%E6%95%B0%E5%AD%A6/%E5%AE%B9%E6%96%A5/"/>
    
    
      <category term="容斥" scheme="http://TaoSama.github.io/tags/%E5%AE%B9%E6%96%A5/"/>
    
  </entry>
  
</feed>
